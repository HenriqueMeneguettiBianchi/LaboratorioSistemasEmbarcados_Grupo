
SeguidorDeLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e24  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004ffc  08004ffc  00005ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800503c  0800503c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  0800503c  0800503c  0000603c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005044  08005044  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005044  08005044  00006044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005048  08005048  00006048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800504c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000284  2000000c  08005058  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  08005058  00007290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016164  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce5  00000000  00000000  0001d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001fe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f14  00000000  00000000  000211c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fc7  00000000  00000000  000220dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019199  00000000  00000000  000250a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fed1c  00000000  00000000  0003e23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cf58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005150  00000000  00000000  0013cf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001420ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004fe4 	.word	0x08004fe4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004fe4 	.word	0x08004fe4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b3b      	ldr	r3, [pc, #236]	@ (800060c <MX_GPIO_Init+0x104>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a3a      	ldr	r2, [pc, #232]	@ (800060c <MX_GPIO_Init+0x104>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b38      	ldr	r3, [pc, #224]	@ (800060c <MX_GPIO_Init+0x104>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b35      	ldr	r3, [pc, #212]	@ (800060c <MX_GPIO_Init+0x104>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a34      	ldr	r2, [pc, #208]	@ (800060c <MX_GPIO_Init+0x104>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b32      	ldr	r3, [pc, #200]	@ (800060c <MX_GPIO_Init+0x104>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <MX_GPIO_Init+0x104>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a2e      	ldr	r2, [pc, #184]	@ (800060c <MX_GPIO_Init+0x104>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <MX_GPIO_Init+0x104>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b29      	ldr	r3, [pc, #164]	@ (800060c <MX_GPIO_Init+0x104>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a28      	ldr	r2, [pc, #160]	@ (800060c <MX_GPIO_Init+0x104>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b26      	ldr	r3, [pc, #152]	@ (800060c <MX_GPIO_Init+0x104>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f8b6 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin, GPIO_PIN_RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8000592:	481f      	ldr	r0, [pc, #124]	@ (8000610 <MX_GPIO_Init+0x108>)
 8000594:	f001 f8b0 	bl	80016f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000598:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a4:	2300      	movs	r3, #0
 80005a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4619      	mov	r1, r3
 80005ae:	4819      	ldr	r0, [pc, #100]	@ (8000614 <MX_GPIO_Init+0x10c>)
 80005b0:	f000 ff20 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin;
 80005b4:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 80005b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ba:	2301      	movs	r3, #1
 80005bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c2:	2300      	movs	r3, #0
 80005c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005d0:	f000 ff10 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin;
 80005d4:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80005d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005da:	2301      	movs	r3, #1
 80005dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e2:	2300      	movs	r3, #0
 80005e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	4619      	mov	r1, r3
 80005ec:	4808      	ldr	r0, [pc, #32]	@ (8000610 <MX_GPIO_Init+0x108>)
 80005ee:	f000 ff01 	bl	80013f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	2028      	movs	r0, #40	@ 0x28
 80005f8:	f000 fec7 	bl	800138a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005fc:	2028      	movs	r0, #40	@ 0x28
 80005fe:	f000 fede 	bl	80013be <HAL_NVIC_EnableIRQ>

}
 8000602:	bf00      	nop
 8000604:	3728      	adds	r7, #40	@ 0x28
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	48000400 	.word	0x48000400
 8000614:	48000800 	.word	0x48000800

08000618 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_I2C2_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <MX_I2C2_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_I2C2_Init+0x74>)
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <MX_I2C2_Init+0x7c>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_I2C2_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_I2C2_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2C2_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_I2C2_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	@ (800068c <MX_I2C2_Init+0x74>)
 8000654:	f001 f88b 	bl	800176e <HAL_I2C_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800065e:	f000 f91a 	bl	8000896 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <MX_I2C2_Init+0x74>)
 8000666:	f001 f91d 	bl	80018a4 <HAL_I2CEx_ConfigAnalogFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 f911 	bl	8000896 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2C2_Init+0x74>)
 8000678:	f001 f95f 	bl	800193a <HAL_I2CEx_ConfigDigitalFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 f908 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000028 	.word	0x20000028
 8000690:	40005800 	.word	0x40005800
 8000694:	30a0a7fb 	.word	0x30a0a7fb

08000698 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0a0      	sub	sp, #128	@ 0x80
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	f107 0318 	add.w	r3, r7, #24
 80006b4:	2254      	movs	r2, #84	@ 0x54
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f004 fc67 	bl	8004f8c <memset>
  if(i2cHandle->Instance==I2C2)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a2d      	ldr	r2, [pc, #180]	@ (8000778 <HAL_I2C_MspInit+0xe0>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d153      	bne.n	8000770 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80006c8:	2380      	movs	r3, #128	@ 0x80
 80006ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d0:	f107 0318 	add.w	r3, r7, #24
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 ff5f 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80006e0:	f000 f8d9 	bl	8000896 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	4a24      	ldr	r2, [pc, #144]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 80006ea:	f043 0304 	orr.w	r3, r3, #4
 80006ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f0:	4b22      	ldr	r3, [pc, #136]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f4:	f003 0304 	and.w	r3, r3, #4
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000700:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8000714:	2310      	movs	r3, #16
 8000716:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000718:	2312      	movs	r3, #18
 800071a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000724:	2304      	movs	r3, #4
 8000726:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800072c:	4619      	mov	r1, r3
 800072e:	4814      	ldr	r0, [pc, #80]	@ (8000780 <HAL_I2C_MspInit+0xe8>)
 8000730:	f000 fe60 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000734:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000738:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073a:	2312      	movs	r3, #18
 800073c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000746:	2304      	movs	r3, #4
 8000748:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800074a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800074e:	4619      	mov	r1, r3
 8000750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000754:	f000 fe4e 	bl	80013f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000758:	4b08      	ldr	r3, [pc, #32]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 800075a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075c:	4a07      	ldr	r2, [pc, #28]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 800075e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000762:	6593      	str	r3, [r2, #88]	@ 0x58
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <HAL_I2C_MspInit+0xe4>)
 8000766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000768:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800076c:	60fb      	str	r3, [r7, #12]
 800076e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3780      	adds	r7, #128	@ 0x80
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005800 	.word	0x40005800
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000788:	f000 fcb3 	bl	80010f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078c:	f000 f838 	bl	8000800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000790:	f7ff feba 	bl	8000508 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000794:	f000 fb56 	bl	8000e44 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000798:	f000 f944 	bl	8000a24 <MX_TIM1_Init>
  MX_TIM16_Init();
 800079c:	f000 f9fe 	bl	8000b9c <MX_TIM16_Init>
  MX_TIM17_Init();
 80007a0:	f000 fa46 	bl	8000c30 <MX_TIM17_Init>
  MX_I2C2_Init();
 80007a4:	f7ff ff38 	bl	8000618 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80007a8:	f000 fb96 	bl	8000ed8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 80007ac:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <main+0x74>)
 80007ae:	f000 f879 	bl	80008a4 <vMotorInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  vSetRodaEsquerdaDC(1.0);
 80007b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80007b6:	f000 f88b 	bl	80008d0 <vSetRodaEsquerdaDC>
	  vSetRodaDireitaDC(1.0);
 80007ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80007be:	f000 f8a5 	bl	800090c <vSetRodaDireitaDC>
	  //IN1 = 1 e IN2 = 0 : TRAS MOTOR A
	  //IN1 = 0 e IN2 = 1 : FRENTE MOTOR A
	  //IN3 = 1 e IN4 = 0 : TRAS MOTOR B
	  //IN3 = 0 e IN4 = 1 : FRENTE MOTOR B
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c8:	480c      	ldr	r0, [pc, #48]	@ (80007fc <main+0x78>)
 80007ca:	f000 ff95 	bl	80016f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007d4:	4809      	ldr	r0, [pc, #36]	@ (80007fc <main+0x78>)
 80007d6:	f000 ff8f 	bl	80016f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	@ 0x80
 80007de:	4807      	ldr	r0, [pc, #28]	@ (80007fc <main+0x78>)
 80007e0:	f000 ff8a 	bl	80016f8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007ee:	f000 ff83 	bl	80016f8 <HAL_GPIO_WritePin>
	  vSetRodaEsquerdaDC(1.0);
 80007f2:	bf00      	nop
 80007f4:	e7dd      	b.n	80007b2 <main+0x2e>
 80007f6:	bf00      	nop
 80007f8:	20000080 	.word	0x20000080
 80007fc:	48000400 	.word	0x48000400

08000800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b094      	sub	sp, #80	@ 0x50
 8000804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000806:	f107 0318 	add.w	r3, r7, #24
 800080a:	2238      	movs	r2, #56	@ 0x38
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f004 fbbc 	bl	8004f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000822:	2000      	movs	r0, #0
 8000824:	f001 f8d6 	bl	80019d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000828:	2302      	movs	r3, #2
 800082a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000830:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2340      	movs	r3, #64	@ 0x40
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000836:	2302      	movs	r3, #2
 8000838:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083a:	2302      	movs	r3, #2
 800083c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800083e:	2304      	movs	r3, #4
 8000840:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000842:	2355      	movs	r3, #85	@ 0x55
 8000844:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000852:	f107 0318 	add.w	r3, r7, #24
 8000856:	4618      	mov	r0, r3
 8000858:	f001 f970 	bl	8001b3c <HAL_RCC_OscConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000862:	f000 f818 	bl	8000896 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000866:	230f      	movs	r3, #15
 8000868:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086a:	2303      	movs	r3, #3
 800086c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2104      	movs	r1, #4
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fc6e 	bl	8002160 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800088a:	f000 f804 	bl	8000896 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3750      	adds	r7, #80	@ 0x50
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089a:	b672      	cpsid	i
}
 800089c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089e:	bf00      	nop
 80008a0:	e7fd      	b.n	800089e <Error_Handler+0x8>
	...

080008a4 <vMotorInit>:
// Input parameters:    *htimRE -> TIM handler da roda esquerda //
//                      *htimRD -> TIM handler da roda direita  //
// Output parameters:   none                                    //
// *************************************************************//
void vMotorInit(TIM_HandleTypeDef *htimMotor)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  htimRodas = htimMotor;
 80008ac:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <vMotorInit+0x28>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_1);
 80008b2:	2100      	movs	r1, #0
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f002 f975 	bl	8002ba4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_2);
 80008ba:	2104      	movs	r1, #4
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f002 f971 	bl	8002ba4 <HAL_TIM_PWM_Start>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000007c 	.word	0x2000007c

080008d0 <vSetRodaEsquerdaDC>:
// Method description: 	Seta o duty cycle da roda esquerda      //
// Input parameters:	  fRodaEsquerdaDC -> duty cylce desejado  //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaEsquerdaDC(float fRodaEsquerdaDC)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 80008da:	edd7 7a01 	vldr	s15, [r7, #4]
 80008de:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000904 <vSetRodaEsquerdaDC+0x34>
 80008e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <vSetRodaEsquerdaDC+0x38>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008f0:	ee17 2a90 	vmov	r2, s15
 80008f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	447a0000 	.word	0x447a0000
 8000908:	2000007c 	.word	0x2000007c

0800090c <vSetRodaDireitaDC>:
// Method description: 	Seta o duty cycle da roda direita       //
// Input parameters:	  fRodaDireitaDC -> duty cylce desejado   //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaDireitaDC(float fRodaDireitaDC)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 8000916:	edd7 7a01 	vldr	s15, [r7, #4]
 800091a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000940 <vSetRodaDireitaDC+0x34>
 800091e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000922:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <vSetRodaDireitaDC+0x38>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092c:	ee17 2a90 	vmov	r2, s15
 8000930:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	447a0000 	.word	0x447a0000
 8000944:	2000007c 	.word	0x2000007c

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <HAL_MspInit+0x44>)
 8000950:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000952:	4a0e      	ldr	r2, [pc, #56]	@ (800098c <HAL_MspInit+0x44>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6613      	str	r3, [r2, #96]	@ 0x60
 800095a:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <HAL_MspInit+0x44>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	4b09      	ldr	r3, [pc, #36]	@ (800098c <HAL_MspInit+0x44>)
 8000968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096a:	4a08      	ldr	r2, [pc, #32]	@ (800098c <HAL_MspInit+0x44>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000970:	6593      	str	r3, [r2, #88]	@ 0x58
 8000972:	4b06      	ldr	r3, [pc, #24]	@ (800098c <HAL_MspInit+0x44>)
 8000974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800097e:	f001 f8cd 	bl	8001b1c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <NMI_Handler+0x4>

08000998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <HardFault_Handler+0x4>

080009a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <MemManage_Handler+0x4>

080009a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <BusFault_Handler+0x4>

080009b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <UsageFault_Handler+0x4>

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e6:	f000 fbd7 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}

080009ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009f2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009f6:	f000 fe97 	bl	8001728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <SystemInit+0x20>)
 8000a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0a:	4a05      	ldr	r2, [pc, #20]	@ (8000a20 <SystemInit+0x20>)
 8000a0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b09c      	sub	sp, #112	@ 0x70
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
 8000a54:	615a      	str	r2, [r3, #20]
 8000a56:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2234      	movs	r2, #52	@ 0x34
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f004 fa94 	bl	8004f8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a64:	4b4b      	ldr	r3, [pc, #300]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a66:	4a4c      	ldr	r2, [pc, #304]	@ (8000b98 <MX_TIM1_Init+0x174>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a6c:	22a9      	movs	r2, #169	@ 0xa9
 8000a6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b48      	ldr	r3, [pc, #288]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000a76:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a78:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b45      	ldr	r3, [pc, #276]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a84:	4b43      	ldr	r3, [pc, #268]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a90:	4840      	ldr	r0, [pc, #256]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000a92:	f001 ffcf 	bl	8002a34 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f7ff fefb 	bl	8000896 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4839      	ldr	r0, [pc, #228]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000aae:	f002 fb9d 	bl	80031ec <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ab8:	f7ff feed 	bl	8000896 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000abc:	4835      	ldr	r0, [pc, #212]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000abe:	f002 f810 	bl	8002ae2 <HAL_TIM_PWM_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ac8:	f7ff fee5 	bl	8000896 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000acc:	2300      	movs	r3, #0
 8000ace:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000adc:	4619      	mov	r1, r3
 8000ade:	482d      	ldr	r0, [pc, #180]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000ae0:	f003 fa64 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000aea:	f7ff fed4 	bl	8000896 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aee:	2360      	movs	r3, #96	@ 0x60
 8000af0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af6:	2300      	movs	r3, #0
 8000af8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000afa:	2300      	movs	r3, #0
 8000afc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b0a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b0e:	2200      	movs	r2, #0
 8000b10:	4619      	mov	r1, r3
 8000b12:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000b14:	f002 fa56 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000b1e:	f7ff feba 	bl	8000896 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b26:	2204      	movs	r2, #4
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000b2c:	f002 fa4a 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000b36:	f7ff feae 	bl	8000896 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b64:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4619      	mov	r1, r3
 8000b76:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000b78:	f003 faae 	bl	80040d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000b82:	f7ff fe88 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b86:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x170>)
 8000b88:	f000 f924 	bl	8000dd4 <HAL_TIM_MspPostInit>

}
 8000b8c:	bf00      	nop
 8000b8e:	3770      	adds	r7, #112	@ 0x70
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	20000080 	.word	0x20000080
 8000b98:	40012c00 	.word	0x40012c00

08000b9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bae:	4b1e      	ldr	r3, [pc, #120]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8000c2c <MX_TIM16_Init+0x90>)
 8000bb2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bb6:	22a9      	movs	r2, #169	@ 0xa9
 8000bb8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bba:	4b1b      	ldr	r3, [pc, #108]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bc2:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000bc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bda:	4813      	ldr	r0, [pc, #76]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bdc:	f001 ff2a 	bl	8002a34 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000be6:	f7ff fe56 	bl	8000896 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000bea:	480f      	ldr	r0, [pc, #60]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000bec:	f002 f8ec 	bl	8002dc8 <HAL_TIM_IC_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bf6:	f7ff fe4e 	bl	8000896 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM16_Init+0x8c>)
 8000c12:	f002 f93a 	bl	8002e8a <HAL_TIM_IC_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000c1c:	f7ff fe3b 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000cc 	.word	0x200000cc
 8000c2c:	40014400 	.word	0x40014400

08000c30 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c44:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc0 <MX_TIM17_Init+0x90>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c4a:	22a9      	movs	r2, #169	@ 0xa9
 8000c4c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 8000c54:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c56:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c6e:	4813      	ldr	r0, [pc, #76]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c70:	f001 fee0 	bl	8002a34 <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8000c7a:	f7ff fe0c 	bl	8000896 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8000c7e:	480f      	ldr	r0, [pc, #60]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000c80:	f002 f8a2 	bl	8002dc8 <HAL_TIM_IC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000c8a:	f7ff fe04 	bl	8000896 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c92:	2301      	movs	r3, #1
 8000c94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c9e:	463b      	mov	r3, r7
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_TIM17_Init+0x8c>)
 8000ca6:	f002 f8f0 	bl	8002e8a <HAL_TIM_IC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8000cb0:	f7ff fdf1 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000118 	.word	0x20000118
 8000cc0:	40014800 	.word	0x40014800

08000cc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b08c      	sub	sp, #48	@ 0x30
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a38      	ldr	r2, [pc, #224]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x100>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10c      	bne.n	8000d00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ce6:	4b38      	ldr	r3, [pc, #224]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	4a37      	ldr	r2, [pc, #220]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000cec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000cf0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000cf2:	4b35      	ldr	r3, [pc, #212]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cfa:	61bb      	str	r3, [r7, #24]
 8000cfc:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000cfe:	e05c      	b.n	8000dba <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM16)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a31      	ldr	r2, [pc, #196]	@ (8000dcc <HAL_TIM_Base_MspInit+0x108>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d129      	bne.n	8000d5e <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d14:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d16:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d22:	4b29      	ldr	r3, [pc, #164]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	4a28      	ldr	r2, [pc, #160]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d2e:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d3a:	2340      	movs	r3, #64	@ 0x40
 8000d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d58:	f000 fb4c 	bl	80013f4 <HAL_GPIO_Init>
}
 8000d5c:	e02d      	b.n	8000dba <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM17)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd0 <HAL_TIM_Base_MspInit+0x10c>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d128      	bne.n	8000dba <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6c:	4a16      	ldr	r2, [pc, #88]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d72:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d84:	4a10      	ldr	r2, [pc, #64]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <HAL_TIM_Base_MspInit+0x104>)
 8000d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	4619      	mov	r1, r3
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db6:	f000 fb1d 	bl	80013f4 <HAL_GPIO_Init>
}
 8000dba:	bf00      	nop
 8000dbc:	3730      	adds	r7, #48	@ 0x30
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40014400 	.word	0x40014400
 8000dd0:	40014800 	.word	0x40014800

08000dd4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b088      	sub	sp, #32
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a11      	ldr	r2, [pc, #68]	@ (8000e38 <HAL_TIM_MspPostInit+0x64>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d11b      	bne.n	8000e2e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_TIM_MspPostInit+0x68>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfa:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <HAL_TIM_MspPostInit+0x68>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_TIM_MspPostInit+0x68>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	f003 0304 	and.w	r3, r3, #4
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 030c 	add.w	r3, r7, #12
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <HAL_TIM_MspPostInit+0x6c>)
 8000e2a:	f000 fae3 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3720      	adds	r7, #32
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40012c00 	.word	0x40012c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	48000800 	.word	0x48000800

08000e44 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e4a:	4a22      	ldr	r2, [pc, #136]	@ (8000ed4 <MX_LPUART1_UART_Init+0x90>)
 8000e4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e54:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e6a:	220c      	movs	r2, #12
 8000e6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e74:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e86:	4812      	ldr	r0, [pc, #72]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e88:	f003 f9ba 	bl	8004200 <HAL_UART_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e92:	f7ff fd00 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e96:	2100      	movs	r1, #0
 8000e98:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000e9a:	f003 ffad 	bl	8004df8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000ea4:	f7ff fcf7 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000eac:	f003 ffe2 	bl	8004e74 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000eb6:	f7ff fcee 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <MX_LPUART1_UART_Init+0x8c>)
 8000ebc:	f003 ff63 	bl	8004d86 <HAL_UARTEx_DisableFifoMode>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ec6:	f7ff fce6 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000164 	.word	0x20000164
 8000ed4:	40008000 	.word	0x40008000

08000ed8 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000edc:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000ede:	4a23      	ldr	r2, [pc, #140]	@ (8000f6c <MX_USART1_UART_Init+0x94>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000f20:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f22:	f003 f9bd 	bl	80042a0 <HAL_HalfDuplex_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f2c:	f7ff fcb3 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f30:	2100      	movs	r1, #0
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f34:	f003 ff60 	bl	8004df8 <HAL_UARTEx_SetTxFifoThreshold>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f7ff fcaa 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f42:	2100      	movs	r1, #0
 8000f44:	4808      	ldr	r0, [pc, #32]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f46:	f003 ff95 	bl	8004e74 <HAL_UARTEx_SetRxFifoThreshold>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f50:	f7ff fca1 	bl	8000896 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_USART1_UART_Init+0x90>)
 8000f56:	f003 ff16 	bl	8004d86 <HAL_UARTEx_DisableFifoMode>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f60:	f7ff fc99 	bl	8000896 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200001f8 	.word	0x200001f8
 8000f6c:	40013800 	.word	0x40013800

08000f70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b0a0      	sub	sp, #128	@ 0x80
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	2254      	movs	r2, #84	@ 0x54
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4618      	mov	r0, r3
 8000f92:	f003 fffb 	bl	8004f8c <memset>
  if(uartHandle->Instance==LPUART1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8001094 <HAL_UART_MspInit+0x124>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d137      	bne.n	8001010 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa8:	f107 0318 	add.w	r3, r7, #24
 8000fac:	4618      	mov	r0, r3
 8000fae:	f001 faf3 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb8:	f7ff fc6d 	bl	8000896 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fbc:	4b36      	ldr	r3, [pc, #216]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc0:	4a35      	ldr	r2, [pc, #212]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000fc8:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8000fe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000fec:	230c      	movs	r3, #12
 8000fee:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ffc:	230c      	movs	r3, #12
 8000ffe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001004:	4619      	mov	r1, r3
 8001006:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800100a:	f000 f9f3 	bl	80013f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800100e:	e03c      	b.n	800108a <HAL_UART_MspInit+0x11a>
  else if(uartHandle->Instance==USART1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <HAL_UART_MspInit+0x12c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d137      	bne.n	800108a <HAL_UART_MspInit+0x11a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001022:	f107 0318 	add.w	r3, r7, #24
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fab6 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001032:	f7ff fc30 	bl	8000896 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001036:	4b18      	ldr	r3, [pc, #96]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103a:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <HAL_UART_MspInit+0x128>)
 800103c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001040:	6613      	str	r3, [r2, #96]	@ 0x60
 8001042:	4b15      	ldr	r3, [pc, #84]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b12      	ldr	r3, [pc, #72]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a11      	ldr	r2, [pc, #68]	@ (8001098 <HAL_UART_MspInit+0x128>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <HAL_UART_MspInit+0x128>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60bb      	str	r3, [r7, #8]
 8001064:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001066:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800106a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001078:	2307      	movs	r3, #7
 800107a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001080:	4619      	mov	r1, r3
 8001082:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001086:	f000 f9b5 	bl	80013f4 <HAL_GPIO_Init>
}
 800108a:	bf00      	nop
 800108c:	3780      	adds	r7, #128	@ 0x80
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40008000 	.word	0x40008000
 8001098:	40021000 	.word	0x40021000
 800109c:	40013800 	.word	0x40013800

080010a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010a0:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010a4:	f7ff fcac 	bl	8000a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a8:	480c      	ldr	r0, [pc, #48]	@ (80010dc <LoopForever+0x6>)
  ldr r1, =_edata
 80010aa:	490d      	ldr	r1, [pc, #52]	@ (80010e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010ac:	4a0d      	ldr	r2, [pc, #52]	@ (80010e4 <LoopForever+0xe>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010b0:	e002      	b.n	80010b8 <LoopCopyDataInit>

080010b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b6:	3304      	adds	r3, #4

080010b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010bc:	d3f9      	bcc.n	80010b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010c0:	4c0a      	ldr	r4, [pc, #40]	@ (80010ec <LoopForever+0x16>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c4:	e001      	b.n	80010ca <LoopFillZerobss>

080010c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c8:	3204      	adds	r2, #4

080010ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010cc:	d3fb      	bcc.n	80010c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ce:	f003 ff65 	bl	8004f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010d2:	f7ff fb57 	bl	8000784 <main>

080010d6 <LoopForever>:

LoopForever:
    b LoopForever
 80010d6:	e7fe      	b.n	80010d6 <LoopForever>
  ldr   r0, =_estack
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010e4:	0800504c 	.word	0x0800504c
  ldr r2, =_sbss
 80010e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010ec:	20000290 	.word	0x20000290

080010f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC1_2_IRQHandler>

080010f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f8:	2300      	movs	r3, #0
 80010fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f939 	bl	8001374 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f80e 	bl	8001124 <HAL_InitTick>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d002      	beq.n	8001114 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	71fb      	strb	r3, [r7, #7]
 8001112:	e001      	b.n	8001118 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001114:	f7ff fc18 	bl	8000948 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001118:	79fb      	ldrb	r3, [r7, #7]

}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800112c:	2300      	movs	r3, #0
 800112e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_InitTick+0x68>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d022      	beq.n	800117e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001138:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <HAL_InitTick+0x6c>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <HAL_InitTick+0x68>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001144:	fbb1 f3f3 	udiv	r3, r1, r3
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f944 	bl	80013da <HAL_SYSTICK_Config>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d10f      	bne.n	8001178 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b0f      	cmp	r3, #15
 800115c:	d809      	bhi.n	8001172 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115e:	2200      	movs	r2, #0
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	f04f 30ff 	mov.w	r0, #4294967295
 8001166:	f000 f910 	bl	800138a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116a:	4a0a      	ldr	r2, [pc, #40]	@ (8001194 <HAL_InitTick+0x70>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e007      	b.n	8001182 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e004      	b.n	8001182 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e001      	b.n	8001182 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001182:	7bfb      	ldrb	r3, [r7, #15]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000008 	.word	0x20000008
 8001190:	20000000 	.word	0x20000000
 8001194:	20000004 	.word	0x20000004

08001198 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <HAL_IncTick+0x1c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <HAL_IncTick+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a03      	ldr	r2, [pc, #12]	@ (80011b4 <HAL_IncTick+0x1c>)
 80011a8:	6013      	str	r3, [r2, #0]
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	2000028c 	.word	0x2000028c
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return uwTick;
 80011c0:	4b03      	ldr	r3, [pc, #12]	@ (80011d0 <HAL_GetTick+0x14>)
 80011c2:	681b      	ldr	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	2000028c 	.word	0x2000028c

080011d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f0:	4013      	ands	r3, r2
 80011f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <__NVIC_SetPriorityGrouping+0x44>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00

0800121c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001220:	4b04      	ldr	r3, [pc, #16]	@ (8001234 <__NVIC_GetPriorityGrouping+0x18>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	f003 0307 	and.w	r3, r3, #7
}
 800122a:	4618      	mov	r0, r3
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	db0b      	blt.n	8001262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	f003 021f 	and.w	r2, r3, #31
 8001250:	4907      	ldr	r1, [pc, #28]	@ (8001270 <__NVIC_EnableIRQ+0x38>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	095b      	lsrs	r3, r3, #5
 8001258:	2001      	movs	r0, #1
 800125a:	fa00 f202 	lsl.w	r2, r0, r2
 800125e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3b01      	subs	r3, #1
 800133c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001340:	d301      	bcc.n	8001346 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001342:	2301      	movs	r3, #1
 8001344:	e00f      	b.n	8001366 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <SysTick_Config+0x40>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134e:	210f      	movs	r1, #15
 8001350:	f04f 30ff 	mov.w	r0, #4294967295
 8001354:	f7ff ff8e 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <SysTick_Config+0x40>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <SysTick_Config+0x40>)
 8001360:	2207      	movs	r2, #7
 8001362:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	e000e010 	.word	0xe000e010

08001374 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ff29 	bl	80011d4 <__NVIC_SetPriorityGrouping>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff40 	bl	800121c <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff33 	bl	8001238 <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa4 	bl	8001330 <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b087      	sub	sp, #28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001402:	e15a      	b.n	80016ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	4013      	ands	r3, r2
 8001412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 814c 	beq.w	80016b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	2b01      	cmp	r3, #1
 8001426:	d005      	beq.n	8001434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001430:	2b02      	cmp	r3, #2
 8001432:	d130      	bne.n	8001496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	2203      	movs	r2, #3
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4013      	ands	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800146a:	2201      	movs	r2, #1
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43db      	mvns	r3, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f003 0201 	and.w	r2, r3, #1
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d017      	beq.n	80014d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d123      	bne.n	8001526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	08da      	lsrs	r2, r3, #3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3208      	adds	r2, #8
 80014e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	691a      	ldr	r2, [r3, #16]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	f003 0307 	and.w	r3, r3, #7
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	08da      	lsrs	r2, r3, #3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3208      	adds	r2, #8
 8001520:	6939      	ldr	r1, [r7, #16]
 8001522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 0203 	and.w	r2, r3, #3
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 80a6 	beq.w	80016b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001568:	4b5b      	ldr	r3, [pc, #364]	@ (80016d8 <HAL_GPIO_Init+0x2e4>)
 800156a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156c:	4a5a      	ldr	r2, [pc, #360]	@ (80016d8 <HAL_GPIO_Init+0x2e4>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6613      	str	r3, [r2, #96]	@ 0x60
 8001574:	4b58      	ldr	r3, [pc, #352]	@ (80016d8 <HAL_GPIO_Init+0x2e4>)
 8001576:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001580:	4a56      	ldr	r2, [pc, #344]	@ (80016dc <HAL_GPIO_Init+0x2e8>)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	089b      	lsrs	r3, r3, #2
 8001586:	3302      	adds	r3, #2
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	220f      	movs	r2, #15
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015aa:	d01f      	beq.n	80015ec <HAL_GPIO_Init+0x1f8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a4c      	ldr	r2, [pc, #304]	@ (80016e0 <HAL_GPIO_Init+0x2ec>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d019      	beq.n	80015e8 <HAL_GPIO_Init+0x1f4>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a4b      	ldr	r2, [pc, #300]	@ (80016e4 <HAL_GPIO_Init+0x2f0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d013      	beq.n	80015e4 <HAL_GPIO_Init+0x1f0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a4a      	ldr	r2, [pc, #296]	@ (80016e8 <HAL_GPIO_Init+0x2f4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d00d      	beq.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a49      	ldr	r2, [pc, #292]	@ (80016ec <HAL_GPIO_Init+0x2f8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d007      	beq.n	80015dc <HAL_GPIO_Init+0x1e8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a48      	ldr	r2, [pc, #288]	@ (80016f0 <HAL_GPIO_Init+0x2fc>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d101      	bne.n	80015d8 <HAL_GPIO_Init+0x1e4>
 80015d4:	2305      	movs	r3, #5
 80015d6:	e00a      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015d8:	2306      	movs	r3, #6
 80015da:	e008      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015dc:	2304      	movs	r3, #4
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015e0:	2303      	movs	r3, #3
 80015e2:	e004      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e002      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <HAL_GPIO_Init+0x1fa>
 80015ec:	2300      	movs	r3, #0
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fe:	4937      	ldr	r1, [pc, #220]	@ (80016dc <HAL_GPIO_Init+0x2e8>)
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	43db      	mvns	r3, r3
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d003      	beq.n	8001630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4313      	orrs	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001630:	4a30      	ldr	r2, [pc, #192]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001636:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800165a:	4a26      	ldr	r2, [pc, #152]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001660:	4b24      	ldr	r3, [pc, #144]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43db      	mvns	r3, r3
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001684:	4a1b      	ldr	r2, [pc, #108]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800168a:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43db      	mvns	r3, r3
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ae:	4a11      	ldr	r2, [pc, #68]	@ (80016f4 <HAL_GPIO_Init+0x300>)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	3301      	adds	r3, #1
 80016b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	fa22 f303 	lsr.w	r3, r2, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	f47f ae9d 	bne.w	8001404 <HAL_GPIO_Init+0x10>
  }
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	48000400 	.word	0x48000400
 80016e4:	48000800 	.word	0x48000800
 80016e8:	48000c00 	.word	0x48000c00
 80016ec:	48001000 	.word	0x48001000
 80016f0:	48001400 	.word	0x48001400
 80016f4:	40010400 	.word	0x40010400

080016f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001708:	787b      	ldrb	r3, [r7, #1]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001714:	e002      	b.n	800171c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d006      	beq.n	800174c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001740:	88fb      	ldrh	r3, [r7, #6]
 8001742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f806 	bl	8001758 <HAL_GPIO_EXTI_Callback>
  }
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40010400 	.word	0x40010400

08001758 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e08d      	b.n	800189c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2b00      	cmp	r3, #0
 800178a:	d106      	bne.n	800179a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7fe ff7f 	bl	8000698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2224      	movs	r2, #36	@ 0x24
 800179e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0201 	bic.w	r2, r2, #1
 80017b0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80017be:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689a      	ldr	r2, [r3, #8]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017ce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d107      	bne.n	80017e8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	e006      	b.n	80017f6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d108      	bne.n	8001810 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e007      	b.n	8001820 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800181e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800182e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001832:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001842:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	695b      	ldr	r3, [r3, #20]
 800184c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69d9      	ldr	r1, [r3, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a1a      	ldr	r2, [r3, #32]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	430a      	orrs	r2, r1
 800186c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0201 	orr.w	r2, r2, #1
 800187c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	d138      	bne.n	800192c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e032      	b.n	800192e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2224      	movs	r2, #36	@ 0x24
 80018d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	e000      	b.n	800192e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800192c:	2302      	movs	r3, #2
  }
}
 800192e:	4618      	mov	r0, r3
 8001930:	370c      	adds	r7, #12
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800193a:	b480      	push	{r7}
 800193c:	b085      	sub	sp, #20
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
 8001942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b20      	cmp	r3, #32
 800194e:	d139      	bne.n	80019c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800195a:	2302      	movs	r3, #2
 800195c:	e033      	b.n	80019c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2224      	movs	r2, #36	@ 0x24
 800196a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800198c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68fa      	ldr	r2, [r7, #12]
 800199e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2302      	movs	r3, #2
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d141      	bne.n	8001a66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ee:	d131      	bne.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f0:	4b47      	ldr	r3, [pc, #284]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019f6:	4a46      	ldr	r2, [pc, #280]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a00:	4b43      	ldr	r3, [pc, #268]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a08:	4a41      	ldr	r2, [pc, #260]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a10:	4b40      	ldr	r3, [pc, #256]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2232      	movs	r2, #50	@ 0x32
 8001a16:	fb02 f303 	mul.w	r3, r2, r3
 8001a1a:	4a3f      	ldr	r2, [pc, #252]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a20:	0c9b      	lsrs	r3, r3, #18
 8001a22:	3301      	adds	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a26:	e002      	b.n	8001a2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2e:	4b38      	ldr	r3, [pc, #224]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a3a:	d102      	bne.n	8001a42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f2      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a42:	4b33      	ldr	r3, [pc, #204]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a4e:	d158      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e057      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a54:	4b2e      	ldr	r3, [pc, #184]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a64:	e04d      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a6c:	d141      	bne.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a6e:	4b28      	ldr	r3, [pc, #160]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a7a:	d131      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a7c:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a82:	4a23      	ldr	r2, [pc, #140]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8c:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a94:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2232      	movs	r2, #50	@ 0x32
 8001aa2:	fb02 f303 	mul.w	r3, r2, r3
 8001aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001b18 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aac:	0c9b      	lsrs	r3, r3, #18
 8001aae:	3301      	adds	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	e002      	b.n	8001aba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aba:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac6:	d102      	bne.n	8001ace <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f2      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ad6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ada:	d112      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e011      	b.n	8001b04 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001af0:	e007      	b.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b00:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40007000 	.word	0x40007000
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83

08001b1c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b20:	4b05      	ldr	r3, [pc, #20]	@ (8001b38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a04      	ldr	r2, [pc, #16]	@ (8001b38 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b2a:	6093      	str	r3, [r2, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e2fe      	b.n	800214c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d075      	beq.n	8001c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b97      	ldr	r3, [pc, #604]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b94      	ldr	r3, [pc, #592]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b0c      	cmp	r3, #12
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3e>
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d002      	beq.n	8001b80 <HAL_RCC_OscConfig+0x44>
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b8d      	ldr	r3, [pc, #564]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x108>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d157      	bne.n	8001c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e2d9      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x74>
 8001ba2:	4b85      	ldr	r3, [pc, #532]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a84      	ldr	r2, [pc, #528]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7f      	ldr	r3, [pc, #508]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7e      	ldr	r2, [pc, #504]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a7b      	ldr	r2, [pc, #492]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bd4:	4b78      	ldr	r3, [pc, #480]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a77      	ldr	r2, [pc, #476]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b75      	ldr	r3, [pc, #468]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a74      	ldr	r2, [pc, #464]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fae2 	bl	80011bc <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fade 	bl	80011bc <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e29e      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b6a      	ldr	r3, [pc, #424]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xc0>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff face 	bl	80011bc <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff faca 	bl	80011bc <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e28a      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c36:	4b60      	ldr	r3, [pc, #384]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0xe8>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d075      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b59      	ldr	r3, [pc, #356]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x136>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x13c>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d11f      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c78:	4b4f      	ldr	r3, [pc, #316]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d005      	beq.n	8001c90 <HAL_RCC_OscConfig+0x154>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d101      	bne.n	8001c90 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e25d      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c90:	4b49      	ldr	r3, [pc, #292]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	061b      	lsls	r3, r3, #24
 8001c9e:	4946      	ldr	r1, [pc, #280]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca4:	4b45      	ldr	r3, [pc, #276]	@ (8001dbc <HAL_RCC_OscConfig+0x280>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fa3b 	bl	8001124 <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d043      	beq.n	8001d3c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e249      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d023      	beq.n	8001d08 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fa76 	bl	80011bc <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd4:	f7ff fa72 	bl	80011bc <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e232      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf2:	4b31      	ldr	r3, [pc, #196]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	061b      	lsls	r3, r3, #24
 8001d00:	492d      	ldr	r1, [pc, #180]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	604b      	str	r3, [r1, #4]
 8001d06:	e01a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d08:	4b2b      	ldr	r3, [pc, #172]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fa52 	bl	80011bc <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fa4e 	bl	80011bc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e20e      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2e:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1e0>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d041      	beq.n	8001dce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d58:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d62:	f7ff fa2b 	bl	80011bc <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fa27 	bl	80011bc <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e1e7      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0ef      	beq.n	8001d6a <HAL_RCC_OscConfig+0x22e>
 8001d8a:	e020      	b.n	8001dce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d92:	4a09      	ldr	r2, [pc, #36]	@ (8001db8 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	f023 0301 	bic.w	r3, r3, #1
 8001d98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fa0e 	bl	80011bc <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da2:	e00d      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fa0a 	bl	80011bc <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d906      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e1ca      	b.n	800214c <HAL_RCC_OscConfig+0x610>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1ea      	bne.n	8001da4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80a6 	beq.w	8001f28 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de0:	4b84      	ldr	r3, [pc, #528]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2b4>
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2b6>
 8001df0:	2300      	movs	r3, #0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d00d      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e02:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e12:	4b79      	ldr	r3, [pc, #484]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1e:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a75      	ldr	r2, [pc, #468]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e2a:	f7ff f9c7 	bl	80011bc <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff f9c3 	bl	80011bc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e183      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e44:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <HAL_RCC_OscConfig+0x4bc>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d108      	bne.n	8001e6a <HAL_RCC_OscConfig+0x32e>
 8001e58:	4b66      	ldr	r3, [pc, #408]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e5e:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e68:	e024      	b.n	8001eb4 <HAL_RCC_OscConfig+0x378>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b05      	cmp	r3, #5
 8001e70:	d110      	bne.n	8001e94 <HAL_RCC_OscConfig+0x358>
 8001e72:	4b60      	ldr	r3, [pc, #384]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e78:	4a5e      	ldr	r2, [pc, #376]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e7a:	f043 0304 	orr.w	r3, r3, #4
 8001e7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e82:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e88:	4a5a      	ldr	r2, [pc, #360]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e92:	e00f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x378>
 8001e94:	4b57      	ldr	r3, [pc, #348]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e9a:	4a56      	ldr	r2, [pc, #344]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ea4:	4b53      	ldr	r3, [pc, #332]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a52      	ldr	r2, [pc, #328]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	f023 0304 	bic.w	r3, r3, #4
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d016      	beq.n	8001eea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebc:	f7ff f97e 	bl	80011bc <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec2:	e00a      	b.n	8001eda <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec4:	f7ff f97a 	bl	80011bc <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e138      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eda:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ed      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x388>
 8001ee8:	e015      	b.n	8001f16 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7ff f967 	bl	80011bc <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7ff f963 	bl	80011bc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e121      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ed      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f16:	7ffb      	ldrb	r3, [r7, #31]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d105      	bne.n	8001f28 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f20:	4a34      	ldr	r2, [pc, #208]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f26:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03c      	beq.n	8001fae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f936 	bl	80011bc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f54:	f7ff f932 	bl	80011bc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0f2      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x418>
 8001f74:	e01b      	b.n	8001fae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f76:	4b1f      	ldr	r3, [pc, #124]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff f919 	bl	80011bc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f8e:	f7ff f915 	bl	80011bc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e0d5      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa0:	4b14      	ldr	r3, [pc, #80]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ef      	bne.n	8001f8e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 80c9 	beq.w	800214a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 030c 	and.w	r3, r3, #12
 8001fc0:	2b0c      	cmp	r3, #12
 8001fc2:	f000 8083 	beq.w	80020cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d15e      	bne.n	800208c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a08      	ldr	r2, [pc, #32]	@ (8001ff4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f8ef 	bl	80011bc <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	e00c      	b.n	8001ffc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f8eb 	bl	80011bc <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d905      	bls.n	8001ffc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0ab      	b.n	800214c <HAL_RCC_OscConfig+0x610>
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ffc:	4b55      	ldr	r3, [pc, #340]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1ec      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002008:	4b52      	ldr	r3, [pc, #328]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <HAL_RCC_OscConfig+0x61c>)
 800200e:	4013      	ands	r3, r2
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	6a11      	ldr	r1, [r2, #32]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002018:	3a01      	subs	r2, #1
 800201a:	0112      	lsls	r2, r2, #4
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	4311      	orrs	r1, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800202a:	0852      	lsrs	r2, r2, #1
 800202c:	3a01      	subs	r2, #1
 800202e:	0552      	lsls	r2, r2, #21
 8002030:	4311      	orrs	r1, r2
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002036:	0852      	lsrs	r2, r2, #1
 8002038:	3a01      	subs	r2, #1
 800203a:	0652      	lsls	r2, r2, #25
 800203c:	4311      	orrs	r1, r2
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002042:	06d2      	lsls	r2, r2, #27
 8002044:	430a      	orrs	r2, r1
 8002046:	4943      	ldr	r1, [pc, #268]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002048:	4313      	orrs	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b41      	ldr	r3, [pc, #260]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a40      	ldr	r2, [pc, #256]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002058:	4b3e      	ldr	r3, [pc, #248]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	4a3d      	ldr	r2, [pc, #244]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800205e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002062:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002064:	f7ff f8aa 	bl	80011bc <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206c:	f7ff f8a6 	bl	80011bc <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e066      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207e:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0x530>
 800208a:	e05e      	b.n	800214a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b31      	ldr	r3, [pc, #196]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a30      	ldr	r2, [pc, #192]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff f890 	bl	80011bc <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f88c 	bl	80011bc <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e04c      	b.n	800214c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	4b28      	ldr	r3, [pc, #160]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020be:	4b25      	ldr	r3, [pc, #148]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	4924      	ldr	r1, [pc, #144]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020c4:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_RCC_OscConfig+0x620>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
 80020ca:	e03e      	b.n	800214a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69db      	ldr	r3, [r3, #28]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e039      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <HAL_RCC_OscConfig+0x618>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f003 0203 	and.w	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d12c      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	3b01      	subs	r3, #1
 80020f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d123      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002108:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d11b      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002118:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d113      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002128:	085b      	lsrs	r3, r3, #1
 800212a:	3b01      	subs	r3, #1
 800212c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d109      	bne.n	8002146 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002142:	429a      	cmp	r2, r3
 8002144:	d001      	beq.n	800214a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40021000 	.word	0x40021000
 8002158:	019f800c 	.word	0x019f800c
 800215c:	feeefffc 	.word	0xfeeefffc

08002160 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d101      	bne.n	8002178 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e11e      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002178:	4b91      	ldr	r3, [pc, #580]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d910      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b8e      	ldr	r3, [pc, #568]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 020f 	bic.w	r2, r3, #15
 800218e:	498c      	ldr	r1, [pc, #560]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b8a      	ldr	r3, [pc, #552]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e106      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0301 	and.w	r3, r3, #1
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d073      	beq.n	800229c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d129      	bne.n	8002210 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021bc:	4b81      	ldr	r3, [pc, #516]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0f4      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021cc:	f000 f99e 	bl	800250c <RCC_GetSysClockFreqFromPLLSource>
 80021d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	4a7c      	ldr	r2, [pc, #496]	@ (80023c8 <HAL_RCC_ClockConfig+0x268>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d93f      	bls.n	800225a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021da:	4b7a      	ldr	r3, [pc, #488]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d009      	beq.n	80021fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d033      	beq.n	800225a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d12f      	bne.n	800225a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fa:	4b72      	ldr	r3, [pc, #456]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002202:	4a70      	ldr	r2, [pc, #448]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002208:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e024      	b.n	800225a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002218:	4b6a      	ldr	r3, [pc, #424]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d109      	bne.n	8002238 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0c6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002228:	4b66      	ldr	r3, [pc, #408]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e0be      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002238:	f000 f8ce 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800223c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4a61      	ldr	r2, [pc, #388]	@ (80023c8 <HAL_RCC_ClockConfig+0x268>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d909      	bls.n	800225a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002246:	4b5f      	ldr	r3, [pc, #380]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800224e:	4a5d      	ldr	r2, [pc, #372]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002254:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b5a      	ldr	r3, [pc, #360]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4957      	ldr	r1, [pc, #348]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe ffa6 	bl	80011bc <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe ffa2 	bl	80011bc <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e095      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b4e      	ldr	r3, [pc, #312]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d023      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b43      	ldr	r3, [pc, #268]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a42      	ldr	r2, [pc, #264]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d007      	beq.n	80022dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022cc:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022dc:	4b39      	ldr	r3, [pc, #228]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4936      	ldr	r1, [pc, #216]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
 80022ee:	e008      	b.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b80      	cmp	r3, #128	@ 0x80
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022f6:	4b33      	ldr	r3, [pc, #204]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	4a32      	ldr	r2, [pc, #200]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002300:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002302:	4b2f      	ldr	r3, [pc, #188]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d21d      	bcs.n	800234c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002310:	4b2b      	ldr	r3, [pc, #172]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 020f 	bic.w	r2, r3, #15
 8002318:	4929      	ldr	r1, [pc, #164]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002320:	f7fe ff4c 	bl	80011bc <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7fe ff48 	bl	80011bc <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e03b      	b.n	80023b6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800233e:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <HAL_RCC_ClockConfig+0x260>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d1ed      	bne.n	8002328 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d008      	beq.n	800236a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002358:	4b1a      	ldr	r3, [pc, #104]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4917      	ldr	r1, [pc, #92]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	2b00      	cmp	r3, #0
 8002374:	d009      	beq.n	800238a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	490f      	ldr	r1, [pc, #60]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238a:	f000 f825 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_RCC_ClockConfig+0x264>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490c      	ldr	r1, [pc, #48]	@ (80023cc <HAL_RCC_ClockConfig+0x26c>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <HAL_RCC_ClockConfig+0x270>)
 80023a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_RCC_ClockConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe feb8 	bl	8001124 <HAL_InitTick>
 80023b4:	4603      	mov	r3, r0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40022000 	.word	0x40022000
 80023c4:	40021000 	.word	0x40021000
 80023c8:	04c4b400 	.word	0x04c4b400
 80023cc:	08004ffc 	.word	0x08004ffc
 80023d0:	20000000 	.word	0x20000000
 80023d4:	20000004 	.word	0x20000004

080023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023de:	4b2c      	ldr	r3, [pc, #176]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d102      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	e047      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 030c 	and.w	r3, r3, #12
 80023f8:	2b08      	cmp	r3, #8
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023fc:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	e03e      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b0c      	cmp	r3, #12
 800240c:	d136      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	3301      	adds	r3, #1
 8002424:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d10c      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800242c:	4a1a      	ldr	r2, [pc, #104]	@ (8002498 <HAL_RCC_GetSysClockFreq+0xc0>)
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	4a16      	ldr	r2, [pc, #88]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002436:	68d2      	ldr	r2, [r2, #12]
 8002438:	0a12      	lsrs	r2, r2, #8
 800243a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	617b      	str	r3, [r7, #20]
      break;
 8002444:	e00c      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002446:	4a13      	ldr	r2, [pc, #76]	@ (8002494 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	fbb2 f3f3 	udiv	r3, r2, r3
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002450:	68d2      	ldr	r2, [r2, #12]
 8002452:	0a12      	lsrs	r2, r2, #8
 8002454:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002458:	fb02 f303 	mul.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
      break;
 800245e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	0e5b      	lsrs	r3, r3, #25
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	3301      	adds	r3, #1
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	e001      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002480:	693b      	ldr	r3, [r7, #16]
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	00f42400 	.word	0x00f42400
 8002498:	016e3600 	.word	0x016e3600

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	@ (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000000 	.word	0x20000000

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	@ (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	0800500c 	.word	0x0800500c

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	@ (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	0800500c 	.word	0x0800500c

0800250c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002512:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 0303 	and.w	r3, r3, #3
 800251a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800251c:	4b1b      	ldr	r3, [pc, #108]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	3301      	adds	r3, #1
 8002528:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d10c      	bne.n	800254a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002530:	4a17      	ldr	r2, [pc, #92]	@ (8002590 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	4a14      	ldr	r2, [pc, #80]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253a:	68d2      	ldr	r2, [r2, #12]
 800253c:	0a12      	lsrs	r2, r2, #8
 800253e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	617b      	str	r3, [r7, #20]
    break;
 8002548:	e00c      	b.n	8002564 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800254a:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002552:	4a0e      	ldr	r2, [pc, #56]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002554:	68d2      	ldr	r2, [r2, #12]
 8002556:	0a12      	lsrs	r2, r2, #8
 8002558:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	617b      	str	r3, [r7, #20]
    break;
 8002562:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002564:	4b09      	ldr	r3, [pc, #36]	@ (800258c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0e5b      	lsrs	r3, r3, #25
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	371c      	adds	r7, #28
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	40021000 	.word	0x40021000
 8002590:	016e3600 	.word	0x016e3600
 8002594:	00f42400 	.word	0x00f42400

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a0:	2300      	movs	r3, #0
 80025a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f000 8098 	beq.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ba:	4b43      	ldr	r3, [pc, #268]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10d      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	4b40      	ldr	r3, [pc, #256]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	4a3f      	ldr	r2, [pc, #252]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80025d2:	4b3d      	ldr	r3, [pc, #244]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e2:	4b3a      	ldr	r3, [pc, #232]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a39      	ldr	r2, [pc, #228]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ee:	f7fe fde5 	bl	80011bc <HAL_GetTick>
 80025f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f4:	e009      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7fe fde1 	bl	80011bc <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d902      	bls.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	74fb      	strb	r3, [r7, #19]
        break;
 8002608:	e005      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260a:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0ef      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d159      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800261c:	4b2a      	ldr	r3, [pc, #168]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002626:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d01e      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d019      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002638:	4b23      	ldr	r3, [pc, #140]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800263e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002642:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002644:	4b20      	ldr	r3, [pc, #128]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800264a:	4a1f      	ldr	r2, [pc, #124]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002650:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002654:	4b1c      	ldr	r3, [pc, #112]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a1b      	ldr	r2, [pc, #108]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002664:	4a18      	ldr	r2, [pc, #96]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d016      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fda1 	bl	80011bc <HAL_GetTick>
 800267a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800267c:	e00b      	b.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f7fe fd9d 	bl	80011bc <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d902      	bls.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	74fb      	strb	r3, [r7, #19]
            break;
 8002694:	e006      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002696:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0ec      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026a4:	7cfb      	ldrb	r3, [r7, #19]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10b      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026aa:	4b07      	ldr	r3, [pc, #28]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b8:	4903      	ldr	r1, [pc, #12]	@ (80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80026c0:	e008      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026c2:	7cfb      	ldrb	r3, [r7, #19]
 80026c4:	74bb      	strb	r3, [r7, #18]
 80026c6:	e005      	b.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d0:	7cfb      	ldrb	r3, [r7, #19]
 80026d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d4:	7c7b      	ldrb	r3, [r7, #17]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d105      	bne.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026da:	4ba7      	ldr	r3, [pc, #668]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	4aa6      	ldr	r2, [pc, #664]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026e4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f2:	4ba1      	ldr	r3, [pc, #644]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f023 0203 	bic.w	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	499d      	ldr	r1, [pc, #628]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002714:	4b98      	ldr	r3, [pc, #608]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f023 020c 	bic.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4995      	ldr	r1, [pc, #596]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002736:	4b90      	ldr	r3, [pc, #576]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	498c      	ldr	r1, [pc, #560]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002758:	4b87      	ldr	r3, [pc, #540]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	4984      	ldr	r1, [pc, #528]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0310 	and.w	r3, r3, #16
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277a:	4b7f      	ldr	r3, [pc, #508]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002780:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	497b      	ldr	r1, [pc, #492]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800279c:	4b76      	ldr	r3, [pc, #472]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4973      	ldr	r1, [pc, #460]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027be:	4b6e      	ldr	r3, [pc, #440]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	496a      	ldr	r1, [pc, #424]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e0:	4b65      	ldr	r3, [pc, #404]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4962      	ldr	r1, [pc, #392]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002802:	4b5d      	ldr	r3, [pc, #372]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002808:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	4959      	ldr	r1, [pc, #356]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002824:	4b54      	ldr	r3, [pc, #336]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002826:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800282a:	f023 0203 	bic.w	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002832:	4951      	ldr	r1, [pc, #324]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002854:	4948      	ldr	r1, [pc, #288]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d015      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002868:	4b43      	ldr	r3, [pc, #268]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4940      	ldr	r1, [pc, #256]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002886:	d105      	bne.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002888:	4b3b      	ldr	r3, [pc, #236]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a3a      	ldr	r2, [pc, #232]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002892:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800289c:	2b00      	cmp	r3, #0
 800289e:	d015      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a0:	4b35      	ldr	r3, [pc, #212]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028a6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ae:	4932      	ldr	r1, [pc, #200]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028be:	d105      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d015      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028d8:	4b27      	ldr	r3, [pc, #156]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028de:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	4924      	ldr	r1, [pc, #144]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028f6:	d105      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002902:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d015      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002910:	4b19      	ldr	r3, [pc, #100]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800292e:	d105      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002930:	4b11      	ldr	r3, [pc, #68]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4a10      	ldr	r2, [pc, #64]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800293a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800294e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4908      	ldr	r1, [pc, #32]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002966:	d109      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002968:	4b03      	ldr	r3, [pc, #12]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a02      	ldr	r2, [pc, #8]	@ (8002978 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002972:	60d3      	str	r3, [r2, #12]
 8002974:	e002      	b.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d015      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002988:	4b29      	ldr	r3, [pc, #164]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002996:	4926      	ldr	r1, [pc, #152]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029a6:	d105      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029a8:	4b21      	ldr	r3, [pc, #132]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	4a20      	ldr	r2, [pc, #128]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d015      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029ce:	4918      	ldr	r1, [pc, #96]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029de:	d105      	bne.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e0:	4b13      	ldr	r3, [pc, #76]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d015      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029fe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	490a      	ldr	r1, [pc, #40]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a18:	4b05      	ldr	r3, [pc, #20]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a22:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a24:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000

08002a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e049      	b.n	8002ada <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe f932 	bl	8000cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	4619      	mov	r1, r3
 8002a72:	4610      	mov	r0, r2
 8002a74:	f000 fcd0 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e049      	b.n	8002b88 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f841 	bl	8002b90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4610      	mov	r0, r2
 8002b22:	f000 fc79 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d109      	bne.n	8002bc8 <HAL_TIM_PWM_Start+0x24>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e03c      	b.n	8002c42 <HAL_TIM_PWM_Start+0x9e>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d109      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x3e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	bf14      	ite	ne
 8002bda:	2301      	movne	r3, #1
 8002bdc:	2300      	moveq	r3, #0
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	e02f      	b.n	8002c42 <HAL_TIM_PWM_Start+0x9e>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d109      	bne.n	8002bfc <HAL_TIM_PWM_Start+0x58>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	bf14      	ite	ne
 8002bf4:	2301      	movne	r3, #1
 8002bf6:	2300      	moveq	r3, #0
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	e022      	b.n	8002c42 <HAL_TIM_PWM_Start+0x9e>
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	2b0c      	cmp	r3, #12
 8002c00:	d109      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x72>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	bf14      	ite	ne
 8002c0e:	2301      	movne	r3, #1
 8002c10:	2300      	moveq	r3, #0
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	e015      	b.n	8002c42 <HAL_TIM_PWM_Start+0x9e>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d109      	bne.n	8002c30 <HAL_TIM_PWM_Start+0x8c>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	bf14      	ite	ne
 8002c28:	2301      	movne	r3, #1
 8002c2a:	2300      	moveq	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e008      	b.n	8002c42 <HAL_TIM_PWM_Start+0x9e>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e0a6      	b.n	8002d98 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d104      	bne.n	8002c5a <HAL_TIM_PWM_Start+0xb6>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c58:	e023      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xfe>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	2b04      	cmp	r3, #4
 8002c5e:	d104      	bne.n	8002c6a <HAL_TIM_PWM_Start+0xc6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2202      	movs	r2, #2
 8002c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c68:	e01b      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xfe>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b08      	cmp	r3, #8
 8002c6e:	d104      	bne.n	8002c7a <HAL_TIM_PWM_Start+0xd6>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c78:	e013      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xfe>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b0c      	cmp	r3, #12
 8002c7e:	d104      	bne.n	8002c8a <HAL_TIM_PWM_Start+0xe6>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c88:	e00b      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xfe>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0xf6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c98:	e003      	b.n	8002ca2 <HAL_TIM_PWM_Start+0xfe>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	6839      	ldr	r1, [r7, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f001 f958 	bl	8003f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8002da0 <HAL_TIM_PWM_Start+0x1fc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d018      	beq.n	8002cec <HAL_TIM_PWM_Start+0x148>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a39      	ldr	r2, [pc, #228]	@ (8002da4 <HAL_TIM_PWM_Start+0x200>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d013      	beq.n	8002cec <HAL_TIM_PWM_Start+0x148>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a37      	ldr	r2, [pc, #220]	@ (8002da8 <HAL_TIM_PWM_Start+0x204>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_PWM_Start+0x148>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a36      	ldr	r2, [pc, #216]	@ (8002dac <HAL_TIM_PWM_Start+0x208>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_PWM_Start+0x148>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a34      	ldr	r2, [pc, #208]	@ (8002db0 <HAL_TIM_PWM_Start+0x20c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_PWM_Start+0x148>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a33      	ldr	r2, [pc, #204]	@ (8002db4 <HAL_TIM_PWM_Start+0x210>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIM_PWM_Start+0x14c>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_TIM_PWM_Start+0x14e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d007      	beq.n	8002d06 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	@ (8002da0 <HAL_TIM_PWM_Start+0x1fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d022      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d18:	d01d      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a26      	ldr	r2, [pc, #152]	@ (8002db8 <HAL_TIM_PWM_Start+0x214>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d018      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a24      	ldr	r2, [pc, #144]	@ (8002dbc <HAL_TIM_PWM_Start+0x218>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a23      	ldr	r2, [pc, #140]	@ (8002dc0 <HAL_TIM_PWM_Start+0x21c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d00e      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	@ (8002da4 <HAL_TIM_PWM_Start+0x200>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d009      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <HAL_TIM_PWM_Start+0x204>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d004      	beq.n	8002d56 <HAL_TIM_PWM_Start+0x1b2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a18      	ldr	r2, [pc, #96]	@ (8002db4 <HAL_TIM_PWM_Start+0x210>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d115      	bne.n	8002d82 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	4b19      	ldr	r3, [pc, #100]	@ (8002dc4 <HAL_TIM_PWM_Start+0x220>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b06      	cmp	r3, #6
 8002d66:	d015      	beq.n	8002d94 <HAL_TIM_PWM_Start+0x1f0>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d6e:	d011      	beq.n	8002d94 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d80:	e008      	b.n	8002d94 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0201 	orr.w	r2, r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e000      	b.n	8002d96 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800
 8002db4:	40015000 	.word	0x40015000
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	40000800 	.word	0x40000800
 8002dc0:	40000c00 	.word	0x40000c00
 8002dc4:	00010007 	.word	0x00010007

08002dc8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e049      	b.n	8002e6e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f841 	bl	8002e76 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3304      	adds	r3, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4610      	mov	r0, r2
 8002e08:	f000 fb06 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e088      	b.n	8002fba <HAL_TIM_IC_ConfigChannel+0x130>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d11b      	bne.n	8002eee <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ec6:	f000 fe85 	bl	8003bd4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 020c 	bic.w	r2, r2, #12
 8002ed8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6999      	ldr	r1, [r3, #24]
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	619a      	str	r2, [r3, #24]
 8002eec:	e060      	b.n	8002fb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d11c      	bne.n	8002f2e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002f04:	f000 ff09 	bl	8003d1a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	699a      	ldr	r2, [r3, #24]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f16:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6999      	ldr	r1, [r3, #24]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	619a      	str	r2, [r3, #24]
 8002f2c:	e040      	b.n	8002fb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d11b      	bne.n	8002f6c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f44:	f000 ff56 	bl	8003df4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69da      	ldr	r2, [r3, #28]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 020c 	bic.w	r2, r2, #12
 8002f56:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	69d9      	ldr	r1, [r3, #28]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	61da      	str	r2, [r3, #28]
 8002f6a:	e021      	b.n	8002fb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b0c      	cmp	r3, #12
 8002f70:	d11c      	bne.n	8002fac <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002f82:	f000 ff73 	bl	8003e6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69da      	ldr	r2, [r3, #28]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f94:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	021a      	lsls	r2, r3, #8
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	61da      	str	r2, [r3, #28]
 8002faa:	e001      	b.n	8002fb0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ff      	b.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b14      	cmp	r3, #20
 8002fee:	f200 80f0 	bhi.w	80031d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ff2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800304d 	.word	0x0800304d
 8002ffc:	080031d3 	.word	0x080031d3
 8003000:	080031d3 	.word	0x080031d3
 8003004:	080031d3 	.word	0x080031d3
 8003008:	0800308d 	.word	0x0800308d
 800300c:	080031d3 	.word	0x080031d3
 8003010:	080031d3 	.word	0x080031d3
 8003014:	080031d3 	.word	0x080031d3
 8003018:	080030cf 	.word	0x080030cf
 800301c:	080031d3 	.word	0x080031d3
 8003020:	080031d3 	.word	0x080031d3
 8003024:	080031d3 	.word	0x080031d3
 8003028:	0800310f 	.word	0x0800310f
 800302c:	080031d3 	.word	0x080031d3
 8003030:	080031d3 	.word	0x080031d3
 8003034:	080031d3 	.word	0x080031d3
 8003038:	08003151 	.word	0x08003151
 800303c:	080031d3 	.word	0x080031d3
 8003040:	080031d3 	.word	0x080031d3
 8003044:	080031d3 	.word	0x080031d3
 8003048:	08003191 	.word	0x08003191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa94 	bl	8003580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	619a      	str	r2, [r3, #24]
      break;
 800308a:	e0a5      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fb0e 	bl	80036b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	021a      	lsls	r2, r3, #8
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
      break;
 80030cc:	e084      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 fb81 	bl	80037dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0208 	orr.w	r2, r2, #8
 80030e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69d9      	ldr	r1, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	61da      	str	r2, [r3, #28]
      break;
 800310c:	e064      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fbf3 	bl	8003900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	61da      	str	r2, [r3, #28]
      break;
 800314e:	e043      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 fc66 	bl	8003a28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0208 	orr.w	r2, r2, #8
 800316a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0204 	bic.w	r2, r2, #4
 800317a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	691a      	ldr	r2, [r3, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800318e:	e023      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fcb0 	bl	8003afc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	021a      	lsls	r2, r3, #8
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80031d0:	e002      	b.n	80031d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	75fb      	strb	r3, [r7, #23]
      break;
 80031d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop

080031ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_TIM_ConfigClockSource+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e0f6      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x20a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800322a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68ba      	ldr	r2, [r7, #8]
 800323a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a6f      	ldr	r2, [pc, #444]	@ (8003400 <HAL_TIM_ConfigClockSource+0x214>)
 8003242:	4293      	cmp	r3, r2
 8003244:	f000 80c1 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003248:	4a6d      	ldr	r2, [pc, #436]	@ (8003400 <HAL_TIM_ConfigClockSource+0x214>)
 800324a:	4293      	cmp	r3, r2
 800324c:	f200 80c6 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003250:	4a6c      	ldr	r2, [pc, #432]	@ (8003404 <HAL_TIM_ConfigClockSource+0x218>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f000 80b9 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003258:	4a6a      	ldr	r2, [pc, #424]	@ (8003404 <HAL_TIM_ConfigClockSource+0x218>)
 800325a:	4293      	cmp	r3, r2
 800325c:	f200 80be 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003260:	4a69      	ldr	r2, [pc, #420]	@ (8003408 <HAL_TIM_ConfigClockSource+0x21c>)
 8003262:	4293      	cmp	r3, r2
 8003264:	f000 80b1 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003268:	4a67      	ldr	r2, [pc, #412]	@ (8003408 <HAL_TIM_ConfigClockSource+0x21c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	f200 80b6 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003270:	4a66      	ldr	r2, [pc, #408]	@ (800340c <HAL_TIM_ConfigClockSource+0x220>)
 8003272:	4293      	cmp	r3, r2
 8003274:	f000 80a9 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003278:	4a64      	ldr	r2, [pc, #400]	@ (800340c <HAL_TIM_ConfigClockSource+0x220>)
 800327a:	4293      	cmp	r3, r2
 800327c:	f200 80ae 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003280:	4a63      	ldr	r2, [pc, #396]	@ (8003410 <HAL_TIM_ConfigClockSource+0x224>)
 8003282:	4293      	cmp	r3, r2
 8003284:	f000 80a1 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003288:	4a61      	ldr	r2, [pc, #388]	@ (8003410 <HAL_TIM_ConfigClockSource+0x224>)
 800328a:	4293      	cmp	r3, r2
 800328c:	f200 80a6 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003290:	4a60      	ldr	r2, [pc, #384]	@ (8003414 <HAL_TIM_ConfigClockSource+0x228>)
 8003292:	4293      	cmp	r3, r2
 8003294:	f000 8099 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003298:	4a5e      	ldr	r2, [pc, #376]	@ (8003414 <HAL_TIM_ConfigClockSource+0x228>)
 800329a:	4293      	cmp	r3, r2
 800329c:	f200 809e 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032a4:	f000 8091 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 80032a8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032ac:	f200 8096 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032b4:	f000 8089 	beq.w	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 80032b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032bc:	f200 808e 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c4:	d03e      	beq.n	8003344 <HAL_TIM_ConfigClockSource+0x158>
 80032c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ca:	f200 8087 	bhi.w	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d2:	f000 8086 	beq.w	80033e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80032d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032da:	d87f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032dc:	2b70      	cmp	r3, #112	@ 0x70
 80032de:	d01a      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x12a>
 80032e0:	2b70      	cmp	r3, #112	@ 0x70
 80032e2:	d87b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032e4:	2b60      	cmp	r3, #96	@ 0x60
 80032e6:	d050      	beq.n	800338a <HAL_TIM_ConfigClockSource+0x19e>
 80032e8:	2b60      	cmp	r3, #96	@ 0x60
 80032ea:	d877      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032ec:	2b50      	cmp	r3, #80	@ 0x50
 80032ee:	d03c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x17e>
 80032f0:	2b50      	cmp	r3, #80	@ 0x50
 80032f2:	d873      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032f4:	2b40      	cmp	r3, #64	@ 0x40
 80032f6:	d058      	beq.n	80033aa <HAL_TIM_ConfigClockSource+0x1be>
 80032f8:	2b40      	cmp	r3, #64	@ 0x40
 80032fa:	d86f      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 80032fc:	2b30      	cmp	r3, #48	@ 0x30
 80032fe:	d064      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003300:	2b30      	cmp	r3, #48	@ 0x30
 8003302:	d86b      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d060      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003308:	2b20      	cmp	r3, #32
 800330a:	d867      	bhi.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
 800330c:	2b00      	cmp	r3, #0
 800330e:	d05c      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003310:	2b10      	cmp	r3, #16
 8003312:	d05a      	beq.n	80033ca <HAL_TIM_ConfigClockSource+0x1de>
 8003314:	e062      	b.n	80033dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003326:	f000 fdfb 	bl	8003f20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	609a      	str	r2, [r3, #8]
      break;
 8003342:	e04f      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003354:	f000 fde4 	bl	8003f20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003366:	609a      	str	r2, [r3, #8]
      break;
 8003368:	e03c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003376:	461a      	mov	r2, r3
 8003378:	f000 fca0 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2150      	movs	r1, #80	@ 0x50
 8003382:	4618      	mov	r0, r3
 8003384:	f000 fdaf 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 8003388:	e02c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003396:	461a      	mov	r2, r3
 8003398:	f000 fcfc 	bl	8003d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2160      	movs	r1, #96	@ 0x60
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fd9f 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 80033a8:	e01c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	461a      	mov	r2, r3
 80033b8:	f000 fc80 	bl	8003cbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2140      	movs	r1, #64	@ 0x40
 80033c2:	4618      	mov	r0, r3
 80033c4:	f000 fd8f 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 80033c8:	e00c      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4619      	mov	r1, r3
 80033d4:	4610      	mov	r0, r2
 80033d6:	f000 fd86 	bl	8003ee6 <TIM_ITRx_SetConfig>
      break;
 80033da:	e003      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e000      	b.n	80033e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80033e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	00100070 	.word	0x00100070
 8003404:	00100060 	.word	0x00100060
 8003408:	00100050 	.word	0x00100050
 800340c:	00100040 	.word	0x00100040
 8003410:	00100030 	.word	0x00100030
 8003414:	00100020 	.word	0x00100020

08003418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a4c      	ldr	r2, [pc, #304]	@ (800355c <TIM_Base_SetConfig+0x144>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d017      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d013      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a49      	ldr	r2, [pc, #292]	@ (8003560 <TIM_Base_SetConfig+0x148>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00f      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a48      	ldr	r2, [pc, #288]	@ (8003564 <TIM_Base_SetConfig+0x14c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00b      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a47      	ldr	r2, [pc, #284]	@ (8003568 <TIM_Base_SetConfig+0x150>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d007      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a46      	ldr	r2, [pc, #280]	@ (800356c <TIM_Base_SetConfig+0x154>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d003      	beq.n	8003460 <TIM_Base_SetConfig+0x48>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a45      	ldr	r2, [pc, #276]	@ (8003570 <TIM_Base_SetConfig+0x158>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003466:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68fa      	ldr	r2, [r7, #12]
 800346e:	4313      	orrs	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a39      	ldr	r2, [pc, #228]	@ (800355c <TIM_Base_SetConfig+0x144>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d023      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003480:	d01f      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a36      	ldr	r2, [pc, #216]	@ (8003560 <TIM_Base_SetConfig+0x148>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01b      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a35      	ldr	r2, [pc, #212]	@ (8003564 <TIM_Base_SetConfig+0x14c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d017      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a34      	ldr	r2, [pc, #208]	@ (8003568 <TIM_Base_SetConfig+0x150>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a33      	ldr	r2, [pc, #204]	@ (800356c <TIM_Base_SetConfig+0x154>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00f      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a33      	ldr	r2, [pc, #204]	@ (8003574 <TIM_Base_SetConfig+0x15c>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00b      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a32      	ldr	r2, [pc, #200]	@ (8003578 <TIM_Base_SetConfig+0x160>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d007      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a31      	ldr	r2, [pc, #196]	@ (800357c <TIM_Base_SetConfig+0x164>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d003      	beq.n	80034c2 <TIM_Base_SetConfig+0xaa>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a2c      	ldr	r2, [pc, #176]	@ (8003570 <TIM_Base_SetConfig+0x158>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d108      	bne.n	80034d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a18      	ldr	r2, [pc, #96]	@ (800355c <TIM_Base_SetConfig+0x144>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d013      	beq.n	8003528 <TIM_Base_SetConfig+0x110>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a1a      	ldr	r2, [pc, #104]	@ (800356c <TIM_Base_SetConfig+0x154>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d00f      	beq.n	8003528 <TIM_Base_SetConfig+0x110>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a1a      	ldr	r2, [pc, #104]	@ (8003574 <TIM_Base_SetConfig+0x15c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <TIM_Base_SetConfig+0x110>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a19      	ldr	r2, [pc, #100]	@ (8003578 <TIM_Base_SetConfig+0x160>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <TIM_Base_SetConfig+0x110>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <TIM_Base_SetConfig+0x164>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d003      	beq.n	8003528 <TIM_Base_SetConfig+0x110>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a13      	ldr	r2, [pc, #76]	@ (8003570 <TIM_Base_SetConfig+0x158>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d103      	bne.n	8003530 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	691a      	ldr	r2, [r3, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f023 0201 	bic.w	r2, r3, #1
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	611a      	str	r2, [r3, #16]
  }
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40013400 	.word	0x40013400
 8003570:	40015000 	.word	0x40015000
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400
 800357c:	40014800 	.word	0x40014800

08003580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f023 0201 	bic.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0302 	bic.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a30      	ldr	r2, [pc, #192]	@ (800369c <TIM_OC1_SetConfig+0x11c>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d013      	beq.n	8003608 <TIM_OC1_SetConfig+0x88>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a2f      	ldr	r2, [pc, #188]	@ (80036a0 <TIM_OC1_SetConfig+0x120>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d00f      	beq.n	8003608 <TIM_OC1_SetConfig+0x88>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a2e      	ldr	r2, [pc, #184]	@ (80036a4 <TIM_OC1_SetConfig+0x124>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d00b      	beq.n	8003608 <TIM_OC1_SetConfig+0x88>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a2d      	ldr	r2, [pc, #180]	@ (80036a8 <TIM_OC1_SetConfig+0x128>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d007      	beq.n	8003608 <TIM_OC1_SetConfig+0x88>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a2c      	ldr	r2, [pc, #176]	@ (80036ac <TIM_OC1_SetConfig+0x12c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d003      	beq.n	8003608 <TIM_OC1_SetConfig+0x88>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a2b      	ldr	r2, [pc, #172]	@ (80036b0 <TIM_OC1_SetConfig+0x130>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10c      	bne.n	8003622 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f023 0308 	bic.w	r3, r3, #8
 800360e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1d      	ldr	r2, [pc, #116]	@ (800369c <TIM_OC1_SetConfig+0x11c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d013      	beq.n	8003652 <TIM_OC1_SetConfig+0xd2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <TIM_OC1_SetConfig+0x120>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00f      	beq.n	8003652 <TIM_OC1_SetConfig+0xd2>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a1b      	ldr	r2, [pc, #108]	@ (80036a4 <TIM_OC1_SetConfig+0x124>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d00b      	beq.n	8003652 <TIM_OC1_SetConfig+0xd2>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a1a      	ldr	r2, [pc, #104]	@ (80036a8 <TIM_OC1_SetConfig+0x128>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d007      	beq.n	8003652 <TIM_OC1_SetConfig+0xd2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <TIM_OC1_SetConfig+0x12c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d003      	beq.n	8003652 <TIM_OC1_SetConfig+0xd2>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <TIM_OC1_SetConfig+0x130>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d111      	bne.n	8003676 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	693a      	ldr	r2, [r7, #16]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685a      	ldr	r2, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	621a      	str	r2, [r3, #32]
}
 8003690:	bf00      	nop
 8003692:	371c      	adds	r7, #28
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	40012c00 	.word	0x40012c00
 80036a0:	40013400 	.word	0x40013400
 80036a4:	40014000 	.word	0x40014000
 80036a8:	40014400 	.word	0x40014400
 80036ac:	40014800 	.word	0x40014800
 80036b0:	40015000 	.word	0x40015000

080036b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b087      	sub	sp, #28
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f023 0210 	bic.w	r2, r3, #16
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a2c      	ldr	r2, [pc, #176]	@ (80037c4 <TIM_OC2_SetConfig+0x110>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d007      	beq.n	8003728 <TIM_OC2_SetConfig+0x74>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	4a2b      	ldr	r2, [pc, #172]	@ (80037c8 <TIM_OC2_SetConfig+0x114>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d003      	beq.n	8003728 <TIM_OC2_SetConfig+0x74>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a2a      	ldr	r2, [pc, #168]	@ (80037cc <TIM_OC2_SetConfig+0x118>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d10d      	bne.n	8003744 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4313      	orrs	r3, r2
 800373a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a1f      	ldr	r2, [pc, #124]	@ (80037c4 <TIM_OC2_SetConfig+0x110>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <TIM_OC2_SetConfig+0xc0>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1e      	ldr	r2, [pc, #120]	@ (80037c8 <TIM_OC2_SetConfig+0x114>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00f      	beq.n	8003774 <TIM_OC2_SetConfig+0xc0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a1e      	ldr	r2, [pc, #120]	@ (80037d0 <TIM_OC2_SetConfig+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_OC2_SetConfig+0xc0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a1d      	ldr	r2, [pc, #116]	@ (80037d4 <TIM_OC2_SetConfig+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC2_SetConfig+0xc0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a1c      	ldr	r2, [pc, #112]	@ (80037d8 <TIM_OC2_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC2_SetConfig+0xc0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a17      	ldr	r2, [pc, #92]	@ (80037cc <TIM_OC2_SetConfig+0x118>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d113      	bne.n	800379c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800377a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003782:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	693a      	ldr	r2, [r7, #16]
 800378c:	4313      	orrs	r3, r2
 800378e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	621a      	str	r2, [r3, #32]
}
 80037b6:	bf00      	nop
 80037b8:	371c      	adds	r7, #28
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40013400 	.word	0x40013400
 80037cc:	40015000 	.word	0x40015000
 80037d0:	40014000 	.word	0x40014000
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800

080037dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800380a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800380e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0303 	bic.w	r3, r3, #3
 8003816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a2b      	ldr	r2, [pc, #172]	@ (80038e8 <TIM_OC3_SetConfig+0x10c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_OC3_SetConfig+0x72>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a2a      	ldr	r2, [pc, #168]	@ (80038ec <TIM_OC3_SetConfig+0x110>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC3_SetConfig+0x72>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a29      	ldr	r2, [pc, #164]	@ (80038f0 <TIM_OC3_SetConfig+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10d      	bne.n	800386a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a1e      	ldr	r2, [pc, #120]	@ (80038e8 <TIM_OC3_SetConfig+0x10c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <TIM_OC3_SetConfig+0xbe>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <TIM_OC3_SetConfig+0x110>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d00f      	beq.n	800389a <TIM_OC3_SetConfig+0xbe>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1d      	ldr	r2, [pc, #116]	@ (80038f4 <TIM_OC3_SetConfig+0x118>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_OC3_SetConfig+0xbe>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a1c      	ldr	r2, [pc, #112]	@ (80038f8 <TIM_OC3_SetConfig+0x11c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC3_SetConfig+0xbe>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1b      	ldr	r2, [pc, #108]	@ (80038fc <TIM_OC3_SetConfig+0x120>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC3_SetConfig+0xbe>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a16      	ldr	r2, [pc, #88]	@ (80038f0 <TIM_OC3_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d113      	bne.n	80038c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	621a      	str	r2, [r3, #32]
}
 80038dc:	bf00      	nop
 80038de:	371c      	adds	r7, #28
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	40012c00 	.word	0x40012c00
 80038ec:	40013400 	.word	0x40013400
 80038f0:	40015000 	.word	0x40015000
 80038f4:	40014000 	.word	0x40014000
 80038f8:	40014400 	.word	0x40014400
 80038fc:	40014800 	.word	0x40014800

08003900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69db      	ldr	r3, [r3, #28]
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800392e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800393a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	021b      	lsls	r3, r3, #8
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800394e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	031b      	lsls	r3, r3, #12
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a2c      	ldr	r2, [pc, #176]	@ (8003a10 <TIM_OC4_SetConfig+0x110>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_OC4_SetConfig+0x74>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a2b      	ldr	r2, [pc, #172]	@ (8003a14 <TIM_OC4_SetConfig+0x114>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_OC4_SetConfig+0x74>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a18 <TIM_OC4_SetConfig+0x118>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d10d      	bne.n	8003990 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800397a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	031b      	lsls	r3, r3, #12
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800398e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a1f      	ldr	r2, [pc, #124]	@ (8003a10 <TIM_OC4_SetConfig+0x110>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <TIM_OC4_SetConfig+0xc0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a14 <TIM_OC4_SetConfig+0x114>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00f      	beq.n	80039c0 <TIM_OC4_SetConfig+0xc0>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a1e      	ldr	r2, [pc, #120]	@ (8003a1c <TIM_OC4_SetConfig+0x11c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_OC4_SetConfig+0xc0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <TIM_OC4_SetConfig+0x120>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_OC4_SetConfig+0xc0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <TIM_OC4_SetConfig+0x124>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_OC4_SetConfig+0xc0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a17      	ldr	r2, [pc, #92]	@ (8003a18 <TIM_OC4_SetConfig+0x118>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d113      	bne.n	80039e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	019b      	lsls	r3, r3, #6
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40012c00 	.word	0x40012c00
 8003a14:	40013400 	.word	0x40013400
 8003a18:	40015000 	.word	0x40015000
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ae4 <TIM_OC5_SetConfig+0xbc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <TIM_OC5_SetConfig+0x82>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a18      	ldr	r2, [pc, #96]	@ (8003ae8 <TIM_OC5_SetConfig+0xc0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d00f      	beq.n	8003aaa <TIM_OC5_SetConfig+0x82>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a17      	ldr	r2, [pc, #92]	@ (8003aec <TIM_OC5_SetConfig+0xc4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <TIM_OC5_SetConfig+0x82>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <TIM_OC5_SetConfig+0xc8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_OC5_SetConfig+0x82>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	@ (8003af4 <TIM_OC5_SetConfig+0xcc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_OC5_SetConfig+0x82>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a14      	ldr	r2, [pc, #80]	@ (8003af8 <TIM_OC5_SetConfig+0xd0>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d109      	bne.n	8003abe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	621a      	str	r2, [r3, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40013400 	.word	0x40013400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800
 8003af8:	40015000 	.word	0x40015000

08003afc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	051b      	lsls	r3, r3, #20
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a1a      	ldr	r2, [pc, #104]	@ (8003bbc <TIM_OC6_SetConfig+0xc0>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <TIM_OC6_SetConfig+0x84>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a19      	ldr	r2, [pc, #100]	@ (8003bc0 <TIM_OC6_SetConfig+0xc4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d00f      	beq.n	8003b80 <TIM_OC6_SetConfig+0x84>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a18      	ldr	r2, [pc, #96]	@ (8003bc4 <TIM_OC6_SetConfig+0xc8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_OC6_SetConfig+0x84>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a17      	ldr	r2, [pc, #92]	@ (8003bc8 <TIM_OC6_SetConfig+0xcc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_OC6_SetConfig+0x84>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a16      	ldr	r2, [pc, #88]	@ (8003bcc <TIM_OC6_SetConfig+0xd0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_OC6_SetConfig+0x84>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a15      	ldr	r2, [pc, #84]	@ (8003bd0 <TIM_OC6_SetConfig+0xd4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d109      	bne.n	8003b94 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	029b      	lsls	r3, r3, #10
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800
 8003bd0:	40015000 	.word	0x40015000

08003bd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f023 0201 	bic.w	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ca0 <TIM_TI1_SetConfig+0xcc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d01b      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c08:	d017      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <TIM_TI1_SetConfig+0xd0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4a24      	ldr	r2, [pc, #144]	@ (8003ca8 <TIM_TI1_SetConfig+0xd4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00f      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4a23      	ldr	r2, [pc, #140]	@ (8003cac <TIM_TI1_SetConfig+0xd8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00b      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a22      	ldr	r2, [pc, #136]	@ (8003cb0 <TIM_TI1_SetConfig+0xdc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4a21      	ldr	r2, [pc, #132]	@ (8003cb4 <TIM_TI1_SetConfig+0xe0>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d003      	beq.n	8003c3a <TIM_TI1_SetConfig+0x66>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a20      	ldr	r2, [pc, #128]	@ (8003cb8 <TIM_TI1_SetConfig+0xe4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <TIM_TI1_SetConfig+0x6a>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <TIM_TI1_SetConfig+0x6c>
 8003c3e:	2300      	movs	r3, #0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d008      	beq.n	8003c56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	e003      	b.n	8003c5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f043 0301 	orr.w	r3, r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f023 030a 	bic.w	r3, r3, #10
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 030a 	and.w	r3, r3, #10
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	621a      	str	r2, [r3, #32]
}
 8003c92:	bf00      	nop
 8003c94:	371c      	adds	r7, #28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00
 8003ca4:	40000400 	.word	0x40000400
 8003ca8:	40000800 	.word	0x40000800
 8003cac:	40000c00 	.word	0x40000c00
 8003cb0:	40013400 	.word	0x40013400
 8003cb4:	40014000 	.word	0x40014000
 8003cb8:	40015000 	.word	0x40015000

08003cbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	f023 0201 	bic.w	r2, r3, #1
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f023 030a 	bic.w	r3, r3, #10
 8003cf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b087      	sub	sp, #28
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
 8003d26:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	f023 0210 	bic.w	r2, r3, #16
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	031b      	lsls	r3, r3, #12
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	697a      	ldr	r2, [r7, #20]
 8003d86:	621a      	str	r2, [r3, #32]
}
 8003d88:	bf00      	nop
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f023 0210 	bic.w	r2, r3, #16
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	031b      	lsls	r3, r3, #12
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	621a      	str	r2, [r3, #32]
}
 8003de8:	bf00      	nop
 8003dea:	371c      	adds	r7, #28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b087      	sub	sp, #28
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f023 0303 	bic.w	r3, r3, #3
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	021b      	lsls	r3, r3, #8
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	031b      	lsls	r3, r3, #12
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003ebe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	031b      	lsls	r3, r3, #12
 8003ec4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	621a      	str	r2, [r3, #32]
}
 8003eda:	bf00      	nop
 8003edc:	371c      	adds	r7, #28
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f043 0307 	orr.w	r3, r3, #7
 8003f0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	bf00      	nop
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e074      	b.n	80040ae <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a34      	ldr	r2, [pc, #208]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d009      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a33      	ldr	r2, [pc, #204]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d004      	beq.n	8004002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a31      	ldr	r2, [pc, #196]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d108      	bne.n	8004014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004008:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4313      	orrs	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800401a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a21      	ldr	r2, [pc, #132]	@ (80040bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d022      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d01d      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1f      	ldr	r2, [pc, #124]	@ (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d018      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1d      	ldr	r2, [pc, #116]	@ (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d013      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1c      	ldr	r2, [pc, #112]	@ (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00e      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a15      	ldr	r2, [pc, #84]	@ (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d009      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d004      	beq.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a11      	ldr	r2, [pc, #68]	@ (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d10c      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004088:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4313      	orrs	r3, r2
 8004092:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40013400 	.word	0x40013400
 80040c4:	40015000 	.word	0x40015000
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40000c00 	.word	0x40000c00
 80040d4:	40014000 	.word	0x40014000

080040d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040f0:	2302      	movs	r3, #2
 80040f2:	e078      	b.n	80041e6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4313      	orrs	r3, r2
 8004132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	041b      	lsls	r3, r3, #16
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a1c      	ldr	r2, [pc, #112]	@ (80041f4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a1b      	ldr	r2, [pc, #108]	@ (80041f8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a19      	ldr	r2, [pc, #100]	@ (80041fc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d11c      	bne.n	80041d4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	051b      	lsls	r3, r3, #20
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	40012c00 	.word	0x40012c00
 80041f8:	40013400 	.word	0x40013400
 80041fc:	40015000 	.word	0x40015000

08004200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e042      	b.n	8004298 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004218:	2b00      	cmp	r3, #0
 800421a:	d106      	bne.n	800422a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7fc fea3 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2224      	movs	r2, #36	@ 0x24
 800422e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fb7c 	bl	8004948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f87d 	bl	8004350 <UART_SetConfig>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e01b      	b.n	8004298 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800426e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689a      	ldr	r2, [r3, #8]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800427e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fbfb 	bl	8004a8c <UART_CheckIdleState>
 8004296:	4603      	mov	r3, r0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e04a      	b.n	8004348 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fc fe53 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2224      	movs	r2, #36	@ 0x24
 80042ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0201 	bic.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d002      	beq.n	80042f0 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 fb2c 	bl	8004948 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f82d 	bl	8004350 <UART_SetConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e023      	b.n	8004348 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800430e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689a      	ldr	r2, [r3, #8]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800431e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fba3 	bl	8004a8c <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004354:	b08c      	sub	sp, #48	@ 0x30
 8004356:	af00      	add	r7, sp, #0
 8004358:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	431a      	orrs	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	4313      	orrs	r3, r2
 8004376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4baa      	ldr	r3, [pc, #680]	@ (8004628 <UART_SetConfig+0x2d8>)
 8004380:	4013      	ands	r3, r2
 8004382:	697a      	ldr	r2, [r7, #20]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004388:	430b      	orrs	r3, r1
 800438a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a9f      	ldr	r2, [pc, #636]	@ (800462c <UART_SetConfig+0x2dc>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d004      	beq.n	80043bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b8:	4313      	orrs	r3, r2
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80043c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	f023 010f 	bic.w	r1, r3, #15
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a90      	ldr	r2, [pc, #576]	@ (8004630 <UART_SetConfig+0x2e0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d125      	bne.n	8004440 <UART_SetConfig+0xf0>
 80043f4:	4b8f      	ldr	r3, [pc, #572]	@ (8004634 <UART_SetConfig+0x2e4>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d81a      	bhi.n	8004438 <UART_SetConfig+0xe8>
 8004402:	a201      	add	r2, pc, #4	@ (adr r2, 8004408 <UART_SetConfig+0xb8>)
 8004404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004408:	08004419 	.word	0x08004419
 800440c:	08004429 	.word	0x08004429
 8004410:	08004421 	.word	0x08004421
 8004414:	08004431 	.word	0x08004431
 8004418:	2301      	movs	r3, #1
 800441a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800441e:	e116      	b.n	800464e <UART_SetConfig+0x2fe>
 8004420:	2302      	movs	r3, #2
 8004422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004426:	e112      	b.n	800464e <UART_SetConfig+0x2fe>
 8004428:	2304      	movs	r3, #4
 800442a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800442e:	e10e      	b.n	800464e <UART_SetConfig+0x2fe>
 8004430:	2308      	movs	r3, #8
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004436:	e10a      	b.n	800464e <UART_SetConfig+0x2fe>
 8004438:	2310      	movs	r3, #16
 800443a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800443e:	e106      	b.n	800464e <UART_SetConfig+0x2fe>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a7c      	ldr	r2, [pc, #496]	@ (8004638 <UART_SetConfig+0x2e8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d138      	bne.n	80044bc <UART_SetConfig+0x16c>
 800444a:	4b7a      	ldr	r3, [pc, #488]	@ (8004634 <UART_SetConfig+0x2e4>)
 800444c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004450:	f003 030c 	and.w	r3, r3, #12
 8004454:	2b0c      	cmp	r3, #12
 8004456:	d82d      	bhi.n	80044b4 <UART_SetConfig+0x164>
 8004458:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0x110>)
 800445a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445e:	bf00      	nop
 8004460:	08004495 	.word	0x08004495
 8004464:	080044b5 	.word	0x080044b5
 8004468:	080044b5 	.word	0x080044b5
 800446c:	080044b5 	.word	0x080044b5
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080044b5 	.word	0x080044b5
 8004478:	080044b5 	.word	0x080044b5
 800447c:	080044b5 	.word	0x080044b5
 8004480:	0800449d 	.word	0x0800449d
 8004484:	080044b5 	.word	0x080044b5
 8004488:	080044b5 	.word	0x080044b5
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044ad 	.word	0x080044ad
 8004494:	2300      	movs	r3, #0
 8004496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800449a:	e0d8      	b.n	800464e <UART_SetConfig+0x2fe>
 800449c:	2302      	movs	r3, #2
 800449e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044a2:	e0d4      	b.n	800464e <UART_SetConfig+0x2fe>
 80044a4:	2304      	movs	r3, #4
 80044a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044aa:	e0d0      	b.n	800464e <UART_SetConfig+0x2fe>
 80044ac:	2308      	movs	r3, #8
 80044ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044b2:	e0cc      	b.n	800464e <UART_SetConfig+0x2fe>
 80044b4:	2310      	movs	r3, #16
 80044b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044ba:	e0c8      	b.n	800464e <UART_SetConfig+0x2fe>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a5e      	ldr	r2, [pc, #376]	@ (800463c <UART_SetConfig+0x2ec>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d125      	bne.n	8004512 <UART_SetConfig+0x1c2>
 80044c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004634 <UART_SetConfig+0x2e4>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80044d0:	2b30      	cmp	r3, #48	@ 0x30
 80044d2:	d016      	beq.n	8004502 <UART_SetConfig+0x1b2>
 80044d4:	2b30      	cmp	r3, #48	@ 0x30
 80044d6:	d818      	bhi.n	800450a <UART_SetConfig+0x1ba>
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d00a      	beq.n	80044f2 <UART_SetConfig+0x1a2>
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d814      	bhi.n	800450a <UART_SetConfig+0x1ba>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <UART_SetConfig+0x19a>
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d008      	beq.n	80044fa <UART_SetConfig+0x1aa>
 80044e8:	e00f      	b.n	800450a <UART_SetConfig+0x1ba>
 80044ea:	2300      	movs	r3, #0
 80044ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f0:	e0ad      	b.n	800464e <UART_SetConfig+0x2fe>
 80044f2:	2302      	movs	r3, #2
 80044f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f8:	e0a9      	b.n	800464e <UART_SetConfig+0x2fe>
 80044fa:	2304      	movs	r3, #4
 80044fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004500:	e0a5      	b.n	800464e <UART_SetConfig+0x2fe>
 8004502:	2308      	movs	r3, #8
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004508:	e0a1      	b.n	800464e <UART_SetConfig+0x2fe>
 800450a:	2310      	movs	r3, #16
 800450c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004510:	e09d      	b.n	800464e <UART_SetConfig+0x2fe>
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4a      	ldr	r2, [pc, #296]	@ (8004640 <UART_SetConfig+0x2f0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d125      	bne.n	8004568 <UART_SetConfig+0x218>
 800451c:	4b45      	ldr	r3, [pc, #276]	@ (8004634 <UART_SetConfig+0x2e4>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004526:	2bc0      	cmp	r3, #192	@ 0xc0
 8004528:	d016      	beq.n	8004558 <UART_SetConfig+0x208>
 800452a:	2bc0      	cmp	r3, #192	@ 0xc0
 800452c:	d818      	bhi.n	8004560 <UART_SetConfig+0x210>
 800452e:	2b80      	cmp	r3, #128	@ 0x80
 8004530:	d00a      	beq.n	8004548 <UART_SetConfig+0x1f8>
 8004532:	2b80      	cmp	r3, #128	@ 0x80
 8004534:	d814      	bhi.n	8004560 <UART_SetConfig+0x210>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <UART_SetConfig+0x1f0>
 800453a:	2b40      	cmp	r3, #64	@ 0x40
 800453c:	d008      	beq.n	8004550 <UART_SetConfig+0x200>
 800453e:	e00f      	b.n	8004560 <UART_SetConfig+0x210>
 8004540:	2300      	movs	r3, #0
 8004542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004546:	e082      	b.n	800464e <UART_SetConfig+0x2fe>
 8004548:	2302      	movs	r3, #2
 800454a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800454e:	e07e      	b.n	800464e <UART_SetConfig+0x2fe>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004556:	e07a      	b.n	800464e <UART_SetConfig+0x2fe>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800455e:	e076      	b.n	800464e <UART_SetConfig+0x2fe>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004566:	e072      	b.n	800464e <UART_SetConfig+0x2fe>
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a35      	ldr	r2, [pc, #212]	@ (8004644 <UART_SetConfig+0x2f4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d12a      	bne.n	80045c8 <UART_SetConfig+0x278>
 8004572:	4b30      	ldr	r3, [pc, #192]	@ (8004634 <UART_SetConfig+0x2e4>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800457c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004580:	d01a      	beq.n	80045b8 <UART_SetConfig+0x268>
 8004582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004586:	d81b      	bhi.n	80045c0 <UART_SetConfig+0x270>
 8004588:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800458c:	d00c      	beq.n	80045a8 <UART_SetConfig+0x258>
 800458e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004592:	d815      	bhi.n	80045c0 <UART_SetConfig+0x270>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <UART_SetConfig+0x250>
 8004598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459c:	d008      	beq.n	80045b0 <UART_SetConfig+0x260>
 800459e:	e00f      	b.n	80045c0 <UART_SetConfig+0x270>
 80045a0:	2300      	movs	r3, #0
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e052      	b.n	800464e <UART_SetConfig+0x2fe>
 80045a8:	2302      	movs	r3, #2
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ae:	e04e      	b.n	800464e <UART_SetConfig+0x2fe>
 80045b0:	2304      	movs	r3, #4
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b6:	e04a      	b.n	800464e <UART_SetConfig+0x2fe>
 80045b8:	2308      	movs	r3, #8
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045be:	e046      	b.n	800464e <UART_SetConfig+0x2fe>
 80045c0:	2310      	movs	r3, #16
 80045c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045c6:	e042      	b.n	800464e <UART_SetConfig+0x2fe>
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a17      	ldr	r2, [pc, #92]	@ (800462c <UART_SetConfig+0x2dc>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d13a      	bne.n	8004648 <UART_SetConfig+0x2f8>
 80045d2:	4b18      	ldr	r3, [pc, #96]	@ (8004634 <UART_SetConfig+0x2e4>)
 80045d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80045dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045e0:	d01a      	beq.n	8004618 <UART_SetConfig+0x2c8>
 80045e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80045e6:	d81b      	bhi.n	8004620 <UART_SetConfig+0x2d0>
 80045e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ec:	d00c      	beq.n	8004608 <UART_SetConfig+0x2b8>
 80045ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f2:	d815      	bhi.n	8004620 <UART_SetConfig+0x2d0>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <UART_SetConfig+0x2b0>
 80045f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045fc:	d008      	beq.n	8004610 <UART_SetConfig+0x2c0>
 80045fe:	e00f      	b.n	8004620 <UART_SetConfig+0x2d0>
 8004600:	2300      	movs	r3, #0
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004606:	e022      	b.n	800464e <UART_SetConfig+0x2fe>
 8004608:	2302      	movs	r3, #2
 800460a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460e:	e01e      	b.n	800464e <UART_SetConfig+0x2fe>
 8004610:	2304      	movs	r3, #4
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004616:	e01a      	b.n	800464e <UART_SetConfig+0x2fe>
 8004618:	2308      	movs	r3, #8
 800461a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461e:	e016      	b.n	800464e <UART_SetConfig+0x2fe>
 8004620:	2310      	movs	r3, #16
 8004622:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004626:	e012      	b.n	800464e <UART_SetConfig+0x2fe>
 8004628:	cfff69f3 	.word	0xcfff69f3
 800462c:	40008000 	.word	0x40008000
 8004630:	40013800 	.word	0x40013800
 8004634:	40021000 	.word	0x40021000
 8004638:	40004400 	.word	0x40004400
 800463c:	40004800 	.word	0x40004800
 8004640:	40004c00 	.word	0x40004c00
 8004644:	40005000 	.word	0x40005000
 8004648:	2310      	movs	r3, #16
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4aae      	ldr	r2, [pc, #696]	@ (800490c <UART_SetConfig+0x5bc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	f040 8097 	bne.w	8004788 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800465a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800465e:	2b08      	cmp	r3, #8
 8004660:	d823      	bhi.n	80046aa <UART_SetConfig+0x35a>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x318>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468d 	.word	0x0800468d
 800466c:	080046ab 	.word	0x080046ab
 8004670:	08004695 	.word	0x08004695
 8004674:	080046ab 	.word	0x080046ab
 8004678:	0800469b 	.word	0x0800469b
 800467c:	080046ab 	.word	0x080046ab
 8004680:	080046ab 	.word	0x080046ab
 8004684:	080046ab 	.word	0x080046ab
 8004688:	080046a3 	.word	0x080046a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fd ff12 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8004690:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004692:	e010      	b.n	80046b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004694:	4b9e      	ldr	r3, [pc, #632]	@ (8004910 <UART_SetConfig+0x5c0>)
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004698:	e00d      	b.n	80046b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800469a:	f7fd fe9d 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 800469e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046a0:	e009      	b.n	80046b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046a8:	e005      	b.n	80046b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80046b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 8130 	beq.w	800491e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c2:	4a94      	ldr	r2, [pc, #592]	@ (8004914 <UART_SetConfig+0x5c4>)
 80046c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046c8:	461a      	mov	r2, r3
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d305      	bcc.n	80046ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d903      	bls.n	80046f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80046f4:	e113      	b.n	800491e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f8:	2200      	movs	r2, #0
 80046fa:	60bb      	str	r3, [r7, #8]
 80046fc:	60fa      	str	r2, [r7, #12]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	4a84      	ldr	r2, [pc, #528]	@ (8004914 <UART_SetConfig+0x5c4>)
 8004704:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004708:	b29b      	uxth	r3, r3
 800470a:	2200      	movs	r2, #0
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	607a      	str	r2, [r7, #4]
 8004710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004714:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004718:	f7fb fd7e 	bl	8000218 <__aeabi_uldivmod>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	020b      	lsls	r3, r1, #8
 800472e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004732:	0202      	lsls	r2, r0, #8
 8004734:	6979      	ldr	r1, [r7, #20]
 8004736:	6849      	ldr	r1, [r1, #4]
 8004738:	0849      	lsrs	r1, r1, #1
 800473a:	2000      	movs	r0, #0
 800473c:	460c      	mov	r4, r1
 800473e:	4605      	mov	r5, r0
 8004740:	eb12 0804 	adds.w	r8, r2, r4
 8004744:	eb43 0905 	adc.w	r9, r3, r5
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	469a      	mov	sl, r3
 8004750:	4693      	mov	fp, r2
 8004752:	4652      	mov	r2, sl
 8004754:	465b      	mov	r3, fp
 8004756:	4640      	mov	r0, r8
 8004758:	4649      	mov	r1, r9
 800475a:	f7fb fd5d 	bl	8000218 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4613      	mov	r3, r2
 8004764:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800476c:	d308      	bcc.n	8004780 <UART_SetConfig+0x430>
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004774:	d204      	bcs.n	8004780 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6a3a      	ldr	r2, [r7, #32]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	e0ce      	b.n	800491e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004786:	e0ca      	b.n	800491e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004790:	d166      	bne.n	8004860 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004792:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004796:	2b08      	cmp	r3, #8
 8004798:	d827      	bhi.n	80047ea <UART_SetConfig+0x49a>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <UART_SetConfig+0x450>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047cd 	.word	0x080047cd
 80047a8:	080047d5 	.word	0x080047d5
 80047ac:	080047eb 	.word	0x080047eb
 80047b0:	080047db 	.word	0x080047db
 80047b4:	080047eb 	.word	0x080047eb
 80047b8:	080047eb 	.word	0x080047eb
 80047bc:	080047eb 	.word	0x080047eb
 80047c0:	080047e3 	.word	0x080047e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fd fe76 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80047c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047ca:	e014      	b.n	80047f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047cc:	f7fd fe88 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80047d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047d2:	e010      	b.n	80047f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047d4:	4b4e      	ldr	r3, [pc, #312]	@ (8004910 <UART_SetConfig+0x5c0>)
 80047d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047d8:	e00d      	b.n	80047f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047da:	f7fd fdfd 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 80047de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80047e0:	e009      	b.n	80047f6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80047e8:	e005      	b.n	80047f6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80047f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8090 	beq.w	800491e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	4a44      	ldr	r2, [pc, #272]	@ (8004914 <UART_SetConfig+0x5c4>)
 8004804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004808:	461a      	mov	r2, r3
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004810:	005a      	lsls	r2, r3, #1
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	085b      	lsrs	r3, r3, #1
 8004818:	441a      	add	r2, r3
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004822:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2b0f      	cmp	r3, #15
 8004828:	d916      	bls.n	8004858 <UART_SetConfig+0x508>
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004830:	d212      	bcs.n	8004858 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	b29b      	uxth	r3, r3
 8004836:	f023 030f 	bic.w	r3, r3, #15
 800483a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	085b      	lsrs	r3, r3, #1
 8004840:	b29b      	uxth	r3, r3
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	b29a      	uxth	r2, r3
 8004848:	8bfb      	ldrh	r3, [r7, #30]
 800484a:	4313      	orrs	r3, r2
 800484c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	8bfa      	ldrh	r2, [r7, #30]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e062      	b.n	800491e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800485e:	e05e      	b.n	800491e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004860:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004864:	2b08      	cmp	r3, #8
 8004866:	d828      	bhi.n	80048ba <UART_SetConfig+0x56a>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <UART_SetConfig+0x520>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7fd fe0e 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800489a:	e014      	b.n	80048c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fd fe20 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 80048a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048a2:	e010      	b.n	80048c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004910 <UART_SetConfig+0x5c0>)
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048a8:	e00d      	b.n	80048c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7fd fd95 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 80048ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048b0:	e009      	b.n	80048c6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80048b8:	e005      	b.n	80048c6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80048c4:	bf00      	nop
    }

    if (pclk != 0U)
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d028      	beq.n	800491e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	4a10      	ldr	r2, [pc, #64]	@ (8004914 <UART_SetConfig+0x5c4>)
 80048d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d6:	461a      	mov	r2, r3
 80048d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048da:	fbb3 f2f2 	udiv	r2, r3, r2
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	085b      	lsrs	r3, r3, #1
 80048e4:	441a      	add	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d910      	bls.n	8004918 <UART_SetConfig+0x5c8>
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048fc:	d20c      	bcs.n	8004918 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	b29a      	uxth	r2, r3
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	60da      	str	r2, [r3, #12]
 8004908:	e009      	b.n	800491e <UART_SetConfig+0x5ce>
 800490a:	bf00      	nop
 800490c:	40008000 	.word	0x40008000
 8004910:	00f42400 	.word	0x00f42400
 8004914:	08005014 	.word	0x08005014
      }
      else
      {
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2201      	movs	r2, #1
 8004922:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2201      	movs	r2, #1
 800492a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2200      	movs	r2, #0
 8004938:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800493a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	@ 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004948 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01a      	beq.n	8004a5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a46:	d10a      	bne.n	8004a5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b098      	sub	sp, #96	@ 0x60
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a9c:	f7fc fb8e 	bl	80011bc <HAL_GetTick>
 8004aa0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0308 	and.w	r3, r3, #8
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d12f      	bne.n	8004b10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ab0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f88e 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d022      	beq.n	8004b10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ada:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ade:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004aee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004af6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e6      	bne.n	8004aca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e063      	b.n	8004bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d149      	bne.n	8004bb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b26:	2200      	movs	r2, #0
 8004b28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f857 	bl	8004be0 <UART_WaitOnFlagUntilTimeout>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d03c      	beq.n	8004bb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	623b      	str	r3, [r7, #32]
   return(result);
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e6      	bne.n	8004b38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 0301 	bic.w	r3, r3, #1
 8004b80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b8a:	61fa      	str	r2, [r7, #28]
 8004b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	617b      	str	r3, [r7, #20]
   return(result);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e5      	bne.n	8004b6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2220      	movs	r2, #32
 8004ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e012      	b.n	8004bd8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3758      	adds	r7, #88	@ 0x58
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf0:	e04f      	b.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d04b      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfa:	f7fc fadf 	bl	80011bc <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d302      	bcc.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e04e      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d037      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b80      	cmp	r3, #128	@ 0x80
 8004c26:	d034      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2b40      	cmp	r3, #64	@ 0x40
 8004c2c:	d031      	beq.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69db      	ldr	r3, [r3, #28]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d110      	bne.n	8004c5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2208      	movs	r2, #8
 8004c42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 f838 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e029      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6c:	d111      	bne.n	8004c92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f81e 	bl	8004cba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e00f      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	bf0c      	ite	eq
 8004ca2:	2301      	moveq	r3, #1
 8004ca4:	2300      	movne	r3, #0
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	461a      	mov	r2, r3
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d0a0      	beq.n	8004bf2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b095      	sub	sp, #84	@ 0x54
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ce2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e6      	bne.n	8004cc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3308      	adds	r3, #8
 8004cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e3      	bne.n	8004cf4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d118      	bne.n	8004d66 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004d7a:	bf00      	nop
 8004d7c:	3754      	adds	r7, #84	@ 0x54
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e027      	b.n	8004dec <HAL_UARTEx_DisableFifoMode+0x66>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2224      	movs	r2, #36	@ 0x24
 8004da8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004dca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e02d      	b.n	8004e6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2224      	movs	r2, #36	@ 0x24
 8004e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	683a      	ldr	r2, [r7, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f84f 	bl	8004ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b084      	sub	sp, #16
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d101      	bne.n	8004e8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	e02d      	b.n	8004ee8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2224      	movs	r2, #36	@ 0x24
 8004e98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0201 	bic.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f811 	bl	8004ef0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68fa      	ldr	r2, [r7, #12]
 8004ed4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d108      	bne.n	8004f12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f10:	e031      	b.n	8004f76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f12:	2308      	movs	r3, #8
 8004f14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f16:	2308      	movs	r3, #8
 8004f18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	0e5b      	lsrs	r3, r3, #25
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	0f5b      	lsrs	r3, r3, #29
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	7b3a      	ldrb	r2, [r7, #12]
 8004f3e:	4911      	ldr	r1, [pc, #68]	@ (8004f84 <UARTEx_SetNbDataToProcess+0x94>)
 8004f40:	5c8a      	ldrb	r2, [r1, r2]
 8004f42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f46:	7b3a      	ldrb	r2, [r7, #12]
 8004f48:	490f      	ldr	r1, [pc, #60]	@ (8004f88 <UARTEx_SetNbDataToProcess+0x98>)
 8004f4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	7b7a      	ldrb	r2, [r7, #13]
 8004f5c:	4909      	ldr	r1, [pc, #36]	@ (8004f84 <UARTEx_SetNbDataToProcess+0x94>)
 8004f5e:	5c8a      	ldrb	r2, [r1, r2]
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f64:	7b7a      	ldrb	r2, [r7, #13]
 8004f66:	4908      	ldr	r1, [pc, #32]	@ (8004f88 <UARTEx_SetNbDataToProcess+0x98>)
 8004f68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004f76:	bf00      	nop
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	0800502c 	.word	0x0800502c
 8004f88:	08005034 	.word	0x08005034

08004f8c <memset>:
 8004f8c:	4402      	add	r2, r0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d100      	bne.n	8004f96 <memset+0xa>
 8004f94:	4770      	bx	lr
 8004f96:	f803 1b01 	strb.w	r1, [r3], #1
 8004f9a:	e7f9      	b.n	8004f90 <memset+0x4>

08004f9c <__libc_init_array>:
 8004f9c:	b570      	push	{r4, r5, r6, lr}
 8004f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8004fd4 <__libc_init_array+0x38>)
 8004fa0:	4c0d      	ldr	r4, [pc, #52]	@ (8004fd8 <__libc_init_array+0x3c>)
 8004fa2:	1b64      	subs	r4, r4, r5
 8004fa4:	10a4      	asrs	r4, r4, #2
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	42a6      	cmp	r6, r4
 8004faa:	d109      	bne.n	8004fc0 <__libc_init_array+0x24>
 8004fac:	4d0b      	ldr	r5, [pc, #44]	@ (8004fdc <__libc_init_array+0x40>)
 8004fae:	4c0c      	ldr	r4, [pc, #48]	@ (8004fe0 <__libc_init_array+0x44>)
 8004fb0:	f000 f818 	bl	8004fe4 <_init>
 8004fb4:	1b64      	subs	r4, r4, r5
 8004fb6:	10a4      	asrs	r4, r4, #2
 8004fb8:	2600      	movs	r6, #0
 8004fba:	42a6      	cmp	r6, r4
 8004fbc:	d105      	bne.n	8004fca <__libc_init_array+0x2e>
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}
 8004fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fc4:	4798      	blx	r3
 8004fc6:	3601      	adds	r6, #1
 8004fc8:	e7ee      	b.n	8004fa8 <__libc_init_array+0xc>
 8004fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fce:	4798      	blx	r3
 8004fd0:	3601      	adds	r6, #1
 8004fd2:	e7f2      	b.n	8004fba <__libc_init_array+0x1e>
 8004fd4:	08005044 	.word	0x08005044
 8004fd8:	08005044 	.word	0x08005044
 8004fdc:	08005044 	.word	0x08005044
 8004fe0:	08005048 	.word	0x08005048

08004fe4 <_init>:
 8004fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fe6:	bf00      	nop
 8004fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fea:	bc08      	pop	{r3}
 8004fec:	469e      	mov	lr, r3
 8004fee:	4770      	bx	lr

08004ff0 <_fini>:
 8004ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ff2:	bf00      	nop
 8004ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff6:	bc08      	pop	{r3}
 8004ff8:	469e      	mov	lr, r3
 8004ffa:	4770      	bx	lr
