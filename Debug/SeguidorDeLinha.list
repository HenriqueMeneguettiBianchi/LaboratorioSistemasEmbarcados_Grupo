
SeguidorDeLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e0  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080054b8  080054b8  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054f8  080054f8  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080054f8  080054f8  000064f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005500  08005500  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005500  08005500  00006500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005508  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  2000000c  08005514  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08005514  00007350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001733b  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030b1  00000000  00000000  0001e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  00021428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa5  00000000  00000000  00022828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027343  00000000  00000000  000237cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8a7  00000000  00000000  0004ab10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feff9  00000000  00000000  000653b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001643b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005408  00000000  00000000  001643f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  001697fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080054a0 	.word	0x080054a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080054a0 	.word	0x080054a0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800050e:	4b16      	ldr	r3, [pc, #88]	@ (8000568 <MX_DMA_Init+0x60>)
 8000510:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <MX_DMA_Init+0x60>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	6493      	str	r3, [r2, #72]	@ 0x48
 800051a:	4b13      	ldr	r3, [pc, #76]	@ (8000568 <MX_DMA_Init+0x60>)
 800051c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800051e:	f003 0304 	and.w	r3, r3, #4
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x60>)
 8000528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x60>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6493      	str	r3, [r2, #72]	@ 0x48
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x60>)
 8000534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f000 ffc5 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f000 ffdc 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	200c      	movs	r0, #12
 8000554:	f000 ffbd 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000558:	200c      	movs	r0, #12
 800055a:	f000 ffd4 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40021000 	.word	0x40021000

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <MX_GPIO_Init+0x104>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000586:	4a3a      	ldr	r2, [pc, #232]	@ (8000670 <MX_GPIO_Init+0x104>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800058e:	4b38      	ldr	r3, [pc, #224]	@ (8000670 <MX_GPIO_Init+0x104>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	4b35      	ldr	r3, [pc, #212]	@ (8000670 <MX_GPIO_Init+0x104>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800059e:	4a34      	ldr	r2, [pc, #208]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005a6:	4b32      	ldr	r3, [pc, #200]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005aa:	f003 0320 	and.w	r3, r3, #32
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b6:	4a2e      	ldr	r2, [pc, #184]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ce:	4a28      	ldr	r2, [pc, #160]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005d6:	4b26      	ldr	r3, [pc, #152]	@ (8000670 <MX_GPIO_Init+0x104>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 80005e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ec:	f001 fae2 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80005f6:	481f      	ldr	r0, [pc, #124]	@ (8000674 <MX_GPIO_Init+0x108>)
 80005f8:	f001 fadc 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000602:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4819      	ldr	r0, [pc, #100]	@ (8000678 <MX_GPIO_Init+0x10c>)
 8000614:	f001 f94c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin;
 8000618:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000634:	f001 f93c 	bl	80018b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin;
 8000638:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 800063c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	4808      	ldr	r0, [pc, #32]	@ (8000674 <MX_GPIO_Init+0x108>)
 8000652:	f001 f92d 	bl	80018b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	2028      	movs	r0, #40	@ 0x28
 800065c:	f000 ff39 	bl	80014d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000660:	2028      	movs	r0, #40	@ 0x28
 8000662:	f000 ff50 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	48000400 	.word	0x48000400
 8000678:	48000800 	.word	0x48000800

0800067c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_I2C2_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	@ (80006f8 <MX_I2C2_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800068c:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_I2C2_Init+0x74>)
 8000694:	2201      	movs	r2, #1
 8000696:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000698:	4b15      	ldr	r3, [pc, #84]	@ (80006f0 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a4:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006b8:	f001 fab7 	bl	8001c2a <HAL_I2C_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006c2:	f000 f91c 	bl	80008fe <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c6:	2100      	movs	r1, #0
 80006c8:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006ca:	f001 fb49 	bl	8001d60 <HAL_I2CEx_ConfigAnalogFilter>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006d4:	f000 f913 	bl	80008fe <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_I2C2_Init+0x74>)
 80006dc:	f001 fb8b 	bl	8001df6 <HAL_I2CEx_ConfigDigitalFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f90a 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000028 	.word	0x20000028
 80006f4:	40005800 	.word	0x40005800
 80006f8:	30a0a7fb 	.word	0x30a0a7fb

080006fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b0a0      	sub	sp, #128	@ 0x80
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	2254      	movs	r2, #84	@ 0x54
 800071a:	2100      	movs	r1, #0
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fe93 	bl	8005448 <memset>
  if(i2cHandle->Instance==I2C2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a2d      	ldr	r2, [pc, #180]	@ (80007dc <HAL_I2C_MspInit+0xe0>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d153      	bne.n	80007d4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800072c:	2380      	movs	r3, #128	@ 0x80
 800072e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	4618      	mov	r0, r3
 800073a:	f002 f98b 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000744:	f000 f8db 	bl	80008fe <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 800074a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074c:	4a24      	ldr	r2, [pc, #144]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000754:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 8000756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	617b      	str	r3, [r7, #20]
 800075e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 8000762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000764:	4a1e      	ldr	r2, [pc, #120]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800076c:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 800076e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000770:	f003 0301 	and.w	r3, r3, #1
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8000778:	2310      	movs	r3, #16
 800077a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800077c:	2312      	movs	r3, #18
 800077e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000788:	2304      	movs	r3, #4
 800078a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 800078c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000790:	4619      	mov	r1, r3
 8000792:	4814      	ldr	r0, [pc, #80]	@ (80007e4 <HAL_I2C_MspInit+0xe8>)
 8000794:	f001 f88c 	bl	80018b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000798:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800079c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800079e:	2312      	movs	r3, #18
 80007a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80007aa:	2304      	movs	r3, #4
 80007ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007b2:	4619      	mov	r1, r3
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b8:	f001 f87a 	bl	80018b0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 80007be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c0:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 80007c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_I2C_MspInit+0xe4>)
 80007ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007d0:	60fb      	str	r3, [r7, #12]
 80007d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80007d4:	bf00      	nop
 80007d6:	3780      	adds	r7, #128	@ 0x80
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40005800 	.word	0x40005800
 80007e0:	40021000 	.word	0x40021000
 80007e4:	48000800 	.word	0x48000800

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f000 fd25 	bl	800123a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f83a 	bl	8000868 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f7ff feba 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80007f8:	f7ff fe86 	bl	8000508 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80007fc:	f000 fb6a 	bl	8000ed4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000800:	f000 f958 	bl	8000ab4 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000804:	f000 fa12 	bl	8000c2c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000808:	f000 fa5a 	bl	8000cc0 <MX_TIM17_Init>
  MX_I2C2_Init();
 800080c:	f7ff ff36 	bl	800067c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000810:	f000 fbaa 	bl	8000f68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 8000814:	4812      	ldr	r0, [pc, #72]	@ (8000860 <main+0x78>)
 8000816:	f000 f879 	bl	800090c <vMotorInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  vSetRodaEsquerdaDC(1.0);
 800081a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800081e:	f000 f88b 	bl	8000938 <vSetRodaEsquerdaDC>
	  vSetRodaDireitaDC(1.0);
 8000822:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8000826:	f000 f8a5 	bl	8000974 <vSetRodaDireitaDC>
	  //IN1 = 1 e IN2 = 0 : TRAS MOTOR A
	  //IN1 = 0 e IN2 = 1 : FRENTE MOTOR A
	  //IN3 = 1 e IN4 = 0 : TRAS MOTOR B
	  //IN3 = 0 e IN4 = 1 : FRENTE MOTOR B
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000830:	480c      	ldr	r0, [pc, #48]	@ (8000864 <main+0x7c>)
 8000832:	f001 f9bf 	bl	8001bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800083c:	4809      	ldr	r0, [pc, #36]	@ (8000864 <main+0x7c>)
 800083e:	f001 f9b9 	bl	8001bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	4807      	ldr	r0, [pc, #28]	@ (8000864 <main+0x7c>)
 8000848:	f001 f9b4 	bl	8001bb4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000852:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000856:	f001 f9ad 	bl	8001bb4 <HAL_GPIO_WritePin>
	  vSetRodaEsquerdaDC(1.0);
 800085a:	bf00      	nop
 800085c:	e7dd      	b.n	800081a <main+0x32>
 800085e:	bf00      	nop
 8000860:	20000080 	.word	0x20000080
 8000864:	48000400 	.word	0x48000400

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b094      	sub	sp, #80	@ 0x50
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	2238      	movs	r2, #56	@ 0x38
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f004 fde6 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800088a:	2000      	movs	r0, #0
 800088c:	f001 fb00 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008a6:	2304      	movs	r3, #4
 80008a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008aa:	2355      	movs	r3, #85	@ 0x55
 80008ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	4618      	mov	r0, r3
 80008c0:	f001 fb9a 	bl	8001ff8 <HAL_RCC_OscConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008ca:	f000 f818 	bl	80008fe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ce:	230f      	movs	r3, #15
 80008d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d2:	2303      	movs	r3, #3
 80008d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2104      	movs	r1, #4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fe98 	bl	800261c <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008f2:	f000 f804 	bl	80008fe <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	@ 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000902:	b672      	cpsid	i
}
 8000904:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000906:	bf00      	nop
 8000908:	e7fd      	b.n	8000906 <Error_Handler+0x8>
	...

0800090c <vMotorInit>:
// Input parameters:    *htimRE -> TIM handler da roda esquerda //
//                      *htimRD -> TIM handler da roda direita  //
// Output parameters:   none                                    //
// *************************************************************//
void vMotorInit(TIM_HandleTypeDef *htimMotor)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  htimRodas = htimMotor;
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <vMotorInit+0x28>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_1);
 800091a:	2100      	movs	r1, #0
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f002 fb9f 	bl	8003060 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_2);
 8000922:	2104      	movs	r1, #4
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f002 fb9b 	bl	8003060 <HAL_TIM_PWM_Start>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2000007c 	.word	0x2000007c

08000938 <vSetRodaEsquerdaDC>:
// Method description: 	Seta o duty cycle da roda esquerda      //
// Input parameters:	  fRodaEsquerdaDC -> duty cylce desejado  //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaEsquerdaDC(float fRodaEsquerdaDC)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 8000942:	edd7 7a01 	vldr	s15, [r7, #4]
 8000946:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800096c <vSetRodaEsquerdaDC+0x34>
 800094a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094e:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <vSetRodaEsquerdaDC+0x38>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000958:	ee17 2a90 	vmov	r2, s15
 800095c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	447a0000 	.word	0x447a0000
 8000970:	2000007c 	.word	0x2000007c

08000974 <vSetRodaDireitaDC>:
// Method description: 	Seta o duty cycle da roda direita       //
// Input parameters:	  fRodaDireitaDC -> duty cylce desejado   //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaDireitaDC(float fRodaDireitaDC)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 800097e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000982:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80009a8 <vSetRodaDireitaDC+0x34>
 8000986:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <vSetRodaDireitaDC+0x38>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000994:	ee17 2a90 	vmov	r2, s15
 8000998:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	447a0000 	.word	0x447a0000
 80009ac:	2000007c 	.word	0x2000007c

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009e6:	f001 faf7 	bl	8001fd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f000 fc47 	bl	80012e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <DMA1_Channel1_IRQHandler+0x10>)
 8000a5e:	f000 fe15 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2000028c 	.word	0x2000028c

08000a6c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <DMA1_Channel2_IRQHandler+0x10>)
 8000a72:	f000 fe0b 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200002ec 	.word	0x200002ec

08000a80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a84:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a88:	f001 f8ac 	bl	8001be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b09c      	sub	sp, #112	@ 0x70
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
 8000ae4:	615a      	str	r2, [r3, #20]
 8000ae6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2234      	movs	r2, #52	@ 0x34
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f004 fcaa 	bl	8005448 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000af6:	4a4c      	ldr	r2, [pc, #304]	@ (8000c28 <MX_TIM1_Init+0x174>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000afa:	4b4a      	ldr	r3, [pc, #296]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000afc:	22a9      	movs	r2, #169	@ 0xa9
 8000afe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b48      	ldr	r3, [pc, #288]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b06:	4b47      	ldr	r3, [pc, #284]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b45      	ldr	r3, [pc, #276]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b14:	4b43      	ldr	r3, [pc, #268]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b42      	ldr	r3, [pc, #264]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b20:	4840      	ldr	r0, [pc, #256]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b22:	f002 f9e5 	bl	8002ef0 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b2c:	f7ff fee7 	bl	80008fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b34:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4839      	ldr	r0, [pc, #228]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b3e:	f002 fdb3 	bl	80036a8 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b48:	f7ff fed9 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b4c:	4835      	ldr	r0, [pc, #212]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b4e:	f002 fa26 	bl	8002f9e <HAL_TIM_PWM_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b58:	f7ff fed1 	bl	80008fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	482d      	ldr	r0, [pc, #180]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000b70:	f003 fc7a 	bl	8004468 <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b7a:	f7ff fec0 	bl	80008fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	2360      	movs	r3, #96	@ 0x60
 8000b80:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4820      	ldr	r0, [pc, #128]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000ba4:	f002 fc6c 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000bae:	f7ff fea6 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4619      	mov	r1, r3
 8000bba:	481a      	ldr	r0, [pc, #104]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000bbc:	f002 fc60 	bl	8003480 <HAL_TIM_PWM_ConfigChannel>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bc6:	f7ff fe9a 	bl	80008fe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000c08:	f003 fcc4 	bl	8004594 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000c12:	f7ff fe74 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c16:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <MX_TIM1_Init+0x170>)
 8000c18:	f000 f924 	bl	8000e64 <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3770      	adds	r7, #112	@ 0x70
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000080 	.word	0x20000080
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c32:	463b      	mov	r3, r7
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c40:	4a1e      	ldr	r2, [pc, #120]	@ (8000cbc <MX_TIM16_Init+0x90>)
 8000c42:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8000c44:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c46:	22a9      	movs	r2, #169	@ 0xa9
 8000c48:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9999;
 8000c50:	4b19      	ldr	r3, [pc, #100]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c52:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000c56:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c5e:	4b16      	ldr	r3, [pc, #88]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c6a:	4813      	ldr	r0, [pc, #76]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c6c:	f002 f940 	bl	8002ef0 <HAL_TIM_Base_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000c76:	f7ff fe42 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000c7a:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000c7c:	f002 fb02 	bl	8003284 <HAL_TIM_IC_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000c86:	f7ff fe3a 	bl	80008fe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_TIM16_Init+0x8c>)
 8000ca2:	f002 fb50 	bl	8003346 <HAL_TIM_IC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000cac:	f7ff fe27 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200000cc 	.word	0x200000cc
 8000cbc:	40014400 	.word	0x40014400

08000cc0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000cd4:	4a1e      	ldr	r2, [pc, #120]	@ (8000d50 <MX_TIM17_Init+0x90>)
 8000cd6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000cda:	22a9      	movs	r2, #169	@ 0xa9
 8000cdc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 9999;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000ce6:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000cea:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000cfe:	4813      	ldr	r0, [pc, #76]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000d00:	f002 f8f6 	bl	8002ef0 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8000d0a:	f7ff fdf8 	bl	80008fe <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8000d0e:	480f      	ldr	r0, [pc, #60]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000d10:	f002 fab8 	bl	8003284 <HAL_TIM_IC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000d1a:	f7ff fdf0 	bl	80008fe <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d22:	2301      	movs	r3, #1
 8000d24:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000d2e:	463b      	mov	r3, r7
 8000d30:	2200      	movs	r2, #0
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_TIM17_Init+0x8c>)
 8000d36:	f002 fb06 	bl	8003346 <HAL_TIM_IC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8000d40:	f7ff fddd 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000118 	.word	0x20000118
 8000d50:	40014800 	.word	0x40014800

08000d54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	@ 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a38      	ldr	r2, [pc, #224]	@ (8000e54 <HAL_TIM_Base_MspInit+0x100>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d10c      	bne.n	8000d90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d76:	4b38      	ldr	r3, [pc, #224]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7a:	4a37      	ldr	r2, [pc, #220]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000d7c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d82:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d8a:	61bb      	str	r3, [r7, #24]
 8000d8c:	69bb      	ldr	r3, [r7, #24]

  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000d8e:	e05c      	b.n	8000e4a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM16)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a31      	ldr	r2, [pc, #196]	@ (8000e5c <HAL_TIM_Base_MspInit+0x108>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d129      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d9a:	4b2f      	ldr	r3, [pc, #188]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000da4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000da6:	4b2c      	ldr	r3, [pc, #176]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db6:	4a28      	ldr	r2, [pc, #160]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dca:	2340      	movs	r3, #64	@ 0x40
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	4619      	mov	r1, r3
 8000de4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de8:	f000 fd62 	bl	80018b0 <HAL_GPIO_Init>
}
 8000dec:	e02d      	b.n	8000e4a <HAL_TIM_Base_MspInit+0xf6>
  else if(tim_baseHandle->Instance==TIM17)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <HAL_TIM_Base_MspInit+0x10c>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d128      	bne.n	8000e4a <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfc:	4a16      	ldr	r2, [pc, #88]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000dfe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e14:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_TIM_Base_MspInit+0x104>)
 8000e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e28:	2380      	movs	r3, #128	@ 0x80
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 031c 	add.w	r3, r7, #28
 8000e40:	4619      	mov	r1, r3
 8000e42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e46:	f000 fd33 	bl	80018b0 <HAL_GPIO_Init>
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	@ 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40012c00 	.word	0x40012c00
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40014400 	.word	0x40014400
 8000e60:	40014800 	.word	0x40014800

08000e64 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b088      	sub	sp, #32
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a11      	ldr	r2, [pc, #68]	@ (8000ec8 <HAL_TIM_MspPostInit+0x64>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d11b      	bne.n	8000ebe <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <HAL_TIM_MspPostInit+0x68>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	@ (8000ed0 <HAL_TIM_MspPostInit+0x6c>)
 8000eba:	f000 fcf9 	bl	80018b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ebe:	bf00      	nop
 8000ec0:	3720      	adds	r7, #32
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40012c00 	.word	0x40012c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800

08000ed4 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000eda:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <MX_LPUART1_UART_Init+0x90>)
 8000edc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ede:	4b20      	ldr	r3, [pc, #128]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f16:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f18:	f003 fbd0 	bl	80046bc <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f22:	f7ff fcec 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f26:	2100      	movs	r1, #0
 8000f28:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f2a:	f004 f9c3 	bl	80052b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f34:	f7ff fce3 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f3c:	f004 f9f8 	bl	8005330 <HAL_UARTEx_SetRxFifoThreshold>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f46:	f7ff fcda 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <MX_LPUART1_UART_Init+0x8c>)
 8000f4c:	f004 f979 	bl	8005242 <HAL_UARTEx_DisableFifoMode>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f56:	f7ff fcd2 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000164 	.word	0x20000164
 8000f64:	40008000 	.word	0x40008000

08000f68 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f6e:	4a23      	ldr	r2, [pc, #140]	@ (8000ffc <MX_USART1_UART_Init+0x94>)
 8000f70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f8e:	220c      	movs	r2, #12
 8000f90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f92:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000fb0:	4811      	ldr	r0, [pc, #68]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fb2:	f003 fbd3 	bl	800475c <HAL_HalfDuplex_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fbc:	f7ff fc9f 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fc4:	f004 f976 	bl	80052b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fce:	f7ff fc96 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4808      	ldr	r0, [pc, #32]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fd6:	f004 f9ab 	bl	8005330 <HAL_UARTEx_SetRxFifoThreshold>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000fe0:	f7ff fc8d 	bl	80008fe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000fe4:	4804      	ldr	r0, [pc, #16]	@ (8000ff8 <MX_USART1_UART_Init+0x90>)
 8000fe6:	f004 f92c 	bl	8005242 <HAL_UARTEx_DisableFifoMode>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ff0:	f7ff fc85 	bl	80008fe <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200001f8 	.word	0x200001f8
 8000ffc:	40013800 	.word	0x40013800

08001000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b0a0      	sub	sp, #128	@ 0x80
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
 8001016:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001018:	f107 0318 	add.w	r3, r7, #24
 800101c:	2254      	movs	r2, #84	@ 0x54
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fa11 	bl	8005448 <memset>
  if(uartHandle->Instance==LPUART1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a68      	ldr	r2, [pc, #416]	@ (80011cc <HAL_UART_MspInit+0x1cc>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d137      	bne.n	80010a0 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001030:	2320      	movs	r3, #32
 8001032:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fd09 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001048:	f7ff fc59 	bl	80008fe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800104c:	4b60      	ldr	r3, [pc, #384]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 800104e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001050:	4a5f      	ldr	r2, [pc, #380]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 8001052:	f043 0301 	orr.w	r3, r3, #1
 8001056:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001058:	4b5d      	ldr	r3, [pc, #372]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 800105a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	617b      	str	r3, [r7, #20]
 8001062:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b5a      	ldr	r3, [pc, #360]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	4a59      	ldr	r2, [pc, #356]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001070:	4b57      	ldr	r3, [pc, #348]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800107c:	230c      	movs	r3, #12
 800107e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	2302      	movs	r3, #2
 8001082:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001088:	2300      	movs	r3, #0
 800108a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800108c:	230c      	movs	r3, #12
 800108e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800109a:	f000 fc09 	bl	80018b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800109e:	e090      	b.n	80011c2 <HAL_UART_MspInit+0x1c2>
  else if(uartHandle->Instance==USART1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a4b      	ldr	r2, [pc, #300]	@ (80011d4 <HAL_UART_MspInit+0x1d4>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	f040 808b 	bne.w	80011c2 <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0318 	add.w	r3, r7, #24
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fccb 	bl	8002a54 <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80010c4:	f7ff fc1b 	bl	80008fe <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c8:	4b41      	ldr	r3, [pc, #260]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010cc:	4a40      	ldr	r2, [pc, #256]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d2:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d4:	4b3e      	ldr	r3, [pc, #248]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e4:	4a3a      	ldr	r2, [pc, #232]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ec:	4b38      	ldr	r3, [pc, #224]	@ (80011d0 <HAL_UART_MspInit+0x1d0>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fe:	2312      	movs	r3, #18
 8001100:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110a:	2307      	movs	r3, #7
 800110c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001118:	f000 fbca 	bl	80018b0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800111c:	4b2e      	ldr	r3, [pc, #184]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 800111e:	4a2f      	ldr	r2, [pc, #188]	@ (80011dc <HAL_UART_MspInit+0x1dc>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001124:	2219      	movs	r2, #25
 8001126:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001128:	4b2b      	ldr	r3, [pc, #172]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 800112a:	2210      	movs	r2, #16
 800112c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b2a      	ldr	r3, [pc, #168]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b28      	ldr	r3, [pc, #160]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113a:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 800113c:	2200      	movs	r2, #0
 800113e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001140:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001146:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001148:	2200      	movs	r2, #0
 800114a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800114c:	4b22      	ldr	r3, [pc, #136]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001152:	4821      	ldr	r0, [pc, #132]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001154:	f000 f9f2 	bl	800153c <HAL_DMA_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800115e:	f7ff fbce 	bl	80008fe <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a1c      	ldr	r2, [pc, #112]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 8001166:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001168:	4a1b      	ldr	r2, [pc, #108]	@ (80011d8 <HAL_UART_MspInit+0x1d8>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800116e:	4b1c      	ldr	r3, [pc, #112]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 8001170:	4a1c      	ldr	r2, [pc, #112]	@ (80011e4 <HAL_UART_MspInit+0x1e4>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 8001176:	2218      	movs	r2, #24
 8001178:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b17      	ldr	r3, [pc, #92]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800118c:	4b14      	ldr	r3, [pc, #80]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001192:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001198:	4b11      	ldr	r3, [pc, #68]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800119e:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011a4:	480e      	ldr	r0, [pc, #56]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 80011a6:	f000 f9c9 	bl	800153c <HAL_DMA_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80011b0:	f7ff fba5 	bl	80008fe <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4a0a      	ldr	r2, [pc, #40]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 80011b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80011bc:	4a08      	ldr	r2, [pc, #32]	@ (80011e0 <HAL_UART_MspInit+0x1e0>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80011c2:	bf00      	nop
 80011c4:	3780      	adds	r7, #128	@ 0x80
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40008000 	.word	0x40008000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40013800 	.word	0x40013800
 80011d8:	2000028c 	.word	0x2000028c
 80011dc:	40020008 	.word	0x40020008
 80011e0:	200002ec 	.word	0x200002ec
 80011e4:	4002001c 	.word	0x4002001c

080011e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e8:	480d      	ldr	r0, [pc, #52]	@ (8001220 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ec:	f7ff fc50 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f2:	490d      	ldr	r1, [pc, #52]	@ (8001228 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <LoopForever+0xe>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80011f8:	e002      	b.n	8001200 <LoopCopyDataInit>

080011fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fe:	3304      	adds	r3, #4

08001200 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001200:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001202:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001204:	d3f9      	bcc.n	80011fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001206:	4a0a      	ldr	r2, [pc, #40]	@ (8001230 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001208:	4c0a      	ldr	r4, [pc, #40]	@ (8001234 <LoopForever+0x16>)
  movs r3, #0
 800120a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800120c:	e001      	b.n	8001212 <LoopFillZerobss>

0800120e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001210:	3204      	adds	r2, #4

08001212 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001212:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001214:	d3fb      	bcc.n	800120e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001216:	f004 f91f 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121a:	f7ff fae5 	bl	80007e8 <main>

0800121e <LoopForever>:

LoopForever:
    b LoopForever
 800121e:	e7fe      	b.n	800121e <LoopForever>
  ldr   r0, =_estack
 8001220:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001224:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001228:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800122c:	08005508 	.word	0x08005508
  ldr r2, =_sbss
 8001230:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001234:	20000350 	.word	0x20000350

08001238 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001238:	e7fe      	b.n	8001238 <ADC1_2_IRQHandler>

0800123a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 f939 	bl	80014bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f80e 	bl	800126c <HAL_InitTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	71fb      	strb	r3, [r7, #7]
 800125a:	e001      	b.n	8001260 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125c:	f7ff fba8 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001260:	79fb      	ldrb	r3, [r7, #7]

}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <HAL_InitTick+0x68>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d022      	beq.n	80012c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001280:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_InitTick+0x6c>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b13      	ldr	r3, [pc, #76]	@ (80012d4 <HAL_InitTick+0x68>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800128c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f944 	bl	8001522 <HAL_SYSTICK_Config>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10f      	bne.n	80012c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	d809      	bhi.n	80012ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a6:	2200      	movs	r2, #0
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f000 f910 	bl	80014d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_InitTick+0x70>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	e007      	b.n	80012ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	73fb      	strb	r3, [r7, #15]
 80012be:	e004      	b.n	80012ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e001      	b.n	80012ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000008 	.word	0x20000008
 80012d8:	20000000 	.word	0x20000000
 80012dc:	20000004 	.word	0x20000004

080012e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <HAL_IncTick+0x1c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b05      	ldr	r3, [pc, #20]	@ (8001300 <HAL_IncTick+0x20>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a03      	ldr	r2, [pc, #12]	@ (80012fc <HAL_IncTick+0x1c>)
 80012f0:	6013      	str	r3, [r2, #0]
}
 80012f2:	bf00      	nop
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	2000034c 	.word	0x2000034c
 8001300:	20000008 	.word	0x20000008

08001304 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return uwTick;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <HAL_GetTick+0x14>)
 800130a:	681b      	ldr	r3, [r3, #0]
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	2000034c 	.word	0x2000034c

0800131c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0307 	and.w	r3, r3, #7
 800132a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001332:	68ba      	ldr	r2, [r7, #8]
 8001334:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001338:	4013      	ands	r3, r2
 800133a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001344:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001348:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800134c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134e:	4a04      	ldr	r2, [pc, #16]	@ (8001360 <__NVIC_SetPriorityGrouping+0x44>)
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	60d3      	str	r3, [r2, #12]
}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001368:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_GetPriorityGrouping+0x18>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	f003 0307 	and.w	r3, r3, #7
}
 8001372:	4618      	mov	r0, r3
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	2b00      	cmp	r3, #0
 8001390:	db0b      	blt.n	80013aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4907      	ldr	r1, [pc, #28]	@ (80013b8 <__NVIC_EnableIRQ+0x38>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	095b      	lsrs	r3, r3, #5
 80013a0:	2001      	movs	r0, #1
 80013a2:	fa00 f202 	lsl.w	r2, r0, r2
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000e100 	.word	0xe000e100

080013bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	6039      	str	r1, [r7, #0]
 80013c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	db0a      	blt.n	80013e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	490c      	ldr	r1, [pc, #48]	@ (8001408 <__NVIC_SetPriority+0x4c>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	0112      	lsls	r2, r2, #4
 80013dc:	b2d2      	uxtb	r2, r2
 80013de:	440b      	add	r3, r1
 80013e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e4:	e00a      	b.n	80013fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4908      	ldr	r1, [pc, #32]	@ (800140c <__NVIC_SetPriority+0x50>)
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	3b04      	subs	r3, #4
 80013f4:	0112      	lsls	r2, r2, #4
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	440b      	add	r3, r1
 80013fa:	761a      	strb	r2, [r3, #24]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000e100 	.word	0xe000e100
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	f1c3 0307 	rsb	r3, r3, #7
 800142a:	2b04      	cmp	r3, #4
 800142c:	bf28      	it	cs
 800142e:	2304      	movcs	r3, #4
 8001430:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	2b06      	cmp	r3, #6
 8001438:	d902      	bls.n	8001440 <NVIC_EncodePriority+0x30>
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	3b03      	subs	r3, #3
 800143e:	e000      	b.n	8001442 <NVIC_EncodePriority+0x32>
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	f04f 32ff 	mov.w	r2, #4294967295
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43da      	mvns	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	401a      	ands	r2, r3
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001458:	f04f 31ff 	mov.w	r1, #4294967295
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	fa01 f303 	lsl.w	r3, r1, r3
 8001462:	43d9      	mvns	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	4313      	orrs	r3, r2
         );
}
 800146a:	4618      	mov	r0, r3
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001488:	d301      	bcc.n	800148e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800148a:	2301      	movs	r3, #1
 800148c:	e00f      	b.n	80014ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148e:	4a0a      	ldr	r2, [pc, #40]	@ (80014b8 <SysTick_Config+0x40>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001496:	210f      	movs	r1, #15
 8001498:	f04f 30ff 	mov.w	r0, #4294967295
 800149c:	f7ff ff8e 	bl	80013bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a0:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SysTick_Config+0x40>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <SysTick_Config+0x40>)
 80014a8:	2207      	movs	r2, #7
 80014aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	e000e010 	.word	0xe000e010

080014bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f7ff ff29 	bl	800131c <__NVIC_SetPriorityGrouping>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
 80014de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff40 	bl	8001364 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff90 	bl	8001410 <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5f 	bl	80013bc <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff33 	bl	8001380 <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa4 	bl	8001478 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d101      	bne.n	800154e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e08d      	b.n	800166a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_DMA_Init+0x138>)
 8001556:	429a      	cmp	r2, r3
 8001558:	d80f      	bhi.n	800157a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	461a      	mov	r2, r3
 8001560:	4b45      	ldr	r3, [pc, #276]	@ (8001678 <HAL_DMA_Init+0x13c>)
 8001562:	4413      	add	r3, r2
 8001564:	4a45      	ldr	r2, [pc, #276]	@ (800167c <HAL_DMA_Init+0x140>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	091b      	lsrs	r3, r3, #4
 800156c:	009a      	lsls	r2, r3, #2
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a42      	ldr	r2, [pc, #264]	@ (8001680 <HAL_DMA_Init+0x144>)
 8001576:	641a      	str	r2, [r3, #64]	@ 0x40
 8001578:	e00e      	b.n	8001598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	4b40      	ldr	r3, [pc, #256]	@ (8001684 <HAL_DMA_Init+0x148>)
 8001582:	4413      	add	r3, r2
 8001584:	4a3d      	ldr	r2, [pc, #244]	@ (800167c <HAL_DMA_Init+0x140>)
 8001586:	fba2 2303 	umull	r2, r3, r2, r3
 800158a:	091b      	lsrs	r3, r3, #4
 800158c:	009a      	lsls	r2, r3, #2
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a3c      	ldr	r2, [pc, #240]	@ (8001688 <HAL_DMA_Init+0x14c>)
 8001596:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2202      	movs	r2, #2
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80015ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 f8fe 	bl	80017ec <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80015f8:	d102      	bne.n	8001600 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001614:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d010      	beq.n	8001640 <HAL_DMA_Init+0x104>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2b04      	cmp	r3, #4
 8001624:	d80c      	bhi.n	8001640 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f000 f91e 	bl	8001868 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e008      	b.n	8001652 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	40020407 	.word	0x40020407
 8001678:	bffdfff8 	.word	0xbffdfff8
 800167c:	cccccccd 	.word	0xcccccccd
 8001680:	40020000 	.word	0x40020000
 8001684:	bffdfbf8 	.word	0xbffdfbf8
 8001688:	40020400 	.word	0x40020400

0800168c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a8:	f003 031f 	and.w	r3, r3, #31
 80016ac:	2204      	movs	r2, #4
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d026      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d021      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e4:	f003 021f 	and.w	r2, r3, #31
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	2104      	movs	r1, #4
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d071      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001704:	e06c      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170a:	f003 031f 	and.w	r3, r3, #31
 800170e:	2202      	movs	r2, #2
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02e      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d029      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10b      	bne.n	800174a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 020a 	bic.w	r2, r2, #10
 8001740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f003 021f 	and.w	r2, r3, #31
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	2102      	movs	r1, #2
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d038      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001776:	e033      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	2208      	movs	r2, #8
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 020e 	bic.w	r2, r2, #14
 80017a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017aa:	f003 021f 	and.w	r2, r3, #31
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
}
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	461a      	mov	r2, r3
 80017fa:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d802      	bhi.n	8001806 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001800:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e001      	b.n	800180a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001806:	4b15      	ldr	r3, [pc, #84]	@ (800185c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001808:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	3b08      	subs	r3, #8
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001818:	fba2 2303 	umull	r2, r3, r2, r3
 800181c:	091b      	lsrs	r3, r3, #4
 800181e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001824:	089b      	lsrs	r3, r3, #2
 8001826:	009a      	lsls	r2, r3, #2
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a0b      	ldr	r2, [pc, #44]	@ (8001864 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001836:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	f003 031f 	and.w	r3, r3, #31
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40020407 	.word	0x40020407
 8001858:	40020800 	.word	0x40020800
 800185c:	40020820 	.word	0x40020820
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020880 	.word	0x40020880

08001868 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800188a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3b01      	subs	r3, #1
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	2201      	movs	r2, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	1000823f 	.word	0x1000823f
 80018ac:	40020940 	.word	0x40020940

080018b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018be:	e15a      	b.n	8001b76 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2101      	movs	r1, #1
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	4013      	ands	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 814c 	beq.w	8001b70 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d005      	beq.n	80018f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d130      	bne.n	8001952 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001926:	2201      	movs	r2, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 0201 	and.w	r2, r3, #1
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4313      	orrs	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	2b03      	cmp	r3, #3
 800195c:	d017      	beq.n	800198e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b02      	cmp	r3, #2
 8001998:	d123      	bne.n	80019e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	220f      	movs	r2, #15
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	6939      	ldr	r1, [r7, #16]
 80019de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0203 	and.w	r2, r3, #3
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 80a6 	beq.w	8001b70 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a24:	4b5b      	ldr	r3, [pc, #364]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a28:	4a5a      	ldr	r2, [pc, #360]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a30:	4b58      	ldr	r3, [pc, #352]	@ (8001b94 <HAL_GPIO_Init+0x2e4>)
 8001a32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	60bb      	str	r3, [r7, #8]
 8001a3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a3c:	4a56      	ldr	r2, [pc, #344]	@ (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	089b      	lsrs	r3, r3, #2
 8001a42:	3302      	adds	r3, #2
 8001a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	220f      	movs	r2, #15
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a66:	d01f      	beq.n	8001aa8 <HAL_GPIO_Init+0x1f8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_GPIO_Init+0x2ec>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d019      	beq.n	8001aa4 <HAL_GPIO_Init+0x1f4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_GPIO_Init+0x2f0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_GPIO_Init+0x1f0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <HAL_GPIO_Init+0x2f4>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1ec>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a49      	ldr	r2, [pc, #292]	@ (8001ba8 <HAL_GPIO_Init+0x2f8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1e8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a48      	ldr	r2, [pc, #288]	@ (8001bac <HAL_GPIO_Init+0x2fc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1e4>
 8001a90:	2305      	movs	r3, #5
 8001a92:	e00a      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a94:	2306      	movs	r3, #6
 8001a96:	e008      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a98:	2304      	movs	r3, #4
 8001a9a:	e006      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e004      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e002      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e000      	b.n	8001aaa <HAL_GPIO_Init+0x1fa>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	f002 0203 	and.w	r2, r2, #3
 8001ab0:	0092      	lsls	r2, r2, #2
 8001ab2:	4093      	lsls	r3, r2
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aba:	4937      	ldr	r1, [pc, #220]	@ (8001b98 <HAL_GPIO_Init+0x2e8>)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	3302      	adds	r3, #2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac8:	4b39      	ldr	r3, [pc, #228]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aec:	4a30      	ldr	r2, [pc, #192]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001af2:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b16:	4a26      	ldr	r2, [pc, #152]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b46:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	4013      	ands	r3, r2
 8001b54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b6a:	4a11      	ldr	r2, [pc, #68]	@ (8001bb0 <HAL_GPIO_Init+0x300>)
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f47f ae9d 	bne.w	80018c0 <HAL_GPIO_Init+0x10>
  }
}
 8001b86:	bf00      	nop
 8001b88:	bf00      	nop
 8001b8a:	371c      	adds	r7, #28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40010000 	.word	0x40010000
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800
 8001ba4:	48000c00 	.word	0x48000c00
 8001ba8:	48001000 	.word	0x48001000
 8001bac:	48001400 	.word	0x48001400
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd0:	e002      	b.n	8001bd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd2:	887a      	ldrh	r2, [r7, #2]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bee:	4b08      	ldr	r3, [pc, #32]	@ (8001c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c00:	88fb      	ldrh	r3, [r7, #6]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f806 	bl	8001c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e08d      	b.n	8001d58 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d106      	bne.n	8001c56 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7fe fd53 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2224      	movs	r2, #36	@ 0x24
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f022 0201 	bic.w	r2, r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c7a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	e006      	b.n	8001cb2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cb0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d108      	bne.n	8001ccc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	685a      	ldr	r2, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e007      	b.n	8001cdc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cda:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cee:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69d9      	ldr	r1, [r3, #28]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1a      	ldr	r2, [r3, #32]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d138      	bne.n	8001de8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d101      	bne.n	8001d84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d80:	2302      	movs	r3, #2
 8001d82:	e032      	b.n	8001dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2224      	movs	r2, #36	@ 0x24
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001db2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6819      	ldr	r1, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001de8:	2302      	movs	r3, #2
  }
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d139      	bne.n	8001e80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e033      	b.n	8001e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2224      	movs	r2, #36	@ 0x24
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f042 0201 	orr.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e80:	2302      	movs	r3, #2
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d141      	bne.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ea6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eaa:	d131      	bne.n	8001f10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb2:	4a46      	ldr	r2, [pc, #280]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec4:	4a41      	ldr	r2, [pc, #260]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2232      	movs	r2, #50	@ 0x32
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9b      	lsrs	r3, r3, #18
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee2:	e002      	b.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eea:	4b38      	ldr	r3, [pc, #224]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef6:	d102      	bne.n	8001efe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f2      	bne.n	8001ee4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efe:	4b33      	ldr	r3, [pc, #204]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0a:	d158      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e057      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f10:	4b2e      	ldr	r3, [pc, #184]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f16:	4a2d      	ldr	r2, [pc, #180]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f20:	e04d      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f28:	d141      	bne.n	8001fae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2a:	4b28      	ldr	r3, [pc, #160]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f36:	d131      	bne.n	8001f9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f38:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f3e:	4a23      	ldr	r2, [pc, #140]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f50:	4a1e      	ldr	r2, [pc, #120]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2232      	movs	r2, #50	@ 0x32
 8001f5e:	fb02 f303 	mul.w	r3, r2, r3
 8001f62:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9b      	lsrs	r3, r3, #18
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f6e:	e002      	b.n	8001f76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f78:	695b      	ldr	r3, [r3, #20]
 8001f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f82:	d102      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f96:	d112      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e011      	b.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fac:	e007      	b.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fae:	4b07      	ldr	r3, [pc, #28]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fb6:	4a05      	ldr	r2, [pc, #20]	@ (8001fcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40007000 	.word	0x40007000
 8001fd0:	20000000 	.word	0x20000000
 8001fd4:	431bde83 	.word	0x431bde83

08001fd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fdc:	4b05      	ldr	r3, [pc, #20]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a04      	ldr	r2, [pc, #16]	@ (8001ff4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e2fe      	b.n	8002608 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d075      	beq.n	8002102 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002016:	4b97      	ldr	r3, [pc, #604]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002020:	4b94      	ldr	r3, [pc, #592]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d102      	bne.n	8002036 <HAL_RCC_OscConfig+0x3e>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b03      	cmp	r3, #3
 8002034:	d002      	beq.n	800203c <HAL_RCC_OscConfig+0x44>
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b08      	cmp	r3, #8
 800203a:	d10b      	bne.n	8002054 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	4b8d      	ldr	r3, [pc, #564]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d05b      	beq.n	8002100 <HAL_RCC_OscConfig+0x108>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d157      	bne.n	8002100 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e2d9      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800205c:	d106      	bne.n	800206c <HAL_RCC_OscConfig+0x74>
 800205e:	4b85      	ldr	r3, [pc, #532]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a84      	ldr	r2, [pc, #528]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	e01d      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x98>
 8002076:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a7e      	ldr	r2, [pc, #504]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800207c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b7c      	ldr	r3, [pc, #496]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7b      	ldr	r2, [pc, #492]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	e00b      	b.n	80020a8 <HAL_RCC_OscConfig+0xb0>
 8002090:	4b78      	ldr	r3, [pc, #480]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a77      	ldr	r2, [pc, #476]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002096:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a74      	ldr	r2, [pc, #464]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7ff f928 	bl	8001304 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b8:	f7ff f924 	bl	8001304 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b64      	cmp	r3, #100	@ 0x64
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e29e      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 80020d6:	e014      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d8:	f7ff f914 	bl	8001304 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e0:	f7ff f910 	bl	8001304 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b64      	cmp	r3, #100	@ 0x64
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e28a      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020f2:	4b60      	ldr	r3, [pc, #384]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xe8>
 80020fe:	e000      	b.n	8002102 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d075      	beq.n	80021fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800210e:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002118:	4b56      	ldr	r3, [pc, #344]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b0c      	cmp	r3, #12
 8002126:	d102      	bne.n	800212e <HAL_RCC_OscConfig+0x136>
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d002      	beq.n	8002134 <HAL_RCC_OscConfig+0x13c>
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d11f      	bne.n	8002174 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002134:	4b4f      	ldr	r3, [pc, #316]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <HAL_RCC_OscConfig+0x154>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e25d      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	4946      	ldr	r1, [pc, #280]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002160:	4b45      	ldr	r3, [pc, #276]	@ (8002278 <HAL_RCC_OscConfig+0x280>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f881 	bl	800126c <HAL_InitTick>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d043      	beq.n	80021f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e249      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d023      	beq.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800217c:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a3c      	ldr	r2, [pc, #240]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002182:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002186:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7ff f8bc 	bl	8001304 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002190:	f7ff f8b8 	bl	8001304 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e232      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ae:	4b31      	ldr	r3, [pc, #196]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	492d      	ldr	r1, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
 80021c2:	e01a      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff f898 	bl	8001304 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7ff f894 	bl	8001304 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e20e      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x1e0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0308 	and.w	r3, r3, #8
 8002202:	2b00      	cmp	r3, #0
 8002204:	d041      	beq.n	800228a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d01c      	beq.n	8002248 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff f871 	bl	8001304 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7ff f86d 	bl	8001304 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1e7      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0ef      	beq.n	8002226 <HAL_RCC_OscConfig+0x22e>
 8002246:	e020      	b.n	800228a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800224e:	4a09      	ldr	r2, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x27c>)
 8002250:	f023 0301 	bic.w	r3, r3, #1
 8002254:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7ff f854 	bl	8001304 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800225e:	e00d      	b.n	800227c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002260:	f7ff f850 	bl	8001304 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d906      	bls.n	800227c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e1ca      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000
 8002278:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800227c:	4b8c      	ldr	r3, [pc, #560]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ea      	bne.n	8002260 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 80a6 	beq.w	80023e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002298:	2300      	movs	r3, #0
 800229a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800229c:	4b84      	ldr	r3, [pc, #528]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_OscConfig+0x2b4>
 80022a8:	2301      	movs	r3, #1
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x2b6>
 80022ac:	2300      	movs	r3, #0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d00d      	beq.n	80022ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b2:	4b7f      	ldr	r3, [pc, #508]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b6:	4a7e      	ldr	r2, [pc, #504]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80022be:	4b7c      	ldr	r3, [pc, #496]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ca:	2301      	movs	r3, #1
 80022cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ce:	4b79      	ldr	r3, [pc, #484]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d118      	bne.n	800230c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022da:	4b76      	ldr	r3, [pc, #472]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a75      	ldr	r2, [pc, #468]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 80022e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e6:	f7ff f80d 	bl	8001304 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ee:	f7ff f809 	bl	8001304 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e183      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <HAL_RCC_OscConfig+0x4bc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_RCC_OscConfig+0x32e>
 8002314:	4b66      	ldr	r3, [pc, #408]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	4a65      	ldr	r2, [pc, #404]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002324:	e024      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b05      	cmp	r3, #5
 800232c:	d110      	bne.n	8002350 <HAL_RCC_OscConfig+0x358>
 800232e:	4b60      	ldr	r3, [pc, #384]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002334:	4a5e      	ldr	r2, [pc, #376]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f043 0304 	orr.w	r3, r3, #4
 800233a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800233e:	4b5c      	ldr	r3, [pc, #368]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	4a5a      	ldr	r2, [pc, #360]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800234e:	e00f      	b.n	8002370 <HAL_RCC_OscConfig+0x378>
 8002350:	4b57      	ldr	r3, [pc, #348]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002356:	4a56      	ldr	r2, [pc, #344]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002360:	4b53      	ldr	r3, [pc, #332]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002366:	4a52      	ldr	r2, [pc, #328]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002368:	f023 0304 	bic.w	r3, r3, #4
 800236c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d016      	beq.n	80023a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe ffc4 	bl	8001304 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	e00a      	b.n	8002396 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002380:	f7fe ffc0 	bl	8001304 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800238e:	4293      	cmp	r3, r2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e138      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b46      	ldr	r3, [pc, #280]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ed      	beq.n	8002380 <HAL_RCC_OscConfig+0x388>
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a6:	f7fe ffad 	bl	8001304 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ae:	f7fe ffa9 	bl	8001304 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e121      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023c4:	4b3a      	ldr	r3, [pc, #232]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1ed      	bne.n	80023ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d8:	4b35      	ldr	r3, [pc, #212]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d03c      	beq.n	800246a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01c      	beq.n	8002432 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 80023fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023fe:	4a2c      	ldr	r2, [pc, #176]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002408:	f7fe ff7c 	bl	8001304 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002410:	f7fe ff78 	bl	8001304 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e0f2      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002422:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002424:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ef      	beq.n	8002410 <HAL_RCC_OscConfig+0x418>
 8002430:	e01b      	b.n	800246a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f023 0301 	bic.w	r3, r3, #1
 800243e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7fe ff5f 	bl	8001304 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244a:	f7fe ff5b 	bl	8001304 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e0d5      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800245c:	4b14      	ldr	r3, [pc, #80]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800245e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f000 80c9 	beq.w	8002606 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002474:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030c 	and.w	r3, r3, #12
 800247c:	2b0c      	cmp	r3, #12
 800247e:	f000 8083 	beq.w	8002588 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d15e      	bne.n	8002548 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a08      	ldr	r2, [pc, #32]	@ (80024b0 <HAL_RCC_OscConfig+0x4b8>)
 8002490:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe ff35 	bl	8001304 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	e00c      	b.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800249e:	f7fe ff31 	bl	8001304 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d905      	bls.n	80024b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ab      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024b8:	4b55      	ldr	r3, [pc, #340]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ec      	bne.n	800249e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c4:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 80024c6:	68da      	ldr	r2, [r3, #12]
 80024c8:	4b52      	ldr	r3, [pc, #328]	@ (8002614 <HAL_RCC_OscConfig+0x61c>)
 80024ca:	4013      	ands	r3, r2
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6a11      	ldr	r1, [r2, #32]
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024d4:	3a01      	subs	r2, #1
 80024d6:	0112      	lsls	r2, r2, #4
 80024d8:	4311      	orrs	r1, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024de:	0212      	lsls	r2, r2, #8
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e6:	0852      	lsrs	r2, r2, #1
 80024e8:	3a01      	subs	r2, #1
 80024ea:	0552      	lsls	r2, r2, #21
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0652      	lsls	r2, r2, #25
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024fe:	06d2      	lsls	r2, r2, #27
 8002500:	430a      	orrs	r2, r1
 8002502:	4943      	ldr	r1, [pc, #268]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b41      	ldr	r3, [pc, #260]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a40      	ldr	r2, [pc, #256]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002512:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002514:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800251e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7fe fef0 	bl	8001304 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002528:	f7fe feec 	bl	8001304 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e066      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0x530>
 8002546:	e05e      	b.n	8002606 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002548:	4b31      	ldr	r3, [pc, #196]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a30      	ldr	r2, [pc, #192]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800254e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7fe fed6 	bl	8001304 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255c:	f7fe fed2 	bl	8001304 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e04c      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	4b28      	ldr	r3, [pc, #160]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800257a:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	4924      	ldr	r1, [pc, #144]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002580:	4b25      	ldr	r3, [pc, #148]	@ (8002618 <HAL_RCC_OscConfig+0x620>)
 8002582:	4013      	ands	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
 8002586:	e03e      	b.n	8002606 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e039      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002594:	4b1e      	ldr	r3, [pc, #120]	@ (8002610 <HAL_RCC_OscConfig+0x618>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0203 	and.w	r2, r3, #3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d12c      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b2:	3b01      	subs	r3, #1
 80025b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d123      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d11b      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d113      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e4:	085b      	lsrs	r3, r3, #1
 80025e6:	3b01      	subs	r3, #1
 80025e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d109      	bne.n	8002602 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f8:	085b      	lsrs	r3, r3, #1
 80025fa:	3b01      	subs	r3, #1
 80025fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025fe:	429a      	cmp	r2, r3
 8002600:	d001      	beq.n	8002606 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e000      	b.n	8002608 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3720      	adds	r7, #32
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000
 8002614:	019f800c 	.word	0x019f800c
 8002618:	feeefffc 	.word	0xfeeefffc

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002626:	2300      	movs	r3, #0
 8002628:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e11e      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002634:	4b91      	ldr	r3, [pc, #580]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d910      	bls.n	8002664 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	4b8e      	ldr	r3, [pc, #568]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 020f 	bic.w	r2, r3, #15
 800264a:	498c      	ldr	r1, [pc, #560]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b8a      	ldr	r3, [pc, #552]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e106      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d073      	beq.n	8002758 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d129      	bne.n	80026cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002678:	4b81      	ldr	r3, [pc, #516]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d101      	bne.n	8002688 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0f4      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002688:	f000 f99e 	bl	80029c8 <RCC_GetSysClockFreqFromPLLSource>
 800268c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4a7c      	ldr	r2, [pc, #496]	@ (8002884 <HAL_RCC_ClockConfig+0x268>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d93f      	bls.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002696:	4b7a      	ldr	r3, [pc, #488]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d033      	beq.n	8002716 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12f      	bne.n	8002716 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b6:	4b72      	ldr	r3, [pc, #456]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026be:	4a70      	ldr	r2, [pc, #448]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e024      	b.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d107      	bne.n	80026e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d109      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0c6      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e4:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0be      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026f4:	f000 f8ce 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 80026f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	4a61      	ldr	r2, [pc, #388]	@ (8002884 <HAL_RCC_ClockConfig+0x268>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d909      	bls.n	8002716 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002702:	4b5f      	ldr	r3, [pc, #380]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800270a:	4a5d      	ldr	r2, [pc, #372]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800270c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002710:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002712:	2380      	movs	r3, #128	@ 0x80
 8002714:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002716:	4b5a      	ldr	r3, [pc, #360]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f023 0203 	bic.w	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4957      	ldr	r1, [pc, #348]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002724:	4313      	orrs	r3, r2
 8002726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002728:	f7fe fdec 	bl	8001304 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272e:	e00a      	b.n	8002746 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002730:	f7fe fde8 	bl	8001304 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e095      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	4b4e      	ldr	r3, [pc, #312]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 020c 	and.w	r2, r3, #12
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	429a      	cmp	r2, r3
 8002756:	d1eb      	bne.n	8002730 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d023      	beq.n	80027ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002770:	4b43      	ldr	r3, [pc, #268]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a42      	ldr	r2, [pc, #264]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002788:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002790:	4a3b      	ldr	r2, [pc, #236]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002792:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002798:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	4936      	ldr	r1, [pc, #216]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	608b      	str	r3, [r1, #8]
 80027aa:	e008      	b.n	80027be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2b80      	cmp	r3, #128	@ 0x80
 80027b0:	d105      	bne.n	80027be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027b2:	4b33      	ldr	r3, [pc, #204]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	4a32      	ldr	r2, [pc, #200]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 80027b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027be:	4b2f      	ldr	r3, [pc, #188]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d21d      	bcs.n	8002808 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027cc:	4b2b      	ldr	r3, [pc, #172]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 020f 	bic.w	r2, r3, #15
 80027d4:	4929      	ldr	r1, [pc, #164]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027dc:	f7fe fd92 	bl	8001304 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	e00a      	b.n	80027fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e4:	f7fe fd8e 	bl	8001304 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03b      	b.n	8002872 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b20      	ldr	r3, [pc, #128]	@ (800287c <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d1ed      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002814:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4917      	ldr	r1, [pc, #92]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002832:	4b13      	ldr	r3, [pc, #76]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	490f      	ldr	r1, [pc, #60]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002846:	f000 f825 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 800284a:	4602      	mov	r2, r0
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	091b      	lsrs	r3, r3, #4
 8002852:	f003 030f 	and.w	r3, r3, #15
 8002856:	490c      	ldr	r1, [pc, #48]	@ (8002888 <HAL_RCC_ClockConfig+0x26c>)
 8002858:	5ccb      	ldrb	r3, [r1, r3]
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	fa22 f303 	lsr.w	r3, r2, r3
 8002862:	4a0a      	ldr	r2, [pc, #40]	@ (800288c <HAL_RCC_ClockConfig+0x270>)
 8002864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002866:	4b0a      	ldr	r3, [pc, #40]	@ (8002890 <HAL_RCC_ClockConfig+0x274>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fcfe 	bl	800126c <HAL_InitTick>
 8002870:	4603      	mov	r3, r0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40022000 	.word	0x40022000
 8002880:	40021000 	.word	0x40021000
 8002884:	04c4b400 	.word	0x04c4b400
 8002888:	080054b8 	.word	0x080054b8
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800289a:	4b2c      	ldr	r3, [pc, #176]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d102      	bne.n	80028ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	e047      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028ac:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d102      	bne.n	80028be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028b8:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ba:	613b      	str	r3, [r7, #16]
 80028bc:	e03e      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028be:	4b23      	ldr	r3, [pc, #140]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b0c      	cmp	r3, #12
 80028c8:	d136      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	091b      	lsrs	r3, r3, #4
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	3301      	adds	r3, #1
 80028e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d10c      	bne.n	8002902 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002954 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	4a16      	ldr	r2, [pc, #88]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f2:	68d2      	ldr	r2, [r2, #12]
 80028f4:	0a12      	lsrs	r2, r2, #8
 80028f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
      break;
 8002900:	e00c      	b.n	800291c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002902:	4a13      	ldr	r2, [pc, #76]	@ (8002950 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	fbb2 f3f3 	udiv	r3, r2, r3
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	0a12      	lsrs	r2, r2, #8
 8002910:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002914:	fb02 f303 	mul.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
      break;
 800291a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0e5b      	lsrs	r3, r3, #25
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	3301      	adds	r3, #1
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e001      	b.n	800293c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800293c:	693b      	ldr	r3, [r7, #16]
}
 800293e:	4618      	mov	r0, r3
 8002940:	371c      	adds	r7, #28
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40021000 	.word	0x40021000
 8002950:	00f42400 	.word	0x00f42400
 8002954:	016e3600 	.word	0x016e3600

08002958 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_RCC_GetHCLKFreq+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000000 	.word	0x20000000

08002970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002974:	f7ff fff0 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 8002978:	4602      	mov	r2, r0
 800297a:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	0a1b      	lsrs	r3, r3, #8
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	4904      	ldr	r1, [pc, #16]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002986:	5ccb      	ldrb	r3, [r1, r3]
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	080054c8 	.word	0x080054c8

0800299c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029a0:	f7ff ffda 	bl	8002958 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0adb      	lsrs	r3, r3, #11
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4904      	ldr	r1, [pc, #16]	@ (80029c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	080054c8 	.word	0x080054c8

080029c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	091b      	lsrs	r3, r3, #4
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d10c      	bne.n	8002a06 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f6:	68d2      	ldr	r2, [r2, #12]
 80029f8:	0a12      	lsrs	r2, r2, #8
 80029fa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	617b      	str	r3, [r7, #20]
    break;
 8002a04:	e00c      	b.n	8002a20 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a06:	4a12      	ldr	r2, [pc, #72]	@ (8002a50 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a10:	68d2      	ldr	r2, [r2, #12]
 8002a12:	0a12      	lsrs	r2, r2, #8
 8002a14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002a18:	fb02 f303 	mul.w	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    break;
 8002a1e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a20:	4b09      	ldr	r3, [pc, #36]	@ (8002a48 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0e5b      	lsrs	r3, r3, #25
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a38:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a3a:	687b      	ldr	r3, [r7, #4]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	016e3600 	.word	0x016e3600
 8002a50:	00f42400 	.word	0x00f42400

08002a54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a60:	2300      	movs	r3, #0
 8002a62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8098 	beq.w	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a72:	2300      	movs	r3, #0
 8002a74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b43      	ldr	r3, [pc, #268]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10d      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b40      	ldr	r3, [pc, #256]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a86:	4a3f      	ldr	r2, [pc, #252]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a39      	ldr	r2, [pc, #228]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aaa:	f7fe fc2b 	bl	8001304 <HAL_GetTick>
 8002aae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab0:	e009      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab2:	f7fe fc27 	bl	8001304 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d902      	bls.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	74fb      	strb	r3, [r7, #19]
        break;
 8002ac4:	e005      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac6:	4b30      	ldr	r3, [pc, #192]	@ (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0ef      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002ad2:	7cfb      	ldrb	r3, [r7, #19]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d159      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ae2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01e      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d019      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002af4:	4b23      	ldr	r3, [pc, #140]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002afe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b06:	4a1f      	ldr	r2, [pc, #124]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b10:	4b1c      	ldr	r3, [pc, #112]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b16:	4a1b      	ldr	r2, [pc, #108]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b20:	4a18      	ldr	r2, [pc, #96]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d016      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b32:	f7fe fbe7 	bl	8001304 <HAL_GetTick>
 8002b36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b38:	e00b      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b3a:	f7fe fbe3 	bl	8001304 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d902      	bls.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	74fb      	strb	r3, [r7, #19]
            break;
 8002b50:	e006      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b52:	4b0c      	ldr	r3, [pc, #48]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0ec      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10b      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b74:	4903      	ldr	r1, [pc, #12]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b7c:	e008      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	74bb      	strb	r3, [r7, #18]
 8002b82:	e005      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b90:	7c7b      	ldrb	r3, [r7, #17]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d105      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b96:	4ba7      	ldr	r3, [pc, #668]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9a:	4aa6      	ldr	r2, [pc, #664]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bae:	4ba1      	ldr	r3, [pc, #644]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb4:	f023 0203 	bic.w	r2, r3, #3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	499d      	ldr	r1, [pc, #628]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bd0:	4b98      	ldr	r3, [pc, #608]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	f023 020c 	bic.w	r2, r3, #12
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	4995      	ldr	r1, [pc, #596]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002bf2:	4b90      	ldr	r3, [pc, #576]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	498c      	ldr	r1, [pc, #560]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c14:	4b87      	ldr	r3, [pc, #540]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	4984      	ldr	r1, [pc, #528]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c36:	4b7f      	ldr	r3, [pc, #508]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	497b      	ldr	r1, [pc, #492]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0320 	and.w	r3, r3, #32
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00a      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c58:	4b76      	ldr	r3, [pc, #472]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	4973      	ldr	r1, [pc, #460]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c80:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	496a      	ldr	r1, [pc, #424]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00a      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c9c:	4b65      	ldr	r3, [pc, #404]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4962      	ldr	r1, [pc, #392]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d00a      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cbe:	4b5d      	ldr	r3, [pc, #372]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cc4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	4959      	ldr	r1, [pc, #356]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ce0:	4b54      	ldr	r3, [pc, #336]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002ce6:	f023 0203 	bic.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cee:	4951      	ldr	r1, [pc, #324]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d02:	4b4c      	ldr	r3, [pc, #304]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	4948      	ldr	r1, [pc, #288]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d24:	4b43      	ldr	r3, [pc, #268]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	4940      	ldr	r1, [pc, #256]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d42:	d105      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d44:	4b3b      	ldr	r3, [pc, #236]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	4a3a      	ldr	r2, [pc, #232]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d4e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d5c:	4b35      	ldr	r3, [pc, #212]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d62:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6a:	4932      	ldr	r1, [pc, #200]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4a2c      	ldr	r2, [pc, #176]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d86:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d015      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d94:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da2:	4924      	ldr	r1, [pc, #144]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dbe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dd2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dda:	4916      	ldr	r1, [pc, #88]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dea:	d105      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4a10      	ldr	r2, [pc, #64]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d019      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e12:	4908      	ldr	r1, [pc, #32]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e22:	d109      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4a02      	ldr	r2, [pc, #8]	@ (8002e34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2e:	60d3      	str	r3, [r2, #12]
 8002e30:	e002      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e44:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4926      	ldr	r1, [pc, #152]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e62:	d105      	bne.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e64:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d015      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e8a:	4918      	ldr	r1, [pc, #96]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e9a:	d105      	bne.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d015      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002eb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002eba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	490a      	ldr	r1, [pc, #40]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ece:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ed4:	4b05      	ldr	r3, [pc, #20]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	4a04      	ldr	r2, [pc, #16]	@ (8002eec <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ede:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ee0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40021000 	.word	0x40021000

08002ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e049      	b.n	8002f96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd ff1c 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 fcd0 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e049      	b.n	8003044 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d106      	bne.n	8002fca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f841 	bl	800304c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2202      	movs	r2, #2
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f000 fc79 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d109      	bne.n	8003084 <HAL_TIM_PWM_Start+0x24>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e03c      	b.n	80030fe <HAL_TIM_PWM_Start+0x9e>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d109      	bne.n	800309e <HAL_TIM_PWM_Start+0x3e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	bf14      	ite	ne
 8003096:	2301      	movne	r3, #1
 8003098:	2300      	moveq	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	e02f      	b.n	80030fe <HAL_TIM_PWM_Start+0x9e>
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d109      	bne.n	80030b8 <HAL_TIM_PWM_Start+0x58>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	e022      	b.n	80030fe <HAL_TIM_PWM_Start+0x9e>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d109      	bne.n	80030d2 <HAL_TIM_PWM_Start+0x72>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	e015      	b.n	80030fe <HAL_TIM_PWM_Start+0x9e>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d109      	bne.n	80030ec <HAL_TIM_PWM_Start+0x8c>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e008      	b.n	80030fe <HAL_TIM_PWM_Start+0x9e>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	bf14      	ite	ne
 80030f8:	2301      	movne	r3, #1
 80030fa:	2300      	moveq	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e0a6      	b.n	8003254 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d104      	bne.n	8003116 <HAL_TIM_PWM_Start+0xb6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003114:	e023      	b.n	800315e <HAL_TIM_PWM_Start+0xfe>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b04      	cmp	r3, #4
 800311a:	d104      	bne.n	8003126 <HAL_TIM_PWM_Start+0xc6>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003124:	e01b      	b.n	800315e <HAL_TIM_PWM_Start+0xfe>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d104      	bne.n	8003136 <HAL_TIM_PWM_Start+0xd6>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003134:	e013      	b.n	800315e <HAL_TIM_PWM_Start+0xfe>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b0c      	cmp	r3, #12
 800313a:	d104      	bne.n	8003146 <HAL_TIM_PWM_Start+0xe6>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003144:	e00b      	b.n	800315e <HAL_TIM_PWM_Start+0xfe>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b10      	cmp	r3, #16
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Start+0xf6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2202      	movs	r2, #2
 8003150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003154:	e003      	b.n	800315e <HAL_TIM_PWM_Start+0xfe>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2202      	movs	r2, #2
 800315a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2201      	movs	r2, #1
 8003164:	6839      	ldr	r1, [r7, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f001 f958 	bl	800441c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a3a      	ldr	r2, [pc, #232]	@ (800325c <HAL_TIM_PWM_Start+0x1fc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x148>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a39      	ldr	r2, [pc, #228]	@ (8003260 <HAL_TIM_PWM_Start+0x200>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x148>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a37      	ldr	r2, [pc, #220]	@ (8003264 <HAL_TIM_PWM_Start+0x204>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x148>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a36      	ldr	r2, [pc, #216]	@ (8003268 <HAL_TIM_PWM_Start+0x208>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x148>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a34      	ldr	r2, [pc, #208]	@ (800326c <HAL_TIM_PWM_Start+0x20c>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_TIM_PWM_Start+0x148>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a33      	ldr	r2, [pc, #204]	@ (8003270 <HAL_TIM_PWM_Start+0x210>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_TIM_PWM_Start+0x14c>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_TIM_PWM_Start+0x14e>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a25      	ldr	r2, [pc, #148]	@ (800325c <HAL_TIM_PWM_Start+0x1fc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d022      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d4:	d01d      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a26      	ldr	r2, [pc, #152]	@ (8003274 <HAL_TIM_PWM_Start+0x214>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d018      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a24      	ldr	r2, [pc, #144]	@ (8003278 <HAL_TIM_PWM_Start+0x218>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a23      	ldr	r2, [pc, #140]	@ (800327c <HAL_TIM_PWM_Start+0x21c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00e      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <HAL_TIM_PWM_Start+0x200>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d009      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <HAL_TIM_PWM_Start+0x204>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d004      	beq.n	8003212 <HAL_TIM_PWM_Start+0x1b2>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_TIM_PWM_Start+0x210>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d115      	bne.n	800323e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_TIM_PWM_Start+0x220>)
 800321a:	4013      	ands	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2b06      	cmp	r3, #6
 8003222:	d015      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1f0>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d011      	beq.n	8003250 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	e008      	b.n	8003250 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0201 	orr.w	r2, r2, #1
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e000      	b.n	8003252 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003250:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40012c00 	.word	0x40012c00
 8003260:	40013400 	.word	0x40013400
 8003264:	40014000 	.word	0x40014000
 8003268:	40014400 	.word	0x40014400
 800326c:	40014800 	.word	0x40014800
 8003270:	40015000 	.word	0x40015000
 8003274:	40000400 	.word	0x40000400
 8003278:	40000800 	.word	0x40000800
 800327c:	40000c00 	.word	0x40000c00
 8003280:	00010007 	.word	0x00010007

08003284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e049      	b.n	800332a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d106      	bne.n	80032b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f841 	bl	8003332 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3304      	adds	r3, #4
 80032c0:	4619      	mov	r1, r3
 80032c2:	4610      	mov	r0, r2
 80032c4:	f000 fb06 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003360:	2302      	movs	r3, #2
 8003362:	e088      	b.n	8003476 <HAL_TIM_IC_ConfigChannel+0x130>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11b      	bne.n	80033aa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003382:	f000 fe85 	bl	8004090 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 020c 	bic.w	r2, r2, #12
 8003394:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6999      	ldr	r1, [r3, #24]
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	619a      	str	r2, [r3, #24]
 80033a8:	e060      	b.n	800346c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	d11c      	bne.n	80033ea <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80033c0:	f000 ff09 	bl	80041d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80033d2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6999      	ldr	r1, [r3, #24]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	619a      	str	r2, [r3, #24]
 80033e8:	e040      	b.n	800346c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d11b      	bne.n	8003428 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003400:	f000 ff56 	bl	80042b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69da      	ldr	r2, [r3, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 020c 	bic.w	r2, r2, #12
 8003412:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69d9      	ldr	r1, [r3, #28]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	61da      	str	r2, [r3, #28]
 8003426:	e021      	b.n	800346c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d11c      	bne.n	8003468 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800343e:	f000 ff73 	bl	8004328 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003450:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69d9      	ldr	r1, [r3, #28]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	021a      	lsls	r2, r3, #8
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	61da      	str	r2, [r3, #28]
 8003466:	e001      	b.n	800346c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800349a:	2302      	movs	r3, #2
 800349c:	e0ff      	b.n	800369e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b14      	cmp	r3, #20
 80034aa:	f200 80f0 	bhi.w	800368e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80034ae:	a201      	add	r2, pc, #4	@ (adr r2, 80034b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b4:	08003509 	.word	0x08003509
 80034b8:	0800368f 	.word	0x0800368f
 80034bc:	0800368f 	.word	0x0800368f
 80034c0:	0800368f 	.word	0x0800368f
 80034c4:	08003549 	.word	0x08003549
 80034c8:	0800368f 	.word	0x0800368f
 80034cc:	0800368f 	.word	0x0800368f
 80034d0:	0800368f 	.word	0x0800368f
 80034d4:	0800358b 	.word	0x0800358b
 80034d8:	0800368f 	.word	0x0800368f
 80034dc:	0800368f 	.word	0x0800368f
 80034e0:	0800368f 	.word	0x0800368f
 80034e4:	080035cb 	.word	0x080035cb
 80034e8:	0800368f 	.word	0x0800368f
 80034ec:	0800368f 	.word	0x0800368f
 80034f0:	0800368f 	.word	0x0800368f
 80034f4:	0800360d 	.word	0x0800360d
 80034f8:	0800368f 	.word	0x0800368f
 80034fc:	0800368f 	.word	0x0800368f
 8003500:	0800368f 	.word	0x0800368f
 8003504:	0800364d 	.word	0x0800364d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fa94 	bl	8003a3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0208 	orr.w	r2, r2, #8
 8003522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6999      	ldr	r1, [r3, #24]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	619a      	str	r2, [r3, #24]
      break;
 8003546:	e0a5      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68b9      	ldr	r1, [r7, #8]
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fb0e 	bl	8003b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6999      	ldr	r1, [r3, #24]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	021a      	lsls	r2, r3, #8
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	619a      	str	r2, [r3, #24]
      break;
 8003588:	e084      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	4618      	mov	r0, r3
 8003592:	f000 fb81 	bl	8003c98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	69da      	ldr	r2, [r3, #28]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0208 	orr.w	r2, r2, #8
 80035a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0204 	bic.w	r2, r2, #4
 80035b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69d9      	ldr	r1, [r3, #28]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	61da      	str	r2, [r3, #28]
      break;
 80035c8:	e064      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68b9      	ldr	r1, [r7, #8]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fbf3 	bl	8003dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69d9      	ldr	r1, [r3, #28]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	021a      	lsls	r2, r3, #8
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	61da      	str	r2, [r3, #28]
      break;
 800360a:	e043      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc66 	bl	8003ee4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0208 	orr.w	r2, r2, #8
 8003626:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0204 	bic.w	r2, r2, #4
 8003636:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800364a:	e023      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	4618      	mov	r0, r3
 8003654:	f000 fcb0 	bl	8003fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003666:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003676:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	021a      	lsls	r2, r3, #8
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800368c:	e002      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	75fb      	strb	r3, [r7, #23]
      break;
 8003692:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800369c:	7dfb      	ldrb	r3, [r7, #23]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop

080036a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d101      	bne.n	80036c4 <HAL_TIM_ConfigClockSource+0x1c>
 80036c0:	2302      	movs	r3, #2
 80036c2:	e0f6      	b.n	80038b2 <HAL_TIM_ConfigClockSource+0x20a>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80036e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80036e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <HAL_TIM_ConfigClockSource+0x214>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f000 80c1 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003704:	4a6d      	ldr	r2, [pc, #436]	@ (80038bc <HAL_TIM_ConfigClockSource+0x214>)
 8003706:	4293      	cmp	r3, r2
 8003708:	f200 80c6 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800370c:	4a6c      	ldr	r2, [pc, #432]	@ (80038c0 <HAL_TIM_ConfigClockSource+0x218>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f000 80b9 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003714:	4a6a      	ldr	r2, [pc, #424]	@ (80038c0 <HAL_TIM_ConfigClockSource+0x218>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f200 80be 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800371c:	4a69      	ldr	r2, [pc, #420]	@ (80038c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f000 80b1 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003724:	4a67      	ldr	r2, [pc, #412]	@ (80038c4 <HAL_TIM_ConfigClockSource+0x21c>)
 8003726:	4293      	cmp	r3, r2
 8003728:	f200 80b6 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800372c:	4a66      	ldr	r2, [pc, #408]	@ (80038c8 <HAL_TIM_ConfigClockSource+0x220>)
 800372e:	4293      	cmp	r3, r2
 8003730:	f000 80a9 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003734:	4a64      	ldr	r2, [pc, #400]	@ (80038c8 <HAL_TIM_ConfigClockSource+0x220>)
 8003736:	4293      	cmp	r3, r2
 8003738:	f200 80ae 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800373c:	4a63      	ldr	r2, [pc, #396]	@ (80038cc <HAL_TIM_ConfigClockSource+0x224>)
 800373e:	4293      	cmp	r3, r2
 8003740:	f000 80a1 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003744:	4a61      	ldr	r2, [pc, #388]	@ (80038cc <HAL_TIM_ConfigClockSource+0x224>)
 8003746:	4293      	cmp	r3, r2
 8003748:	f200 80a6 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800374c:	4a60      	ldr	r2, [pc, #384]	@ (80038d0 <HAL_TIM_ConfigClockSource+0x228>)
 800374e:	4293      	cmp	r3, r2
 8003750:	f000 8099 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003754:	4a5e      	ldr	r2, [pc, #376]	@ (80038d0 <HAL_TIM_ConfigClockSource+0x228>)
 8003756:	4293      	cmp	r3, r2
 8003758:	f200 809e 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800375c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003760:	f000 8091 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003764:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003768:	f200 8096 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800376c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003770:	f000 8089 	beq.w	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 8003774:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003778:	f200 808e 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800377c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003780:	d03e      	beq.n	8003800 <HAL_TIM_ConfigClockSource+0x158>
 8003782:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003786:	f200 8087 	bhi.w	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 800378a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378e:	f000 8086 	beq.w	800389e <HAL_TIM_ConfigClockSource+0x1f6>
 8003792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003796:	d87f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 8003798:	2b70      	cmp	r3, #112	@ 0x70
 800379a:	d01a      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x12a>
 800379c:	2b70      	cmp	r3, #112	@ 0x70
 800379e:	d87b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	2b60      	cmp	r3, #96	@ 0x60
 80037a2:	d050      	beq.n	8003846 <HAL_TIM_ConfigClockSource+0x19e>
 80037a4:	2b60      	cmp	r3, #96	@ 0x60
 80037a6:	d877      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037a8:	2b50      	cmp	r3, #80	@ 0x50
 80037aa:	d03c      	beq.n	8003826 <HAL_TIM_ConfigClockSource+0x17e>
 80037ac:	2b50      	cmp	r3, #80	@ 0x50
 80037ae:	d873      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b0:	2b40      	cmp	r3, #64	@ 0x40
 80037b2:	d058      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0x1be>
 80037b4:	2b40      	cmp	r3, #64	@ 0x40
 80037b6:	d86f      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037b8:	2b30      	cmp	r3, #48	@ 0x30
 80037ba:	d064      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 80037bc:	2b30      	cmp	r3, #48	@ 0x30
 80037be:	d86b      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c0:	2b20      	cmp	r3, #32
 80037c2:	d060      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 80037c4:	2b20      	cmp	r3, #32
 80037c6:	d867      	bhi.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d05c      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d05a      	beq.n	8003886 <HAL_TIM_ConfigClockSource+0x1de>
 80037d0:	e062      	b.n	8003898 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037e2:	f000 fdfb 	bl	80043dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	609a      	str	r2, [r3, #8]
      break;
 80037fe:	e04f      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003810:	f000 fde4 	bl	80043dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003822:	609a      	str	r2, [r3, #8]
      break;
 8003824:	e03c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003832:	461a      	mov	r2, r3
 8003834:	f000 fca0 	bl	8004178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2150      	movs	r1, #80	@ 0x50
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fdaf 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003844:	e02c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003852:	461a      	mov	r2, r3
 8003854:	f000 fcfc 	bl	8004250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2160      	movs	r1, #96	@ 0x60
 800385e:	4618      	mov	r0, r3
 8003860:	f000 fd9f 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003864:	e01c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003872:	461a      	mov	r2, r3
 8003874:	f000 fc80 	bl	8004178 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2140      	movs	r1, #64	@ 0x40
 800387e:	4618      	mov	r0, r3
 8003880:	f000 fd8f 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003884:	e00c      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f000 fd86 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003896:	e003      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	73fb      	strb	r3, [r7, #15]
      break;
 800389c:	e000      	b.n	80038a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800389e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	00100070 	.word	0x00100070
 80038c0:	00100060 	.word	0x00100060
 80038c4:	00100050 	.word	0x00100050
 80038c8:	00100040 	.word	0x00100040
 80038cc:	00100030 	.word	0x00100030
 80038d0:	00100020 	.word	0x00100020

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d017      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038f2:	d013      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a49      	ldr	r2, [pc, #292]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00f      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a48      	ldr	r2, [pc, #288]	@ (8003a20 <TIM_Base_SetConfig+0x14c>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00b      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a47      	ldr	r2, [pc, #284]	@ (8003a24 <TIM_Base_SetConfig+0x150>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d007      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a46      	ldr	r2, [pc, #280]	@ (8003a28 <TIM_Base_SetConfig+0x154>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0x48>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a45      	ldr	r2, [pc, #276]	@ (8003a2c <TIM_Base_SetConfig+0x158>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d108      	bne.n	800392e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a39      	ldr	r2, [pc, #228]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d023      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800393c:	d01f      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a36      	ldr	r2, [pc, #216]	@ (8003a1c <TIM_Base_SetConfig+0x148>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01b      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a35      	ldr	r2, [pc, #212]	@ (8003a20 <TIM_Base_SetConfig+0x14c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d017      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a34      	ldr	r2, [pc, #208]	@ (8003a24 <TIM_Base_SetConfig+0x150>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d013      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a33      	ldr	r2, [pc, #204]	@ (8003a28 <TIM_Base_SetConfig+0x154>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d00f      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a33      	ldr	r2, [pc, #204]	@ (8003a30 <TIM_Base_SetConfig+0x15c>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00b      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a32      	ldr	r2, [pc, #200]	@ (8003a34 <TIM_Base_SetConfig+0x160>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a31      	ldr	r2, [pc, #196]	@ (8003a38 <TIM_Base_SetConfig+0x164>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_Base_SetConfig+0xaa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a2c      	ldr	r2, [pc, #176]	@ (8003a2c <TIM_Base_SetConfig+0x158>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d108      	bne.n	8003990 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a18      	ldr	r2, [pc, #96]	@ (8003a18 <TIM_Base_SetConfig+0x144>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <TIM_Base_SetConfig+0x110>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a1a      	ldr	r2, [pc, #104]	@ (8003a28 <TIM_Base_SetConfig+0x154>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d00f      	beq.n	80039e4 <TIM_Base_SetConfig+0x110>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003a30 <TIM_Base_SetConfig+0x15c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00b      	beq.n	80039e4 <TIM_Base_SetConfig+0x110>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a19      	ldr	r2, [pc, #100]	@ (8003a34 <TIM_Base_SetConfig+0x160>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d007      	beq.n	80039e4 <TIM_Base_SetConfig+0x110>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a18      	ldr	r2, [pc, #96]	@ (8003a38 <TIM_Base_SetConfig+0x164>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d003      	beq.n	80039e4 <TIM_Base_SetConfig+0x110>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a13      	ldr	r2, [pc, #76]	@ (8003a2c <TIM_Base_SetConfig+0x158>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d103      	bne.n	80039ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d105      	bne.n	8003a0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f023 0201 	bic.w	r2, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40012c00 	.word	0x40012c00
 8003a1c:	40000400 	.word	0x40000400
 8003a20:	40000800 	.word	0x40000800
 8003a24:	40000c00 	.word	0x40000c00
 8003a28:	40013400 	.word	0x40013400
 8003a2c:	40015000 	.word	0x40015000
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800

08003a3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f023 0201 	bic.w	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0303 	bic.w	r3, r3, #3
 8003a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f023 0302 	bic.w	r3, r3, #2
 8003a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a30      	ldr	r2, [pc, #192]	@ (8003b58 <TIM_OC1_SetConfig+0x11c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d013      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x88>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003b5c <TIM_OC1_SetConfig+0x120>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00f      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x88>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a2e      	ldr	r2, [pc, #184]	@ (8003b60 <TIM_OC1_SetConfig+0x124>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00b      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x88>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a2d      	ldr	r2, [pc, #180]	@ (8003b64 <TIM_OC1_SetConfig+0x128>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d007      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x88>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8003b68 <TIM_OC1_SetConfig+0x12c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d003      	beq.n	8003ac4 <TIM_OC1_SetConfig+0x88>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2b      	ldr	r2, [pc, #172]	@ (8003b6c <TIM_OC1_SetConfig+0x130>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10c      	bne.n	8003ade <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0308 	bic.w	r3, r3, #8
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b58 <TIM_OC1_SetConfig+0x11c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d013      	beq.n	8003b0e <TIM_OC1_SetConfig+0xd2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8003b5c <TIM_OC1_SetConfig+0x120>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00f      	beq.n	8003b0e <TIM_OC1_SetConfig+0xd2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a1b      	ldr	r2, [pc, #108]	@ (8003b60 <TIM_OC1_SetConfig+0x124>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00b      	beq.n	8003b0e <TIM_OC1_SetConfig+0xd2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <TIM_OC1_SetConfig+0x128>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <TIM_OC1_SetConfig+0xd2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a19      	ldr	r2, [pc, #100]	@ (8003b68 <TIM_OC1_SetConfig+0x12c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC1_SetConfig+0xd2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a18      	ldr	r2, [pc, #96]	@ (8003b6c <TIM_OC1_SetConfig+0x130>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40014000 	.word	0x40014000
 8003b64:	40014400 	.word	0x40014400
 8003b68:	40014800 	.word	0x40014800
 8003b6c:	40015000 	.word	0x40015000

08003b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	f023 0210 	bic.w	r2, r3, #16
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	021b      	lsls	r3, r3, #8
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 0320 	bic.w	r3, r3, #32
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a2c      	ldr	r2, [pc, #176]	@ (8003c80 <TIM_OC2_SetConfig+0x110>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC2_SetConfig+0x74>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c84 <TIM_OC2_SetConfig+0x114>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d003      	beq.n	8003be4 <TIM_OC2_SetConfig+0x74>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a2a      	ldr	r2, [pc, #168]	@ (8003c88 <TIM_OC2_SetConfig+0x118>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d10d      	bne.n	8003c00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a1f      	ldr	r2, [pc, #124]	@ (8003c80 <TIM_OC2_SetConfig+0x110>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d013      	beq.n	8003c30 <TIM_OC2_SetConfig+0xc0>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003c84 <TIM_OC2_SetConfig+0x114>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00f      	beq.n	8003c30 <TIM_OC2_SetConfig+0xc0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	@ (8003c8c <TIM_OC2_SetConfig+0x11c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_OC2_SetConfig+0xc0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8003c90 <TIM_OC2_SetConfig+0x120>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC2_SetConfig+0xc0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a1c      	ldr	r2, [pc, #112]	@ (8003c94 <TIM_OC2_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC2_SetConfig+0xc0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a17      	ldr	r2, [pc, #92]	@ (8003c88 <TIM_OC2_SetConfig+0x118>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d113      	bne.n	8003c58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40013400 	.word	0x40013400
 8003c88:	40015000 	.word	0x40015000
 8003c8c:	40014000 	.word	0x40014000
 8003c90:	40014400 	.word	0x40014400
 8003c94:	40014800 	.word	0x40014800

08003c98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0303 	bic.w	r3, r3, #3
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a2b      	ldr	r2, [pc, #172]	@ (8003da4 <TIM_OC3_SetConfig+0x10c>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC3_SetConfig+0x72>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a2a      	ldr	r2, [pc, #168]	@ (8003da8 <TIM_OC3_SetConfig+0x110>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x72>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a29      	ldr	r2, [pc, #164]	@ (8003dac <TIM_OC3_SetConfig+0x114>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d10d      	bne.n	8003d26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	021b      	lsls	r3, r3, #8
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <TIM_OC3_SetConfig+0x10c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d013      	beq.n	8003d56 <TIM_OC3_SetConfig+0xbe>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1d      	ldr	r2, [pc, #116]	@ (8003da8 <TIM_OC3_SetConfig+0x110>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d00f      	beq.n	8003d56 <TIM_OC3_SetConfig+0xbe>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1d      	ldr	r2, [pc, #116]	@ (8003db0 <TIM_OC3_SetConfig+0x118>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d00b      	beq.n	8003d56 <TIM_OC3_SetConfig+0xbe>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a1c      	ldr	r2, [pc, #112]	@ (8003db4 <TIM_OC3_SetConfig+0x11c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d007      	beq.n	8003d56 <TIM_OC3_SetConfig+0xbe>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a1b      	ldr	r2, [pc, #108]	@ (8003db8 <TIM_OC3_SetConfig+0x120>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d003      	beq.n	8003d56 <TIM_OC3_SetConfig+0xbe>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a16      	ldr	r2, [pc, #88]	@ (8003dac <TIM_OC3_SetConfig+0x114>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d113      	bne.n	8003d7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	621a      	str	r2, [r3, #32]
}
 8003d98:	bf00      	nop
 8003d9a:	371c      	adds	r7, #28
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr
 8003da4:	40012c00 	.word	0x40012c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40015000 	.word	0x40015000
 8003db0:	40014000 	.word	0x40014000
 8003db4:	40014400 	.word	0x40014400
 8003db8:	40014800 	.word	0x40014800

08003dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003dea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	031b      	lsls	r3, r3, #12
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <TIM_OC4_SetConfig+0x110>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <TIM_OC4_SetConfig+0x74>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a2b      	ldr	r2, [pc, #172]	@ (8003ed0 <TIM_OC4_SetConfig+0x114>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d003      	beq.n	8003e30 <TIM_OC4_SetConfig+0x74>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <TIM_OC4_SetConfig+0x118>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d10d      	bne.n	8003e4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <TIM_OC4_SetConfig+0x110>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d013      	beq.n	8003e7c <TIM_OC4_SetConfig+0xc0>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed0 <TIM_OC4_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d00f      	beq.n	8003e7c <TIM_OC4_SetConfig+0xc0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed8 <TIM_OC4_SetConfig+0x11c>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00b      	beq.n	8003e7c <TIM_OC4_SetConfig+0xc0>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <TIM_OC4_SetConfig+0x120>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d007      	beq.n	8003e7c <TIM_OC4_SetConfig+0xc0>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <TIM_OC4_SetConfig+0x124>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d003      	beq.n	8003e7c <TIM_OC4_SetConfig+0xc0>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a17      	ldr	r2, [pc, #92]	@ (8003ed4 <TIM_OC4_SetConfig+0x118>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d113      	bne.n	8003ea4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	019b      	lsls	r3, r3, #6
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40012c00 	.word	0x40012c00
 8003ed0:	40013400 	.word	0x40013400
 8003ed4:	40015000 	.word	0x40015000
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40014400 	.word	0x40014400
 8003ee0:	40014800 	.word	0x40014800

08003ee4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	041b      	lsls	r3, r3, #16
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a19      	ldr	r2, [pc, #100]	@ (8003fa0 <TIM_OC5_SetConfig+0xbc>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <TIM_OC5_SetConfig+0x82>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <TIM_OC5_SetConfig+0xc0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d00f      	beq.n	8003f66 <TIM_OC5_SetConfig+0x82>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a17      	ldr	r2, [pc, #92]	@ (8003fa8 <TIM_OC5_SetConfig+0xc4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_OC5_SetConfig+0x82>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a16      	ldr	r2, [pc, #88]	@ (8003fac <TIM_OC5_SetConfig+0xc8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d007      	beq.n	8003f66 <TIM_OC5_SetConfig+0x82>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a15      	ldr	r2, [pc, #84]	@ (8003fb0 <TIM_OC5_SetConfig+0xcc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_OC5_SetConfig+0x82>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a14      	ldr	r2, [pc, #80]	@ (8003fb4 <TIM_OC5_SetConfig+0xd0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d109      	bne.n	8003f7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	021b      	lsls	r3, r3, #8
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	685a      	ldr	r2, [r3, #4]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	621a      	str	r2, [r3, #32]
}
 8003f94:	bf00      	nop
 8003f96:	371c      	adds	r7, #28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40015000 	.word	0x40015000

08003fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	051b      	lsls	r3, r3, #20
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <TIM_OC6_SetConfig+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_OC6_SetConfig+0x84>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a19      	ldr	r2, [pc, #100]	@ (800407c <TIM_OC6_SetConfig+0xc4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_OC6_SetConfig+0x84>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a18      	ldr	r2, [pc, #96]	@ (8004080 <TIM_OC6_SetConfig+0xc8>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_OC6_SetConfig+0x84>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a17      	ldr	r2, [pc, #92]	@ (8004084 <TIM_OC6_SetConfig+0xcc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_OC6_SetConfig+0x84>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a16      	ldr	r2, [pc, #88]	@ (8004088 <TIM_OC6_SetConfig+0xd0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_OC6_SetConfig+0x84>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a15      	ldr	r2, [pc, #84]	@ (800408c <TIM_OC6_SetConfig+0xd4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d109      	bne.n	8004050 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004042:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	029b      	lsls	r3, r3, #10
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	621a      	str	r2, [r3, #32]
}
 800406a:	bf00      	nop
 800406c:	371c      	adds	r7, #28
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800
 800408c:	40015000 	.word	0x40015000

08004090 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 0201 	bic.w	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	4a28      	ldr	r2, [pc, #160]	@ (800415c <TIM_TI1_SetConfig+0xcc>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01b      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c4:	d017      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4a25      	ldr	r2, [pc, #148]	@ (8004160 <TIM_TI1_SetConfig+0xd0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d013      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <TIM_TI1_SetConfig+0xd4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d00f      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <TIM_TI1_SetConfig+0xd8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00b      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	4a22      	ldr	r2, [pc, #136]	@ (800416c <TIM_TI1_SetConfig+0xdc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d007      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4a21      	ldr	r2, [pc, #132]	@ (8004170 <TIM_TI1_SetConfig+0xe0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d003      	beq.n	80040f6 <TIM_TI1_SetConfig+0x66>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	4a20      	ldr	r2, [pc, #128]	@ (8004174 <TIM_TI1_SetConfig+0xe4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d101      	bne.n	80040fa <TIM_TI1_SetConfig+0x6a>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <TIM_TI1_SetConfig+0x6c>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004108:	697a      	ldr	r2, [r7, #20]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e003      	b.n	800411a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	b2db      	uxtb	r3, r3
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f023 030a 	bic.w	r3, r3, #10
 8004134:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f003 030a 	and.w	r3, r3, #10
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	621a      	str	r2, [r3, #32]
}
 800414e:	bf00      	nop
 8004150:	371c      	adds	r7, #28
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40000c00 	.word	0x40000c00
 800416c:	40013400 	.word	0x40013400
 8004170:	40014000 	.word	0x40014000
 8004174:	40015000 	.word	0x40015000

08004178 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	f023 0201 	bic.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	f023 030a 	bic.w	r3, r3, #10
 80041b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	621a      	str	r2, [r3, #32]
}
 80041ca:	bf00      	nop
 80041cc:	371c      	adds	r7, #28
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b087      	sub	sp, #28
 80041da:	af00      	add	r7, sp, #0
 80041dc:	60f8      	str	r0, [r7, #12]
 80041de:	60b9      	str	r1, [r7, #8]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004214:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	031b      	lsls	r3, r3, #12
 800421a:	b29b      	uxth	r3, r3
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	4313      	orrs	r3, r2
 8004220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004228:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	693a      	ldr	r2, [r7, #16]
 800423c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	621a      	str	r2, [r3, #32]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	f023 0210 	bic.w	r2, r3, #16
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800427a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	031b      	lsls	r3, r3, #12
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800428c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	621a      	str	r2, [r3, #32]
}
 80042a4:	bf00      	nop
 80042a6:	371c      	adds	r7, #28
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a1b      	ldr	r3, [r3, #32]
 80042c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f023 0303 	bic.w	r3, r3, #3
 80042dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004300:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	621a      	str	r2, [r3, #32]
}
 800431c:	bf00      	nop
 800431e:	371c      	adds	r7, #28
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004354:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004366:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	b29b      	uxth	r3, r3
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800437a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80043b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f043 0307 	orr.w	r3, r3, #7
 80043c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	021a      	lsls	r2, r3, #8
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	431a      	orrs	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4313      	orrs	r3, r2
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	609a      	str	r2, [r3, #8]
}
 8004410:	bf00      	nop
 8004412:	371c      	adds	r7, #28
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	2201      	movs	r2, #1
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6a1a      	ldr	r2, [r3, #32]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	43db      	mvns	r3, r3
 800443e:	401a      	ands	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f003 031f 	and.w	r3, r3, #31
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	fa01 f303 	lsl.w	r3, r1, r3
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	621a      	str	r2, [r3, #32]
}
 800445a:	bf00      	nop
 800445c:	371c      	adds	r7, #28
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
	...

08004468 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800447c:	2302      	movs	r3, #2
 800447e:	e074      	b.n	800456a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a34      	ldr	r2, [pc, #208]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a33      	ldr	r2, [pc, #204]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a31      	ldr	r2, [pc, #196]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d108      	bne.n	80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80044d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a21      	ldr	r2, [pc, #132]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004500:	d01d      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1f      	ldr	r2, [pc, #124]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1d      	ldr	r2, [pc, #116]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a1c      	ldr	r2, [pc, #112]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a15      	ldr	r2, [pc, #84]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a18      	ldr	r2, [pc, #96]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10c      	bne.n	8004558 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	4313      	orrs	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40015000 	.word	0x40015000
 8004584:	40000400 	.word	0x40000400
 8004588:	40000800 	.word	0x40000800
 800458c:	40000c00 	.word	0x40000c00
 8004590:	40014000 	.word	0x40014000

08004594 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e078      	b.n	80046a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	4313      	orrs	r3, r2
 80045e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	041b      	lsls	r3, r3, #16
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a1c      	ldr	r2, [pc, #112]	@ (80046b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a1b      	ldr	r2, [pc, #108]	@ (80046b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d004      	beq.n	8004656 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a19      	ldr	r2, [pc, #100]	@ (80046b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d11c      	bne.n	8004690 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	051b      	lsls	r3, r3, #20
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468c:	4313      	orrs	r3, r2
 800468e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40015000 	.word	0x40015000

080046bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e042      	b.n	8004754 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d106      	bne.n	80046e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7fc fc8d 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2224      	movs	r2, #36	@ 0x24
 80046ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fb7c 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f87d 	bl	800480c <UART_SetConfig>
 8004712:	4603      	mov	r3, r0
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e01b      	b.n	8004754 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685a      	ldr	r2, [r3, #4]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800472a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800473a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fbfb 	bl	8004f48 <UART_CheckIdleState>
 8004752:	4603      	mov	r3, r0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e04a      	b.n	8004804 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7fc fc3d 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2224      	movs	r2, #36	@ 0x24
 800478a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0201 	bic.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d002      	beq.n	80047ac <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb2c 	bl	8004e04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f82d 	bl	800480c <UART_SetConfig>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	e023      	b.n	8004804 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685a      	ldr	r2, [r3, #4]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689a      	ldr	r2, [r3, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80047da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0208 	orr.w	r2, r2, #8
 80047ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 fba3 	bl	8004f48 <UART_CheckIdleState>
 8004802:	4603      	mov	r3, r0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800480c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004810:	b08c      	sub	sp, #48	@ 0x30
 8004812:	af00      	add	r7, sp, #0
 8004814:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	431a      	orrs	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	431a      	orrs	r2, r3
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	4313      	orrs	r3, r2
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4baa      	ldr	r3, [pc, #680]	@ (8004ae4 <UART_SetConfig+0x2d8>)
 800483c:	4013      	ands	r3, r2
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6812      	ldr	r2, [r2, #0]
 8004842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004844:	430b      	orrs	r3, r1
 8004846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	430a      	orrs	r2, r1
 800485c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a9f      	ldr	r2, [pc, #636]	@ (8004ae8 <UART_SetConfig+0x2dc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d004      	beq.n	8004878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004874:	4313      	orrs	r3, r2
 8004876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004882:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800488c:	430b      	orrs	r3, r1
 800488e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004896:	f023 010f 	bic.w	r1, r3, #15
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a90      	ldr	r2, [pc, #576]	@ (8004aec <UART_SetConfig+0x2e0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d125      	bne.n	80048fc <UART_SetConfig+0xf0>
 80048b0:	4b8f      	ldr	r3, [pc, #572]	@ (8004af0 <UART_SetConfig+0x2e4>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d81a      	bhi.n	80048f4 <UART_SetConfig+0xe8>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0xb8>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048d5 	.word	0x080048d5
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048dd 	.word	0x080048dd
 80048d0:	080048ed 	.word	0x080048ed
 80048d4:	2301      	movs	r3, #1
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048da:	e116      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80048dc:	2302      	movs	r3, #2
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e2:	e112      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ea:	e10e      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f2:	e10a      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fa:	e106      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a7c      	ldr	r2, [pc, #496]	@ (8004af4 <UART_SetConfig+0x2e8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d138      	bne.n	8004978 <UART_SetConfig+0x16c>
 8004906:	4b7a      	ldr	r3, [pc, #488]	@ (8004af0 <UART_SetConfig+0x2e4>)
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800490c:	f003 030c 	and.w	r3, r3, #12
 8004910:	2b0c      	cmp	r3, #12
 8004912:	d82d      	bhi.n	8004970 <UART_SetConfig+0x164>
 8004914:	a201      	add	r2, pc, #4	@ (adr r2, 800491c <UART_SetConfig+0x110>)
 8004916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491a:	bf00      	nop
 800491c:	08004951 	.word	0x08004951
 8004920:	08004971 	.word	0x08004971
 8004924:	08004971 	.word	0x08004971
 8004928:	08004971 	.word	0x08004971
 800492c:	08004961 	.word	0x08004961
 8004930:	08004971 	.word	0x08004971
 8004934:	08004971 	.word	0x08004971
 8004938:	08004971 	.word	0x08004971
 800493c:	08004959 	.word	0x08004959
 8004940:	08004971 	.word	0x08004971
 8004944:	08004971 	.word	0x08004971
 8004948:	08004971 	.word	0x08004971
 800494c:	08004969 	.word	0x08004969
 8004950:	2300      	movs	r3, #0
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004956:	e0d8      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004958:	2302      	movs	r3, #2
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495e:	e0d4      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004960:	2304      	movs	r3, #4
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004966:	e0d0      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004968:	2308      	movs	r3, #8
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800496e:	e0cc      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004970:	2310      	movs	r3, #16
 8004972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004976:	e0c8      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a5e      	ldr	r2, [pc, #376]	@ (8004af8 <UART_SetConfig+0x2ec>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d125      	bne.n	80049ce <UART_SetConfig+0x1c2>
 8004982:	4b5b      	ldr	r3, [pc, #364]	@ (8004af0 <UART_SetConfig+0x2e4>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800498c:	2b30      	cmp	r3, #48	@ 0x30
 800498e:	d016      	beq.n	80049be <UART_SetConfig+0x1b2>
 8004990:	2b30      	cmp	r3, #48	@ 0x30
 8004992:	d818      	bhi.n	80049c6 <UART_SetConfig+0x1ba>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d00a      	beq.n	80049ae <UART_SetConfig+0x1a2>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d814      	bhi.n	80049c6 <UART_SetConfig+0x1ba>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <UART_SetConfig+0x19a>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d008      	beq.n	80049b6 <UART_SetConfig+0x1aa>
 80049a4:	e00f      	b.n	80049c6 <UART_SetConfig+0x1ba>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ac:	e0ad      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80049ae:	2302      	movs	r3, #2
 80049b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b4:	e0a9      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80049b6:	2304      	movs	r3, #4
 80049b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049bc:	e0a5      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80049be:	2308      	movs	r3, #8
 80049c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049c4:	e0a1      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80049c6:	2310      	movs	r3, #16
 80049c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049cc:	e09d      	b.n	8004b0a <UART_SetConfig+0x2fe>
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4a      	ldr	r2, [pc, #296]	@ (8004afc <UART_SetConfig+0x2f0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d125      	bne.n	8004a24 <UART_SetConfig+0x218>
 80049d8:	4b45      	ldr	r3, [pc, #276]	@ (8004af0 <UART_SetConfig+0x2e4>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049de:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049e4:	d016      	beq.n	8004a14 <UART_SetConfig+0x208>
 80049e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80049e8:	d818      	bhi.n	8004a1c <UART_SetConfig+0x210>
 80049ea:	2b80      	cmp	r3, #128	@ 0x80
 80049ec:	d00a      	beq.n	8004a04 <UART_SetConfig+0x1f8>
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d814      	bhi.n	8004a1c <UART_SetConfig+0x210>
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d002      	beq.n	80049fc <UART_SetConfig+0x1f0>
 80049f6:	2b40      	cmp	r3, #64	@ 0x40
 80049f8:	d008      	beq.n	8004a0c <UART_SetConfig+0x200>
 80049fa:	e00f      	b.n	8004a1c <UART_SetConfig+0x210>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e082      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a04:	2302      	movs	r3, #2
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e07e      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e07a      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a14:	2308      	movs	r3, #8
 8004a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a1a:	e076      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a22:	e072      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a35      	ldr	r2, [pc, #212]	@ (8004b00 <UART_SetConfig+0x2f4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d12a      	bne.n	8004a84 <UART_SetConfig+0x278>
 8004a2e:	4b30      	ldr	r3, [pc, #192]	@ (8004af0 <UART_SetConfig+0x2e4>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a3c:	d01a      	beq.n	8004a74 <UART_SetConfig+0x268>
 8004a3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a42:	d81b      	bhi.n	8004a7c <UART_SetConfig+0x270>
 8004a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a48:	d00c      	beq.n	8004a64 <UART_SetConfig+0x258>
 8004a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a4e:	d815      	bhi.n	8004a7c <UART_SetConfig+0x270>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <UART_SetConfig+0x250>
 8004a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x260>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x270>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a62:	e052      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e04e      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a72:	e04a      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a7a:	e046      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a82:	e042      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a17      	ldr	r2, [pc, #92]	@ (8004ae8 <UART_SetConfig+0x2dc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d13a      	bne.n	8004b04 <UART_SetConfig+0x2f8>
 8004a8e:	4b18      	ldr	r3, [pc, #96]	@ (8004af0 <UART_SetConfig+0x2e4>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a9c:	d01a      	beq.n	8004ad4 <UART_SetConfig+0x2c8>
 8004a9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aa2:	d81b      	bhi.n	8004adc <UART_SetConfig+0x2d0>
 8004aa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aa8:	d00c      	beq.n	8004ac4 <UART_SetConfig+0x2b8>
 8004aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aae:	d815      	bhi.n	8004adc <UART_SetConfig+0x2d0>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <UART_SetConfig+0x2b0>
 8004ab4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab8:	d008      	beq.n	8004acc <UART_SetConfig+0x2c0>
 8004aba:	e00f      	b.n	8004adc <UART_SetConfig+0x2d0>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ac2:	e022      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aca:	e01e      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004acc:	2304      	movs	r3, #4
 8004ace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ad2:	e01a      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ada:	e016      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004adc:	2310      	movs	r3, #16
 8004ade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ae2:	e012      	b.n	8004b0a <UART_SetConfig+0x2fe>
 8004ae4:	cfff69f3 	.word	0xcfff69f3
 8004ae8:	40008000 	.word	0x40008000
 8004aec:	40013800 	.word	0x40013800
 8004af0:	40021000 	.word	0x40021000
 8004af4:	40004400 	.word	0x40004400
 8004af8:	40004800 	.word	0x40004800
 8004afc:	40004c00 	.word	0x40004c00
 8004b00:	40005000 	.word	0x40005000
 8004b04:	2310      	movs	r3, #16
 8004b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4aae      	ldr	r2, [pc, #696]	@ (8004dc8 <UART_SetConfig+0x5bc>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	f040 8097 	bne.w	8004c44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d823      	bhi.n	8004b66 <UART_SetConfig+0x35a>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x318>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b49 	.word	0x08004b49
 8004b28:	08004b67 	.word	0x08004b67
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b67 	.word	0x08004b67
 8004b34:	08004b57 	.word	0x08004b57
 8004b38:	08004b67 	.word	0x08004b67
 8004b3c:	08004b67 	.word	0x08004b67
 8004b40:	08004b67 	.word	0x08004b67
 8004b44:	08004b5f 	.word	0x08004b5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7fd ff12 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b4e:	e010      	b.n	8004b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b50:	4b9e      	ldr	r3, [pc, #632]	@ (8004dcc <UART_SetConfig+0x5c0>)
 8004b52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b54:	e00d      	b.n	8004b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b56:	f7fd fe9d 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004b5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004b5c:	e009      	b.n	8004b72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004b64:	e005      	b.n	8004b72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004b66:	2300      	movs	r3, #0
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8130 	beq.w	8004dda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b7e:	4a94      	ldr	r2, [pc, #592]	@ (8004dd0 <UART_SetConfig+0x5c4>)
 8004b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b84:	461a      	mov	r2, r3
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	4413      	add	r3, r2
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d305      	bcc.n	8004baa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d903      	bls.n	8004bb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bb0:	e113      	b.n	8004dda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	60bb      	str	r3, [r7, #8]
 8004bb8:	60fa      	str	r2, [r7, #12]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	4a84      	ldr	r2, [pc, #528]	@ (8004dd0 <UART_SetConfig+0x5c4>)
 8004bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004bd4:	f7fb fb20 	bl	8000218 <__aeabi_uldivmod>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4610      	mov	r0, r2
 8004bde:	4619      	mov	r1, r3
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	020b      	lsls	r3, r1, #8
 8004bea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bee:	0202      	lsls	r2, r0, #8
 8004bf0:	6979      	ldr	r1, [r7, #20]
 8004bf2:	6849      	ldr	r1, [r1, #4]
 8004bf4:	0849      	lsrs	r1, r1, #1
 8004bf6:	2000      	movs	r0, #0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4605      	mov	r5, r0
 8004bfc:	eb12 0804 	adds.w	r8, r2, r4
 8004c00:	eb43 0905 	adc.w	r9, r3, r5
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	469a      	mov	sl, r3
 8004c0c:	4693      	mov	fp, r2
 8004c0e:	4652      	mov	r2, sl
 8004c10:	465b      	mov	r3, fp
 8004c12:	4640      	mov	r0, r8
 8004c14:	4649      	mov	r1, r9
 8004c16:	f7fb faff 	bl	8000218 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4613      	mov	r3, r2
 8004c20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c28:	d308      	bcc.n	8004c3c <UART_SetConfig+0x430>
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c30:	d204      	bcs.n	8004c3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	e0ce      	b.n	8004dda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004c42:	e0ca      	b.n	8004dda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c4c:	d166      	bne.n	8004d1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004c4e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d827      	bhi.n	8004ca6 <UART_SetConfig+0x49a>
 8004c56:	a201      	add	r2, pc, #4	@ (adr r2, 8004c5c <UART_SetConfig+0x450>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c81 	.word	0x08004c81
 8004c60:	08004c89 	.word	0x08004c89
 8004c64:	08004c91 	.word	0x08004c91
 8004c68:	08004ca7 	.word	0x08004ca7
 8004c6c:	08004c97 	.word	0x08004c97
 8004c70:	08004ca7 	.word	0x08004ca7
 8004c74:	08004ca7 	.word	0x08004ca7
 8004c78:	08004ca7 	.word	0x08004ca7
 8004c7c:	08004c9f 	.word	0x08004c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c80:	f7fd fe76 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c86:	e014      	b.n	8004cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c88:	f7fd fe88 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c8e:	e010      	b.n	8004cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c90:	4b4e      	ldr	r3, [pc, #312]	@ (8004dcc <UART_SetConfig+0x5c0>)
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c94:	e00d      	b.n	8004cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c96:	f7fd fdfd 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004c9a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c9c:	e009      	b.n	8004cb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ca2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ca4:	e005      	b.n	8004cb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004cb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8090 	beq.w	8004dda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	4a44      	ldr	r2, [pc, #272]	@ (8004dd0 <UART_SetConfig+0x5c4>)
 8004cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ccc:	005a      	lsls	r2, r3, #1
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	441a      	add	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	2b0f      	cmp	r3, #15
 8004ce4:	d916      	bls.n	8004d14 <UART_SetConfig+0x508>
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cec:	d212      	bcs.n	8004d14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	f023 030f 	bic.w	r3, r3, #15
 8004cf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	8bfb      	ldrh	r3, [r7, #30]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	8bfa      	ldrh	r2, [r7, #30]
 8004d10:	60da      	str	r2, [r3, #12]
 8004d12:	e062      	b.n	8004dda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d1a:	e05e      	b.n	8004dda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d1c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d828      	bhi.n	8004d76 <UART_SetConfig+0x56a>
 8004d24:	a201      	add	r2, pc, #4	@ (adr r2, 8004d2c <UART_SetConfig+0x520>)
 8004d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2a:	bf00      	nop
 8004d2c:	08004d51 	.word	0x08004d51
 8004d30:	08004d59 	.word	0x08004d59
 8004d34:	08004d61 	.word	0x08004d61
 8004d38:	08004d77 	.word	0x08004d77
 8004d3c:	08004d67 	.word	0x08004d67
 8004d40:	08004d77 	.word	0x08004d77
 8004d44:	08004d77 	.word	0x08004d77
 8004d48:	08004d77 	.word	0x08004d77
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d50:	f7fd fe0e 	bl	8002970 <HAL_RCC_GetPCLK1Freq>
 8004d54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d56:	e014      	b.n	8004d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fd fe20 	bl	800299c <HAL_RCC_GetPCLK2Freq>
 8004d5c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b1a      	ldr	r3, [pc, #104]	@ (8004dcc <UART_SetConfig+0x5c0>)
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d64:	e00d      	b.n	8004d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fd fd95 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8004d6a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d80:	bf00      	nop
    }

    if (pclk != 0U)
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d028      	beq.n	8004dda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	4a10      	ldr	r2, [pc, #64]	@ (8004dd0 <UART_SetConfig+0x5c4>)
 8004d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d910      	bls.n	8004dd4 <UART_SetConfig+0x5c8>
 8004db2:	6a3b      	ldr	r3, [r7, #32]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004db8:	d20c      	bcs.n	8004dd4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004dba:	6a3b      	ldr	r3, [r7, #32]
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60da      	str	r2, [r3, #12]
 8004dc4:	e009      	b.n	8004dda <UART_SetConfig+0x5ce>
 8004dc6:	bf00      	nop
 8004dc8:	40008000 	.word	0x40008000
 8004dcc:	00f42400 	.word	0x00f42400
 8004dd0:	080054d0 	.word	0x080054d0
      }
      else
      {
        ret = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2201      	movs	r2, #1
 8004de6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2200      	movs	r2, #0
 8004dee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004df6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3730      	adds	r7, #48	@ 0x30
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004e04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00a      	beq.n	8004e72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00a      	beq.n	8004e94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00a      	beq.n	8004eb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00a      	beq.n	8004ed8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004edc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01a      	beq.n	8004f1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f02:	d10a      	bne.n	8004f1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	430a      	orrs	r2, r1
 8004f3a:	605a      	str	r2, [r3, #4]
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b098      	sub	sp, #96	@ 0x60
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f58:	f7fc f9d4 	bl	8001304 <HAL_GetTick>
 8004f5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d12f      	bne.n	8004fcc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f74:	2200      	movs	r2, #0
 8004f76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f88e 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d022      	beq.n	8004fcc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004faa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e6      	bne.n	8004f86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e063      	b.n	8005094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0304 	and.w	r3, r3, #4
 8004fd6:	2b04      	cmp	r3, #4
 8004fd8:	d149      	bne.n	800506e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f857 	bl	800509c <UART_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d03c      	beq.n	800506e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	623b      	str	r3, [r7, #32]
   return(result);
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005008:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005012:	633b      	str	r3, [r7, #48]	@ 0x30
 8005014:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e6      	bne.n	8004ff4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	3308      	adds	r3, #8
 800502c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	e853 3f00 	ldrex	r3, [r3]
 8005034:	60fb      	str	r3, [r7, #12]
   return(result);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f023 0301 	bic.w	r3, r3, #1
 800503c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3308      	adds	r3, #8
 8005044:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005046:	61fa      	str	r2, [r7, #28]
 8005048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504a:	69b9      	ldr	r1, [r7, #24]
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	617b      	str	r3, [r7, #20]
   return(result);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e5      	bne.n	8005026 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e012      	b.n	8005094 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2220      	movs	r2, #32
 800507a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3758      	adds	r7, #88	@ 0x58
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	4613      	mov	r3, r2
 80050aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ac:	e04f      	b.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d04b      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fc f925 	bl	8001304 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <UART_WaitOnFlagUntilTimeout+0x30>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e04e      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0304 	and.w	r3, r3, #4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d037      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	2b80      	cmp	r3, #128	@ 0x80
 80050e2:	d034      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	2b40      	cmp	r3, #64	@ 0x40
 80050e8:	d031      	beq.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d110      	bne.n	800511a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2208      	movs	r2, #8
 80050fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f838 	bl	8005176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2208      	movs	r2, #8
 800510a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e029      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005124:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005128:	d111      	bne.n	800514e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005132:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 f81e 	bl	8005176 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2220      	movs	r2, #32
 800513e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e00f      	b.n	800516e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	429a      	cmp	r2, r3
 800515c:	bf0c      	ite	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	2300      	movne	r3, #0
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	429a      	cmp	r2, r3
 800516a:	d0a0      	beq.n	80050ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005176:	b480      	push	{r7}
 8005178:	b095      	sub	sp, #84	@ 0x54
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005186:	e853 3f00 	ldrex	r3, [r3]
 800518a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005192:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	461a      	mov	r2, r3
 800519a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800519c:	643b      	str	r3, [r7, #64]	@ 0x40
 800519e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051a4:	e841 2300 	strex	r3, r2, [r1]
 80051a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1e6      	bne.n	800517e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	61fb      	str	r3, [r7, #28]
   return(result);
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051c6:	f023 0301 	bic.w	r3, r3, #1
 80051ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3308      	adds	r3, #8
 80051d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e3      	bne.n	80051b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d118      	bne.n	8005222 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	647b      	str	r3, [r7, #68]	@ 0x44
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	461a      	mov	r2, r3
 800520c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800520e:	61bb      	str	r3, [r7, #24]
 8005210:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6979      	ldr	r1, [r7, #20]
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	613b      	str	r3, [r7, #16]
   return(result);
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e6      	bne.n	80051f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005236:	bf00      	nop
 8005238:	3754      	adds	r7, #84	@ 0x54
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005242:	b480      	push	{r7}
 8005244:	b085      	sub	sp, #20
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UARTEx_DisableFifoMode+0x16>
 8005254:	2302      	movs	r3, #2
 8005256:	e027      	b.n	80052a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	@ 0x24
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0201 	bic.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005286:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e02d      	b.n	8005328 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2224      	movs	r2, #36	@ 0x24
 80052d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f000 f84f 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2220      	movs	r2, #32
 800531a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005340:	2b01      	cmp	r3, #1
 8005342:	d101      	bne.n	8005348 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005344:	2302      	movs	r3, #2
 8005346:	e02d      	b.n	80053a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	@ 0x24
 8005354:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0201 	bic.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f811 	bl	80053ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b085      	sub	sp, #20
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d108      	bne.n	80053ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80053cc:	e031      	b.n	8005432 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80053ce:	2308      	movs	r3, #8
 80053d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80053d2:	2308      	movs	r3, #8
 80053d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	0e5b      	lsrs	r3, r3, #25
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	0f5b      	lsrs	r3, r3, #29
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	7b3a      	ldrb	r2, [r7, #12]
 80053fa:	4911      	ldr	r1, [pc, #68]	@ (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 80053fc:	5c8a      	ldrb	r2, [r1, r2]
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005402:	7b3a      	ldrb	r2, [r7, #12]
 8005404:	490f      	ldr	r1, [pc, #60]	@ (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005406:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005408:	fb93 f3f2 	sdiv	r3, r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005414:	7bfb      	ldrb	r3, [r7, #15]
 8005416:	7b7a      	ldrb	r2, [r7, #13]
 8005418:	4909      	ldr	r1, [pc, #36]	@ (8005440 <UARTEx_SetNbDataToProcess+0x94>)
 800541a:	5c8a      	ldrb	r2, [r1, r2]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005420:	7b7a      	ldrb	r2, [r7, #13]
 8005422:	4908      	ldr	r1, [pc, #32]	@ (8005444 <UARTEx_SetNbDataToProcess+0x98>)
 8005424:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005426:	fb93 f3f2 	sdiv	r3, r3, r2
 800542a:	b29a      	uxth	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	080054e8 	.word	0x080054e8
 8005444:	080054f0 	.word	0x080054f0

08005448 <memset>:
 8005448:	4402      	add	r2, r0
 800544a:	4603      	mov	r3, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	@ (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	@ (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	@ (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	@ (800549c <__libc_init_array+0x44>)
 800546c:	f000 f818 	bl	80054a0 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08005500 	.word	0x08005500
 8005494:	08005500 	.word	0x08005500
 8005498:	08005500 	.word	0x08005500
 800549c:	08005504 	.word	0x08005504

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
