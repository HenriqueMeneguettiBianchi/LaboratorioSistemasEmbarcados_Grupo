
SeguidorDeLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041ac  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004384  08004384  00005384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c4  080043c4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080043c4  080043c4  000053c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043cc  080043cc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043d0  080043d0  000053d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080043d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000000c  080043e0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080043e0  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d3a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000249e  00000000  00000000  00017d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  0001a218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c61  00000000  00000000  0001b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025ce1  00000000  00000000  0001be59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136d8  00000000  00000000  00041b3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7de5  00000000  00000000  00055212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014cff7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c0  00000000  00000000  0014d03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  001512fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800436c 	.word	0x0800436c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800436c 	.word	0x0800436c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08a      	sub	sp, #40	@ 0x28
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b44      	ldr	r3, [pc, #272]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000522:	4a43      	ldr	r2, [pc, #268]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800052a:	4b41      	ldr	r3, [pc, #260]	@ (8000630 <MX_GPIO_Init+0x128>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000536:	4b3e      	ldr	r3, [pc, #248]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800053a:	4a3d      	ldr	r2, [pc, #244]	@ (8000630 <MX_GPIO_Init+0x128>)
 800053c:	f043 0320 	orr.w	r3, r3, #32
 8000540:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000542:	4b3b      	ldr	r3, [pc, #236]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000546:	f003 0320 	and.w	r3, r3, #32
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b38      	ldr	r3, [pc, #224]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000552:	4a37      	ldr	r2, [pc, #220]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800055a:	4b35      	ldr	r3, [pc, #212]	@ (8000630 <MX_GPIO_Init+0x128>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b32      	ldr	r3, [pc, #200]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800056a:	4a31      	ldr	r2, [pc, #196]	@ (8000630 <MX_GPIO_Init+0x128>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000572:	4b2f      	ldr	r3, [pc, #188]	@ (8000630 <MX_GPIO_Init+0x128>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EnMotorA_Pin|EnMotorB_Pin, GPIO_PIN_RESET);
 800057e:	2200      	movs	r2, #0
 8000580:	2103      	movs	r1, #3
 8000582:	482c      	ldr	r0, [pc, #176]	@ (8000634 <MX_GPIO_Init+0x12c>)
 8000584:	f000 fe2e 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 800058e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000592:	f000 fe27 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 800059c:	4826      	ldr	r0, [pc, #152]	@ (8000638 <MX_GPIO_Init+0x130>)
 800059e:	f000 fe21 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	4619      	mov	r1, r3
 80005b8:	481e      	ldr	r0, [pc, #120]	@ (8000634 <MX_GPIO_Init+0x12c>)
 80005ba:	f000 fc91 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = EnMotorA_Pin|EnMotorB_Pin;
 80005be:	2303      	movs	r3, #3
 80005c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c2:	2301      	movs	r3, #1
 80005c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ce:	f107 0314 	add.w	r3, r7, #20
 80005d2:	4619      	mov	r1, r3
 80005d4:	4817      	ldr	r0, [pc, #92]	@ (8000634 <MX_GPIO_Init+0x12c>)
 80005d6:	f000 fc83 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin;
 80005da:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 80005de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	4619      	mov	r1, r3
 80005f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005f6:	f000 fc73 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin;
 80005fa:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80005fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000600:	2301      	movs	r3, #1
 8000602:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000608:	2300      	movs	r3, #0
 800060a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060c:	f107 0314 	add.w	r3, r7, #20
 8000610:	4619      	mov	r1, r3
 8000612:	4809      	ldr	r0, [pc, #36]	@ (8000638 <MX_GPIO_Init+0x130>)
 8000614:	f000 fc64 	bl	8000ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2100      	movs	r1, #0
 800061c:	2028      	movs	r0, #40	@ 0x28
 800061e:	f000 fc2a 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000622:	2028      	movs	r0, #40	@ 0x28
 8000624:	f000 fc41 	bl	8000eaa <HAL_NVIC_EnableIRQ>

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	@ 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	48000800 	.word	0x48000800
 8000638:	48000400 	.word	0x48000400

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 facd 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f82c 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ff5e 	bl	8000508 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800064c:	f000 f9fc 	bl	8000a48 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000650:	f000 f8e6 	bl	8000820 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000654:	2100      	movs	r1, #0
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <main+0x54>)
 8000658:	f001 fee8 	bl	800242c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800065c:	2104      	movs	r1, #4
 800065e:	480c      	ldr	r0, [pc, #48]	@ (8000690 <main+0x54>)
 8000660:	f001 fee4 	bl	800242c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(EnMotorA_GPIO_Port, EnMotorA_Pin, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	480a      	ldr	r0, [pc, #40]	@ (8000694 <main+0x58>)
 800066a:	f000 fdbb 	bl	80011e4 <HAL_GPIO_WritePin>
	  //IN1 = 1 e IN2 = 0 : TRAS
	  //IN1 = 0 e IN2 = 1 : FRENTE
	  //IN3 = 1 e IN4 = 0 : TRAS
	  //IN3 = 0 e IN4 = 1 : FRENTE
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000674:	4808      	ldr	r0, [pc, #32]	@ (8000698 <main+0x5c>)
 8000676:	f000 fdb5 	bl	80011e4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <main+0x5c>)
 8000682:	f000 fdaf 	bl	80011e4 <HAL_GPIO_WritePin>

	  TIM1->CCR2 = 100;
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <main+0x60>)
 8000688:	2264      	movs	r2, #100	@ 0x64
 800068a:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_GPIO_WritePin(EnMotorA_GPIO_Port, EnMotorA_Pin, 1);
 800068c:	bf00      	nop
 800068e:	e7e9      	b.n	8000664 <main+0x28>
 8000690:	20000028 	.word	0x20000028
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400
 800069c:	40012c00 	.word	0x40012c00

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	@ 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2238      	movs	r2, #56	@ 0x38
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fe30 	bl	8004314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fdca 	bl	800125c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c8:	2302      	movs	r3, #2
 80006ca:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2302      	movs	r3, #2
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006de:	2304      	movs	r3, #4
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006e2:	2355      	movs	r3, #85	@ 0x55
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 fe64 	bl	80013c4 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000702:	f000 f818 	bl	8000736 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000706:	230f      	movs	r3, #15
 8000708:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070a:	2303      	movs	r3, #3
 800070c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2104      	movs	r1, #4
 800071e:	4618      	mov	r0, r3
 8000720:	f001 f962 	bl	80019e8 <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800072a:	f000 f804 	bl	8000736 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	@ 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073a:	b672      	cpsid	i
}
 800073c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073e:	bf00      	nop
 8000740:	e7fd      	b.n	800073e <Error_Handler+0x8>
	...

08000744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <HAL_MspInit+0x44>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074e:	4a0e      	ldr	r2, [pc, #56]	@ (8000788 <HAL_MspInit+0x44>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6613      	str	r3, [r2, #96]	@ 0x60
 8000756:	4b0c      	ldr	r3, [pc, #48]	@ (8000788 <HAL_MspInit+0x44>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <HAL_MspInit+0x44>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	4a08      	ldr	r2, [pc, #32]	@ (8000788 <HAL_MspInit+0x44>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076c:	6593      	str	r3, [r2, #88]	@ 0x58
 800076e:	4b06      	ldr	r3, [pc, #24]	@ (8000788 <HAL_MspInit+0x44>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800077a:	f000 fe13 	bl	80013a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <NMI_Handler+0x4>

08000794 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <MemManage_Handler+0x4>

080007a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <BusFault_Handler+0x4>

080007ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <UsageFault_Handler+0x4>

080007b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e2:	f000 fa4f 	bl	8000c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}

080007ea <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007ee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80007f2:	f000 fd0f 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <SystemInit+0x20>)
 8000802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000806:	4a05      	ldr	r2, [pc, #20]	@ (800081c <SystemInit+0x20>)
 8000808:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800080c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09c      	sub	sp, #112	@ 0x70
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2234      	movs	r2, #52	@ 0x34
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f003 fd5a 	bl	8004314 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000862:	4a4c      	ldr	r2, [pc, #304]	@ (8000994 <MX_TIM1_Init+0x174>)
 8000864:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000866:	4b4a      	ldr	r3, [pc, #296]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000868:	22a9      	movs	r2, #169	@ 0xa9
 800086a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <MX_TIM1_Init+0x170>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000872:	4b47      	ldr	r3, [pc, #284]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000874:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <MX_TIM1_Init+0x170>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000880:	4b43      	ldr	r3, [pc, #268]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b42      	ldr	r3, [pc, #264]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800088c:	4840      	ldr	r0, [pc, #256]	@ (8000990 <MX_TIM1_Init+0x170>)
 800088e:	f001 fd15 	bl	80022bc <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000898:	f7ff ff4d 	bl	8000736 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80008a6:	4619      	mov	r1, r3
 80008a8:	4839      	ldr	r0, [pc, #228]	@ (8000990 <MX_TIM1_Init+0x170>)
 80008aa:	f001 ffe5 	bl	8002878 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008b4:	f7ff ff3f 	bl	8000736 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008b8:	4835      	ldr	r0, [pc, #212]	@ (8000990 <MX_TIM1_Init+0x170>)
 80008ba:	f001 fd56 	bl	800236a <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008c4:	f7ff ff37 	bl	8000736 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008cc:	2300      	movs	r3, #0
 80008ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80008d8:	4619      	mov	r1, r3
 80008da:	482d      	ldr	r0, [pc, #180]	@ (8000990 <MX_TIM1_Init+0x170>)
 80008dc:	f002 fd82 	bl	80033e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008e6:	f7ff ff26 	bl	8000736 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ea:	2360      	movs	r3, #96	@ 0x60
 80008ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f6:	2300      	movs	r3, #0
 80008f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fa:	2300      	movs	r3, #0
 80008fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000906:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4820      	ldr	r0, [pc, #128]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000910:	f001 fe9e 	bl	8002650 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800091a:	f7ff ff0c 	bl	8000736 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000922:	2204      	movs	r2, #4
 8000924:	4619      	mov	r1, r3
 8000926:	481a      	ldr	r0, [pc, #104]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000928:	f001 fe92 	bl	8002650 <HAL_TIM_PWM_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000932:	f7ff ff00 	bl	8000736 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800095c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000960:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	4619      	mov	r1, r3
 8000972:	4807      	ldr	r0, [pc, #28]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000974:	f002 fdcc 	bl	8003510 <HAL_TIMEx_ConfigBreakDeadTime>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800097e:	f7ff feda 	bl	8000736 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <MX_TIM1_Init+0x170>)
 8000984:	f000 f828 	bl	80009d8 <HAL_TIM_MspPostInit>

}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	@ 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000028 	.word	0x20000028
 8000994:	40012c00 	.word	0x40012c00

08000998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <HAL_TIM_Base_MspInit+0x38>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009aa:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ae:	4a09      	ldr	r2, [pc, #36]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009b0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <HAL_TIM_Base_MspInit+0x3c>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	40012c00 	.word	0x40012c00
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <HAL_TIM_MspPostInit+0x68>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d11d      	bne.n	8000a36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <HAL_TIM_MspPostInit+0x6c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a12:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000a24:	2306      	movs	r3, #6
 8000a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a32:	f000 fa55 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40012c00 	.word	0x40012c00
 8000a44:	40021000 	.word	0x40021000

08000a48 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a4e:	4a22      	ldr	r2, [pc, #136]	@ (8000ad8 <MX_LPUART1_UART_Init+0x90>)
 8000a50:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b18      	ldr	r3, [pc, #96]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a7e:	4b15      	ldr	r3, [pc, #84]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a84:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a8a:	4812      	ldr	r0, [pc, #72]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a8c:	f002 fdd4 	bl	8003638 <HAL_UART_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a96:	f7ff fe4e 	bl	8000736 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	480d      	ldr	r0, [pc, #52]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000a9e:	f003 fb6f 	bl	8004180 <HAL_UARTEx_SetTxFifoThreshold>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000aa8:	f7ff fe45 	bl	8000736 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000ab0:	f003 fba4 	bl	80041fc <HAL_UARTEx_SetRxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000aba:	f7ff fe3c 	bl	8000736 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_LPUART1_UART_Init+0x8c>)
 8000ac0:	f003 fb25 	bl	800410e <HAL_UARTEx_DisableFifoMode>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aca:	f7ff fe34 	bl	8000736 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000074 	.word	0x20000074
 8000ad8:	40008000 	.word	0x40008000

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09e      	sub	sp, #120	@ 0x78
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2254      	movs	r2, #84	@ 0x54
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f003 fc09 	bl	8004314 <memset>
  if(uartHandle->Instance==LPUART1)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a1f      	ldr	r2, [pc, #124]	@ (8000b84 <HAL_UART_MspInit+0xa8>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d136      	bne.n	8000b7a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f981 	bl	8001e20 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b24:	f7ff fe07 	bl	8000736 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b2c:	4a16      	ldr	r2, [pc, #88]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b44:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_UART_MspInit+0xac>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b58:	230c      	movs	r3, #12
 8000b5a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b68:	230c      	movs	r3, #12
 8000b6a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b76:	f000 f9b3 	bl	8000ee0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3778      	adds	r7, #120	@ 0x78
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40008000 	.word	0x40008000
 8000b88:	40021000 	.word	0x40021000

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b8c:	480d      	ldr	r0, [pc, #52]	@ (8000bc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff fe34 	bl	80007fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	@ (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	@ (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	@ (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f003 fbb3 	bl	8004324 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fd3d 	bl	800063c <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   r0, =_estack
 8000bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bd0:	080043d4 	.word	0x080043d4
  ldr r2, =_sbss
 8000bd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd8:	2000010c 	.word	0x2000010c

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f939 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f000 f80e 	bl	8000c10 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff fda0 	bl	8000744 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]

}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	@ (8000c78 <HAL_InitTick+0x68>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d022      	beq.n	8000c6a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_InitTick+0x6c>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_InitTick+0x68>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c30:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f944 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10f      	bne.n	8000c64 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b0f      	cmp	r3, #15
 8000c48:	d809      	bhi.n	8000c5e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c52:	f000 f910 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c56:	4a0a      	ldr	r2, [pc, #40]	@ (8000c80 <HAL_InitTick+0x70>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e004      	b.n	8000c6e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e001      	b.n	8000c6e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	20000004 	.word	0x20000004

08000c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_IncTick+0x20>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4413      	add	r3, r2
 8000c92:	4a03      	ldr	r2, [pc, #12]	@ (8000ca0 <HAL_IncTick+0x1c>)
 8000c94:	6013      	str	r3, [r2, #0]
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	20000108 	.word	0x20000108
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000108 	.word	0x20000108

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	@ (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	@ (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	@ (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	@ (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	@ 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	@ 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff40 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa4 	bl	8000e1c <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eee:	e15a      	b.n	80011a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 814c 	beq.w	80011a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80a6 	beq.w	80011a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b5b      	ldr	r3, [pc, #364]	@ (80011c4 <HAL_GPIO_Init+0x2e4>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001058:	4a5a      	ldr	r2, [pc, #360]	@ (80011c4 <HAL_GPIO_Init+0x2e4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001060:	4b58      	ldr	r3, [pc, #352]	@ (80011c4 <HAL_GPIO_Init+0x2e4>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106c:	4a56      	ldr	r2, [pc, #344]	@ (80011c8 <HAL_GPIO_Init+0x2e8>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001096:	d01f      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a4c      	ldr	r2, [pc, #304]	@ (80011cc <HAL_GPIO_Init+0x2ec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d019      	beq.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a4b      	ldr	r2, [pc, #300]	@ (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x1f0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a4a      	ldr	r2, [pc, #296]	@ (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a49      	ldr	r2, [pc, #292]	@ (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a48      	ldr	r2, [pc, #288]	@ (80011dc <HAL_GPIO_Init+0x2fc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010c0:	2305      	movs	r3, #5
 80010c2:	e00a      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010c4:	2306      	movs	r3, #6
 80010c6:	e008      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010c8:	2304      	movs	r3, #4
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	@ (80011c8 <HAL_GPIO_Init+0x2e8>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f8:	4b39      	ldr	r3, [pc, #228]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800111c:	4a30      	ldr	r2, [pc, #192]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001122:	4b2f      	ldr	r3, [pc, #188]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001146:	4a26      	ldr	r2, [pc, #152]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800114c:	4b24      	ldr	r3, [pc, #144]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001170:	4a1b      	ldr	r2, [pc, #108]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f ae9d 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48001000 	.word	0x48001000
 80011dc:	48001400 	.word	0x48001400
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f806 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d141      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800126a:	4b4b      	ldr	r3, [pc, #300]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001276:	d131      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001278:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800127e:	4a46      	ldr	r2, [pc, #280]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001280:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001284:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001288:	4b43      	ldr	r3, [pc, #268]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001290:	4a41      	ldr	r2, [pc, #260]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001292:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001296:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001298:	4b40      	ldr	r3, [pc, #256]	@ (800139c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2232      	movs	r2, #50	@ 0x32
 800129e:	fb02 f303 	mul.w	r3, r2, r3
 80012a2:	4a3f      	ldr	r2, [pc, #252]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012a4:	fba2 2303 	umull	r2, r3, r2, r3
 80012a8:	0c9b      	lsrs	r3, r3, #18
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012ae:	e002      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012b6:	4b38      	ldr	r3, [pc, #224]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b8:	695b      	ldr	r3, [r3, #20]
 80012ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012c2:	d102      	bne.n	80012ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f2      	bne.n	80012b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ca:	4b33      	ldr	r3, [pc, #204]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80012d6:	d158      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012d8:	2303      	movs	r3, #3
 80012da:	e057      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80012e2:	4a2d      	ldr	r2, [pc, #180]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80012ec:	e04d      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f4:	d141      	bne.n	800137a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012f6:	4b28      	ldr	r3, [pc, #160]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80012fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001302:	d131      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001306:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800130a:	4a23      	ldr	r2, [pc, #140]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001310:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800131c:	4a1e      	ldr	r2, [pc, #120]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800131e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001322:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001324:	4b1d      	ldr	r3, [pc, #116]	@ (800139c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2232      	movs	r2, #50	@ 0x32
 800132a:	fb02 f303 	mul.w	r3, r2, r3
 800132e:	4a1c      	ldr	r2, [pc, #112]	@ (80013a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001330:	fba2 2303 	umull	r2, r3, r2, r3
 8001334:	0c9b      	lsrs	r3, r3, #18
 8001336:	3301      	adds	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800133a:	e002      	b.n	8001342 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3b01      	subs	r3, #1
 8001340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800134a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800134e:	d102      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f2      	bne.n	800133c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001356:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800135e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001362:	d112      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e011      	b.n	800138c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800136a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001374:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001378:	e007      	b.n	800138a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800137a:	4b07      	ldr	r3, [pc, #28]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001382:	4a05      	ldr	r2, [pc, #20]	@ (8001398 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001388:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40007000 	.word	0x40007000
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83

080013a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013a8:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	4a04      	ldr	r2, [pc, #16]	@ (80013c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b2:	6093      	str	r3, [r2, #8]
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40007000 	.word	0x40007000

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e2fe      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d075      	beq.n	80014ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e2:	4b97      	ldr	r3, [pc, #604]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 030c 	and.w	r3, r3, #12
 80013ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ec:	4b94      	ldr	r3, [pc, #592]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b0c      	cmp	r3, #12
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x3e>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	d002      	beq.n	8001408 <HAL_RCC_OscConfig+0x44>
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d10b      	bne.n	8001420 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001408:	4b8d      	ldr	r3, [pc, #564]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d05b      	beq.n	80014cc <HAL_RCC_OscConfig+0x108>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d157      	bne.n	80014cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e2d9      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001428:	d106      	bne.n	8001438 <HAL_RCC_OscConfig+0x74>
 800142a:	4b85      	ldr	r3, [pc, #532]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a84      	ldr	r2, [pc, #528]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01d      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x98>
 8001442:	4b7f      	ldr	r3, [pc, #508]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7e      	ldr	r2, [pc, #504]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	6013      	str	r3, [r2, #0]
 800144e:	4b7c      	ldr	r3, [pc, #496]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a7b      	ldr	r2, [pc, #492]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0xb0>
 800145c:	4b78      	ldr	r3, [pc, #480]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b75      	ldr	r3, [pc, #468]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a74      	ldr	r2, [pc, #464]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800146e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d013      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fc14 	bl	8000ca8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001484:	f7ff fc10 	bl	8000ca8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b64      	cmp	r3, #100	@ 0x64
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e29e      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001496:	4b6a      	ldr	r3, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0xc0>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a4:	f7ff fc00 	bl	8000ca8 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fbfc 	bl	8000ca8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	@ 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e28a      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014be:	4b60      	ldr	r3, [pc, #384]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0xe8>
 80014ca:	e000      	b.n	80014ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d075      	beq.n	80015c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	4b59      	ldr	r3, [pc, #356]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e4:	4b56      	ldr	r3, [pc, #344]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d102      	bne.n	80014fa <HAL_RCC_OscConfig+0x136>
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d002      	beq.n	8001500 <HAL_RCC_OscConfig+0x13c>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d11f      	bne.n	8001540 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001500:	4b4f      	ldr	r3, [pc, #316]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_RCC_OscConfig+0x154>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d101      	bne.n	8001518 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e25d      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001518:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	691b      	ldr	r3, [r3, #16]
 8001524:	061b      	lsls	r3, r3, #24
 8001526:	4946      	ldr	r1, [pc, #280]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800152c:	4b45      	ldr	r3, [pc, #276]	@ (8001644 <HAL_RCC_OscConfig+0x280>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fb6d 	bl	8000c10 <HAL_InitTick>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d043      	beq.n	80015c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e249      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001548:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a3c      	ldr	r2, [pc, #240]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800154e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001554:	f7ff fba8 	bl	8000ca8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155c:	f7ff fba4 	bl	8000ca8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e232      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800156e:	4b34      	ldr	r3, [pc, #208]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f0      	beq.n	800155c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b31      	ldr	r3, [pc, #196]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	061b      	lsls	r3, r3, #24
 8001588:	492d      	ldr	r1, [pc, #180]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800158a:	4313      	orrs	r3, r2
 800158c:	604b      	str	r3, [r1, #4]
 800158e:	e01a      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001590:	4b2b      	ldr	r3, [pc, #172]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2a      	ldr	r2, [pc, #168]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001596:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800159a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff fb84 	bl	8000ca8 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fb80 	bl	8000ca8 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e20e      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015b6:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1e0>
 80015c2:	e000      	b.n	80015c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0308 	and.w	r3, r3, #8
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d041      	beq.n	8001656 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01c      	beq.n	8001614 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80015dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015e0:	4a17      	ldr	r2, [pc, #92]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb5d 	bl	8000ca8 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f2:	f7ff fb59 	bl	8000ca8 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e1e7      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001604:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ef      	beq.n	80015f2 <HAL_RCC_OscConfig+0x22e>
 8001612:	e020      	b.n	8001656 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800161a:	4a09      	ldr	r2, [pc, #36]	@ (8001640 <HAL_RCC_OscConfig+0x27c>)
 800161c:	f023 0301 	bic.w	r3, r3, #1
 8001620:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fb40 	bl	8000ca8 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800162a:	e00d      	b.n	8001648 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fb3c 	bl	8000ca8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d906      	bls.n	8001648 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1ca      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001648:	4b8c      	ldr	r3, [pc, #560]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800164a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1ea      	bne.n	800162c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 80a6 	beq.w	80017b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001664:	2300      	movs	r3, #0
 8001666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001668:	4b84      	ldr	r3, [pc, #528]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_OscConfig+0x2b4>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x2b6>
 8001678:	2300      	movs	r3, #0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00d      	beq.n	800169a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001682:	4a7e      	ldr	r2, [pc, #504]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001684:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001688:	6593      	str	r3, [r2, #88]	@ 0x58
 800168a:	4b7c      	ldr	r3, [pc, #496]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800168c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001696:	2301      	movs	r3, #1
 8001698:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169a:	4b79      	ldr	r3, [pc, #484]	@ (8001880 <HAL_RCC_OscConfig+0x4bc>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d118      	bne.n	80016d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016a6:	4b76      	ldr	r3, [pc, #472]	@ (8001880 <HAL_RCC_OscConfig+0x4bc>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a75      	ldr	r2, [pc, #468]	@ (8001880 <HAL_RCC_OscConfig+0x4bc>)
 80016ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016b2:	f7ff faf9 	bl	8000ca8 <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ba:	f7ff faf5 	bl	8000ca8 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e183      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016cc:	4b6c      	ldr	r3, [pc, #432]	@ (8001880 <HAL_RCC_OscConfig+0x4bc>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d108      	bne.n	80016f2 <HAL_RCC_OscConfig+0x32e>
 80016e0:	4b66      	ldr	r3, [pc, #408]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80016e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e6:	4a65      	ldr	r2, [pc, #404]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016f0:	e024      	b.n	800173c <HAL_RCC_OscConfig+0x378>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b05      	cmp	r3, #5
 80016f8:	d110      	bne.n	800171c <HAL_RCC_OscConfig+0x358>
 80016fa:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001700:	4a5e      	ldr	r2, [pc, #376]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800170a:	4b5c      	ldr	r3, [pc, #368]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800170c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001710:	4a5a      	ldr	r2, [pc, #360]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800171a:	e00f      	b.n	800173c <HAL_RCC_OscConfig+0x378>
 800171c:	4b57      	ldr	r3, [pc, #348]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800171e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001722:	4a56      	ldr	r2, [pc, #344]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800172e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001732:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d016      	beq.n	8001772 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff fab0 	bl	8000ca8 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff faac 	bl	8000ca8 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e138      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001762:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ed      	beq.n	800174c <HAL_RCC_OscConfig+0x388>
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001772:	f7ff fa99 	bl	8000ca8 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fa95 	bl	8000ca8 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e121      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001790:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1ed      	bne.n	800177a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800179e:	7ffb      	ldrb	r3, [r7, #31]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d105      	bne.n	80017b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a4:	4b35      	ldr	r3, [pc, #212]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80017a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017a8:	4a34      	ldr	r2, [pc, #208]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0320 	and.w	r3, r3, #32
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d03c      	beq.n	8001836 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d01c      	beq.n	80017fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017c4:	4b2d      	ldr	r3, [pc, #180]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80017c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017ca:	4a2c      	ldr	r2, [pc, #176]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d4:	f7ff fa68 	bl	8000ca8 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017dc:	f7ff fa64 	bl	8000ca8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e0f2      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ee:	4b23      	ldr	r3, [pc, #140]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 80017f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ef      	beq.n	80017dc <HAL_RCC_OscConfig+0x418>
 80017fc:	e01b      	b.n	8001836 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017fe:	4b1f      	ldr	r3, [pc, #124]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001804:	4a1d      	ldr	r2, [pc, #116]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800180e:	f7ff fa4b 	bl	8000ca8 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001816:	f7ff fa47 	bl	8000ca8 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e0d5      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800182a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1ef      	bne.n	8001816 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f000 80c9 	beq.w	80019d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001840:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b0c      	cmp	r3, #12
 800184a:	f000 8083 	beq.w	8001954 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b02      	cmp	r3, #2
 8001854:	d15e      	bne.n	8001914 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001856:	4b09      	ldr	r3, [pc, #36]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a08      	ldr	r2, [pc, #32]	@ (800187c <HAL_RCC_OscConfig+0x4b8>)
 800185c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff fa21 	bl	8000ca8 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001868:	e00c      	b.n	8001884 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fa1d 	bl	8000ca8 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d905      	bls.n	8001884 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0ab      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
 800187c:	40021000 	.word	0x40021000
 8001880:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001884:	4b55      	ldr	r3, [pc, #340]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1ec      	bne.n	800186a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001890:	4b52      	ldr	r3, [pc, #328]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	4b52      	ldr	r3, [pc, #328]	@ (80019e0 <HAL_RCC_OscConfig+0x61c>)
 8001896:	4013      	ands	r3, r2
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6a11      	ldr	r1, [r2, #32]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018a0:	3a01      	subs	r2, #1
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	4311      	orrs	r1, r2
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018aa:	0212      	lsls	r2, r2, #8
 80018ac:	4311      	orrs	r1, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018b2:	0852      	lsrs	r2, r2, #1
 80018b4:	3a01      	subs	r2, #1
 80018b6:	0552      	lsls	r2, r2, #21
 80018b8:	4311      	orrs	r1, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018be:	0852      	lsrs	r2, r2, #1
 80018c0:	3a01      	subs	r2, #1
 80018c2:	0652      	lsls	r2, r2, #25
 80018c4:	4311      	orrs	r1, r2
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018ca:	06d2      	lsls	r2, r2, #27
 80018cc:	430a      	orrs	r2, r1
 80018ce:	4943      	ldr	r1, [pc, #268]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d4:	4b41      	ldr	r3, [pc, #260]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a40      	ldr	r2, [pc, #256]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 80018da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018e0:	4b3e      	ldr	r3, [pc, #248]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4a3d      	ldr	r2, [pc, #244]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff f9dc 	bl	8000ca8 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f9d8 	bl	8000ca8 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e066      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001906:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x530>
 8001912:	e05e      	b.n	80019d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001914:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a30      	ldr	r2, [pc, #192]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 800191a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800191e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f9c2 	bl	8000ca8 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f9be 	bl	8000ca8 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04c      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800193a:	4b28      	ldr	r3, [pc, #160]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	4924      	ldr	r1, [pc, #144]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <HAL_RCC_OscConfig+0x620>)
 800194e:	4013      	ands	r3, r2
 8001950:	60cb      	str	r3, [r1, #12]
 8001952:	e03e      	b.n	80019d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e039      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_RCC_OscConfig+0x618>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	429a      	cmp	r2, r3
 8001972:	d12c      	bne.n	80019ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d123      	bne.n	80019ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001990:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d11b      	bne.n	80019ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d113      	bne.n	80019ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b0:	085b      	lsrs	r3, r3, #1
 80019b2:	3b01      	subs	r3, #1
 80019b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d109      	bne.n	80019ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c4:	085b      	lsrs	r3, r3, #1
 80019c6:	3b01      	subs	r3, #1
 80019c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	019f800c 	.word	0x019f800c
 80019e4:	feeefffc 	.word	0xfeeefffc

080019e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e11e      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a00:	4b91      	ldr	r3, [pc, #580]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 030f 	and.w	r3, r3, #15
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d910      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 020f 	bic.w	r2, r3, #15
 8001a16:	498c      	ldr	r1, [pc, #560]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b8a      	ldr	r3, [pc, #552]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e106      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d073      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b03      	cmp	r3, #3
 8001a42:	d129      	bne.n	8001a98 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a44:	4b81      	ldr	r3, [pc, #516]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0f4      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a54:	f000 f99e 	bl	8001d94 <RCC_GetSysClockFreqFromPLLSource>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4a7c      	ldr	r2, [pc, #496]	@ (8001c50 <HAL_RCC_ClockConfig+0x268>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d93f      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a62:	4b7a      	ldr	r3, [pc, #488]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d009      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d033      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d12f      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a82:	4b72      	ldr	r3, [pc, #456]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001a8a:	4a70      	ldr	r2, [pc, #448]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a90:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a92:	2380      	movs	r3, #128	@ 0x80
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e024      	b.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0c6      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d101      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0be      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ac0:	f000 f8ce 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4a61      	ldr	r2, [pc, #388]	@ (8001c50 <HAL_RCC_ClockConfig+0x268>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d909      	bls.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ace:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001adc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001ade:	2380      	movs	r3, #128	@ 0x80
 8001ae0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b5a      	ldr	r3, [pc, #360]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4957      	ldr	r1, [pc, #348]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001af4:	f7ff f8d8 	bl	8000ca8 <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff f8d4 	bl	8000ca8 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e095      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b4e      	ldr	r3, [pc, #312]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a42      	ldr	r2, [pc, #264]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b54:	4b3d      	ldr	r3, [pc, #244]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	4936      	ldr	r1, [pc, #216]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
 8001b76:	e008      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b80      	cmp	r3, #128	@ 0x80
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4a32      	ldr	r2, [pc, #200]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001b84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001b88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d21d      	bcs.n	8001bd4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b98:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 020f 	bic.w	r2, r3, #15
 8001ba0:	4929      	ldr	r1, [pc, #164]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba8:	f7ff f87e 	bl	8000ca8 <HAL_GetTick>
 8001bac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f87a 	bl	8000ca8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e03b      	b.n	8001c3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b20      	ldr	r3, [pc, #128]	@ (8001c48 <HAL_RCC_ClockConfig+0x260>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1ed      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4917      	ldr	r1, [pc, #92]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bfe:	4b13      	ldr	r3, [pc, #76]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	490f      	ldr	r1, [pc, #60]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c12:	f000 f825 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8001c16:	4602      	mov	r2, r0
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <HAL_RCC_ClockConfig+0x264>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	091b      	lsrs	r3, r3, #4
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	490c      	ldr	r1, [pc, #48]	@ (8001c54 <HAL_RCC_ClockConfig+0x26c>)
 8001c24:	5ccb      	ldrb	r3, [r1, r3]
 8001c26:	f003 031f 	and.w	r3, r3, #31
 8001c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c58 <HAL_RCC_ClockConfig+0x270>)
 8001c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001c32:	4b0a      	ldr	r3, [pc, #40]	@ (8001c5c <HAL_RCC_ClockConfig+0x274>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe ffea 	bl	8000c10 <HAL_InitTick>
 8001c3c:	4603      	mov	r3, r0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	04c4b400 	.word	0x04c4b400
 8001c54:	08004384 	.word	0x08004384
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c66:	4b2c      	ldr	r3, [pc, #176]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d102      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c72:	4b2a      	ldr	r3, [pc, #168]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	e047      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c78:	4b27      	ldr	r3, [pc, #156]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d102      	bne.n	8001c8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	e03e      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c8a:	4b23      	ldr	r3, [pc, #140]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d136      	bne.n	8001d04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c96:	4b20      	ldr	r3, [pc, #128]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	3301      	adds	r3, #1
 8001cac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbc:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cbe:	68d2      	ldr	r2, [r2, #12]
 8001cc0:	0a12      	lsrs	r2, r2, #8
 8001cc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001cc6:	fb02 f303 	mul.w	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
      break;
 8001ccc:	e00c      	b.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cce:	4a13      	ldr	r2, [pc, #76]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cd8:	68d2      	ldr	r2, [r2, #12]
 8001cda:	0a12      	lsrs	r2, r2, #8
 8001cdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	617b      	str	r3, [r7, #20]
      break;
 8001ce6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0e5b      	lsrs	r3, r3, #25
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	e001      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001d08:	693b      	ldr	r3, [r7, #16]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	371c      	adds	r7, #28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	00f42400 	.word	0x00f42400
 8001d20:	016e3600 	.word	0x016e3600

08001d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d40:	f7ff fff0 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b06      	ldr	r3, [pc, #24]	@ (8001d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	4904      	ldr	r1, [pc, #16]	@ (8001d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d52:	5ccb      	ldrb	r3, [r1, r3]
 8001d54:	f003 031f 	and.w	r3, r3, #31
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08004394 	.word	0x08004394

08001d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d6c:	f7ff ffda 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	0adb      	lsrs	r3, r3, #11
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4904      	ldr	r1, [pc, #16]	@ (8001d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	f003 031f 	and.w	r3, r3, #31
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08004394 	.word	0x08004394

08001d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	091b      	lsrs	r3, r3, #4
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	3301      	adds	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d10c      	bne.n	8001dd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001db8:	4a17      	ldr	r2, [pc, #92]	@ (8001e18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dc2:	68d2      	ldr	r2, [r2, #12]
 8001dc4:	0a12      	lsrs	r2, r2, #8
 8001dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	617b      	str	r3, [r7, #20]
    break;
 8001dd0:	e00c      	b.n	8001dec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dd2:	4a12      	ldr	r2, [pc, #72]	@ (8001e1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4a0e      	ldr	r2, [pc, #56]	@ (8001e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ddc:	68d2      	ldr	r2, [r2, #12]
 8001dde:	0a12      	lsrs	r2, r2, #8
 8001de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
    break;
 8001dea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0e5b      	lsrs	r3, r3, #25
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	3301      	adds	r3, #1
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001e06:	687b      	ldr	r3, [r7, #4]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	371c      	adds	r7, #28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	40021000 	.word	0x40021000
 8001e18:	016e3600 	.word	0x016e3600
 8001e1c:	00f42400 	.word	0x00f42400

08001e20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e28:	2300      	movs	r3, #0
 8001e2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 8098 	beq.w	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e42:	4b43      	ldr	r3, [pc, #268]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10d      	bne.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e4e:	4b40      	ldr	r3, [pc, #256]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e52:	4a3f      	ldr	r2, [pc, #252]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e66:	2301      	movs	r3, #1
 8001e68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a39      	ldr	r2, [pc, #228]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e76:	f7fe ff17 	bl	8000ca8 <HAL_GetTick>
 8001e7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e7e:	f7fe ff13 	bl	8000ca8 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d902      	bls.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e90:	e005      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e92:	4b30      	ldr	r3, [pc, #192]	@ (8001f54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0ef      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d159      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01e      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d019      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ec0:	4b23      	ldr	r3, [pc, #140]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001eca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001ecc:	4b20      	ldr	r3, [pc, #128]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001edc:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001eec:	4a18      	ldr	r2, [pc, #96]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d016      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7fe fed3 	bl	8000ca8 <HAL_GetTick>
 8001f02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f04:	e00b      	b.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f06:	f7fe fecf 	bl	8000ca8 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d902      	bls.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	74fb      	strb	r3, [r7, #19]
            break;
 8001f1c:	e006      	b.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ec      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001f2c:	7cfb      	ldrb	r3, [r7, #19]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f32:	4b07      	ldr	r3, [pc, #28]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001f40:	4903      	ldr	r1, [pc, #12]	@ (8001f50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001f48:	e008      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	74bb      	strb	r3, [r7, #18]
 8001f4e:	e005      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f58:	7cfb      	ldrb	r3, [r7, #19]
 8001f5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5c:	7c7b      	ldrb	r3, [r7, #17]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d105      	bne.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4ba7      	ldr	r3, [pc, #668]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f66:	4aa6      	ldr	r2, [pc, #664]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00a      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f7a:	4ba1      	ldr	r3, [pc, #644]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f80:	f023 0203 	bic.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	499d      	ldr	r1, [pc, #628]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f9c:	4b98      	ldr	r3, [pc, #608]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fa2:	f023 020c 	bic.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4995      	ldr	r1, [pc, #596]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fbe:	4b90      	ldr	r3, [pc, #576]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fc4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	498c      	ldr	r1, [pc, #560]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fe0:	4b87      	ldr	r3, [pc, #540]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	4984      	ldr	r1, [pc, #528]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0310 	and.w	r3, r3, #16
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002002:	4b7f      	ldr	r3, [pc, #508]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	497b      	ldr	r1, [pc, #492]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	4313      	orrs	r3, r2
 8002014:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0320 	and.w	r3, r3, #32
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002024:	4b76      	ldr	r3, [pc, #472]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800202a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	4973      	ldr	r1, [pc, #460]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00a      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002046:	4b6e      	ldr	r3, [pc, #440]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	496a      	ldr	r1, [pc, #424]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00a      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002068:	4b65      	ldr	r3, [pc, #404]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	4962      	ldr	r1, [pc, #392]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00a      	beq.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800208a:	4b5d      	ldr	r3, [pc, #372]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002090:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002098:	4959      	ldr	r1, [pc, #356]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209a:	4313      	orrs	r3, r2
 800209c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00a      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80020ac:	4b54      	ldr	r3, [pc, #336]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ba:	4951      	ldr	r1, [pc, #324]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020dc:	4948      	ldr	r1, [pc, #288]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020f0:	4b43      	ldr	r3, [pc, #268]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4940      	ldr	r1, [pc, #256]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800210e:	d105      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002110:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a3a      	ldr	r2, [pc, #232]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002116:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800211a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002124:	2b00      	cmp	r3, #0
 8002126:	d015      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002136:	4932      	ldr	r1, [pc, #200]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002146:	d105      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002148:	4b2d      	ldr	r3, [pc, #180]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002152:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002160:	4b27      	ldr	r3, [pc, #156]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800216e:	4924      	ldr	r1, [pc, #144]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217e:	d105      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002180:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d015      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b19      	ldr	r3, [pc, #100]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	4916      	ldr	r1, [pc, #88]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021b6:	d105      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a10      	ldr	r2, [pc, #64]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d019      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4908      	ldr	r1, [pc, #32]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021ee:	d109      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f0:	4b03      	ldr	r3, [pc, #12]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	4a02      	ldr	r2, [pc, #8]	@ (8002200 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021fa:	60d3      	str	r3, [r2, #12]
 80021fc:	e002      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d015      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002216:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	4926      	ldr	r1, [pc, #152]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800222e:	d105      	bne.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002230:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a20      	ldr	r2, [pc, #128]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d015      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002256:	4918      	ldr	r1, [pc, #96]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002266:	d105      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a12      	ldr	r2, [pc, #72]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800226e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002272:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002280:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002286:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	490a      	ldr	r1, [pc, #40]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80022ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e049      	b.n	8002362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe fb58 	bl	8000998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 fbd2 	bl	8002aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e049      	b.n	8002410 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d106      	bne.n	8002396 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f841 	bl	8002418 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3304      	adds	r3, #4
 80023a6:	4619      	mov	r1, r3
 80023a8:	4610      	mov	r0, r2
 80023aa:	f000 fb7b 	bl	8002aa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d109      	bne.n	8002450 <HAL_TIM_PWM_Start+0x24>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e03c      	b.n	80024ca <HAL_TIM_PWM_Start+0x9e>
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d109      	bne.n	800246a <HAL_TIM_PWM_Start+0x3e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b01      	cmp	r3, #1
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	e02f      	b.n	80024ca <HAL_TIM_PWM_Start+0x9e>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	2b08      	cmp	r3, #8
 800246e:	d109      	bne.n	8002484 <HAL_TIM_PWM_Start+0x58>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b01      	cmp	r3, #1
 800247a:	bf14      	ite	ne
 800247c:	2301      	movne	r3, #1
 800247e:	2300      	moveq	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e022      	b.n	80024ca <HAL_TIM_PWM_Start+0x9e>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d109      	bne.n	800249e <HAL_TIM_PWM_Start+0x72>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b01      	cmp	r3, #1
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	e015      	b.n	80024ca <HAL_TIM_PWM_Start+0x9e>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b10      	cmp	r3, #16
 80024a2:	d109      	bne.n	80024b8 <HAL_TIM_PWM_Start+0x8c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	bf14      	ite	ne
 80024b0:	2301      	movne	r3, #1
 80024b2:	2300      	moveq	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	e008      	b.n	80024ca <HAL_TIM_PWM_Start+0x9e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	bf14      	ite	ne
 80024c4:	2301      	movne	r3, #1
 80024c6:	2300      	moveq	r3, #0
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e0a6      	b.n	8002620 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <HAL_TIM_PWM_Start+0xb6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024e0:	e023      	b.n	800252a <HAL_TIM_PWM_Start+0xfe>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d104      	bne.n	80024f2 <HAL_TIM_PWM_Start+0xc6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80024f0:	e01b      	b.n	800252a <HAL_TIM_PWM_Start+0xfe>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d104      	bne.n	8002502 <HAL_TIM_PWM_Start+0xd6>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002500:	e013      	b.n	800252a <HAL_TIM_PWM_Start+0xfe>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2b0c      	cmp	r3, #12
 8002506:	d104      	bne.n	8002512 <HAL_TIM_PWM_Start+0xe6>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002510:	e00b      	b.n	800252a <HAL_TIM_PWM_Start+0xfe>
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	2b10      	cmp	r3, #16
 8002516:	d104      	bne.n	8002522 <HAL_TIM_PWM_Start+0xf6>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2202      	movs	r2, #2
 800251c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002520:	e003      	b.n	800252a <HAL_TIM_PWM_Start+0xfe>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	6839      	ldr	r1, [r7, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 ff30 	bl	8003398 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a3a      	ldr	r2, [pc, #232]	@ (8002628 <HAL_TIM_PWM_Start+0x1fc>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d018      	beq.n	8002574 <HAL_TIM_PWM_Start+0x148>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a39      	ldr	r2, [pc, #228]	@ (800262c <HAL_TIM_PWM_Start+0x200>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_TIM_PWM_Start+0x148>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a37      	ldr	r2, [pc, #220]	@ (8002630 <HAL_TIM_PWM_Start+0x204>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <HAL_TIM_PWM_Start+0x148>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a36      	ldr	r2, [pc, #216]	@ (8002634 <HAL_TIM_PWM_Start+0x208>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <HAL_TIM_PWM_Start+0x148>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a34      	ldr	r2, [pc, #208]	@ (8002638 <HAL_TIM_PWM_Start+0x20c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_TIM_PWM_Start+0x148>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a33      	ldr	r2, [pc, #204]	@ (800263c <HAL_TIM_PWM_Start+0x210>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d101      	bne.n	8002578 <HAL_TIM_PWM_Start+0x14c>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_TIM_PWM_Start+0x14e>
 8002578:	2300      	movs	r3, #0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a25      	ldr	r2, [pc, #148]	@ (8002628 <HAL_TIM_PWM_Start+0x1fc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d022      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a0:	d01d      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a26      	ldr	r2, [pc, #152]	@ (8002640 <HAL_TIM_PWM_Start+0x214>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d018      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a24      	ldr	r2, [pc, #144]	@ (8002644 <HAL_TIM_PWM_Start+0x218>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d013      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a23      	ldr	r2, [pc, #140]	@ (8002648 <HAL_TIM_PWM_Start+0x21c>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00e      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_TIM_PWM_Start+0x200>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d009      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a18      	ldr	r2, [pc, #96]	@ (8002630 <HAL_TIM_PWM_Start+0x204>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d004      	beq.n	80025de <HAL_TIM_PWM_Start+0x1b2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a18      	ldr	r2, [pc, #96]	@ (800263c <HAL_TIM_PWM_Start+0x210>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d115      	bne.n	800260a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_TIM_PWM_Start+0x220>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b06      	cmp	r3, #6
 80025ee:	d015      	beq.n	800261c <HAL_TIM_PWM_Start+0x1f0>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f6:	d011      	beq.n	800261c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	e008      	b.n	800261c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	e000      	b.n	800261e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800261c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40012c00 	.word	0x40012c00
 800262c:	40013400 	.word	0x40013400
 8002630:	40014000 	.word	0x40014000
 8002634:	40014400 	.word	0x40014400
 8002638:	40014800 	.word	0x40014800
 800263c:	40015000 	.word	0x40015000
 8002640:	40000400 	.word	0x40000400
 8002644:	40000800 	.word	0x40000800
 8002648:	40000c00 	.word	0x40000c00
 800264c:	00010007 	.word	0x00010007

08002650 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0ff      	b.n	800286e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b14      	cmp	r3, #20
 800267a:	f200 80f0 	bhi.w	800285e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800267e:	a201      	add	r2, pc, #4	@ (adr r2, 8002684 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002684:	080026d9 	.word	0x080026d9
 8002688:	0800285f 	.word	0x0800285f
 800268c:	0800285f 	.word	0x0800285f
 8002690:	0800285f 	.word	0x0800285f
 8002694:	08002719 	.word	0x08002719
 8002698:	0800285f 	.word	0x0800285f
 800269c:	0800285f 	.word	0x0800285f
 80026a0:	0800285f 	.word	0x0800285f
 80026a4:	0800275b 	.word	0x0800275b
 80026a8:	0800285f 	.word	0x0800285f
 80026ac:	0800285f 	.word	0x0800285f
 80026b0:	0800285f 	.word	0x0800285f
 80026b4:	0800279b 	.word	0x0800279b
 80026b8:	0800285f 	.word	0x0800285f
 80026bc:	0800285f 	.word	0x0800285f
 80026c0:	0800285f 	.word	0x0800285f
 80026c4:	080027dd 	.word	0x080027dd
 80026c8:	0800285f 	.word	0x0800285f
 80026cc:	0800285f 	.word	0x0800285f
 80026d0:	0800285f 	.word	0x0800285f
 80026d4:	0800281d 	.word	0x0800281d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fa94 	bl	8002c0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0208 	orr.w	r2, r2, #8
 80026f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	699a      	ldr	r2, [r3, #24]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0204 	bic.w	r2, r2, #4
 8002702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6999      	ldr	r1, [r3, #24]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	619a      	str	r2, [r3, #24]
      break;
 8002716:	e0a5      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fb0e 	bl	8002d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6999      	ldr	r1, [r3, #24]
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	021a      	lsls	r2, r3, #8
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	619a      	str	r2, [r3, #24]
      break;
 8002758:	e084      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fb81 	bl	8002e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0208 	orr.w	r2, r2, #8
 8002774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69da      	ldr	r2, [r3, #28]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 0204 	bic.w	r2, r2, #4
 8002784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	69d9      	ldr	r1, [r3, #28]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
      break;
 8002798:	e064      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fbf3 	bl	8002f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	021a      	lsls	r2, r3, #8
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	61da      	str	r2, [r3, #28]
      break;
 80027da:	e043      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fc66 	bl	80030b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800281a:	e023      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fcb0 	bl	8003188 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002836:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002846:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800285c:	e002      	b.n	8002864 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
      break;
 8002862:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800286c:	7dfb      	ldrb	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop

08002878 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	d101      	bne.n	8002894 <HAL_TIM_ConfigClockSource+0x1c>
 8002890:	2302      	movs	r3, #2
 8002892:	e0f6      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x20a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2202      	movs	r2, #2
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80028b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a6f      	ldr	r2, [pc, #444]	@ (8002a8c <HAL_TIM_ConfigClockSource+0x214>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f000 80c1 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 80028d4:	4a6d      	ldr	r2, [pc, #436]	@ (8002a8c <HAL_TIM_ConfigClockSource+0x214>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f200 80c6 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80028dc:	4a6c      	ldr	r2, [pc, #432]	@ (8002a90 <HAL_TIM_ConfigClockSource+0x218>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	f000 80b9 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 80028e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a90 <HAL_TIM_ConfigClockSource+0x218>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	f200 80be 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80028ec:	4a69      	ldr	r2, [pc, #420]	@ (8002a94 <HAL_TIM_ConfigClockSource+0x21c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	f000 80b1 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 80028f4:	4a67      	ldr	r2, [pc, #412]	@ (8002a94 <HAL_TIM_ConfigClockSource+0x21c>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	f200 80b6 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 80028fc:	4a66      	ldr	r2, [pc, #408]	@ (8002a98 <HAL_TIM_ConfigClockSource+0x220>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	f000 80a9 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002904:	4a64      	ldr	r2, [pc, #400]	@ (8002a98 <HAL_TIM_ConfigClockSource+0x220>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f200 80ae 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800290c:	4a63      	ldr	r2, [pc, #396]	@ (8002a9c <HAL_TIM_ConfigClockSource+0x224>)
 800290e:	4293      	cmp	r3, r2
 8002910:	f000 80a1 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002914:	4a61      	ldr	r2, [pc, #388]	@ (8002a9c <HAL_TIM_ConfigClockSource+0x224>)
 8002916:	4293      	cmp	r3, r2
 8002918:	f200 80a6 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800291c:	4a60      	ldr	r2, [pc, #384]	@ (8002aa0 <HAL_TIM_ConfigClockSource+0x228>)
 800291e:	4293      	cmp	r3, r2
 8002920:	f000 8099 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002924:	4a5e      	ldr	r2, [pc, #376]	@ (8002aa0 <HAL_TIM_ConfigClockSource+0x228>)
 8002926:	4293      	cmp	r3, r2
 8002928:	f200 809e 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800292c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002930:	f000 8091 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002934:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8002938:	f200 8096 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800293c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002940:	f000 8089 	beq.w	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002948:	f200 808e 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002950:	d03e      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0x158>
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002956:	f200 8087 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800295e:	f000 8086 	beq.w	8002a6e <HAL_TIM_ConfigClockSource+0x1f6>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002966:	d87f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002968:	2b70      	cmp	r3, #112	@ 0x70
 800296a:	d01a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0x12a>
 800296c:	2b70      	cmp	r3, #112	@ 0x70
 800296e:	d87b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002970:	2b60      	cmp	r3, #96	@ 0x60
 8002972:	d050      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x19e>
 8002974:	2b60      	cmp	r3, #96	@ 0x60
 8002976:	d877      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002978:	2b50      	cmp	r3, #80	@ 0x50
 800297a:	d03c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0x17e>
 800297c:	2b50      	cmp	r3, #80	@ 0x50
 800297e:	d873      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002980:	2b40      	cmp	r3, #64	@ 0x40
 8002982:	d058      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x1be>
 8002984:	2b40      	cmp	r3, #64	@ 0x40
 8002986:	d86f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002988:	2b30      	cmp	r3, #48	@ 0x30
 800298a:	d064      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 800298c:	2b30      	cmp	r3, #48	@ 0x30
 800298e:	d86b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d060      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d867      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 800299c:	2b10      	cmp	r3, #16
 800299e:	d05a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x1de>
 80029a0:	e062      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b2:	f000 fcd1 	bl	8003358 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	609a      	str	r2, [r3, #8]
      break;
 80029ce:	e04f      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	f000 fcba 	bl	8003358 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029f2:	609a      	str	r2, [r3, #8]
      break;
 80029f4:	e03c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 fc2c 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2150      	movs	r1, #80	@ 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 fc85 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002a14:	e02c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 fc4b 	bl	80032be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2160      	movs	r1, #96	@ 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fc75 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002a34:	e01c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 fc0c 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2140      	movs	r1, #64	@ 0x40
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fc65 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 fc5c 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	00100070 	.word	0x00100070
 8002a90:	00100060 	.word	0x00100060
 8002a94:	00100050 	.word	0x00100050
 8002a98:	00100040 	.word	0x00100040
 8002a9c:	00100030 	.word	0x00100030
 8002aa0:	00100020 	.word	0x00100020

08002aa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8002be8 <TIM_Base_SetConfig+0x144>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d017      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac2:	d013      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a49      	ldr	r2, [pc, #292]	@ (8002bec <TIM_Base_SetConfig+0x148>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a48      	ldr	r2, [pc, #288]	@ (8002bf0 <TIM_Base_SetConfig+0x14c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a47      	ldr	r2, [pc, #284]	@ (8002bf4 <TIM_Base_SetConfig+0x150>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a46      	ldr	r2, [pc, #280]	@ (8002bf8 <TIM_Base_SetConfig+0x154>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0x48>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a45      	ldr	r2, [pc, #276]	@ (8002bfc <TIM_Base_SetConfig+0x158>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d108      	bne.n	8002afe <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a39      	ldr	r2, [pc, #228]	@ (8002be8 <TIM_Base_SetConfig+0x144>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d023      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b0c:	d01f      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a36      	ldr	r2, [pc, #216]	@ (8002bec <TIM_Base_SetConfig+0x148>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01b      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a35      	ldr	r2, [pc, #212]	@ (8002bf0 <TIM_Base_SetConfig+0x14c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d017      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a34      	ldr	r2, [pc, #208]	@ (8002bf4 <TIM_Base_SetConfig+0x150>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a33      	ldr	r2, [pc, #204]	@ (8002bf8 <TIM_Base_SetConfig+0x154>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d00f      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a33      	ldr	r2, [pc, #204]	@ (8002c00 <TIM_Base_SetConfig+0x15c>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a32      	ldr	r2, [pc, #200]	@ (8002c04 <TIM_Base_SetConfig+0x160>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a31      	ldr	r2, [pc, #196]	@ (8002c08 <TIM_Base_SetConfig+0x164>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d003      	beq.n	8002b4e <TIM_Base_SetConfig+0xaa>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2c      	ldr	r2, [pc, #176]	@ (8002bfc <TIM_Base_SetConfig+0x158>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a18      	ldr	r2, [pc, #96]	@ (8002be8 <TIM_Base_SetConfig+0x144>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d013      	beq.n	8002bb4 <TIM_Base_SetConfig+0x110>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <TIM_Base_SetConfig+0x154>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00f      	beq.n	8002bb4 <TIM_Base_SetConfig+0x110>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <TIM_Base_SetConfig+0x15c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d00b      	beq.n	8002bb4 <TIM_Base_SetConfig+0x110>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a19      	ldr	r2, [pc, #100]	@ (8002c04 <TIM_Base_SetConfig+0x160>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d007      	beq.n	8002bb4 <TIM_Base_SetConfig+0x110>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a18      	ldr	r2, [pc, #96]	@ (8002c08 <TIM_Base_SetConfig+0x164>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d003      	beq.n	8002bb4 <TIM_Base_SetConfig+0x110>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <TIM_Base_SetConfig+0x158>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d103      	bne.n	8002bbc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f023 0201 	bic.w	r2, r3, #1
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	611a      	str	r2, [r3, #16]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40000400 	.word	0x40000400
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40000c00 	.word	0x40000c00
 8002bf8:	40013400 	.word	0x40013400
 8002bfc:	40015000 	.word	0x40015000
 8002c00:	40014000 	.word	0x40014000
 8002c04:	40014400 	.word	0x40014400
 8002c08:	40014800 	.word	0x40014800

08002c0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f023 0201 	bic.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f023 0303 	bic.w	r3, r3, #3
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	f023 0302 	bic.w	r3, r3, #2
 8002c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a30      	ldr	r2, [pc, #192]	@ (8002d28 <TIM_OC1_SetConfig+0x11c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d013      	beq.n	8002c94 <TIM_OC1_SetConfig+0x88>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d2c <TIM_OC1_SetConfig+0x120>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00f      	beq.n	8002c94 <TIM_OC1_SetConfig+0x88>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a2e      	ldr	r2, [pc, #184]	@ (8002d30 <TIM_OC1_SetConfig+0x124>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <TIM_OC1_SetConfig+0x88>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d34 <TIM_OC1_SetConfig+0x128>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d007      	beq.n	8002c94 <TIM_OC1_SetConfig+0x88>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a2c      	ldr	r2, [pc, #176]	@ (8002d38 <TIM_OC1_SetConfig+0x12c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d003      	beq.n	8002c94 <TIM_OC1_SetConfig+0x88>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d3c <TIM_OC1_SetConfig+0x130>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10c      	bne.n	8002cae <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f023 0308 	bic.w	r3, r3, #8
 8002c9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	697a      	ldr	r2, [r7, #20]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 0304 	bic.w	r3, r3, #4
 8002cac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8002d28 <TIM_OC1_SetConfig+0x11c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <TIM_OC1_SetConfig+0xd2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8002d2c <TIM_OC1_SetConfig+0x120>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00f      	beq.n	8002cde <TIM_OC1_SetConfig+0xd2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <TIM_OC1_SetConfig+0x124>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00b      	beq.n	8002cde <TIM_OC1_SetConfig+0xd2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8002d34 <TIM_OC1_SetConfig+0x128>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d007      	beq.n	8002cde <TIM_OC1_SetConfig+0xd2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a19      	ldr	r2, [pc, #100]	@ (8002d38 <TIM_OC1_SetConfig+0x12c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d003      	beq.n	8002cde <TIM_OC1_SetConfig+0xd2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a18      	ldr	r2, [pc, #96]	@ (8002d3c <TIM_OC1_SetConfig+0x130>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d111      	bne.n	8002d02 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	621a      	str	r2, [r3, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	371c      	adds	r7, #28
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012c00 	.word	0x40012c00
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40015000 	.word	0x40015000

08002d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	f023 0210 	bic.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	021b      	lsls	r3, r3, #8
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0320 	bic.w	r3, r3, #32
 8002d8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002e50 <TIM_OC2_SetConfig+0x110>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d007      	beq.n	8002db4 <TIM_OC2_SetConfig+0x74>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a2b      	ldr	r2, [pc, #172]	@ (8002e54 <TIM_OC2_SetConfig+0x114>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d003      	beq.n	8002db4 <TIM_OC2_SetConfig+0x74>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <TIM_OC2_SetConfig+0x118>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d10d      	bne.n	8002dd0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002dce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002e50 <TIM_OC2_SetConfig+0x110>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <TIM_OC2_SetConfig+0xc0>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a1e      	ldr	r2, [pc, #120]	@ (8002e54 <TIM_OC2_SetConfig+0x114>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d00f      	beq.n	8002e00 <TIM_OC2_SetConfig+0xc0>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <TIM_OC2_SetConfig+0x11c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_OC2_SetConfig+0xc0>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a1d      	ldr	r2, [pc, #116]	@ (8002e60 <TIM_OC2_SetConfig+0x120>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_OC2_SetConfig+0xc0>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e64 <TIM_OC2_SetConfig+0x124>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_OC2_SetConfig+0xc0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a17      	ldr	r2, [pc, #92]	@ (8002e58 <TIM_OC2_SetConfig+0x118>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d113      	bne.n	8002e28 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	621a      	str	r2, [r3, #32]
}
 8002e42:	bf00      	nop
 8002e44:	371c      	adds	r7, #28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40012c00 	.word	0x40012c00
 8002e54:	40013400 	.word	0x40013400
 8002e58:	40015000 	.word	0x40015000
 8002e5c:	40014000 	.word	0x40014000
 8002e60:	40014400 	.word	0x40014400
 8002e64:	40014800 	.word	0x40014800

08002e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0303 	bic.w	r3, r3, #3
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8002f74 <TIM_OC3_SetConfig+0x10c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <TIM_OC3_SetConfig+0x72>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8002f78 <TIM_OC3_SetConfig+0x110>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <TIM_OC3_SetConfig+0x72>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	@ (8002f7c <TIM_OC3_SetConfig+0x114>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10d      	bne.n	8002ef6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	021b      	lsls	r3, r3, #8
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8002f74 <TIM_OC3_SetConfig+0x10c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d013      	beq.n	8002f26 <TIM_OC3_SetConfig+0xbe>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1d      	ldr	r2, [pc, #116]	@ (8002f78 <TIM_OC3_SetConfig+0x110>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00f      	beq.n	8002f26 <TIM_OC3_SetConfig+0xbe>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <TIM_OC3_SetConfig+0x118>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d00b      	beq.n	8002f26 <TIM_OC3_SetConfig+0xbe>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1c      	ldr	r2, [pc, #112]	@ (8002f84 <TIM_OC3_SetConfig+0x11c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d007      	beq.n	8002f26 <TIM_OC3_SetConfig+0xbe>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <TIM_OC3_SetConfig+0x120>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d003      	beq.n	8002f26 <TIM_OC3_SetConfig+0xbe>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a16      	ldr	r2, [pc, #88]	@ (8002f7c <TIM_OC3_SetConfig+0x114>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d113      	bne.n	8002f4e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40013400 	.word	0x40013400
 8002f7c:	40015000 	.word	0x40015000
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800

08002f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	031b      	lsls	r3, r3, #12
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2c      	ldr	r2, [pc, #176]	@ (800309c <TIM_OC4_SetConfig+0x110>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <TIM_OC4_SetConfig+0x74>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80030a0 <TIM_OC4_SetConfig+0x114>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d003      	beq.n	8003000 <TIM_OC4_SetConfig+0x74>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a2a      	ldr	r2, [pc, #168]	@ (80030a4 <TIM_OC4_SetConfig+0x118>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d10d      	bne.n	800301c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003006:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	031b      	lsls	r3, r3, #12
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800301a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <TIM_OC4_SetConfig+0x110>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d013      	beq.n	800304c <TIM_OC4_SetConfig+0xc0>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a1e      	ldr	r2, [pc, #120]	@ (80030a0 <TIM_OC4_SetConfig+0x114>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_OC4_SetConfig+0xc0>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a1e      	ldr	r2, [pc, #120]	@ (80030a8 <TIM_OC4_SetConfig+0x11c>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_OC4_SetConfig+0xc0>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a1d      	ldr	r2, [pc, #116]	@ (80030ac <TIM_OC4_SetConfig+0x120>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_OC4_SetConfig+0xc0>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <TIM_OC4_SetConfig+0x124>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC4_SetConfig+0xc0>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a17      	ldr	r2, [pc, #92]	@ (80030a4 <TIM_OC4_SetConfig+0x118>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003052:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800305a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40012c00 	.word	0x40012c00
 80030a0:	40013400 	.word	0x40013400
 80030a4:	40015000 	.word	0x40015000
 80030a8:	40014000 	.word	0x40014000
 80030ac:	40014400 	.word	0x40014400
 80030b0:	40014800 	.word	0x40014800

080030b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030f8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	041b      	lsls	r3, r3, #16
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4313      	orrs	r3, r2
 8003104:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a19      	ldr	r2, [pc, #100]	@ (8003170 <TIM_OC5_SetConfig+0xbc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <TIM_OC5_SetConfig+0x82>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a18      	ldr	r2, [pc, #96]	@ (8003174 <TIM_OC5_SetConfig+0xc0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00f      	beq.n	8003136 <TIM_OC5_SetConfig+0x82>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a17      	ldr	r2, [pc, #92]	@ (8003178 <TIM_OC5_SetConfig+0xc4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d00b      	beq.n	8003136 <TIM_OC5_SetConfig+0x82>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a16      	ldr	r2, [pc, #88]	@ (800317c <TIM_OC5_SetConfig+0xc8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d007      	beq.n	8003136 <TIM_OC5_SetConfig+0x82>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a15      	ldr	r2, [pc, #84]	@ (8003180 <TIM_OC5_SetConfig+0xcc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC5_SetConfig+0x82>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <TIM_OC5_SetConfig+0xd0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d109      	bne.n	800314a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	621a      	str	r2, [r3, #32]
}
 8003164:	bf00      	nop
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40013400 	.word	0x40013400
 8003178:	40014000 	.word	0x40014000
 800317c:	40014400 	.word	0x40014400
 8003180:	40014800 	.word	0x40014800
 8003184:	40015000 	.word	0x40015000

08003188 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80031ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	051b      	lsls	r3, r3, #20
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	4313      	orrs	r3, r2
 80031da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1a      	ldr	r2, [pc, #104]	@ (8003248 <TIM_OC6_SetConfig+0xc0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d013      	beq.n	800320c <TIM_OC6_SetConfig+0x84>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a19      	ldr	r2, [pc, #100]	@ (800324c <TIM_OC6_SetConfig+0xc4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d00f      	beq.n	800320c <TIM_OC6_SetConfig+0x84>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a18      	ldr	r2, [pc, #96]	@ (8003250 <TIM_OC6_SetConfig+0xc8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d00b      	beq.n	800320c <TIM_OC6_SetConfig+0x84>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <TIM_OC6_SetConfig+0xcc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d007      	beq.n	800320c <TIM_OC6_SetConfig+0x84>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4a16      	ldr	r2, [pc, #88]	@ (8003258 <TIM_OC6_SetConfig+0xd0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d003      	beq.n	800320c <TIM_OC6_SetConfig+0x84>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	@ (800325c <TIM_OC6_SetConfig+0xd4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d109      	bne.n	8003220 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	029b      	lsls	r3, r3, #10
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	4313      	orrs	r3, r2
 800321e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	621a      	str	r2, [r3, #32]
}
 800323a:	bf00      	nop
 800323c:	371c      	adds	r7, #28
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40012c00 	.word	0x40012c00
 800324c:	40013400 	.word	0x40013400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40015000 	.word	0x40015000

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a1b      	ldr	r3, [r3, #32]
 80032d4:	f023 0210 	bic.w	r2, r3, #16
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	4313      	orrs	r3, r2
 8003304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003338:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4313      	orrs	r3, r2
 8003340:	f043 0307 	orr.w	r3, r3, #7
 8003344:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003372:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	431a      	orrs	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4313      	orrs	r3, r2
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	4313      	orrs	r3, r2
 8003384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003398:	b480      	push	{r7}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	2201      	movs	r2, #1
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6a1a      	ldr	r2, [r3, #32]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	401a      	ands	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a1a      	ldr	r2, [r3, #32]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	fa01 f303 	lsl.w	r3, r1, r3
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
	...

080033e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e074      	b.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a34      	ldr	r2, [pc, #208]	@ (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d009      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a33      	ldr	r2, [pc, #204]	@ (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003440:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a21      	ldr	r2, [pc, #132]	@ (80034f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d022      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800347c:	d01d      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a1f      	ldr	r2, [pc, #124]	@ (8003500 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d018      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1d      	ldr	r2, [pc, #116]	@ (8003504 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d013      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1c      	ldr	r2, [pc, #112]	@ (8003508 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d00e      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a15      	ldr	r2, [pc, #84]	@ (80034f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d009      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a11      	ldr	r2, [pc, #68]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d10c      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40012c00 	.word	0x40012c00
 80034f8:	40013400 	.word	0x40013400
 80034fc:	40015000 	.word	0x40015000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000800 	.word	0x40000800
 8003508:	40000c00 	.word	0x40000c00
 800350c:	40014000 	.word	0x40014000

08003510 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003528:	2302      	movs	r3, #2
 800352a:	e078      	b.n	800361e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	4313      	orrs	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003592:	4313      	orrs	r3, r2
 8003594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	041b      	lsls	r3, r3, #16
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1c      	ldr	r2, [pc, #112]	@ (800362c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a19      	ldr	r2, [pc, #100]	@ (8003634 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d11c      	bne.n	800360c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035dc:	051b      	lsls	r3, r3, #20
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	40012c00 	.word	0x40012c00
 8003630:	40013400 	.word	0x40013400
 8003634:	40015000 	.word	0x40015000

08003638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d101      	bne.n	800364a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e042      	b.n	80036d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	2b00      	cmp	r3, #0
 8003652:	d106      	bne.n	8003662 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fd fa3d 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2224      	movs	r2, #36	@ 0x24
 8003666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0201 	bic.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 fb24 	bl	8003cd0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f825 	bl	80036d8 <UART_SetConfig>
 800368e:	4603      	mov	r3, r0
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e01b      	b.n	80036d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 fba3 	bl	8003e14 <UART_CheckIdleState>
 80036ce:	4603      	mov	r3, r0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036dc:	b08c      	sub	sp, #48	@ 0x30
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036e2:	2300      	movs	r3, #0
 80036e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	431a      	orrs	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4baa      	ldr	r3, [pc, #680]	@ (80039b0 <UART_SetConfig+0x2d8>)
 8003708:	4013      	ands	r3, r2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	6812      	ldr	r2, [r2, #0]
 800370e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003710:	430b      	orrs	r3, r1
 8003712:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a9f      	ldr	r2, [pc, #636]	@ (80039b4 <UART_SetConfig+0x2dc>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d004      	beq.n	8003744 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003740:	4313      	orrs	r3, r2
 8003742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800374e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	6812      	ldr	r2, [r2, #0]
 8003756:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003758:	430b      	orrs	r3, r1
 800375a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	f023 010f 	bic.w	r1, r3, #15
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a90      	ldr	r2, [pc, #576]	@ (80039b8 <UART_SetConfig+0x2e0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d125      	bne.n	80037c8 <UART_SetConfig+0xf0>
 800377c:	4b8f      	ldr	r3, [pc, #572]	@ (80039bc <UART_SetConfig+0x2e4>)
 800377e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b03      	cmp	r3, #3
 8003788:	d81a      	bhi.n	80037c0 <UART_SetConfig+0xe8>
 800378a:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <UART_SetConfig+0xb8>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b1 	.word	0x080037b1
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037a6:	e116      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037ae:	e112      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037b6:	e10e      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037be:	e10a      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80037c6:	e106      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a7c      	ldr	r2, [pc, #496]	@ (80039c0 <UART_SetConfig+0x2e8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d138      	bne.n	8003844 <UART_SetConfig+0x16c>
 80037d2:	4b7a      	ldr	r3, [pc, #488]	@ (80039bc <UART_SetConfig+0x2e4>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	d82d      	bhi.n	800383c <UART_SetConfig+0x164>
 80037e0:	a201      	add	r2, pc, #4	@ (adr r2, 80037e8 <UART_SetConfig+0x110>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	0800383d 	.word	0x0800383d
 80037f8:	0800382d 	.word	0x0800382d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
 8003808:	08003825 	.word	0x08003825
 800380c:	0800383d 	.word	0x0800383d
 8003810:	0800383d 	.word	0x0800383d
 8003814:	0800383d 	.word	0x0800383d
 8003818:	08003835 	.word	0x08003835
 800381c:	2300      	movs	r3, #0
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003822:	e0d8      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003824:	2302      	movs	r3, #2
 8003826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800382a:	e0d4      	b.n	80039d6 <UART_SetConfig+0x2fe>
 800382c:	2304      	movs	r3, #4
 800382e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003832:	e0d0      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003834:	2308      	movs	r3, #8
 8003836:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800383a:	e0cc      	b.n	80039d6 <UART_SetConfig+0x2fe>
 800383c:	2310      	movs	r3, #16
 800383e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003842:	e0c8      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5e      	ldr	r2, [pc, #376]	@ (80039c4 <UART_SetConfig+0x2ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d125      	bne.n	800389a <UART_SetConfig+0x1c2>
 800384e:	4b5b      	ldr	r3, [pc, #364]	@ (80039bc <UART_SetConfig+0x2e4>)
 8003850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003858:	2b30      	cmp	r3, #48	@ 0x30
 800385a:	d016      	beq.n	800388a <UART_SetConfig+0x1b2>
 800385c:	2b30      	cmp	r3, #48	@ 0x30
 800385e:	d818      	bhi.n	8003892 <UART_SetConfig+0x1ba>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d00a      	beq.n	800387a <UART_SetConfig+0x1a2>
 8003864:	2b20      	cmp	r3, #32
 8003866:	d814      	bhi.n	8003892 <UART_SetConfig+0x1ba>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d002      	beq.n	8003872 <UART_SetConfig+0x19a>
 800386c:	2b10      	cmp	r3, #16
 800386e:	d008      	beq.n	8003882 <UART_SetConfig+0x1aa>
 8003870:	e00f      	b.n	8003892 <UART_SetConfig+0x1ba>
 8003872:	2300      	movs	r3, #0
 8003874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003878:	e0ad      	b.n	80039d6 <UART_SetConfig+0x2fe>
 800387a:	2302      	movs	r3, #2
 800387c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003880:	e0a9      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003882:	2304      	movs	r3, #4
 8003884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003888:	e0a5      	b.n	80039d6 <UART_SetConfig+0x2fe>
 800388a:	2308      	movs	r3, #8
 800388c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003890:	e0a1      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003892:	2310      	movs	r3, #16
 8003894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003898:	e09d      	b.n	80039d6 <UART_SetConfig+0x2fe>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4a      	ldr	r2, [pc, #296]	@ (80039c8 <UART_SetConfig+0x2f0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d125      	bne.n	80038f0 <UART_SetConfig+0x218>
 80038a4:	4b45      	ldr	r3, [pc, #276]	@ (80039bc <UART_SetConfig+0x2e4>)
 80038a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80038ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80038b0:	d016      	beq.n	80038e0 <UART_SetConfig+0x208>
 80038b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80038b4:	d818      	bhi.n	80038e8 <UART_SetConfig+0x210>
 80038b6:	2b80      	cmp	r3, #128	@ 0x80
 80038b8:	d00a      	beq.n	80038d0 <UART_SetConfig+0x1f8>
 80038ba:	2b80      	cmp	r3, #128	@ 0x80
 80038bc:	d814      	bhi.n	80038e8 <UART_SetConfig+0x210>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <UART_SetConfig+0x1f0>
 80038c2:	2b40      	cmp	r3, #64	@ 0x40
 80038c4:	d008      	beq.n	80038d8 <UART_SetConfig+0x200>
 80038c6:	e00f      	b.n	80038e8 <UART_SetConfig+0x210>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ce:	e082      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80038d0:	2302      	movs	r3, #2
 80038d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038d6:	e07e      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80038d8:	2304      	movs	r3, #4
 80038da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038de:	e07a      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80038e0:	2308      	movs	r3, #8
 80038e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038e6:	e076      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80038e8:	2310      	movs	r3, #16
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80038ee:	e072      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a35      	ldr	r2, [pc, #212]	@ (80039cc <UART_SetConfig+0x2f4>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d12a      	bne.n	8003950 <UART_SetConfig+0x278>
 80038fa:	4b30      	ldr	r3, [pc, #192]	@ (80039bc <UART_SetConfig+0x2e4>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003904:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003908:	d01a      	beq.n	8003940 <UART_SetConfig+0x268>
 800390a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800390e:	d81b      	bhi.n	8003948 <UART_SetConfig+0x270>
 8003910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003914:	d00c      	beq.n	8003930 <UART_SetConfig+0x258>
 8003916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800391a:	d815      	bhi.n	8003948 <UART_SetConfig+0x270>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <UART_SetConfig+0x250>
 8003920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003924:	d008      	beq.n	8003938 <UART_SetConfig+0x260>
 8003926:	e00f      	b.n	8003948 <UART_SetConfig+0x270>
 8003928:	2300      	movs	r3, #0
 800392a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800392e:	e052      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003930:	2302      	movs	r3, #2
 8003932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003936:	e04e      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003938:	2304      	movs	r3, #4
 800393a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800393e:	e04a      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003940:	2308      	movs	r3, #8
 8003942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003946:	e046      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003948:	2310      	movs	r3, #16
 800394a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800394e:	e042      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	@ (80039b4 <UART_SetConfig+0x2dc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d13a      	bne.n	80039d0 <UART_SetConfig+0x2f8>
 800395a:	4b18      	ldr	r3, [pc, #96]	@ (80039bc <UART_SetConfig+0x2e4>)
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003964:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003968:	d01a      	beq.n	80039a0 <UART_SetConfig+0x2c8>
 800396a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800396e:	d81b      	bhi.n	80039a8 <UART_SetConfig+0x2d0>
 8003970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003974:	d00c      	beq.n	8003990 <UART_SetConfig+0x2b8>
 8003976:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800397a:	d815      	bhi.n	80039a8 <UART_SetConfig+0x2d0>
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <UART_SetConfig+0x2b0>
 8003980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003984:	d008      	beq.n	8003998 <UART_SetConfig+0x2c0>
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x2d0>
 8003988:	2300      	movs	r3, #0
 800398a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800398e:	e022      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003990:	2302      	movs	r3, #2
 8003992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003996:	e01e      	b.n	80039d6 <UART_SetConfig+0x2fe>
 8003998:	2304      	movs	r3, #4
 800399a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800399e:	e01a      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80039a0:	2308      	movs	r3, #8
 80039a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039a6:	e016      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80039a8:	2310      	movs	r3, #16
 80039aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80039ae:	e012      	b.n	80039d6 <UART_SetConfig+0x2fe>
 80039b0:	cfff69f3 	.word	0xcfff69f3
 80039b4:	40008000 	.word	0x40008000
 80039b8:	40013800 	.word	0x40013800
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40004400 	.word	0x40004400
 80039c4:	40004800 	.word	0x40004800
 80039c8:	40004c00 	.word	0x40004c00
 80039cc:	40005000 	.word	0x40005000
 80039d0:	2310      	movs	r3, #16
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4aae      	ldr	r2, [pc, #696]	@ (8003c94 <UART_SetConfig+0x5bc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	f040 8097 	bne.w	8003b10 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d823      	bhi.n	8003a32 <UART_SetConfig+0x35a>
 80039ea:	a201      	add	r2, pc, #4	@ (adr r2, 80039f0 <UART_SetConfig+0x318>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a23 	.word	0x08003a23
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a33 	.word	0x08003a33
 8003a10:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a14:	f7fe f992 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003a18:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a1a:	e010      	b.n	8003a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b9e      	ldr	r3, [pc, #632]	@ (8003c98 <UART_SetConfig+0x5c0>)
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe f91d 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003a26:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003a28:	e009      	b.n	8003a3e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003a30:	e005      	b.n	8003a3e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003a3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8130 	beq.w	8003ca6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	4a94      	ldr	r2, [pc, #592]	@ (8003c9c <UART_SetConfig+0x5c4>)
 8003a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a50:	461a      	mov	r2, r3
 8003a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	4413      	add	r3, r2
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d305      	bcc.n	8003a76 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d903      	bls.n	8003a7e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003a7c:	e113      	b.n	8003ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	2200      	movs	r2, #0
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	60fa      	str	r2, [r7, #12]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	4a84      	ldr	r2, [pc, #528]	@ (8003c9c <UART_SetConfig+0x5c4>)
 8003a8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2200      	movs	r2, #0
 8003a94:	603b      	str	r3, [r7, #0]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa0:	f7fc fbba 	bl	8000218 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	020b      	lsls	r3, r1, #8
 8003ab6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003aba:	0202      	lsls	r2, r0, #8
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	6849      	ldr	r1, [r1, #4]
 8003ac0:	0849      	lsrs	r1, r1, #1
 8003ac2:	2000      	movs	r0, #0
 8003ac4:	460c      	mov	r4, r1
 8003ac6:	4605      	mov	r5, r0
 8003ac8:	eb12 0804 	adds.w	r8, r2, r4
 8003acc:	eb43 0905 	adc.w	r9, r3, r5
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	469a      	mov	sl, r3
 8003ad8:	4693      	mov	fp, r2
 8003ada:	4652      	mov	r2, sl
 8003adc:	465b      	mov	r3, fp
 8003ade:	4640      	mov	r0, r8
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	f7fc fb99 	bl	8000218 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4613      	mov	r3, r2
 8003aec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003af4:	d308      	bcc.n	8003b08 <UART_SetConfig+0x430>
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003afc:	d204      	bcs.n	8003b08 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a3a      	ldr	r2, [r7, #32]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e0ce      	b.n	8003ca6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003b0e:	e0ca      	b.n	8003ca6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b18:	d166      	bne.n	8003be8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003b1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003b1e:	2b08      	cmp	r3, #8
 8003b20:	d827      	bhi.n	8003b72 <UART_SetConfig+0x49a>
 8003b22:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <UART_SetConfig+0x450>)
 8003b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b55 	.word	0x08003b55
 8003b30:	08003b5d 	.word	0x08003b5d
 8003b34:	08003b73 	.word	0x08003b73
 8003b38:	08003b63 	.word	0x08003b63
 8003b3c:	08003b73 	.word	0x08003b73
 8003b40:	08003b73 	.word	0x08003b73
 8003b44:	08003b73 	.word	0x08003b73
 8003b48:	08003b6b 	.word	0x08003b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe f8f6 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b52:	e014      	b.n	8003b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe f908 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b5a:	e010      	b.n	8003b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b5c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <UART_SetConfig+0x5c0>)
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b60:	e00d      	b.n	8003b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b62:	f7fe f87d 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003b68:	e009      	b.n	8003b7e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003b70:	e005      	b.n	8003b7e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003b7c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 8090 	beq.w	8003ca6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	4a44      	ldr	r2, [pc, #272]	@ (8003c9c <UART_SetConfig+0x5c4>)
 8003b8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b90:	461a      	mov	r2, r3
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b98:	005a      	lsls	r2, r3, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	441a      	add	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b0f      	cmp	r3, #15
 8003bb0:	d916      	bls.n	8003be0 <UART_SetConfig+0x508>
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb8:	d212      	bcs.n	8003be0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	f023 030f 	bic.w	r3, r3, #15
 8003bc2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	8bfb      	ldrh	r3, [r7, #30]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	8bfa      	ldrh	r2, [r7, #30]
 8003bdc:	60da      	str	r2, [r3, #12]
 8003bde:	e062      	b.n	8003ca6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003be6:	e05e      	b.n	8003ca6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d828      	bhi.n	8003c42 <UART_SetConfig+0x56a>
 8003bf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf8 <UART_SetConfig+0x520>)
 8003bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf6:	bf00      	nop
 8003bf8:	08003c1d 	.word	0x08003c1d
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c43 	.word	0x08003c43
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c43 	.word	0x08003c43
 8003c10:	08003c43 	.word	0x08003c43
 8003c14:	08003c43 	.word	0x08003c43
 8003c18:	08003c3b 	.word	0x08003c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c1c:	f7fe f88e 	bl	8001d3c <HAL_RCC_GetPCLK1Freq>
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c22:	e014      	b.n	8003c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c24:	f7fe f8a0 	bl	8001d68 <HAL_RCC_GetPCLK2Freq>
 8003c28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c2a:	e010      	b.n	8003c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c98 <UART_SetConfig+0x5c0>)
 8003c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c30:	e00d      	b.n	8003c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c32:	f7fe f815 	bl	8001c60 <HAL_RCC_GetSysClockFreq>
 8003c36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003c38:	e009      	b.n	8003c4e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003c40:	e005      	b.n	8003c4e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003c4c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d028      	beq.n	8003ca6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	4a10      	ldr	r2, [pc, #64]	@ (8003c9c <UART_SetConfig+0x5c4>)
 8003c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	441a      	add	r2, r3
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	2b0f      	cmp	r3, #15
 8003c7c:	d910      	bls.n	8003ca0 <UART_SetConfig+0x5c8>
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c84:	d20c      	bcs.n	8003ca0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	e009      	b.n	8003ca6 <UART_SetConfig+0x5ce>
 8003c92:	bf00      	nop
 8003c94:	40008000 	.word	0x40008000
 8003c98:	00f42400 	.word	0x00f42400
 8003c9c:	0800439c 	.word	0x0800439c
      }
      else
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003cc2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3730      	adds	r7, #48	@ 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cd0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00a      	beq.n	8003d3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00a      	beq.n	8003d60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f003 0310 	and.w	r3, r3, #16
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00a      	beq.n	8003d82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	430a      	orrs	r2, r1
 8003d80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d00a      	beq.n	8003da4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d01a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dce:	d10a      	bne.n	8003de6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }
}
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b098      	sub	sp, #96	@ 0x60
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e24:	f7fc ff40 	bl	8000ca8 <HAL_GetTick>
 8003e28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d12f      	bne.n	8003e98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e40:	2200      	movs	r2, #0
 8003e42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f88e 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d022      	beq.n	8003e98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5a:	e853 3f00 	ldrex	r3, [r3]
 8003e5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e66:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e78:	e841 2300 	strex	r3, r2, [r1]
 8003e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e6      	bne.n	8003e52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e063      	b.n	8003f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0304 	and.w	r3, r3, #4
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d149      	bne.n	8003f3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ea6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f857 	bl	8003f68 <UART_WaitOnFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d03c      	beq.n	8003f3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e6      	bne.n	8003ec0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	e853 3f00 	ldrex	r3, [r3]
 8003f00:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3308      	adds	r3, #8
 8003f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f12:	61fa      	str	r2, [r7, #28]
 8003f14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	69b9      	ldr	r1, [r7, #24]
 8003f18:	69fa      	ldr	r2, [r7, #28]
 8003f1a:	e841 2300 	strex	r3, r2, [r1]
 8003f1e:	617b      	str	r3, [r7, #20]
   return(result);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1e5      	bne.n	8003ef2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e012      	b.n	8003f60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2220      	movs	r2, #32
 8003f46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3758      	adds	r7, #88	@ 0x58
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4613      	mov	r3, r2
 8003f76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f78:	e04f      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d04b      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fc fe91 	bl	8000ca8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e04e      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d037      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b80      	cmp	r3, #128	@ 0x80
 8003fae:	d034      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b40      	cmp	r3, #64	@ 0x40
 8003fb4:	d031      	beq.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d110      	bne.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2208      	movs	r2, #8
 8003fca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f838 	bl	8004042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2208      	movs	r2, #8
 8003fd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e029      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff4:	d111      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f81e 	bl	8004042 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2220      	movs	r2, #32
 800400a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e00f      	b.n	800403a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69da      	ldr	r2, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	429a      	cmp	r2, r3
 8004036:	d0a0      	beq.n	8003f7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004042:	b480      	push	{r7}
 8004044:	b095      	sub	sp, #84	@ 0x54
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	e853 3f00 	ldrex	r3, [r3]
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800405e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461a      	mov	r2, r3
 8004066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004068:	643b      	str	r3, [r7, #64]	@ 0x40
 800406a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800406e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004070:	e841 2300 	strex	r3, r2, [r1]
 8004074:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e6      	bne.n	800404a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004084:	6a3b      	ldr	r3, [r7, #32]
 8004086:	e853 3f00 	ldrex	r3, [r3]
 800408a:	61fb      	str	r3, [r7, #28]
   return(result);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004092:	f023 0301 	bic.w	r3, r3, #1
 8004096:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3308      	adds	r3, #8
 800409e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e3      	bne.n	800407c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d118      	bne.n	80040ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	e853 3f00 	ldrex	r3, [r3]
 80040c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	f023 0310 	bic.w	r3, r3, #16
 80040d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6979      	ldr	r1, [r7, #20]
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	613b      	str	r3, [r7, #16]
   return(result);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e6      	bne.n	80040bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004102:	bf00      	nop
 8004104:	3754      	adds	r7, #84	@ 0x54
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_UARTEx_DisableFifoMode+0x16>
 8004120:	2302      	movs	r3, #2
 8004122:	e027      	b.n	8004174 <HAL_UARTEx_DisableFifoMode+0x66>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2224      	movs	r2, #36	@ 0x24
 8004130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004152:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004172:	2300      	movs	r3, #0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e02d      	b.n	80041f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	@ 0x24
 80041a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f84f 	bl	8004278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004210:	2302      	movs	r3, #2
 8004212:	e02d      	b.n	8004270 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2224      	movs	r2, #36	@ 0x24
 8004220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f022 0201 	bic.w	r2, r2, #1
 800423a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f811 	bl	8004278 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004284:	2b00      	cmp	r3, #0
 8004286:	d108      	bne.n	800429a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004298:	e031      	b.n	80042fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800429a:	2308      	movs	r3, #8
 800429c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800429e:	2308      	movs	r3, #8
 80042a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	0e5b      	lsrs	r3, r3, #25
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	0f5b      	lsrs	r3, r3, #29
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0307 	and.w	r3, r3, #7
 80042c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042c2:	7bbb      	ldrb	r3, [r7, #14]
 80042c4:	7b3a      	ldrb	r2, [r7, #12]
 80042c6:	4911      	ldr	r1, [pc, #68]	@ (800430c <UARTEx_SetNbDataToProcess+0x94>)
 80042c8:	5c8a      	ldrb	r2, [r1, r2]
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80042ce:	7b3a      	ldrb	r2, [r7, #12]
 80042d0:	490f      	ldr	r1, [pc, #60]	@ (8004310 <UARTEx_SetNbDataToProcess+0x98>)
 80042d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80042d8:	b29a      	uxth	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	7b7a      	ldrb	r2, [r7, #13]
 80042e4:	4909      	ldr	r1, [pc, #36]	@ (800430c <UARTEx_SetNbDataToProcess+0x94>)
 80042e6:	5c8a      	ldrb	r2, [r1, r2]
 80042e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80042ec:	7b7a      	ldrb	r2, [r7, #13]
 80042ee:	4908      	ldr	r1, [pc, #32]	@ (8004310 <UARTEx_SetNbDataToProcess+0x98>)
 80042f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	080043b4 	.word	0x080043b4
 8004310:	080043bc 	.word	0x080043bc

08004314 <memset>:
 8004314:	4402      	add	r2, r0
 8004316:	4603      	mov	r3, r0
 8004318:	4293      	cmp	r3, r2
 800431a:	d100      	bne.n	800431e <memset+0xa>
 800431c:	4770      	bx	lr
 800431e:	f803 1b01 	strb.w	r1, [r3], #1
 8004322:	e7f9      	b.n	8004318 <memset+0x4>

08004324 <__libc_init_array>:
 8004324:	b570      	push	{r4, r5, r6, lr}
 8004326:	4d0d      	ldr	r5, [pc, #52]	@ (800435c <__libc_init_array+0x38>)
 8004328:	4c0d      	ldr	r4, [pc, #52]	@ (8004360 <__libc_init_array+0x3c>)
 800432a:	1b64      	subs	r4, r4, r5
 800432c:	10a4      	asrs	r4, r4, #2
 800432e:	2600      	movs	r6, #0
 8004330:	42a6      	cmp	r6, r4
 8004332:	d109      	bne.n	8004348 <__libc_init_array+0x24>
 8004334:	4d0b      	ldr	r5, [pc, #44]	@ (8004364 <__libc_init_array+0x40>)
 8004336:	4c0c      	ldr	r4, [pc, #48]	@ (8004368 <__libc_init_array+0x44>)
 8004338:	f000 f818 	bl	800436c <_init>
 800433c:	1b64      	subs	r4, r4, r5
 800433e:	10a4      	asrs	r4, r4, #2
 8004340:	2600      	movs	r6, #0
 8004342:	42a6      	cmp	r6, r4
 8004344:	d105      	bne.n	8004352 <__libc_init_array+0x2e>
 8004346:	bd70      	pop	{r4, r5, r6, pc}
 8004348:	f855 3b04 	ldr.w	r3, [r5], #4
 800434c:	4798      	blx	r3
 800434e:	3601      	adds	r6, #1
 8004350:	e7ee      	b.n	8004330 <__libc_init_array+0xc>
 8004352:	f855 3b04 	ldr.w	r3, [r5], #4
 8004356:	4798      	blx	r3
 8004358:	3601      	adds	r6, #1
 800435a:	e7f2      	b.n	8004342 <__libc_init_array+0x1e>
 800435c:	080043cc 	.word	0x080043cc
 8004360:	080043cc 	.word	0x080043cc
 8004364:	080043cc 	.word	0x080043cc
 8004368:	080043d0 	.word	0x080043d0

0800436c <_init>:
 800436c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800436e:	bf00      	nop
 8004370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004372:	bc08      	pop	{r3}
 8004374:	469e      	mov	lr, r3
 8004376:	4770      	bx	lr

08004378 <_fini>:
 8004378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800437a:	bf00      	nop
 800437c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800437e:	bc08      	pop	{r3}
 8004380:	469e      	mov	lr, r3
 8004382:	4770      	bx	lr
