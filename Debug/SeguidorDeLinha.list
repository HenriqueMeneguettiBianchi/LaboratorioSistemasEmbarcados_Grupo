
SeguidorDeLinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b7c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006d5c  08006d5c  00007d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df0  08006df0  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  08006df0  08006df0  00007df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df8  08006df8  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dfc  08006dfc  00007dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006e00  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  2000005c  08006e5c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08006e5c  000083fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014994  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b21  00000000  00000000  0001ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3c  00000000  00000000  00020648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f1b  00000000  00000000  00021384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015732  00000000  00000000  0004829f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbe7c  00000000  00000000  0005d9d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015984d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c04  00000000  00000000  00159890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0015e494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006d44 	.word	0x08006d44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006d44 	.word	0x08006d44

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b3b      	ldr	r3, [pc, #236]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005da:	4a3a      	ldr	r2, [pc, #232]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e2:	4b38      	ldr	r3, [pc, #224]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b35      	ldr	r3, [pc, #212]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a34      	ldr	r2, [pc, #208]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005f4:	f043 0320 	orr.w	r3, r3, #32
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b32      	ldr	r3, [pc, #200]	@ (80006c4 <MX_GPIO_Init+0x104>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <MX_GPIO_Init+0x104>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a2e      	ldr	r2, [pc, #184]	@ (80006c4 <MX_GPIO_Init+0x104>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <MX_GPIO_Init+0x104>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_GPIO_Init+0x104>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	4a28      	ldr	r2, [pc, #160]	@ (80006c4 <MX_GPIO_Init+0x104>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062a:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <MX_GPIO_Init+0x104>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 51e1 	mov.w	r1, #7200	@ 0x1c20
 800063c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000640:	f001 faf4 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin, GPIO_PIN_RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 800064a:	481f      	ldr	r0, [pc, #124]	@ (80006c8 <MX_GPIO_Init+0x108>)
 800064c:	f001 faee 	bl	8001c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000656:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	4619      	mov	r1, r3
 8000666:	4819      	ldr	r0, [pc, #100]	@ (80006cc <MX_GPIO_Init+0x10c>)
 8000668:	f001 f95e 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LedYellow_Pin|IN4_Pin|LedRed_Pin|LedGreen_Pin;
 800066c:	f44f 53e1 	mov.w	r3, #7200	@ 0x1c20
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000672:	2301      	movs	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2300      	movs	r3, #0
 800067c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000688:	f001 f94e 	bl	8001928 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = IN1_Pin|IN3_Pin|LedBlue_Pin|IN2_Pin;
 800068c:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4808      	ldr	r0, [pc, #32]	@ (80006c8 <MX_GPIO_Init+0x108>)
 80006a6:	f001 f93f 	bl	8001928 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2028      	movs	r0, #40	@ 0x28
 80006b0:	f001 f845 	bl	800173e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006b4:	2028      	movs	r0, #40	@ 0x28
 80006b6:	f001 f85c 	bl	8001772 <HAL_NVIC_EnableIRQ>

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40021000 	.word	0x40021000
 80006c8:	48000400 	.word	0x48000400
 80006cc:	48000800 	.word	0x48000800

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d6:	f000 fec4 	bl	8001462 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006da:	f000 f8a3 	bl	8000824 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006de:	f7ff ff6f 	bl	80005c0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006e2:	f000 fdeb 	bl	80012bc <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80006e6:	f000 fb0f 	bl	8000d08 <MX_TIM1_Init>
  MX_TIM16_Init();
 80006ea:	f000 fc3f 	bl	8000f6c <MX_TIM16_Init>
  MX_TIM17_Init();
 80006ee:	f000 fc87 	bl	8001000 <MX_TIM17_Init>
  MX_TIM2_Init();
 80006f2:	f000 fbc5 	bl	8000e80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1, &htim2, &htim16, &htim17);
 80006f6:	4b3c      	ldr	r3, [pc, #240]	@ (80007e8 <main+0x118>)
 80006f8:	4a3c      	ldr	r2, [pc, #240]	@ (80007ec <main+0x11c>)
 80006fa:	493d      	ldr	r1, [pc, #244]	@ (80007f0 <main+0x120>)
 80006fc:	483d      	ldr	r0, [pc, #244]	@ (80007f4 <main+0x124>)
 80006fe:	f000 f8e3 	bl	80008c8 <vMotorInit>

  sprintf(cBufer, "Hello!\r\n");
 8000702:	493d      	ldr	r1, [pc, #244]	@ (80007f8 <main+0x128>)
 8000704:	483d      	ldr	r0, [pc, #244]	@ (80007fc <main+0x12c>)
 8000706:	f005 fe7d 	bl	8006404 <siprintf>
  HAL_UART_Transmit_IT(&hlpuart1, (unsigned char*)cBufer, (uint16_t)strlen(cBufer));
 800070a:	483c      	ldr	r0, [pc, #240]	@ (80007fc <main+0x12c>)
 800070c:	f7ff fd88 	bl	8000220 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29b      	uxth	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	4939      	ldr	r1, [pc, #228]	@ (80007fc <main+0x12c>)
 8000718:	4839      	ldr	r0, [pc, #228]	@ (8000800 <main+0x130>)
 800071a:	f004 fa7b 	bl	8004c14 <HAL_UART_Transmit_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  vSetRodaEsquerdaDC(0.8);
 800071e:	ed9f 0a39 	vldr	s0, [pc, #228]	@ 8000804 <main+0x134>
 8000722:	f000 f903 	bl	800092c <vSetRodaEsquerdaDC>
	  vSetRodaDireitaDC(0.8);
 8000726:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8000804 <main+0x134>
 800072a:	f000 f91d 	bl	8000968 <vSetRodaDireitaDC>
	  //IN1 = 1 e IN2 = 0 : TRAS MOTOR A
	  //IN1 = 0 e IN2 = 1 : FRENTE MOTOR A
	  //IN3 = 1 e IN4 = 0 : TRAS MOTOR B
	  //IN3 = 0 e IN4 = 1 : FRENTE MOTOR B
	  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000734:	4834      	ldr	r0, [pc, #208]	@ (8000808 <main+0x138>)
 8000736:	f001 fa79 	bl	8001c2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 800073a:	2200      	movs	r2, #0
 800073c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000740:	4831      	ldr	r0, [pc, #196]	@ (8000808 <main+0x138>)
 8000742:	f001 fa73 	bl	8001c2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	482f      	ldr	r0, [pc, #188]	@ (8000808 <main+0x138>)
 800074c:	f001 fa6e 	bl	8001c2c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f001 fa67 	bl	8001c2c <HAL_GPIO_WritePin>

	  fSpeed = fMotorGetSpeed();
 800075e:	f000 f9e9 	bl	8000b34 <fMotorGetSpeed>
 8000762:	eef0 7a40 	vmov.f32	s15, s0
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <main+0x13c>)
 8000768:	edc3 7a00 	vstr	s15, [r3]
	  cSpeedInt = (unsigned char)fSpeed;
 800076c:	4b27      	ldr	r3, [pc, #156]	@ (800080c <main+0x13c>)
 800076e:	edd3 7a00 	vldr	s15, [r3]
 8000772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000776:	edc7 7a01 	vstr	s15, [r7, #4]
 800077a:	793b      	ldrb	r3, [r7, #4]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b24      	ldr	r3, [pc, #144]	@ (8000810 <main+0x140>)
 8000780:	701a      	strb	r2, [r3, #0]
	  cSpeedDec = (unsigned char)((fSpeed - cSpeedInt)*100);
 8000782:	4b22      	ldr	r3, [pc, #136]	@ (800080c <main+0x13c>)
 8000784:	ed93 7a00 	vldr	s14, [r3]
 8000788:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <main+0x140>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000798:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8000814 <main+0x144>
 800079c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80007a8:	793b      	ldrb	r3, [r7, #4]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <main+0x148>)
 80007ae:	701a      	strb	r2, [r3, #0]
	  if(cSpeedDec < 10){
 80007b0:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <main+0x148>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b09      	cmp	r3, #9
 80007b6:	d809      	bhi.n	80007cc <main+0xfc>
		sprintf(cBufer, "%d.0%d\r\n", cSpeedInt, cSpeedDec);
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <main+0x140>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <main+0x148>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4916      	ldr	r1, [pc, #88]	@ (800081c <main+0x14c>)
 80007c4:	480d      	ldr	r0, [pc, #52]	@ (80007fc <main+0x12c>)
 80007c6:	f005 fe1d 	bl	8006404 <siprintf>
 80007ca:	e008      	b.n	80007de <main+0x10e>
	  }
	  else{
		sprintf(cBufer, "%d.%d\r\n", cSpeedInt, cSpeedDec);
 80007cc:	4b10      	ldr	r3, [pc, #64]	@ (8000810 <main+0x140>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <main+0x148>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	4912      	ldr	r1, [pc, #72]	@ (8000820 <main+0x150>)
 80007d8:	4808      	ldr	r0, [pc, #32]	@ (80007fc <main+0x12c>)
 80007da:	f005 fe13 	bl	8006404 <siprintf>
	  }

	  //HAL_UART_Transmit_IT(&hlpuart1, (unsigned char*)cBufer, (uint16_t)strlen(cBufer));
	  HAL_Delay(1000);
 80007de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e2:	f000 feaf 	bl	8001544 <HAL_Delay>
	  vSetRodaEsquerdaDC(0.8);
 80007e6:	e79a      	b.n	800071e <main+0x4e>
 80007e8:	200001d0 	.word	0x200001d0
 80007ec:	20000184 	.word	0x20000184
 80007f0:	20000138 	.word	0x20000138
 80007f4:	200000ec 	.word	0x200000ec
 80007f8:	08006d5c 	.word	0x08006d5c
 80007fc:	20000078 	.word	0x20000078
 8000800:	2000021c 	.word	0x2000021c
 8000804:	3f4ccccd 	.word	0x3f4ccccd
 8000808:	48000400 	.word	0x48000400
 800080c:	200000ac 	.word	0x200000ac
 8000810:	200000b0 	.word	0x200000b0
 8000814:	42c80000 	.word	0x42c80000
 8000818:	200000b1 	.word	0x200000b1
 800081c:	08006d68 	.word	0x08006d68
 8000820:	08006d74 	.word	0x08006d74

08000824 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b094      	sub	sp, #80	@ 0x50
 8000828:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800082a:	f107 0318 	add.w	r3, r7, #24
 800082e:	2238      	movs	r2, #56	@ 0x38
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f005 fe06 	bl	8006444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000846:	2000      	movs	r0, #0
 8000848:	f001 fa2c 	bl	8001ca4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800084c:	2302      	movs	r3, #2
 800084e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000850:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000856:	2340      	movs	r3, #64	@ 0x40
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000862:	2304      	movs	r3, #4
 8000864:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000866:	2355      	movs	r3, #85	@ 0x55
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800086a:	2302      	movs	r3, #2
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fac6 	bl	8001e0c <HAL_RCC_OscConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000886:	f000 f818 	bl	80008ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800088a:	230f      	movs	r3, #15
 800088c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088e:	2303      	movs	r3, #3
 8000890:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	2104      	movs	r1, #4
 80008a2:	4618      	mov	r0, r3
 80008a4:	f001 fdc4 	bl	8002430 <HAL_RCC_ClockConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80008ae:	f000 f804 	bl	80008ba <Error_Handler>
  }
}
 80008b2:	bf00      	nop
 80008b4:	3750      	adds	r7, #80	@ 0x50
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008be:	b672      	cpsid	i
}
 80008c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c2:	bf00      	nop
 80008c4:	e7fd      	b.n	80008c2 <Error_Handler+0x8>
	...

080008c8 <vMotorInit>:
// Output parameters:   none                                    //
// *************************************************************//
void vMotorInit(TIM_HandleTypeDef *htimMotor,
				TIM_HandleTypeDef *htimFreq,
				TIM_HandleTypeDef *htimEncA,
				TIM_HandleTypeDef *htimEncB){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
  htimRodas = htimMotor; // handler do timer que gera PWM para a velocidade dos motores
 80008d6:	4a12      	ldr	r2, [pc, #72]	@ (8000920 <vMotorInit+0x58>)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	6013      	str	r3, [r2, #0]
  htimEncMotorA = htimEncA; // handler do timer no input capture do motor A
 80008dc:	4a11      	ldr	r2, [pc, #68]	@ (8000924 <vMotorInit+0x5c>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	6013      	str	r3, [r2, #0]
  htimEncMotorB = htimEncB; // handler do timer no input capture do motor B
 80008e2:	4a11      	ldr	r2, [pc, #68]	@ (8000928 <vMotorInit+0x60>)
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	6013      	str	r3, [r2, #0]
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f002 fac2 	bl	8002e74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(htimMotor, TIM_CHANNEL_2);
 80008f0:	2104      	movs	r1, #4
 80008f2:	68f8      	ldr	r0, [r7, #12]
 80008f4:	f002 fabe 	bl	8002e74 <HAL_TIM_PWM_Start>
  htimFreq->Instance->CCR1 = 50;
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2232      	movs	r2, #50	@ 0x32
 80008fe:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(htimFreq, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	68b8      	ldr	r0, [r7, #8]
 8000904:	f002 fab6 	bl	8002e74 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(htimEncA, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f002 fc26 	bl	800315c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(htimEncB, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	6838      	ldr	r0, [r7, #0]
 8000914:	f002 fc22 	bl	800315c <HAL_TIM_IC_Start_IT>
}
 8000918:	bf00      	nop
 800091a:	3710      	adds	r7, #16
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200000b4 	.word	0x200000b4
 8000924:	200000b8 	.word	0x200000b8
 8000928:	200000bc 	.word	0x200000bc

0800092c <vSetRodaEsquerdaDC>:
// Method name:         vSetRodaEsquerdaDC                      //
// Method description: 	Seta o duty cycle da roda esquerda      //
// Input parameters:	fRodaEsquerdaDC -> duty cylce desejado  //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaEsquerdaDC(float fRodaEsquerdaDC){
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 8000936:	edd7 7a01 	vldr	s15, [r7, #4]
 800093a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000960 <vSetRodaEsquerdaDC+0x34>
 800093e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000942:	4b08      	ldr	r3, [pc, #32]	@ (8000964 <vSetRodaEsquerdaDC+0x38>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800094c:	ee17 2a90 	vmov	r2, s15
 8000950:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	447a0000 	.word	0x447a0000
 8000964:	200000b4 	.word	0x200000b4

08000968 <vSetRodaDireitaDC>:
// Method name:         vSetRodaDireitaDC                       //
// Method description: 	Seta o duty cycle da roda direita       //
// Input parameters:	fRodaDireitaDC -> duty cylce desejado   //
// Output parameters:   none                                    //
// *************************************************************//
void vSetRodaDireitaDC(float fRodaDireitaDC){
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	ed87 0a01 	vstr	s0, [r7, #4]
  __HAL_TIM_SET_COMPARE(htimRodas, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 8000972:	edd7 7a01 	vldr	s15, [r7, #4]
 8000976:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800099c <vSetRodaDireitaDC+0x34>
 800097a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <vSetRodaDireitaDC+0x38>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000988:	ee17 2a90 	vmov	r2, s15
 800098c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	447a0000 	.word	0x447a0000
 80009a0:	200000b4 	.word	0x200000b4

080009a4 <HAL_TIM_IC_CaptureCallback>:
// Method name:         HAL_TIM_IC_CaptureCallback              //
// Method description: 	Callback do timer Input Capture         //
// Input parameters:	*htim                                 //
// Output parameters:   none                                    //
// *************************************************************//
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	if(htim == htimEncMotorA){
 80009ac:	4b54      	ldr	r3, [pc, #336]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x15c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d14d      	bne.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xae>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7f1b      	ldrb	r3, [r3, #28]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d149      	bne.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xae>
			// se a primeira borda de subida não foi capturada
			if(iFirstCaptureA == 0){
 80009be:	4b51      	ldr	r3, [pc, #324]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x160>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d10a      	bne.n	80009dc <HAL_TIM_IC_CaptureCallback+0x38>
				uiIC_Val1A = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // lê o primeiro valor
 80009c6:	2100      	movs	r1, #0
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f003 f92d 	bl	8003c28 <HAL_TIM_ReadCapturedValue>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a4d      	ldr	r2, [pc, #308]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x164>)
 80009d2:	6013      	str	r3, [r2, #0]
				iFirstCaptureA = 1; // seta a primeira captura como true
 80009d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x160>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	e03a      	b.n	8000a52 <HAL_TIM_IC_CaptureCallback+0xae>
			}
			// se a primeira borda de subida foi capturada, agora será capturada a segunda borda
			else{
				uiIC_Val2A = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // lê o segundo valor
 80009dc:	2100      	movs	r1, #0
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f003 f922 	bl	8003c28 <HAL_TIM_ReadCapturedValue>
 80009e4:	4603      	mov	r3, r0
 80009e6:	4a49      	ldr	r2, [pc, #292]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x168>)
 80009e8:	6013      	str	r3, [r2, #0]

				if(uiIC_Val2A > uiIC_Val1A){
 80009ea:	4b48      	ldr	r3, [pc, #288]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x168>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b46      	ldr	r3, [pc, #280]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x164>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d907      	bls.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x62>
					uiDifferenceA = uiIC_Val2A - uiIC_Val1A;
 80009f6:	4b45      	ldr	r3, [pc, #276]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x168>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4b43      	ldr	r3, [pc, #268]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x164>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	4a43      	ldr	r2, [pc, #268]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	e00f      	b.n	8000a26 <HAL_TIM_IC_CaptureCallback+0x82>
				}
				else if(uiIC_Val1A > uiIC_Val2A){
 8000a06:	4b40      	ldr	r3, [pc, #256]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	4b40      	ldr	r3, [pc, #256]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d909      	bls.n	8000a26 <HAL_TIM_IC_CaptureCallback+0x82>
					uiDifferenceA = (0xFFFF - uiIC_Val1A) + uiIC_Val2A;
 8000a12:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x168>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b3c      	ldr	r3, [pc, #240]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x164>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a20:	33ff      	adds	r3, #255	@ 0xff
 8000a22:	4a3b      	ldr	r2, [pc, #236]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000a24:	6013      	str	r3, [r2, #0]
				}

				float fRefClock = TIMCLOCK/(PRESCALAR);
 8000a26:	4b3b      	ldr	r3, [pc, #236]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000a28:	60fb      	str	r3, [r7, #12]

				fFrequencyA = fRefClock/uiDifferenceA;
 8000a2a:	4b39      	ldr	r3, [pc, #228]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	ee07 3a90 	vmov	s15, r3
 8000a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a36:	edd7 6a03 	vldr	s13, [r7, #12]
 8000a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a3e:	4b36      	ldr	r3, [pc, #216]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000a40:	edc3 7a00 	vstr	s15, [r3]

				__HAL_TIM_SET_COUNTER(htim, 0); // reseta o counter
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	625a      	str	r2, [r3, #36]	@ 0x24
				iFirstCaptureA = 0; // seta a primeira captura como false
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x160>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
			}
		}
	}

	if(htim == htimEncMotorB){
 8000a52:	4b32      	ldr	r3, [pc, #200]	@ (8000b1c <HAL_TIM_IC_CaptureCallback+0x178>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d14d      	bne.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x154>
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7f1b      	ldrb	r3, [r3, #28]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d149      	bne.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x154>
			// se a primeira borda de subida não foi capturada
			if(iFirstCaptureB == 0){
 8000a64:	4b2e      	ldr	r3, [pc, #184]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10a      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0xde>
				uiIC_Val1B = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // lê o primeiro valor
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f003 f8da 	bl	8003c28 <HAL_TIM_ReadCapturedValue>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a2b      	ldr	r2, [pc, #172]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000a78:	6013      	str	r3, [r2, #0]
				iFirstCaptureB = 1; // seta a primeira captura como true
 8000a7a:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0); // reseta o counter
				iFirstCaptureB = 0; // seta a primeira captura como false
			}
		}
	}
}
 8000a80:	e03a      	b.n	8000af8 <HAL_TIM_IC_CaptureCallback+0x154>
				uiIC_Val2B = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // lê o segundo valor
 8000a82:	2100      	movs	r1, #0
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f003 f8cf 	bl	8003c28 <HAL_TIM_ReadCapturedValue>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	4a26      	ldr	r2, [pc, #152]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000a8e:	6013      	str	r3, [r2, #0]
				if(uiIC_Val2B > uiIC_Val1B){
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d907      	bls.n	8000aac <HAL_TIM_IC_CaptureCallback+0x108>
					uiDifferenceB = uiIC_Val2B - uiIC_Val1B;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <HAL_TIM_IC_CaptureCallback+0x188>)
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e00f      	b.n	8000acc <HAL_TIM_IC_CaptureCallback+0x128>
				else if(uiIC_Val1B > uiIC_Val2B){
 8000aac:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	429a      	cmp	r2, r3
 8000ab6:	d909      	bls.n	8000acc <HAL_TIM_IC_CaptureCallback+0x128>
					uiDifferenceB = (0xFFFF - uiIC_Val1B) + uiIC_Val2B;
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000ac6:	33ff      	adds	r3, #255	@ 0xff
 8000ac8:	4a18      	ldr	r2, [pc, #96]	@ (8000b2c <HAL_TIM_IC_CaptureCallback+0x188>)
 8000aca:	6013      	str	r3, [r2, #0]
				float fRefClock = TIMCLOCK/(PRESCALAR);
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000ace:	60bb      	str	r3, [r7, #8]
				fFrequencyB = fRefClock/uiDifferenceB;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <HAL_TIM_IC_CaptureCallback+0x188>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	ee07 3a90 	vmov	s15, r3
 8000ad8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000adc:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000ae6:	edc3 7a00 	vstr	s15, [r3]
				__HAL_TIM_SET_COUNTER(htim, 0); // reseta o counter
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	@ 0x24
				iFirstCaptureB = 0; // seta a primeira captura como false
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200000b8 	.word	0x200000b8
 8000b04:	200000d8 	.word	0x200000d8
 8000b08:	200000c0 	.word	0x200000c0
 8000b0c:	200000c8 	.word	0x200000c8
 8000b10:	200000d0 	.word	0x200000d0
 8000b14:	49742400 	.word	0x49742400
 8000b18:	200000e0 	.word	0x200000e0
 8000b1c:	200000bc 	.word	0x200000bc
 8000b20:	200000dc 	.word	0x200000dc
 8000b24:	200000c4 	.word	0x200000c4
 8000b28:	200000cc 	.word	0x200000cc
 8000b2c:	200000d4 	.word	0x200000d4
 8000b30:	200000e4 	.word	0x200000e4

08000b34 <fMotorGetSpeed>:

float fMotorGetSpeed(void){
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
	float fAvgFrequency = (fFrequencyA + fFrequencyB)/2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <fMotorGetSpeed+0x38>)
 8000b3c:	ed93 7a00 	vldr	s14, [r3]
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <fMotorGetSpeed+0x3c>)
 8000b42:	edd3 7a00 	vldr	s15, [r3]
 8000b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b4a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b52:	edc7 7a01 	vstr	s15, [r7, #4]
	return fAvgFrequency;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	ee07 3a90 	vmov	s15, r3
}
 8000b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	200000e0 	.word	0x200000e0
 8000b70:	200000e4 	.word	0x200000e4

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b86:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b96:	4a08      	ldr	r2, [pc, #32]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_MspInit+0x44>)
 8000ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000baa:	f001 f91f 	bl	8001dec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40021000 	.word	0x40021000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 fc79 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c20:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8000c22:	f002 fbeb 	bl	80033fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8000c28:	f002 fbe8 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000ec 	.word	0x200000ec
 8000c34:	20000184 	.word	0x20000184

08000c38 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8000c3e:	f002 fbdd 	bl	80033fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000c42:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000c44:	f002 fbda 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000ec 	.word	0x200000ec
 8000c50:	200001d0 	.word	0x200001d0

08000c54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c5c:	f000 fffe 	bl	8001c5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000c68:	4802      	ldr	r0, [pc, #8]	@ (8000c74 <LPUART1_IRQHandler+0x10>)
 8000c6a:	f004 f867 	bl	8004d3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000021c 	.word	0x2000021c

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	@ (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	@ (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	@ (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	@ (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f005 fbd4 	bl	8006454 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	@ (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20020000 	.word	0x20020000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	200000e8 	.word	0x200000e8
 8000ce0:	20000400 	.word	0x20000400

08000ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b09c      	sub	sp, #112	@ 0x70
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d28:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3c:	1d3b      	adds	r3, r7, #4
 8000d3e:	2234      	movs	r2, #52	@ 0x34
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f005 fb7e 	bl	8006444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d48:	4b4b      	ldr	r3, [pc, #300]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d4a:	4a4c      	ldr	r2, [pc, #304]	@ (8000e7c <MX_TIM1_Init+0x174>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8000d4e:	4b4a      	ldr	r3, [pc, #296]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d50:	22a9      	movs	r2, #169	@ 0xa9
 8000d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b48      	ldr	r3, [pc, #288]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d5a:	4b47      	ldr	r3, [pc, #284]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d5c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b45      	ldr	r3, [pc, #276]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d68:	4b43      	ldr	r3, [pc, #268]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b42      	ldr	r3, [pc, #264]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d74:	4840      	ldr	r0, [pc, #256]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d76:	f001 ffc5 	bl	8002d04 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000d80:	f7ff fd9b 	bl	80008ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d88:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4839      	ldr	r0, [pc, #228]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000d92:	f002 fe33 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d9c:	f7ff fd8d 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da0:	4835      	ldr	r0, [pc, #212]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000da2:	f002 f806 	bl	8002db2 <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000dac:	f7ff fd85 	bl	80008ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db4:	2300      	movs	r3, #0
 8000db6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dbc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	482d      	ldr	r0, [pc, #180]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000dc4:	f003 fd66 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000dce:	f7ff fd74 	bl	80008ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dd2:	2360      	movs	r3, #96	@ 0x60
 8000dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dde:	2300      	movs	r3, #0
 8000de0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000df2:	2200      	movs	r2, #0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000df8:	f002 fcec 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000e02:	f7ff fd5a 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000e0a:	2204      	movs	r2, #4
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000e10:	f002 fce0 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000e1a:	f7ff fd4e 	bl	80008ba <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000e5c:	f003 fdb0 	bl	80049c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8000e66:	f7ff fd28 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e6a:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <MX_TIM1_Init+0x170>)
 8000e6c:	f000 f9cc 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000e70:	bf00      	nop
 8000e72:	3770      	adds	r7, #112	@ 0x70
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000ec 	.word	0x200000ec
 8000e7c:	40012c00 	.word	0x40012c00

08000e80 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	@ 0x38
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]
 8000eae:	615a      	str	r2, [r3, #20]
 8000eb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000eb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 8000eba:	4b2b      	ldr	r3, [pc, #172]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ebc:	22a9      	movs	r2, #169	@ 0xa9
 8000ebe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000ec6:	4b28      	ldr	r3, [pc, #160]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ec8:	2263      	movs	r2, #99	@ 0x63
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000eda:	f001 ff13 	bl	8002d04 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ee4:	f7ff fce9 	bl	80008ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	481c      	ldr	r0, [pc, #112]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000ef6:	f002 fd81 	bl	80039fc <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f00:	f7ff fcdb 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f04:	4818      	ldr	r0, [pc, #96]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000f06:	f001 ff54 	bl	8002db2 <HAL_TIM_PWM_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f10:	f7ff fcd3 	bl	80008ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f1c:	f107 031c 	add.w	r3, r7, #28
 8000f20:	4619      	mov	r1, r3
 8000f22:	4811      	ldr	r0, [pc, #68]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000f24:	f003 fcb6 	bl	8004894 <HAL_TIMEx_MasterConfigSynchronization>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f2e:	f7ff fcc4 	bl	80008ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f32:	2360      	movs	r3, #96	@ 0x60
 8000f34:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000f4a:	f002 fc43 	bl	80037d4 <HAL_TIM_PWM_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f54:	f7ff fcb1 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <MX_TIM2_Init+0xe8>)
 8000f5a:	f000 f955 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000f5e:	bf00      	nop
 8000f60:	3738      	adds	r7, #56	@ 0x38
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000138 	.word	0x20000138

08000f6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f72:	463b      	mov	r3, r7
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000f80:	4a1e      	ldr	r2, [pc, #120]	@ (8000ffc <MX_TIM16_Init+0x90>)
 8000f82:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000f86:	22a9      	movs	r2, #169	@ 0xa9
 8000f88:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000f92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f96:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000faa:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000fac:	f001 feaa 	bl	8002d04 <HAL_TIM_Base_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8000fb6:	f7ff fc80 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8000fba:	480f      	ldr	r0, [pc, #60]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000fbc:	f002 f86c 	bl	8003098 <HAL_TIM_IC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000fc6:	f7ff fc78 	bl	80008ba <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2200      	movs	r2, #0
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_TIM16_Init+0x8c>)
 8000fe2:	f002 fb5a 	bl	800369a <HAL_TIM_IC_ConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000fec:	f7ff fc65 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000184 	.word	0x20000184
 8000ffc:	40014400 	.word	0x40014400

08001000 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001012:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001014:	4a1e      	ldr	r2, [pc, #120]	@ (8001090 <MX_TIM17_Init+0x90>)
 8001016:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001018:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_TIM17_Init+0x8c>)
 800101a:	22a9      	movs	r2, #169	@ 0xa9
 800101c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001024:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_TIM17_Init+0x8c>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_TIM17_Init+0x8c>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800103e:	4813      	ldr	r0, [pc, #76]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001040:	f001 fe60 	bl	8002d04 <HAL_TIM_Base_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 800104a:	f7ff fc36 	bl	80008ba <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001050:	f002 f822 	bl	8003098 <HAL_TIM_IC_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800105a:	f7ff fc2e 	bl	80008ba <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800105e:	2300      	movs	r3, #0
 8001060:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001062:	2301      	movs	r3, #1
 8001064:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	@ (800108c <MX_TIM17_Init+0x8c>)
 8001076:	f002 fb10 	bl	800369a <HAL_TIM_IC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001080:	f7ff fc1b 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200001d0 	.word	0x200001d0
 8001090:	40014800 	.word	0x40014800

08001094 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	@ 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a50      	ldr	r2, [pc, #320]	@ (80011f4 <HAL_TIM_Base_MspInit+0x160>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d11c      	bne.n	80010f0 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b6:	4b50      	ldr	r3, [pc, #320]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	4a4f      	ldr	r2, [pc, #316]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80010bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80010c2:	4b4d      	ldr	r3, [pc, #308]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80010c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2019      	movs	r0, #25
 80010d4:	f000 fb33 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010d8:	2019      	movs	r0, #25
 80010da:	f000 fb4a 	bl	8001772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	201a      	movs	r0, #26
 80010e4:	f000 fb2b 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010e8:	201a      	movs	r0, #26
 80010ea:	f000 fb42 	bl	8001772 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80010ee:	e07c      	b.n	80011ea <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010f8:	d10c      	bne.n	8001114 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010fa:	4b3f      	ldr	r3, [pc, #252]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	4a3e      	ldr	r2, [pc, #248]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6593      	str	r3, [r2, #88]	@ 0x58
 8001106:	4b3c      	ldr	r3, [pc, #240]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	61fb      	str	r3, [r7, #28]
 8001110:	69fb      	ldr	r3, [r7, #28]
}
 8001112:	e06a      	b.n	80011ea <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM16)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a38      	ldr	r2, [pc, #224]	@ (80011fc <HAL_TIM_Base_MspInit+0x168>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d130      	bne.n	8001180 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800111e:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001122:	4a35      	ldr	r2, [pc, #212]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001128:	6613      	str	r3, [r2, #96]	@ 0x60
 800112a:	4b33      	ldr	r3, [pc, #204]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b30      	ldr	r3, [pc, #192]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	4a2f      	ldr	r2, [pc, #188]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001142:	4b2d      	ldr	r3, [pc, #180]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	617b      	str	r3, [r7, #20]
 800114c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800114e:	2310      	movs	r3, #16
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800115e:	2301      	movs	r3, #1
 8001160:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001166:	4619      	mov	r1, r3
 8001168:	4825      	ldr	r0, [pc, #148]	@ (8001200 <HAL_TIM_Base_MspInit+0x16c>)
 800116a:	f000 fbdd 	bl	8001928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2019      	movs	r0, #25
 8001174:	f000 fae3 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001178:	2019      	movs	r0, #25
 800117a:	f000 fafa 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 800117e:	e034      	b.n	80011ea <HAL_TIM_Base_MspInit+0x156>
  else if(tim_baseHandle->Instance==TIM17)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1f      	ldr	r2, [pc, #124]	@ (8001204 <HAL_TIM_Base_MspInit+0x170>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d12f      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x156>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800118a:	4b1b      	ldr	r3, [pc, #108]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 800118c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800118e:	4a1a      	ldr	r2, [pc, #104]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001190:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001194:	6613      	str	r3, [r2, #96]	@ 0x60
 8001196:	4b18      	ldr	r3, [pc, #96]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 8001198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800119a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b15      	ldr	r3, [pc, #84]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	4a14      	ldr	r2, [pc, #80]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ae:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_TIM_Base_MspInit+0x164>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011ba:	2320      	movs	r3, #32
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80011ca:	230a      	movs	r3, #10
 80011cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011d2:	4619      	mov	r1, r3
 80011d4:	480a      	ldr	r0, [pc, #40]	@ (8001200 <HAL_TIM_Base_MspInit+0x16c>)
 80011d6:	f000 fba7 	bl	8001928 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201a      	movs	r0, #26
 80011e0:	f000 faad 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80011e4:	201a      	movs	r0, #26
 80011e6:	f000 fac4 	bl	8001772 <HAL_NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3738      	adds	r7, #56	@ 0x38
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40012c00 	.word	0x40012c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40014400 	.word	0x40014400
 8001200:	48000400 	.word	0x48000400
 8001204:	40014800 	.word	0x40014800

08001208 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a22      	ldr	r2, [pc, #136]	@ (80012b0 <HAL_TIM_MspPostInit+0xa8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11c      	bne.n	8001264 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b22      	ldr	r3, [pc, #136]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a21      	ldr	r2, [pc, #132]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001242:	2303      	movs	r3, #3
 8001244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001246:	2302      	movs	r3, #2
 8001248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4816      	ldr	r0, [pc, #88]	@ (80012b8 <HAL_TIM_MspPostInit+0xb0>)
 800125e:	f000 fb63 	bl	8001928 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001262:	e021      	b.n	80012a8 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800126c:	d11c      	bne.n	80012a8 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <HAL_TIM_MspPostInit+0xac>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001286:	2301      	movs	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001296:	2301      	movs	r3, #1
 8001298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f000 fb40 	bl	8001928 <HAL_GPIO_Init>
}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000800 	.word	0x48000800

080012bc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80012c0:	4b21      	ldr	r3, [pc, #132]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012c2:	4a22      	ldr	r2, [pc, #136]	@ (800134c <MX_LPUART1_UART_Init+0x90>)
 80012c4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012fe:	4812      	ldr	r0, [pc, #72]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 8001300:	f003 fc38 	bl	8004b74 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f7ff fad6 	bl	80008ba <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130e:	2100      	movs	r1, #0
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 8001312:	f004 ffac 	bl	800626e <HAL_UARTEx_SetTxFifoThreshold>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800131c:	f7ff facd 	bl	80008ba <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	4809      	ldr	r0, [pc, #36]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 8001324:	f004 ffe1 	bl	80062ea <HAL_UARTEx_SetRxFifoThreshold>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800132e:	f7ff fac4 	bl	80008ba <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001332:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_LPUART1_UART_Init+0x8c>)
 8001334:	f004 ff62 	bl	80061fc <HAL_UARTEx_DisableFifoMode>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800133e:	f7ff fabc 	bl	80008ba <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2000021c 	.word	0x2000021c
 800134c:	40008000 	.word	0x40008000

08001350 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b09e      	sub	sp, #120	@ 0x78
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2254      	movs	r2, #84	@ 0x54
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f005 f867 	bl	8006444 <memset>
  if(uartHandle->Instance==LPUART1)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a23      	ldr	r2, [pc, #140]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13e      	bne.n	80013fe <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001380:	2320      	movs	r3, #32
 8001382:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001384:	2300      	movs	r3, #0
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fa6b 	bl	8002868 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001398:	f7ff fa8f 	bl	80008ba <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <HAL_UART_MspInit+0xbc>)
 800139e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013a0:	4a1a      	ldr	r2, [pc, #104]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c0:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80013cc:	230c      	movs	r3, #12
 80013ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80013dc:	230c      	movs	r3, #12
 80013de:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ea:	f000 fa9d 	bl	8001928 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	205b      	movs	r0, #91	@ 0x5b
 80013f4:	f000 f9a3 	bl	800173e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80013f8:	205b      	movs	r0, #91	@ 0x5b
 80013fa:	f000 f9ba 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80013fe:	bf00      	nop
 8001400:	3778      	adds	r7, #120	@ 0x78
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40008000 	.word	0x40008000
 800140c:	40021000 	.word	0x40021000

08001410 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001410:	480d      	ldr	r0, [pc, #52]	@ (8001448 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001412:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001414:	f7ff fc66 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <LoopForever+0x6>)
  ldr r1, =_edata
 800141a:	490d      	ldr	r1, [pc, #52]	@ (8001450 <LoopForever+0xa>)
  ldr r2, =_sidata
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <LoopForever+0xe>)
  movs r3, #0
 800141e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001420:	e002      	b.n	8001428 <LoopCopyDataInit>

08001422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001426:	3304      	adds	r3, #4

08001428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800142c:	d3f9      	bcc.n	8001422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142e:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001430:	4c0a      	ldr	r4, [pc, #40]	@ (800145c <LoopForever+0x16>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001434:	e001      	b.n	800143a <LoopFillZerobss>

08001436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001438:	3204      	adds	r2, #4

0800143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800143c:	d3fb      	bcc.n	8001436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800143e:	f005 f80f 	bl	8006460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001442:	f7ff f945 	bl	80006d0 <main>

08001446 <LoopForever>:

LoopForever:
    b LoopForever
 8001446:	e7fe      	b.n	8001446 <LoopForever>
  ldr   r0, =_estack
 8001448:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001454:	08006e00 	.word	0x08006e00
  ldr r2, =_sbss
 8001458:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800145c:	200003fc 	.word	0x200003fc

08001460 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC1_2_IRQHandler>

08001462 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146c:	2003      	movs	r0, #3
 800146e:	f000 f95b 	bl	8001728 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001472:	2000      	movs	r0, #0
 8001474:	f000 f80e 	bl	8001494 <HAL_InitTick>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d002      	beq.n	8001484 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	71fb      	strb	r3, [r7, #7]
 8001482:	e001      	b.n	8001488 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001484:	f7ff fb76 	bl	8000b74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001488:	79fb      	ldrb	r3, [r7, #7]

}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800149c:	2300      	movs	r3, #0
 800149e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014a0:	4b16      	ldr	r3, [pc, #88]	@ (80014fc <HAL_InitTick+0x68>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d022      	beq.n	80014ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014a8:	4b15      	ldr	r3, [pc, #84]	@ (8001500 <HAL_InitTick+0x6c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b13      	ldr	r3, [pc, #76]	@ (80014fc <HAL_InitTick+0x68>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f966 	bl	800178e <HAL_SYSTICK_Config>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d10f      	bne.n	80014e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	d809      	bhi.n	80014e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014ce:	2200      	movs	r2, #0
 80014d0:	6879      	ldr	r1, [r7, #4]
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	f000 f932 	bl	800173e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <HAL_InitTick+0x70>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e007      	b.n	80014f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	73fb      	strb	r3, [r7, #15]
 80014e6:	e004      	b.n	80014f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	73fb      	strb	r3, [r7, #15]
 80014ec:	e001      	b.n	80014f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004

08001508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_IncTick+0x1c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <HAL_IncTick+0x20>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4413      	add	r3, r2
 8001516:	4a03      	ldr	r2, [pc, #12]	@ (8001524 <HAL_IncTick+0x1c>)
 8001518:	6013      	str	r3, [r2, #0]
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	200002b0 	.word	0x200002b0
 8001528:	20000008 	.word	0x20000008

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200002b0 	.word	0x200002b0

08001544 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800154c:	f7ff ffee 	bl	800152c <HAL_GetTick>
 8001550:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155c:	d004      	beq.n	8001568 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800155e:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_Delay+0x40>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001568:	bf00      	nop
 800156a:	f7ff ffdf 	bl	800152c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	429a      	cmp	r2, r3
 8001578:	d8f7      	bhi.n	800156a <HAL_Delay+0x26>
  {
  }
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000008 	.word	0x20000008

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	@ (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	@ (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	@ (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	@ (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	@ 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
	...

080016e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016f4:	d301      	bcc.n	80016fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00f      	b.n	800171a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001724 <SysTick_Config+0x40>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001702:	210f      	movs	r1, #15
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f7ff ff8e 	bl	8001628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <SysTick_Config+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SysTick_Config+0x40>)
 8001714:	2207      	movs	r2, #7
 8001716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	e000e010 	.word	0xe000e010

08001728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ff29 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	60b9      	str	r1, [r7, #8]
 8001748:	607a      	str	r2, [r7, #4]
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff40 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff90 	bl	800167c <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5f 	bl	8001628 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff33 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa4 	bl	80016e4 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d005      	beq.n	80017ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2204      	movs	r2, #4
 80017c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
 80017c8:	e037      	b.n	800183a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 020e 	bic.w	r2, r2, #14
 80017d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80017e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f022 0201 	bic.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f003 021f 	and.w	r2, r3, #31
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001806:	2101      	movs	r1, #1
 8001808:	fa01 f202 	lsl.w	r2, r1, r2
 800180c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001816:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00c      	beq.n	800183a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800182a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800182e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001838:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d00d      	beq.n	800188c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2204      	movs	r2, #4
 8001874:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e047      	b.n	800191c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 020e 	bic.w	r2, r2, #14
 800189a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0201 	bic.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c0:	f003 021f 	and.w	r2, r3, #31
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	2101      	movs	r1, #1
 80018ca:	fa01 f202 	lsl.w	r2, r1, r2
 80018ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80018fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
    }
  }
  return status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001936:	e15a      	b.n	8001bee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2101      	movs	r1, #1
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 814c 	beq.w	8001be8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d005      	beq.n	8001968 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001964:	2b02      	cmp	r3, #2
 8001966:	d130      	bne.n	80019ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800199e:	2201      	movs	r2, #1
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4013      	ands	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	f003 0201 	and.w	r2, r3, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	2203      	movs	r2, #3
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d123      	bne.n	8001a5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	220f      	movs	r2, #15
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	691a      	ldr	r2, [r3, #16]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	08da      	lsrs	r2, r3, #3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3208      	adds	r2, #8
 8001a54:	6939      	ldr	r1, [r7, #16]
 8001a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	2203      	movs	r2, #3
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0203 	and.w	r2, r3, #3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	005b      	lsls	r3, r3, #1
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 80a6 	beq.w	8001be8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9c:	4b5b      	ldr	r3, [pc, #364]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa8:	4b58      	ldr	r3, [pc, #352]	@ (8001c0c <HAL_GPIO_Init+0x2e4>)
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab4:	4a56      	ldr	r2, [pc, #344]	@ (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 0303 	and.w	r3, r3, #3
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	220f      	movs	r2, #15
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ade:	d01f      	beq.n	8001b20 <HAL_GPIO_Init+0x1f8>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4a4c      	ldr	r2, [pc, #304]	@ (8001c14 <HAL_GPIO_Init+0x2ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d019      	beq.n	8001b1c <HAL_GPIO_Init+0x1f4>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a4b      	ldr	r2, [pc, #300]	@ (8001c18 <HAL_GPIO_Init+0x2f0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_GPIO_Init+0x1f0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a4a      	ldr	r2, [pc, #296]	@ (8001c1c <HAL_GPIO_Init+0x2f4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d00d      	beq.n	8001b14 <HAL_GPIO_Init+0x1ec>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <HAL_GPIO_Init+0x2f8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d007      	beq.n	8001b10 <HAL_GPIO_Init+0x1e8>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a48      	ldr	r2, [pc, #288]	@ (8001c24 <HAL_GPIO_Init+0x2fc>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d101      	bne.n	8001b0c <HAL_GPIO_Init+0x1e4>
 8001b08:	2305      	movs	r3, #5
 8001b0a:	e00a      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	e008      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b10:	2304      	movs	r3, #4
 8001b12:	e006      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b14:	2303      	movs	r3, #3
 8001b16:	e004      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e002      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_GPIO_Init+0x1fa>
 8001b20:	2300      	movs	r3, #0
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	f002 0203 	and.w	r2, r2, #3
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b32:	4937      	ldr	r1, [pc, #220]	@ (8001c10 <HAL_GPIO_Init+0x2e8>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b40:	4b39      	ldr	r3, [pc, #228]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b64:	4a30      	ldr	r2, [pc, #192]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b8e:	4a26      	ldr	r2, [pc, #152]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b94:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	43db      	mvns	r3, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bbe:	4b1a      	ldr	r3, [pc, #104]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be2:	4a11      	ldr	r2, [pc, #68]	@ (8001c28 <HAL_GPIO_Init+0x300>)
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	3301      	adds	r3, #1
 8001bec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f47f ae9d 	bne.w	8001938 <HAL_GPIO_Init+0x10>
  }
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	371c      	adds	r7, #28
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	48000400 	.word	0x48000400
 8001c18:	48000800 	.word	0x48000800
 8001c1c:	48000c00 	.word	0x48000c00
 8001c20:	48001000 	.word	0x48001000
 8001c24:	48001400 	.word	0x48001400
 8001c28:	40010400 	.word	0x40010400

08001c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	807b      	strh	r3, [r7, #2]
 8001c38:	4613      	mov	r3, r2
 8001c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3c:	787b      	ldrb	r3, [r7, #1]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c42:	887a      	ldrh	r2, [r7, #2]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c48:	e002      	b.n	8001c50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c66:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c72:	4a05      	ldr	r2, [pc, #20]	@ (8001c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f806 	bl	8001c8c <HAL_GPIO_EXTI_Callback>
  }
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d141      	bne.n	8001d36 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cbe:	d131      	bne.n	8001d24 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cc0:	4b47      	ldr	r3, [pc, #284]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001cc6:	4a46      	ldr	r2, [pc, #280]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd0:	4b43      	ldr	r3, [pc, #268]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cd8:	4a41      	ldr	r2, [pc, #260]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ce0:	4b40      	ldr	r3, [pc, #256]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2232      	movs	r2, #50	@ 0x32
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	4a3f      	ldr	r2, [pc, #252]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	0c9b      	lsrs	r3, r3, #18
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cf6:	e002      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cfe:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d0a:	d102      	bne.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f2      	bne.n	8001cf8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d1e:	d158      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e057      	b.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d24:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001d34:	e04d      	b.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d3c:	d141      	bne.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d3e:	4b28      	ldr	r3, [pc, #160]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d4a:	d131      	bne.n	8001db0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d4c:	4b24      	ldr	r3, [pc, #144]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d52:	4a23      	ldr	r2, [pc, #140]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d5c:	4b20      	ldr	r3, [pc, #128]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d64:	4a1e      	ldr	r2, [pc, #120]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001de4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2232      	movs	r2, #50	@ 0x32
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	4a1c      	ldr	r2, [pc, #112]	@ (8001de8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d78:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7c:	0c9b      	lsrs	r3, r3, #18
 8001d7e:	3301      	adds	r3, #1
 8001d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d82:	e002      	b.n	8001d8a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d96:	d102      	bne.n	8001d9e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f2      	bne.n	8001d84 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001daa:	d112      	bne.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e011      	b.n	8001dd4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db0:	4b0b      	ldr	r3, [pc, #44]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001dc0:	e007      	b.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dc2:	4b07      	ldr	r3, [pc, #28]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dd0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40007000 	.word	0x40007000
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001df6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dfa:	6093      	str	r3, [r2, #8]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40007000 	.word	0x40007000

08001e0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e2fe      	b.n	800241c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d075      	beq.n	8001f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e2a:	4b97      	ldr	r3, [pc, #604]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e34:	4b94      	ldr	r3, [pc, #592]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0x3e>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d002      	beq.n	8001e50 <HAL_RCC_OscConfig+0x44>
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d10b      	bne.n	8001e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	4b8d      	ldr	r3, [pc, #564]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d05b      	beq.n	8001f14 <HAL_RCC_OscConfig+0x108>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d157      	bne.n	8001f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e2d9      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e70:	d106      	bne.n	8001e80 <HAL_RCC_OscConfig+0x74>
 8001e72:	4b85      	ldr	r3, [pc, #532]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a84      	ldr	r2, [pc, #528]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	e01d      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e88:	d10c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x98>
 8001e8a:	4b7f      	ldr	r3, [pc, #508]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7e      	ldr	r2, [pc, #504]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b7c      	ldr	r3, [pc, #496]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xb0>
 8001ea4:	4b78      	ldr	r3, [pc, #480]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a77      	ldr	r2, [pc, #476]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b75      	ldr	r3, [pc, #468]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a74      	ldr	r2, [pc, #464]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d013      	beq.n	8001eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb32 	bl	800152c <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fb2e 	bl	800152c <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	@ 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e29e      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	4b6a      	ldr	r3, [pc, #424]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0f0      	beq.n	8001ecc <HAL_RCC_OscConfig+0xc0>
 8001eea:	e014      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fb1e 	bl	800152c <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fb1a 	bl	800152c <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	@ 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e28a      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	4b60      	ldr	r3, [pc, #384]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1f0      	bne.n	8001ef4 <HAL_RCC_OscConfig+0xe8>
 8001f12:	e000      	b.n	8001f16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d075      	beq.n	800200e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4b59      	ldr	r3, [pc, #356]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4b56      	ldr	r3, [pc, #344]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x136>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x13c>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11f      	bne.n	8001f88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f48:	4b4f      	ldr	r3, [pc, #316]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x154>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e25d      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b49      	ldr	r3, [pc, #292]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	4946      	ldr	r1, [pc, #280]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f74:	4b45      	ldr	r3, [pc, #276]	@ (800208c <HAL_RCC_OscConfig+0x280>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fa8b 	bl	8001494 <HAL_InitTick>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d043      	beq.n	800200c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e249      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d023      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a3c      	ldr	r2, [pc, #240]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff fac6 	bl	800152c <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa4:	f7ff fac2 	bl	800152c <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e232      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	4b34      	ldr	r3, [pc, #208]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b31      	ldr	r3, [pc, #196]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	492d      	ldr	r1, [pc, #180]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
 8001fd6:	e01a      	b.n	800200e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8001fde:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7ff faa2 	bl	800152c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fec:	f7ff fa9e 	bl	800152c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e20e      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffe:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x1e0>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d041      	beq.n	800209e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01c      	beq.n	800205c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002022:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8002024:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002028:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7ff fa7b 	bl	800152c <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002038:	e008      	b.n	800204c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7ff fa77 	bl	800152c <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e1e7      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204c:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 800204e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0ef      	beq.n	800203a <HAL_RCC_OscConfig+0x22e>
 800205a:	e020      	b.n	800209e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205c:	4b0a      	ldr	r3, [pc, #40]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 800205e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002062:	4a09      	ldr	r2, [pc, #36]	@ (8002088 <HAL_RCC_OscConfig+0x27c>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800206c:	f7ff fa5e 	bl	800152c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002072:	e00d      	b.n	8002090 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fa5a 	bl	800152c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d906      	bls.n	8002090 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1ca      	b.n	800241c <HAL_RCC_OscConfig+0x610>
 8002086:	bf00      	nop
 8002088:	40021000 	.word	0x40021000
 800208c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002090:	4b8c      	ldr	r3, [pc, #560]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1ea      	bne.n	8002074 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 80a6 	beq.w	80021f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ac:	2300      	movs	r3, #0
 80020ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020b0:	4b84      	ldr	r3, [pc, #528]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_RCC_OscConfig+0x2b4>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <HAL_RCC_OscConfig+0x2b6>
 80020c0:	2300      	movs	r3, #0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00d      	beq.n	80020e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c6:	4b7f      	ldr	r3, [pc, #508]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a7e      	ldr	r2, [pc, #504]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d2:	4b7c      	ldr	r3, [pc, #496]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020de:	2301      	movs	r3, #1
 80020e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	4b79      	ldr	r3, [pc, #484]	@ (80022c8 <HAL_RCC_OscConfig+0x4bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d118      	bne.n	8002120 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ee:	4b76      	ldr	r3, [pc, #472]	@ (80022c8 <HAL_RCC_OscConfig+0x4bc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a75      	ldr	r2, [pc, #468]	@ (80022c8 <HAL_RCC_OscConfig+0x4bc>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020fa:	f7ff fa17 	bl	800152c <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002102:	f7ff fa13 	bl	800152c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e183      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002114:	4b6c      	ldr	r3, [pc, #432]	@ (80022c8 <HAL_RCC_OscConfig+0x4bc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0f0      	beq.n	8002102 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d108      	bne.n	800213a <HAL_RCC_OscConfig+0x32e>
 8002128:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800212e:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002138:	e024      	b.n	8002184 <HAL_RCC_OscConfig+0x378>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b05      	cmp	r3, #5
 8002140:	d110      	bne.n	8002164 <HAL_RCC_OscConfig+0x358>
 8002142:	4b60      	ldr	r3, [pc, #384]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002148:	4a5e      	ldr	r2, [pc, #376]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800214a:	f043 0304 	orr.w	r3, r3, #4
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002152:	4b5c      	ldr	r3, [pc, #368]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002158:	4a5a      	ldr	r2, [pc, #360]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002162:	e00f      	b.n	8002184 <HAL_RCC_OscConfig+0x378>
 8002164:	4b57      	ldr	r3, [pc, #348]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800216a:	4a56      	ldr	r2, [pc, #344]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002174:	4b53      	ldr	r3, [pc, #332]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800217a:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d016      	beq.n	80021ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f9ce 	bl	800152c <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7ff f9ca 	bl	800152c <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e138      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021aa:	4b46      	ldr	r3, [pc, #280]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0ed      	beq.n	8002194 <HAL_RCC_OscConfig+0x388>
 80021b8:	e015      	b.n	80021e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7ff f9b7 	bl	800152c <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff f9b3 	bl	800152c <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e121      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d8:	4b3a      	ldr	r3, [pc, #232]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1ed      	bne.n	80021c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d105      	bne.n	80021f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ec:	4b35      	ldr	r3, [pc, #212]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	4a34      	ldr	r2, [pc, #208]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b00      	cmp	r3, #0
 8002202:	d03c      	beq.n	800227e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01c      	beq.n	8002246 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800220c:	4b2d      	ldr	r3, [pc, #180]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002212:	4a2c      	ldr	r2, [pc, #176]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221c:	f7ff f986 	bl	800152c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002224:	f7ff f982 	bl	800152c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0f2      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002236:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCC_OscConfig+0x418>
 8002244:	e01b      	b.n	800227e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002246:	4b1f      	ldr	r3, [pc, #124]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002248:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800224c:	4a1d      	ldr	r2, [pc, #116]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7ff f969 	bl	800152c <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800225e:	f7ff f965 	bl	800152c <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e0d5      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002270:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 80c9 	beq.w	800241a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002288:	4b0e      	ldr	r3, [pc, #56]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 030c 	and.w	r3, r3, #12
 8002290:	2b0c      	cmp	r3, #12
 8002292:	f000 8083 	beq.w	800239c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d15e      	bne.n	800235c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b09      	ldr	r3, [pc, #36]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a08      	ldr	r2, [pc, #32]	@ (80022c4 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f93f 	bl	800152c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	e00c      	b.n	80022cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7ff f93b 	bl	800152c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d905      	bls.n	80022cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e0ab      	b.n	800241c <HAL_RCC_OscConfig+0x610>
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022cc:	4b55      	ldr	r3, [pc, #340]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ec      	bne.n	80022b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022d8:	4b52      	ldr	r3, [pc, #328]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	4b52      	ldr	r3, [pc, #328]	@ (8002428 <HAL_RCC_OscConfig+0x61c>)
 80022de:	4013      	ands	r3, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6a11      	ldr	r1, [r2, #32]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022e8:	3a01      	subs	r2, #1
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	4311      	orrs	r1, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80022f2:	0212      	lsls	r2, r2, #8
 80022f4:	4311      	orrs	r1, r2
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80022fa:	0852      	lsrs	r2, r2, #1
 80022fc:	3a01      	subs	r2, #1
 80022fe:	0552      	lsls	r2, r2, #21
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002306:	0852      	lsrs	r2, r2, #1
 8002308:	3a01      	subs	r2, #1
 800230a:	0652      	lsls	r2, r2, #25
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002312:	06d2      	lsls	r2, r2, #27
 8002314:	430a      	orrs	r2, r1
 8002316:	4943      	ldr	r1, [pc, #268]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002318:	4313      	orrs	r3, r2
 800231a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800231c:	4b41      	ldr	r3, [pc, #260]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a40      	ldr	r2, [pc, #256]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002326:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002328:	4b3e      	ldr	r3, [pc, #248]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a3d      	ldr	r2, [pc, #244]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 800232e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002332:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff f8fa 	bl	800152c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7ff f8f6 	bl	800152c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e066      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x530>
 800235a:	e05e      	b.n	800241a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235c:	4b31      	ldr	r3, [pc, #196]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a30      	ldr	r2, [pc, #192]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f8e0 	bl	800152c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002370:	f7ff f8dc 	bl	800152c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04c      	b.n	800241c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002382:	4b28      	ldr	r3, [pc, #160]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800238e:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	4924      	ldr	r1, [pc, #144]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_RCC_OscConfig+0x620>)
 8002396:	4013      	ands	r3, r2
 8002398:	60cb      	str	r3, [r1, #12]
 800239a:	e03e      	b.n	800241a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e039      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <HAL_RCC_OscConfig+0x618>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f003 0203 	and.w	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d12c      	bne.n	8002416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	3b01      	subs	r3, #1
 80023c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d123      	bne.n	8002416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11b      	bne.n	8002416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d113      	bne.n	8002416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	3b01      	subs	r3, #1
 80023fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d109      	bne.n	8002416 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d001      	beq.n	800241a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3720      	adds	r7, #32
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40021000 	.word	0x40021000
 8002428:	019f800c 	.word	0x019f800c
 800242c:	feeefffc 	.word	0xfeeefffc

08002430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e11e      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b91      	ldr	r3, [pc, #580]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d910      	bls.n	8002478 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b8e      	ldr	r3, [pc, #568]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 020f 	bic.w	r2, r3, #15
 800245e:	498c      	ldr	r1, [pc, #560]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b8a      	ldr	r3, [pc, #552]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e106      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d073      	beq.n	800256c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d129      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800248c:	4b81      	ldr	r3, [pc, #516]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0f4      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800249c:	f000 f99e 	bl	80027dc <RCC_GetSysClockFreqFromPLLSource>
 80024a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4a7c      	ldr	r2, [pc, #496]	@ (8002698 <HAL_RCC_ClockConfig+0x268>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d93f      	bls.n	800252a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d033      	beq.n	800252a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12f      	bne.n	800252a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ca:	4b72      	ldr	r3, [pc, #456]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d2:	4a70      	ldr	r2, [pc, #448]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80024d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024da:	2380      	movs	r3, #128	@ 0x80
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	e024      	b.n	800252a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d107      	bne.n	80024f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d109      	bne.n	8002508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0c6      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024f8:	4b66      	ldr	r3, [pc, #408]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0be      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002508:	f000 f8ce 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 800250c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4a61      	ldr	r2, [pc, #388]	@ (8002698 <HAL_RCC_ClockConfig+0x268>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d909      	bls.n	800252a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800251e:	4a5d      	ldr	r2, [pc, #372]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002524:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b5a      	ldr	r3, [pc, #360]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4957      	ldr	r1, [pc, #348]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7fe fff6 	bl	800152c <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7fe fff2 	bl	800152c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e095      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b43      	ldr	r3, [pc, #268]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a42      	ldr	r2, [pc, #264]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800258a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800258e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d007      	beq.n	80025ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800259c:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80025a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4936      	ldr	r1, [pc, #216]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	608b      	str	r3, [r1, #8]
 80025be:	e008      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b80      	cmp	r3, #128	@ 0x80
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025c6:	4b33      	ldr	r3, [pc, #204]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	4a32      	ldr	r2, [pc, #200]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 80025cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d21d      	bcs.n	800261c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f023 020f 	bic.w	r2, r3, #15
 80025e8:	4929      	ldr	r1, [pc, #164]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80025f0:	f7fe ff9c 	bl	800152c <HAL_GetTick>
 80025f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe ff98 	bl	800152c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e03b      	b.n	8002686 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_ClockConfig+0x260>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d1ed      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4917      	ldr	r1, [pc, #92]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490f      	ldr	r1, [pc, #60]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800265a:	f000 f825 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <HAL_RCC_ClockConfig+0x264>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490c      	ldr	r1, [pc, #48]	@ (800269c <HAL_RCC_ClockConfig+0x26c>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a0a      	ldr	r2, [pc, #40]	@ (80026a0 <HAL_RCC_ClockConfig+0x270>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800267a:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <HAL_RCC_ClockConfig+0x274>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe ff08 	bl	8001494 <HAL_InitTick>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40022000 	.word	0x40022000
 8002694:	40021000 	.word	0x40021000
 8002698:	04c4b400 	.word	0x04c4b400
 800269c:	08006d7c 	.word	0x08006d7c
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000004 	.word	0x20000004

080026a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d102      	bne.n	80026c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	e047      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026c0:	4b27      	ldr	r3, [pc, #156]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f003 030c 	and.w	r3, r3, #12
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	e03e      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026d2:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d136      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	091b      	lsrs	r3, r3, #4
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	3301      	adds	r3, #1
 80026f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80026fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002768 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4a16      	ldr	r2, [pc, #88]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002706:	68d2      	ldr	r2, [r2, #12]
 8002708:	0a12      	lsrs	r2, r2, #8
 800270a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
      break;
 8002714:	e00c      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002716:	4a13      	ldr	r2, [pc, #76]	@ (8002764 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002720:	68d2      	ldr	r2, [r2, #12]
 8002722:	0a12      	lsrs	r2, r2, #8
 8002724:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002728:	fb02 f303 	mul.w	r3, r2, r3
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002730:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0e5b      	lsrs	r3, r3, #25
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	3301      	adds	r3, #1
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	fbb2 f3f3 	udiv	r3, r2, r3
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	e001      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002750:	693b      	ldr	r3, [r7, #16]
}
 8002752:	4618      	mov	r0, r3
 8002754:	371c      	adds	r7, #28
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40021000 	.word	0x40021000
 8002764:	00f42400 	.word	0x00f42400
 8002768:	016e3600 	.word	0x016e3600

0800276c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002788:	f7ff fff0 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b06      	ldr	r3, [pc, #24]	@ (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4904      	ldr	r1, [pc, #16]	@ (80027ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08006d8c 	.word	0x08006d8c

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027b4:	f7ff ffda 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0adb      	lsrs	r3, r3, #11
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4904      	ldr	r1, [pc, #16]	@ (80027d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08006d8c 	.word	0x08006d8c

080027dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027e2:	4b1e      	ldr	r3, [pc, #120]	@ (800285c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027ec:	4b1b      	ldr	r3, [pc, #108]	@ (800285c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 030f 	and.w	r3, r3, #15
 80027f6:	3301      	adds	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	2b03      	cmp	r3, #3
 80027fe:	d10c      	bne.n	800281a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002800:	4a17      	ldr	r2, [pc, #92]	@ (8002860 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	4a14      	ldr	r2, [pc, #80]	@ (800285c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800280a:	68d2      	ldr	r2, [r2, #12]
 800280c:	0a12      	lsrs	r2, r2, #8
 800280e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002812:	fb02 f303 	mul.w	r3, r2, r3
 8002816:	617b      	str	r3, [r7, #20]
    break;
 8002818:	e00c      	b.n	8002834 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800281a:	4a12      	ldr	r2, [pc, #72]	@ (8002864 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002822:	4a0e      	ldr	r2, [pc, #56]	@ (800285c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	0a12      	lsrs	r2, r2, #8
 8002828:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800282c:	fb02 f303 	mul.w	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
    break;
 8002832:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002834:	4b09      	ldr	r3, [pc, #36]	@ (800285c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0e5b      	lsrs	r3, r3, #25
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	3301      	adds	r3, #1
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002844:	697a      	ldr	r2, [r7, #20]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	fbb2 f3f3 	udiv	r3, r2, r3
 800284c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800284e:	687b      	ldr	r3, [r7, #4]
}
 8002850:	4618      	mov	r0, r3
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	40021000 	.word	0x40021000
 8002860:	016e3600 	.word	0x016e3600
 8002864:	00f42400 	.word	0x00f42400

08002868 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002870:	2300      	movs	r3, #0
 8002872:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002874:	2300      	movs	r3, #0
 8002876:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8098 	beq.w	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b43      	ldr	r3, [pc, #268]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10d      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b40      	ldr	r3, [pc, #256]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	4a3f      	ldr	r2, [pc, #252]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ae:	2301      	movs	r3, #1
 80028b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b2:	4b3a      	ldr	r3, [pc, #232]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a39      	ldr	r2, [pc, #228]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028be:	f7fe fe35 	bl	800152c <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028c4:	e009      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028c6:	f7fe fe31 	bl	800152c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d902      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	74fb      	strb	r3, [r7, #19]
        break;
 80028d8:	e005      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028da:	4b30      	ldr	r3, [pc, #192]	@ (800299c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ef      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80028e6:	7cfb      	ldrb	r3, [r7, #19]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d159      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01e      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d019      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002912:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002914:	4b20      	ldr	r3, [pc, #128]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	4a1f      	ldr	r2, [pc, #124]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002920:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002924:	4b1c      	ldr	r3, [pc, #112]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292a:	4a1b      	ldr	r2, [pc, #108]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002934:	4a18      	ldr	r2, [pc, #96]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fdf1 	bl	800152c <HAL_GetTick>
 800294a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	e00b      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fded 	bl	800152c <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d902      	bls.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	74fb      	strb	r3, [r7, #19]
            break;
 8002964:	e006      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ec      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10b      	bne.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800297a:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002988:	4903      	ldr	r1, [pc, #12]	@ (8002998 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002990:	e008      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002992:	7cfb      	ldrb	r3, [r7, #19]
 8002994:	74bb      	strb	r3, [r7, #18]
 8002996:	e005      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002998:	40021000 	.word	0x40021000
 800299c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a4:	7c7b      	ldrb	r3, [r7, #17]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4ba7      	ldr	r3, [pc, #668]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ae:	4aa6      	ldr	r2, [pc, #664]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029c2:	4ba1      	ldr	r3, [pc, #644]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	f023 0203 	bic.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	499d      	ldr	r1, [pc, #628]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029e4:	4b98      	ldr	r3, [pc, #608]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f023 020c 	bic.w	r2, r3, #12
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4995      	ldr	r1, [pc, #596]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a06:	4b90      	ldr	r3, [pc, #576]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	498c      	ldr	r1, [pc, #560]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a28:	4b87      	ldr	r3, [pc, #540]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	4984      	ldr	r1, [pc, #528]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	497b      	ldr	r1, [pc, #492]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6c:	4b76      	ldr	r3, [pc, #472]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	4973      	ldr	r1, [pc, #460]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	496a      	ldr	r1, [pc, #424]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab0:	4b65      	ldr	r3, [pc, #404]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	4962      	ldr	r1, [pc, #392]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad2:	4b5d      	ldr	r3, [pc, #372]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae0:	4959      	ldr	r1, [pc, #356]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002af4:	4b54      	ldr	r3, [pc, #336]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b02:	4951      	ldr	r1, [pc, #324]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b16:	4b4c      	ldr	r3, [pc, #304]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	4948      	ldr	r1, [pc, #288]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d015      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b38:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	4940      	ldr	r1, [pc, #256]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b56:	d105      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d015      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b70:	4b35      	ldr	r3, [pc, #212]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7e:	4932      	ldr	r1, [pc, #200]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8e:	d105      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b2d      	ldr	r3, [pc, #180]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d015      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ba8:	4b27      	ldr	r3, [pc, #156]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb6:	4924      	ldr	r1, [pc, #144]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d015      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002be0:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bee:	4916      	ldr	r1, [pc, #88]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bfe:	d105      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	4a10      	ldr	r2, [pc, #64]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d019      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c36:	d109      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	4a02      	ldr	r2, [pc, #8]	@ (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c42:	60d3      	str	r3, [r2, #12]
 8002c44:	e002      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c58:	4b29      	ldr	r3, [pc, #164]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c5e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c66:	4926      	ldr	r1, [pc, #152]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c76:	d105      	bne.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c78:	4b21      	ldr	r3, [pc, #132]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a20      	ldr	r2, [pc, #128]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c82:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d015      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c9e:	4918      	ldr	r1, [pc, #96]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d105      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002cb0:	4b13      	ldr	r3, [pc, #76]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d015      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002cce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd6:	490a      	ldr	r1, [pc, #40]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ce2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002cf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40021000 	.word	0x40021000

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e049      	b.n	8002daa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe f9b2 	bl	8001094 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 ffdc 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e049      	b.n	8002e58 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d106      	bne.n	8002dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f841 	bl	8002e60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f000 ff85 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d109      	bne.n	8002e98 <HAL_TIM_PWM_Start+0x24>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	bf14      	ite	ne
 8002e90:	2301      	movne	r3, #1
 8002e92:	2300      	moveq	r3, #0
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	e03c      	b.n	8002f12 <HAL_TIM_PWM_Start+0x9e>
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d109      	bne.n	8002eb2 <HAL_TIM_PWM_Start+0x3e>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	e02f      	b.n	8002f12 <HAL_TIM_PWM_Start+0x9e>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d109      	bne.n	8002ecc <HAL_TIM_PWM_Start+0x58>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e022      	b.n	8002f12 <HAL_TIM_PWM_Start+0x9e>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d109      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x72>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	bf14      	ite	ne
 8002ede:	2301      	movne	r3, #1
 8002ee0:	2300      	moveq	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	e015      	b.n	8002f12 <HAL_TIM_PWM_Start+0x9e>
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d109      	bne.n	8002f00 <HAL_TIM_PWM_Start+0x8c>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	bf14      	ite	ne
 8002ef8:	2301      	movne	r3, #1
 8002efa:	2300      	moveq	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e008      	b.n	8002f12 <HAL_TIM_PWM_Start+0x9e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e0a6      	b.n	8003068 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Start+0xb6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f28:	e023      	b.n	8002f72 <HAL_TIM_PWM_Start+0xfe>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d104      	bne.n	8002f3a <HAL_TIM_PWM_Start+0xc6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f38:	e01b      	b.n	8002f72 <HAL_TIM_PWM_Start+0xfe>
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	2b08      	cmp	r3, #8
 8002f3e:	d104      	bne.n	8002f4a <HAL_TIM_PWM_Start+0xd6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f48:	e013      	b.n	8002f72 <HAL_TIM_PWM_Start+0xfe>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Start+0xe6>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2202      	movs	r2, #2
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f58:	e00b      	b.n	8002f72 <HAL_TIM_PWM_Start+0xfe>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b10      	cmp	r3, #16
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Start+0xf6>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f68:	e003      	b.n	8002f72 <HAL_TIM_PWM_Start+0xfe>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	6839      	ldr	r1, [r7, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 fc64 	bl	8004848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a3a      	ldr	r2, [pc, #232]	@ (8003070 <HAL_TIM_PWM_Start+0x1fc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d018      	beq.n	8002fbc <HAL_TIM_PWM_Start+0x148>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a39      	ldr	r2, [pc, #228]	@ (8003074 <HAL_TIM_PWM_Start+0x200>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <HAL_TIM_PWM_Start+0x148>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a37      	ldr	r2, [pc, #220]	@ (8003078 <HAL_TIM_PWM_Start+0x204>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d00e      	beq.n	8002fbc <HAL_TIM_PWM_Start+0x148>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a36      	ldr	r2, [pc, #216]	@ (800307c <HAL_TIM_PWM_Start+0x208>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIM_PWM_Start+0x148>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a34      	ldr	r2, [pc, #208]	@ (8003080 <HAL_TIM_PWM_Start+0x20c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIM_PWM_Start+0x148>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	@ (8003084 <HAL_TIM_PWM_Start+0x210>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_PWM_Start+0x14c>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e000      	b.n	8002fc2 <HAL_TIM_PWM_Start+0x14e>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <HAL_TIM_PWM_Start+0x1fc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe8:	d01d      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a26      	ldr	r2, [pc, #152]	@ (8003088 <HAL_TIM_PWM_Start+0x214>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a24      	ldr	r2, [pc, #144]	@ (800308c <HAL_TIM_PWM_Start+0x218>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <HAL_TIM_PWM_Start+0x21c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a19      	ldr	r2, [pc, #100]	@ (8003074 <HAL_TIM_PWM_Start+0x200>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a18      	ldr	r2, [pc, #96]	@ (8003078 <HAL_TIM_PWM_Start+0x204>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_TIM_PWM_Start+0x1b2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a18      	ldr	r2, [pc, #96]	@ (8003084 <HAL_TIM_PWM_Start+0x210>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d115      	bne.n	8003052 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	4b19      	ldr	r3, [pc, #100]	@ (8003094 <HAL_TIM_PWM_Start+0x220>)
 800302e:	4013      	ands	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2b06      	cmp	r3, #6
 8003036:	d015      	beq.n	8003064 <HAL_TIM_PWM_Start+0x1f0>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303e:	d011      	beq.n	8003064 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0201 	orr.w	r2, r2, #1
 800304e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003050:	e008      	b.n	8003064 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0201 	orr.w	r2, r2, #1
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e000      	b.n	8003066 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003064:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3710      	adds	r7, #16
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40013400 	.word	0x40013400
 8003078:	40014000 	.word	0x40014000
 800307c:	40014400 	.word	0x40014400
 8003080:	40014800 	.word	0x40014800
 8003084:	40015000 	.word	0x40015000
 8003088:	40000400 	.word	0x40000400
 800308c:	40000800 	.word	0x40000800
 8003090:	40000c00 	.word	0x40000c00
 8003094:	00010007 	.word	0x00010007

08003098 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e049      	b.n	800313e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f841 	bl	8003146 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fe12 	bl	8003d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003166:	2300      	movs	r3, #0
 8003168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <HAL_TIM_IC_Start_IT+0x1e>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003176:	b2db      	uxtb	r3, r3
 8003178:	e023      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x66>
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	2b04      	cmp	r3, #4
 800317e:	d104      	bne.n	800318a <HAL_TIM_IC_Start_IT+0x2e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e01b      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x66>
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	2b08      	cmp	r3, #8
 800318e:	d104      	bne.n	800319a <HAL_TIM_IC_Start_IT+0x3e>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003196:	b2db      	uxtb	r3, r3
 8003198:	e013      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x66>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d104      	bne.n	80031aa <HAL_TIM_IC_Start_IT+0x4e>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	e00b      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x66>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d104      	bne.n	80031ba <HAL_TIM_IC_Start_IT+0x5e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	e003      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x66>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d104      	bne.n	80031d4 <HAL_TIM_IC_Start_IT+0x78>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	e013      	b.n	80031fc <HAL_TIM_IC_Start_IT+0xa0>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d104      	bne.n	80031e4 <HAL_TIM_IC_Start_IT+0x88>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	e00b      	b.n	80031fc <HAL_TIM_IC_Start_IT+0xa0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d104      	bne.n	80031f4 <HAL_TIM_IC_Start_IT+0x98>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e003      	b.n	80031fc <HAL_TIM_IC_Start_IT+0xa0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80031fe:	7bbb      	ldrb	r3, [r7, #14]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d102      	bne.n	800320a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003204:	7b7b      	ldrb	r3, [r7, #13]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d001      	beq.n	800320e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0e2      	b.n	80033d4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_TIM_IC_Start_IT+0xc2>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800321c:	e023      	b.n	8003266 <HAL_TIM_IC_Start_IT+0x10a>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d104      	bne.n	800322e <HAL_TIM_IC_Start_IT+0xd2>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800322c:	e01b      	b.n	8003266 <HAL_TIM_IC_Start_IT+0x10a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d104      	bne.n	800323e <HAL_TIM_IC_Start_IT+0xe2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800323c:	e013      	b.n	8003266 <HAL_TIM_IC_Start_IT+0x10a>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d104      	bne.n	800324e <HAL_TIM_IC_Start_IT+0xf2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800324c:	e00b      	b.n	8003266 <HAL_TIM_IC_Start_IT+0x10a>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b10      	cmp	r3, #16
 8003252:	d104      	bne.n	800325e <HAL_TIM_IC_Start_IT+0x102>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800325c:	e003      	b.n	8003266 <HAL_TIM_IC_Start_IT+0x10a>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start_IT+0x11a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003274:	e013      	b.n	800329e <HAL_TIM_IC_Start_IT+0x142>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start_IT+0x12a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003284:	e00b      	b.n	800329e <HAL_TIM_IC_Start_IT+0x142>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start_IT+0x13a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003294:	e003      	b.n	800329e <HAL_TIM_IC_Start_IT+0x142>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d841      	bhi.n	8003328 <HAL_TIM_IC_Start_IT+0x1cc>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_TIM_IC_Start_IT+0x150>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	08003329 	.word	0x08003329
 80032b4:	08003329 	.word	0x08003329
 80032b8:	08003329 	.word	0x08003329
 80032bc:	080032f3 	.word	0x080032f3
 80032c0:	08003329 	.word	0x08003329
 80032c4:	08003329 	.word	0x08003329
 80032c8:	08003329 	.word	0x08003329
 80032cc:	08003305 	.word	0x08003305
 80032d0:	08003329 	.word	0x08003329
 80032d4:	08003329 	.word	0x08003329
 80032d8:	08003329 	.word	0x08003329
 80032dc:	08003317 	.word	0x08003317
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0202 	orr.w	r2, r2, #2
 80032ee:	60da      	str	r2, [r3, #12]
      break;
 80032f0:	e01d      	b.n	800332e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f042 0204 	orr.w	r2, r2, #4
 8003300:	60da      	str	r2, [r3, #12]
      break;
 8003302:	e014      	b.n	800332e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f042 0208 	orr.w	r2, r2, #8
 8003312:	60da      	str	r2, [r3, #12]
      break;
 8003314:	e00b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68da      	ldr	r2, [r3, #12]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f042 0210 	orr.w	r2, r2, #16
 8003324:	60da      	str	r2, [r3, #12]
      break;
 8003326:	e002      	b.n	800332e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	bf00      	nop
  }

  if (status == HAL_OK)
 800332e:	7bfb      	ldrb	r3, [r7, #15]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d14e      	bne.n	80033d2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2201      	movs	r2, #1
 800333a:	6839      	ldr	r1, [r7, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fa83 	bl	8004848 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a25      	ldr	r2, [pc, #148]	@ (80033dc <HAL_TIM_IC_Start_IT+0x280>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003354:	d01d      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	@ (80033e0 <HAL_TIM_IC_Start_IT+0x284>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	@ (80033e4 <HAL_TIM_IC_Start_IT+0x288>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <HAL_TIM_IC_Start_IT+0x28c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1c      	ldr	r2, [pc, #112]	@ (80033ec <HAL_TIM_IC_Start_IT+0x290>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1b      	ldr	r2, [pc, #108]	@ (80033f0 <HAL_TIM_IC_Start_IT+0x294>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_TIM_IC_Start_IT+0x236>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_TIM_IC_Start_IT+0x298>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d115      	bne.n	80033be <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <HAL_TIM_IC_Start_IT+0x29c>)
 800339a:	4013      	ands	r3, r2
 800339c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	d015      	beq.n	80033d0 <HAL_TIM_IC_Start_IT+0x274>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033aa:	d011      	beq.n	80033d0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0201 	orr.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	e008      	b.n	80033d0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0201 	orr.w	r2, r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e000      	b.n	80033d2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40015000 	.word	0x40015000
 80033f8:	00010007 	.word	0x00010007

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd faac 	bl	80009a4 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fc38 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fc3f 	bl	8003cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f7fd fa86 	bl	80009a4 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fc12 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fc19 	bl	8003cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0208 	mvn.w	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fd fa60 	bl	80009a4 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fbec 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fbf3 	bl	8003cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2208      	movs	r2, #8
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fa3a 	bl	80009a4 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 fbc6 	bl	8003cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fbcd 	bl	8003cd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fba4 	bl	8003cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d104      	bne.n	800357c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d007      	beq.n	8003596 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800358e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f001 fab3 	bl	8004afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00c      	beq.n	80035ba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80035b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f001 faab 	bl	8004b10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00c      	beq.n	80035de <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d007      	beq.n	80035de <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80035d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f000 fb87 	bl	8003cec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00c      	beq.n	8003602 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0220 	mvn.w	r2, #32
 80035fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f001 fa73 	bl	8004ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00c      	beq.n	8003626 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f001 fa7f 	bl	8004b24 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00c      	beq.n	800364a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d007      	beq.n	800364a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8003642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f001 fa77 	bl	8004b38 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00c      	beq.n	800366e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d007      	beq.n	800366e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003666:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 fa6f 	bl	8004b4c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00c      	beq.n	8003692 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f001 fa67 	bl	8004b60 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e088      	b.n	80037ca <HAL_TIM_IC_ConfigChannel+0x130>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d11b      	bne.n	80036fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036d6:	f000 fef1 	bl	80044bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	699a      	ldr	r2, [r3, #24]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 020c 	bic.w	r2, r2, #12
 80036e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6999      	ldr	r1, [r3, #24]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	619a      	str	r2, [r3, #24]
 80036fc:	e060      	b.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11c      	bne.n	800373e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003714:	f000 ff75 	bl	8004602 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699a      	ldr	r2, [r3, #24]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003726:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6999      	ldr	r1, [r3, #24]
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	619a      	str	r2, [r3, #24]
 800373c:	e040      	b.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003754:	f000 ffc2 	bl	80046dc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 020c 	bic.w	r2, r2, #12
 8003766:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69d9      	ldr	r1, [r3, #28]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	61da      	str	r2, [r3, #28]
 800377a:	e021      	b.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d11c      	bne.n	80037bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003792:	f000 ffdf 	bl	8004754 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80037a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	69d9      	ldr	r1, [r3, #28]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	021a      	lsls	r2, r3, #8
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	61da      	str	r2, [r3, #28]
 80037ba:	e001      	b.n	80037c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0ff      	b.n	80039f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b14      	cmp	r3, #20
 80037fe:	f200 80f0 	bhi.w	80039e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003802:	a201      	add	r2, pc, #4	@ (adr r2, 8003808 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080039e3 	.word	0x080039e3
 8003810:	080039e3 	.word	0x080039e3
 8003814:	080039e3 	.word	0x080039e3
 8003818:	0800389d 	.word	0x0800389d
 800381c:	080039e3 	.word	0x080039e3
 8003820:	080039e3 	.word	0x080039e3
 8003824:	080039e3 	.word	0x080039e3
 8003828:	080038df 	.word	0x080038df
 800382c:	080039e3 	.word	0x080039e3
 8003830:	080039e3 	.word	0x080039e3
 8003834:	080039e3 	.word	0x080039e3
 8003838:	0800391f 	.word	0x0800391f
 800383c:	080039e3 	.word	0x080039e3
 8003840:	080039e3 	.word	0x080039e3
 8003844:	080039e3 	.word	0x080039e3
 8003848:	08003961 	.word	0x08003961
 800384c:	080039e3 	.word	0x080039e3
 8003850:	080039e3 	.word	0x080039e3
 8003854:	080039e3 	.word	0x080039e3
 8003858:	080039a1 	.word	0x080039a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb00 	bl	8003e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 0208 	orr.w	r2, r2, #8
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f022 0204 	bic.w	r2, r2, #4
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691a      	ldr	r2, [r3, #16]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	619a      	str	r2, [r3, #24]
      break;
 800389a:	e0a5      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb7a 	bl	8003f9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6999      	ldr	r1, [r3, #24]
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	619a      	str	r2, [r3, #24]
      break;
 80038dc:	e084      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fbed 	bl	80040c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 0208 	orr.w	r2, r2, #8
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0204 	bic.w	r2, r2, #4
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	430a      	orrs	r2, r1
 800391a:	61da      	str	r2, [r3, #28]
      break;
 800391c:	e064      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 fc5f 	bl	80041e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69da      	ldr	r2, [r3, #28]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	69d9      	ldr	r1, [r3, #28]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	021a      	lsls	r2, r3, #8
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	61da      	str	r2, [r3, #28]
      break;
 800395e:	e043      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fcd2 	bl	8004310 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0208 	orr.w	r2, r2, #8
 800397a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0204 	bic.w	r2, r2, #4
 800398a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800399e:	e023      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fd1c 	bl	80043e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80039e0:	e002      	b.n	80039e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	75fb      	strb	r3, [r7, #23]
      break;
 80039e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop

080039fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x1c>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0f6      	b.n	8003c06 <HAL_TIM_ConfigClockSource+0x20a>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a6f      	ldr	r2, [pc, #444]	@ (8003c10 <HAL_TIM_ConfigClockSource+0x214>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	f000 80c1 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003a58:	4a6d      	ldr	r2, [pc, #436]	@ (8003c10 <HAL_TIM_ConfigClockSource+0x214>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	f200 80c6 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003a60:	4a6c      	ldr	r2, [pc, #432]	@ (8003c14 <HAL_TIM_ConfigClockSource+0x218>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	f000 80b9 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003a68:	4a6a      	ldr	r2, [pc, #424]	@ (8003c14 <HAL_TIM_ConfigClockSource+0x218>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	f200 80be 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003a70:	4a69      	ldr	r2, [pc, #420]	@ (8003c18 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f000 80b1 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003a78:	4a67      	ldr	r2, [pc, #412]	@ (8003c18 <HAL_TIM_ConfigClockSource+0x21c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	f200 80b6 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003a80:	4a66      	ldr	r2, [pc, #408]	@ (8003c1c <HAL_TIM_ConfigClockSource+0x220>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f000 80a9 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003a88:	4a64      	ldr	r2, [pc, #400]	@ (8003c1c <HAL_TIM_ConfigClockSource+0x220>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	f200 80ae 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003a90:	4a63      	ldr	r2, [pc, #396]	@ (8003c20 <HAL_TIM_ConfigClockSource+0x224>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	f000 80a1 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003a98:	4a61      	ldr	r2, [pc, #388]	@ (8003c20 <HAL_TIM_ConfigClockSource+0x224>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f200 80a6 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003aa0:	4a60      	ldr	r2, [pc, #384]	@ (8003c24 <HAL_TIM_ConfigClockSource+0x228>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f000 8099 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c24 <HAL_TIM_ConfigClockSource+0x228>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f200 809e 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003ab4:	f000 8091 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003ab8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003abc:	f200 8096 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ac4:	f000 8089 	beq.w	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003ac8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003acc:	f200 808e 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ad4:	d03e      	beq.n	8003b54 <HAL_TIM_ConfigClockSource+0x158>
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ada:	f200 8087 	bhi.w	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae2:	f000 8086 	beq.w	8003bf2 <HAL_TIM_ConfigClockSource+0x1f6>
 8003ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aea:	d87f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003aec:	2b70      	cmp	r3, #112	@ 0x70
 8003aee:	d01a      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x12a>
 8003af0:	2b70      	cmp	r3, #112	@ 0x70
 8003af2:	d87b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003af4:	2b60      	cmp	r3, #96	@ 0x60
 8003af6:	d050      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x19e>
 8003af8:	2b60      	cmp	r3, #96	@ 0x60
 8003afa:	d877      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003afc:	2b50      	cmp	r3, #80	@ 0x50
 8003afe:	d03c      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x17e>
 8003b00:	2b50      	cmp	r3, #80	@ 0x50
 8003b02:	d873      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003b04:	2b40      	cmp	r3, #64	@ 0x40
 8003b06:	d058      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x1be>
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d86f      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003b0c:	2b30      	cmp	r3, #48	@ 0x30
 8003b0e:	d064      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003b10:	2b30      	cmp	r3, #48	@ 0x30
 8003b12:	d86b      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003b14:	2b20      	cmp	r3, #32
 8003b16:	d060      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d867      	bhi.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d05a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x1de>
 8003b24:	e062      	b.n	8003bec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b36:	f000 fe67 	bl	8004808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	609a      	str	r2, [r3, #8]
      break;
 8003b52:	e04f      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b64:	f000 fe50 	bl	8004808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b76:	609a      	str	r2, [r3, #8]
      break;
 8003b78:	e03c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 fd0c 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2150      	movs	r1, #80	@ 0x50
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 fe1b 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8003b98:	e02c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f000 fd68 	bl	800467c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2160      	movs	r1, #96	@ 0x60
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 fe0b 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8003bb8:	e01c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fcec 	bl	80045a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2140      	movs	r1, #64	@ 0x40
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fdfb 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e00c      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4619      	mov	r1, r3
 8003be4:	4610      	mov	r0, r2
 8003be6:	f000 fdf2 	bl	80047ce <TIM_ITRx_SetConfig>
      break;
 8003bea:	e003      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf0:	e000      	b.n	8003bf4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	00100070 	.word	0x00100070
 8003c14:	00100060 	.word	0x00100060
 8003c18:	00100050 	.word	0x00100050
 8003c1c:	00100040 	.word	0x00100040
 8003c20:	00100030 	.word	0x00100030
 8003c24:	00100020 	.word	0x00100020

08003c28 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d831      	bhi.n	8003ca0 <HAL_TIM_ReadCapturedValue+0x78>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c79 	.word	0x08003c79
 8003c48:	08003ca1 	.word	0x08003ca1
 8003c4c:	08003ca1 	.word	0x08003ca1
 8003c50:	08003ca1 	.word	0x08003ca1
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003ca1 	.word	0x08003ca1
 8003c5c:	08003ca1 	.word	0x08003ca1
 8003c60:	08003ca1 	.word	0x08003ca1
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003ca1 	.word	0x08003ca1
 8003c70:	08003ca1 	.word	0x08003ca1
 8003c74:	08003c97 	.word	0x08003c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c7e:	60fb      	str	r3, [r7, #12]

      break;
 8003c80:	e00f      	b.n	8003ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c88:	60fb      	str	r3, [r7, #12]

      break;
 8003c8a:	e00a      	b.n	8003ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c92:	60fb      	str	r3, [r7, #12]

      break;
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	60fb      	str	r3, [r7, #12]

      break;
 8003c9e:	e000      	b.n	8003ca2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ca0:	bf00      	nop
  }

  return tmpreg;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a4c      	ldr	r2, [pc, #304]	@ (8003e44 <TIM_Base_SetConfig+0x144>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d017      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1e:	d013      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a49      	ldr	r2, [pc, #292]	@ (8003e48 <TIM_Base_SetConfig+0x148>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00f      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a48      	ldr	r2, [pc, #288]	@ (8003e4c <TIM_Base_SetConfig+0x14c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a47      	ldr	r2, [pc, #284]	@ (8003e50 <TIM_Base_SetConfig+0x150>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a46      	ldr	r2, [pc, #280]	@ (8003e54 <TIM_Base_SetConfig+0x154>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_Base_SetConfig+0x48>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a45      	ldr	r2, [pc, #276]	@ (8003e58 <TIM_Base_SetConfig+0x158>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d108      	bne.n	8003d5a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a39      	ldr	r2, [pc, #228]	@ (8003e44 <TIM_Base_SetConfig+0x144>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d023      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d68:	d01f      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a36      	ldr	r2, [pc, #216]	@ (8003e48 <TIM_Base_SetConfig+0x148>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d01b      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a35      	ldr	r2, [pc, #212]	@ (8003e4c <TIM_Base_SetConfig+0x14c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d017      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a34      	ldr	r2, [pc, #208]	@ (8003e50 <TIM_Base_SetConfig+0x150>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d013      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a33      	ldr	r2, [pc, #204]	@ (8003e54 <TIM_Base_SetConfig+0x154>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00f      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a33      	ldr	r2, [pc, #204]	@ (8003e5c <TIM_Base_SetConfig+0x15c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00b      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a32      	ldr	r2, [pc, #200]	@ (8003e60 <TIM_Base_SetConfig+0x160>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a31      	ldr	r2, [pc, #196]	@ (8003e64 <TIM_Base_SetConfig+0x164>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_Base_SetConfig+0xaa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <TIM_Base_SetConfig+0x158>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a18      	ldr	r2, [pc, #96]	@ (8003e44 <TIM_Base_SetConfig+0x144>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d013      	beq.n	8003e10 <TIM_Base_SetConfig+0x110>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <TIM_Base_SetConfig+0x154>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d00f      	beq.n	8003e10 <TIM_Base_SetConfig+0x110>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e5c <TIM_Base_SetConfig+0x15c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00b      	beq.n	8003e10 <TIM_Base_SetConfig+0x110>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a19      	ldr	r2, [pc, #100]	@ (8003e60 <TIM_Base_SetConfig+0x160>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d007      	beq.n	8003e10 <TIM_Base_SetConfig+0x110>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <TIM_Base_SetConfig+0x164>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d003      	beq.n	8003e10 <TIM_Base_SetConfig+0x110>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <TIM_Base_SetConfig+0x158>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d103      	bne.n	8003e18 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	691a      	ldr	r2, [r3, #16]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d105      	bne.n	8003e36 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]
  }
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40015000 	.word	0x40015000
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40014400 	.word	0x40014400
 8003e64:	40014800 	.word	0x40014800

08003e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f023 0201 	bic.w	r2, r3, #1
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0303 	bic.w	r3, r3, #3
 8003ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68fa      	ldr	r2, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 0302 	bic.w	r3, r3, #2
 8003eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a30      	ldr	r2, [pc, #192]	@ (8003f84 <TIM_OC1_SetConfig+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x88>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a2f      	ldr	r2, [pc, #188]	@ (8003f88 <TIM_OC1_SetConfig+0x120>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d00f      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x88>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a2e      	ldr	r2, [pc, #184]	@ (8003f8c <TIM_OC1_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d00b      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x88>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a2d      	ldr	r2, [pc, #180]	@ (8003f90 <TIM_OC1_SetConfig+0x128>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d007      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x88>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a2c      	ldr	r2, [pc, #176]	@ (8003f94 <TIM_OC1_SetConfig+0x12c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d003      	beq.n	8003ef0 <TIM_OC1_SetConfig+0x88>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a2b      	ldr	r2, [pc, #172]	@ (8003f98 <TIM_OC1_SetConfig+0x130>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d10c      	bne.n	8003f0a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	f023 0308 	bic.w	r3, r3, #8
 8003ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f023 0304 	bic.w	r3, r3, #4
 8003f08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <TIM_OC1_SetConfig+0x11c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_OC1_SetConfig+0xd2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <TIM_OC1_SetConfig+0x120>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_OC1_SetConfig+0xd2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <TIM_OC1_SetConfig+0x124>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_OC1_SetConfig+0xd2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	@ (8003f90 <TIM_OC1_SetConfig+0x128>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_OC1_SetConfig+0xd2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	@ (8003f94 <TIM_OC1_SetConfig+0x12c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_OC1_SetConfig+0xd2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a18      	ldr	r2, [pc, #96]	@ (8003f98 <TIM_OC1_SetConfig+0x130>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d111      	bne.n	8003f5e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	697a      	ldr	r2, [r7, #20]
 8003f76:	621a      	str	r2, [r3, #32]
}
 8003f78:	bf00      	nop
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012c00 	.word	0x40012c00
 8003f88:	40013400 	.word	0x40013400
 8003f8c:	40014000 	.word	0x40014000
 8003f90:	40014400 	.word	0x40014400
 8003f94:	40014800 	.word	0x40014800
 8003f98:	40015000 	.word	0x40015000

08003f9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
 8003fb0:	f023 0210 	bic.w	r2, r3, #16
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	021b      	lsls	r3, r3, #8
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f023 0320 	bic.w	r3, r3, #32
 8003fea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80040ac <TIM_OC2_SetConfig+0x110>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d007      	beq.n	8004010 <TIM_OC2_SetConfig+0x74>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	4a2b      	ldr	r2, [pc, #172]	@ (80040b0 <TIM_OC2_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d003      	beq.n	8004010 <TIM_OC2_SetConfig+0x74>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a2a      	ldr	r2, [pc, #168]	@ (80040b4 <TIM_OC2_SetConfig+0x118>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10d      	bne.n	800402c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800402a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1f      	ldr	r2, [pc, #124]	@ (80040ac <TIM_OC2_SetConfig+0x110>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <TIM_OC2_SetConfig+0xc0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a1e      	ldr	r2, [pc, #120]	@ (80040b0 <TIM_OC2_SetConfig+0x114>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00f      	beq.n	800405c <TIM_OC2_SetConfig+0xc0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a1e      	ldr	r2, [pc, #120]	@ (80040b8 <TIM_OC2_SetConfig+0x11c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_OC2_SetConfig+0xc0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a1d      	ldr	r2, [pc, #116]	@ (80040bc <TIM_OC2_SetConfig+0x120>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_OC2_SetConfig+0xc0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a1c      	ldr	r2, [pc, #112]	@ (80040c0 <TIM_OC2_SetConfig+0x124>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC2_SetConfig+0xc0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a17      	ldr	r2, [pc, #92]	@ (80040b4 <TIM_OC2_SetConfig+0x118>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d113      	bne.n	8004084 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800406a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4313      	orrs	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	40012c00 	.word	0x40012c00
 80040b0:	40013400 	.word	0x40013400
 80040b4:	40015000 	.word	0x40015000
 80040b8:	40014000 	.word	0x40014000
 80040bc:	40014400 	.word	0x40014400
 80040c0:	40014800 	.word	0x40014800

080040c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b087      	sub	sp, #28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a1b      	ldr	r3, [r3, #32]
 80040d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f023 0303 	bic.w	r3, r3, #3
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	021b      	lsls	r3, r3, #8
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a2b      	ldr	r2, [pc, #172]	@ (80041d0 <TIM_OC3_SetConfig+0x10c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d007      	beq.n	8004136 <TIM_OC3_SetConfig+0x72>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2a      	ldr	r2, [pc, #168]	@ (80041d4 <TIM_OC3_SetConfig+0x110>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d003      	beq.n	8004136 <TIM_OC3_SetConfig+0x72>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a29      	ldr	r2, [pc, #164]	@ (80041d8 <TIM_OC3_SetConfig+0x114>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10d      	bne.n	8004152 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800413c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	4313      	orrs	r3, r2
 8004148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1e      	ldr	r2, [pc, #120]	@ (80041d0 <TIM_OC3_SetConfig+0x10c>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <TIM_OC3_SetConfig+0xbe>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <TIM_OC3_SetConfig+0x110>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00f      	beq.n	8004182 <TIM_OC3_SetConfig+0xbe>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a1d      	ldr	r2, [pc, #116]	@ (80041dc <TIM_OC3_SetConfig+0x118>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00b      	beq.n	8004182 <TIM_OC3_SetConfig+0xbe>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a1c      	ldr	r2, [pc, #112]	@ (80041e0 <TIM_OC3_SetConfig+0x11c>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d007      	beq.n	8004182 <TIM_OC3_SetConfig+0xbe>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a1b      	ldr	r2, [pc, #108]	@ (80041e4 <TIM_OC3_SetConfig+0x120>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC3_SetConfig+0xbe>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a16      	ldr	r2, [pc, #88]	@ (80041d8 <TIM_OC3_SetConfig+0x114>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d113      	bne.n	80041aa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	011b      	lsls	r3, r3, #4
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	621a      	str	r2, [r3, #32]
}
 80041c4:	bf00      	nop
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40012c00 	.word	0x40012c00
 80041d4:	40013400 	.word	0x40013400
 80041d8:	40015000 	.word	0x40015000
 80041dc:	40014000 	.word	0x40014000
 80041e0:	40014400 	.word	0x40014400
 80041e4:	40014800 	.word	0x40014800

080041e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004216:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800421a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	021b      	lsls	r3, r3, #8
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4313      	orrs	r3, r2
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	031b      	lsls	r3, r3, #12
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	4a2c      	ldr	r2, [pc, #176]	@ (80042f8 <TIM_OC4_SetConfig+0x110>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d007      	beq.n	800425c <TIM_OC4_SetConfig+0x74>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a2b      	ldr	r2, [pc, #172]	@ (80042fc <TIM_OC4_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d003      	beq.n	800425c <TIM_OC4_SetConfig+0x74>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	4a2a      	ldr	r2, [pc, #168]	@ (8004300 <TIM_OC4_SetConfig+0x118>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d10d      	bne.n	8004278 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	031b      	lsls	r3, r3, #12
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a1f      	ldr	r2, [pc, #124]	@ (80042f8 <TIM_OC4_SetConfig+0x110>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <TIM_OC4_SetConfig+0xc0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a1e      	ldr	r2, [pc, #120]	@ (80042fc <TIM_OC4_SetConfig+0x114>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00f      	beq.n	80042a8 <TIM_OC4_SetConfig+0xc0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a1e      	ldr	r2, [pc, #120]	@ (8004304 <TIM_OC4_SetConfig+0x11c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_OC4_SetConfig+0xc0>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1d      	ldr	r2, [pc, #116]	@ (8004308 <TIM_OC4_SetConfig+0x120>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_OC4_SetConfig+0xc0>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <TIM_OC4_SetConfig+0x124>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_OC4_SetConfig+0xc0>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a17      	ldr	r2, [pc, #92]	@ (8004300 <TIM_OC4_SetConfig+0x118>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d113      	bne.n	80042d0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042ae:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042b6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	019b      	lsls	r3, r3, #6
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	019b      	lsls	r3, r3, #6
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40015000 	.word	0x40015000
 8004304:	40014000 	.word	0x40014000
 8004308:	40014400 	.word	0x40014400
 800430c:	40014800 	.word	0x40014800

08004310 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	041b      	lsls	r3, r3, #16
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a19      	ldr	r2, [pc, #100]	@ (80043cc <TIM_OC5_SetConfig+0xbc>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a18      	ldr	r2, [pc, #96]	@ (80043d0 <TIM_OC5_SetConfig+0xc0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a17      	ldr	r2, [pc, #92]	@ (80043d4 <TIM_OC5_SetConfig+0xc4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a16      	ldr	r2, [pc, #88]	@ (80043d8 <TIM_OC5_SetConfig+0xc8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a15      	ldr	r2, [pc, #84]	@ (80043dc <TIM_OC5_SetConfig+0xcc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC5_SetConfig+0x82>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a14      	ldr	r2, [pc, #80]	@ (80043e0 <TIM_OC5_SetConfig+0xd0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d109      	bne.n	80043a6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004398:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	621a      	str	r2, [r3, #32]
}
 80043c0:	bf00      	nop
 80043c2:	371c      	adds	r7, #28
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	40012c00 	.word	0x40012c00
 80043d0:	40013400 	.word	0x40013400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	40015000 	.word	0x40015000

080043e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800440a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004412:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	021b      	lsls	r3, r3, #8
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800442a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	051b      	lsls	r3, r3, #20
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1a      	ldr	r2, [pc, #104]	@ (80044a4 <TIM_OC6_SetConfig+0xc0>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a19      	ldr	r2, [pc, #100]	@ (80044a8 <TIM_OC6_SetConfig+0xc4>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00f      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a18      	ldr	r2, [pc, #96]	@ (80044ac <TIM_OC6_SetConfig+0xc8>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d00b      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a17      	ldr	r2, [pc, #92]	@ (80044b0 <TIM_OC6_SetConfig+0xcc>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d007      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a16      	ldr	r2, [pc, #88]	@ (80044b4 <TIM_OC6_SetConfig+0xd0>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d003      	beq.n	8004468 <TIM_OC6_SetConfig+0x84>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a15      	ldr	r2, [pc, #84]	@ (80044b8 <TIM_OC6_SetConfig+0xd4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d109      	bne.n	800447c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800446e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	029b      	lsls	r3, r3, #10
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	621a      	str	r2, [r3, #32]
}
 8004496:	bf00      	nop
 8004498:	371c      	adds	r7, #28
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40012c00 	.word	0x40012c00
 80044a8:	40013400 	.word	0x40013400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800
 80044b8:	40015000 	.word	0x40015000

080044bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	f023 0201 	bic.w	r2, r3, #1
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a28      	ldr	r2, [pc, #160]	@ (8004588 <TIM_TI1_SetConfig+0xcc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d01b      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f0:	d017      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a25      	ldr	r2, [pc, #148]	@ (800458c <TIM_TI1_SetConfig+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d013      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <TIM_TI1_SetConfig+0xd4>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00f      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a23      	ldr	r2, [pc, #140]	@ (8004594 <TIM_TI1_SetConfig+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00b      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a22      	ldr	r2, [pc, #136]	@ (8004598 <TIM_TI1_SetConfig+0xdc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d007      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	4a21      	ldr	r2, [pc, #132]	@ (800459c <TIM_TI1_SetConfig+0xe0>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d003      	beq.n	8004522 <TIM_TI1_SetConfig+0x66>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4a20      	ldr	r2, [pc, #128]	@ (80045a0 <TIM_TI1_SetConfig+0xe4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <TIM_TI1_SetConfig+0x6a>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <TIM_TI1_SetConfig+0x6c>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0303 	bic.w	r3, r3, #3
 8004532:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]
 800453c:	e003      	b.n	8004546 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800454c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	b2db      	uxtb	r3, r3
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f023 030a 	bic.w	r3, r3, #10
 8004560:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 030a 	and.w	r3, r3, #10
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	621a      	str	r2, [r3, #32]
}
 800457a:	bf00      	nop
 800457c:	371c      	adds	r7, #28
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40013400 	.word	0x40013400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40015000 	.word	0x40015000

080045a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f023 0201 	bic.w	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	693a      	ldr	r2, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 030a 	bic.w	r3, r3, #10
 80045e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004602:	b480      	push	{r7}
 8004604:	b087      	sub	sp, #28
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0210 	bic.w	r2, r3, #16
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	021b      	lsls	r3, r3, #8
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004640:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	b29b      	uxth	r3, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004654:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	621a      	str	r2, [r3, #32]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f023 0210 	bic.w	r2, r3, #16
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	031b      	lsls	r3, r3, #12
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	011b      	lsls	r3, r3, #4
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f023 0303 	bic.w	r3, r3, #3
 8004708:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800470a:	693a      	ldr	r2, [r7, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	b2db      	uxtb	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800472c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	021b      	lsls	r3, r3, #8
 8004732:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	4313      	orrs	r3, r2
 800473a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	621a      	str	r2, [r3, #32]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6a1b      	ldr	r3, [r3, #32]
 8004766:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004780:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004792:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	031b      	lsls	r3, r3, #12
 8004798:	b29b      	uxth	r3, r3
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	031b      	lsls	r3, r3, #12
 80047ac:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	621a      	str	r2, [r3, #32]
}
 80047c2:	bf00      	nop
 80047c4:	371c      	adds	r7, #28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80047e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f043 0307 	orr.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	609a      	str	r2, [r3, #8]
}
 80047fc:	bf00      	nop
 80047fe:	3714      	adds	r7, #20
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	021a      	lsls	r2, r3, #8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	431a      	orrs	r2, r3
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	609a      	str	r2, [r3, #8]
}
 800483c:	bf00      	nop
 800483e:	371c      	adds	r7, #28
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 031f 	and.w	r3, r3, #31
 800485a:	2201      	movs	r2, #1
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a1a      	ldr	r2, [r3, #32]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	43db      	mvns	r3, r3
 800486a:	401a      	ands	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	fa01 f303 	lsl.w	r3, r1, r3
 8004880:	431a      	orrs	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	621a      	str	r2, [r3, #32]
}
 8004886:	bf00      	nop
 8004888:	371c      	adds	r7, #28
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e074      	b.n	8004996 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a34      	ldr	r2, [pc, #208]	@ (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d009      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a33      	ldr	r2, [pc, #204]	@ (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d004      	beq.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a31      	ldr	r2, [pc, #196]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d108      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80048f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004906:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a21      	ldr	r2, [pc, #132]	@ (80049a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d01d      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d018      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	@ (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	@ (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d00e      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a15      	ldr	r2, [pc, #84]	@ (80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a18      	ldr	r2, [pc, #96]	@ (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d004      	beq.n	800496a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d10c      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004970:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40012c00 	.word	0x40012c00
 80049a8:	40013400 	.word	0x40013400
 80049ac:	40015000 	.word	0x40015000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40014000 	.word	0x40014000

080049c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80049d8:	2302      	movs	r3, #2
 80049da:	e078      	b.n	8004ace <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	041b      	lsls	r3, r3, #16
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1c      	ldr	r2, [pc, #112]	@ (8004adc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d009      	beq.n	8004a82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d004      	beq.n	8004a82 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d11c      	bne.n	8004abc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8c:	051b      	lsls	r3, r3, #20
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40012c00 	.word	0x40012c00
 8004ae0:	40013400 	.word	0x40013400
 8004ae4:	40015000 	.word	0x40015000

08004ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e042      	b.n	8004c0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d106      	bne.n	8004b9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fc fbd9 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2224      	movs	r2, #36	@ 0x24
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 fefc 	bl	80059bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fbfd 	bl	80053c4 <UART_SetConfig>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e01b      	b.n	8004c0c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004be2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	689a      	ldr	r2, [r3, #8]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bf2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f042 0201 	orr.w	r2, r2, #1
 8004c02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 ff7b 	bl	8005b00 <UART_CheckIdleState>
 8004c0a:	4603      	mov	r3, r0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b091      	sub	sp, #68	@ 0x44
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c28:	2b20      	cmp	r3, #32
 8004c2a:	d178      	bne.n	8004d1e <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d002      	beq.n	8004c38 <HAL_UART_Transmit_IT+0x24>
 8004c32:	88fb      	ldrh	r3, [r7, #6]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e071      	b.n	8004d20 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	88fa      	ldrh	r2, [r7, #6]
 8004c46:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	88fa      	ldrh	r2, [r7, #6]
 8004c4e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    huart->TxISR       = NULL;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2200      	movs	r2, #0
 8004c56:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2221      	movs	r2, #33	@ 0x21
 8004c64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c70:	d12a      	bne.n	8004cc8 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7a:	d107      	bne.n	8004c8c <HAL_UART_Transmit_IT+0x78>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	4a29      	ldr	r2, [pc, #164]	@ (8004d2c <HAL_UART_Transmit_IT+0x118>)
 8004c88:	679a      	str	r2, [r3, #120]	@ 0x78
 8004c8a:	e002      	b.n	8004c92 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a28      	ldr	r2, [pc, #160]	@ (8004d30 <HAL_UART_Transmit_IT+0x11c>)
 8004c90:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	3308      	adds	r3, #8
 8004cb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004cb2:	637a      	str	r2, [r7, #52]	@ 0x34
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004cb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e5      	bne.n	8004c92 <HAL_UART_Transmit_IT+0x7e>
 8004cc6:	e028      	b.n	8004d1a <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cd0:	d107      	bne.n	8004ce2 <HAL_UART_Transmit_IT+0xce>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d103      	bne.n	8004ce2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a15      	ldr	r2, [pc, #84]	@ (8004d34 <HAL_UART_Transmit_IT+0x120>)
 8004cde:	679a      	str	r2, [r3, #120]	@ 0x78
 8004ce0:	e002      	b.n	8004ce8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <HAL_UART_Transmit_IT+0x124>)
 8004ce6:	679a      	str	r2, [r3, #120]	@ 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	e853 3f00 	ldrex	r3, [r3]
 8004cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d06:	623b      	str	r3, [r7, #32]
 8004d08:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	69f9      	ldr	r1, [r7, #28]
 8004d0c:	6a3a      	ldr	r2, [r7, #32]
 8004d0e:	e841 2300 	strex	r3, r2, [r1]
 8004d12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1e6      	bne.n	8004ce8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	e000      	b.n	8004d20 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d1e:	2302      	movs	r3, #2
  }
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3744      	adds	r7, #68	@ 0x44
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	08006081 	.word	0x08006081
 8004d30:	08005fa1 	.word	0x08005fa1
 8004d34:	08005edf 	.word	0x08005edf
 8004d38:	08005e27 	.word	0x08005e27

08004d3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b0ba      	sub	sp, #232	@ 0xe8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004d66:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004d70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d11b      	bne.n	8004db0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d88:	f003 0320 	and.w	r3, r3, #32
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d105      	bne.n	8004d9c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 82e3 	beq.w	800536c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	4798      	blx	r3
      }
      return;
 8004dae:	e2dd      	b.n	800536c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004db0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 8123 	beq.w	8005000 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004dba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff4 <HAL_UART_IRQHandler+0x2b8>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d106      	bne.n	8004dd4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004dc6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004dca:	4b8b      	ldr	r3, [pc, #556]	@ (8004ff8 <HAL_UART_IRQHandler+0x2bc>)
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8116 	beq.w	8005000 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d011      	beq.n	8004e04 <HAL_UART_IRQHandler+0xc8>
 8004de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d011      	beq.n	8004e34 <HAL_UART_IRQHandler+0xf8>
 8004e10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e14:	f003 0301 	and.w	r3, r3, #1
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00b      	beq.n	8004e34 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2202      	movs	r2, #2
 8004e22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e2a:	f043 0204 	orr.w	r2, r3, #4
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d011      	beq.n	8004e64 <HAL_UART_IRQHandler+0x128>
 8004e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2204      	movs	r2, #4
 8004e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	f043 0202 	orr.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e68:	f003 0308 	and.w	r3, r3, #8
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d105      	bne.n	8004e88 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004e7c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004e80:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff4 <HAL_UART_IRQHandler+0x2b8>)
 8004e82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	f043 0208 	orr.w	r2, r3, #8
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d012      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x196>
 8004eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eb0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00c      	beq.n	8004ed2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ec0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8249 	beq.w	8005370 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d013      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004ef6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d007      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689b      	ldr	r3, [r3, #8]
 8004f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f26:	2b40      	cmp	r3, #64	@ 0x40
 8004f28:	d005      	beq.n	8004f36 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004f2e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d054      	beq.n	8004fe0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fef9 	bl	8005d2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f46:	2b40      	cmp	r3, #64	@ 0x40
 8004f48:	d146      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d017      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa6:	4a15      	ldr	r2, [pc, #84]	@ (8004ffc <HAL_UART_IRQHandler+0x2c0>)
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fc fc51 	bl	8001858 <HAL_DMA_Abort_IT>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d019      	beq.n	8004ff0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004fca:	4610      	mov	r0, r2
 8004fcc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fce:	e00f      	b.n	8004ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f9e1 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd6:	e00b      	b.n	8004ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f9dd 	bl	8005398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fde:	e007      	b.n	8004ff0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f9d9 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004fee:	e1bf      	b.n	8005370 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff0:	bf00      	nop
    return;
 8004ff2:	e1bd      	b.n	8005370 <HAL_UART_IRQHandler+0x634>
 8004ff4:	10000001 	.word	0x10000001
 8004ff8:	04000120 	.word	0x04000120
 8004ffc:	08005dfb 	.word	0x08005dfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005004:	2b01      	cmp	r3, #1
 8005006:	f040 8153 	bne.w	80052b0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	f000 814c 	beq.w	80052b0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 8145 	beq.w	80052b0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2210      	movs	r2, #16
 800502c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	f040 80bb 	bne.w	80051b4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800504c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 818f 	beq.w	8005374 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800505c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005060:	429a      	cmp	r2, r3
 8005062:	f080 8187 	bcs.w	8005374 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800506c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	f040 8087 	bne.w	8005192 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005098:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800509c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80050ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80050b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80050ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80050c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1da      	bne.n	8005084 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	3308      	adds	r3, #8
 80050d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80050de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3308      	adds	r3, #8
 80050ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80050f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80050f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80050fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005104:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005106:	2b00      	cmp	r3, #0
 8005108:	d1e1      	bne.n	80050ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3308      	adds	r3, #8
 8005110:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800511a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800511c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005120:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800512e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005130:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005132:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005134:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005136:	e841 2300 	strex	r3, r2, [r1]
 800513a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800513c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800513e:	2b00      	cmp	r3, #0
 8005140:	d1e3      	bne.n	800510a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2220      	movs	r2, #32
 8005146:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005156:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005158:	e853 3f00 	ldrex	r3, [r3]
 800515c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800515e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005160:	f023 0310 	bic.w	r3, r3, #16
 8005164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	461a      	mov	r2, r3
 800516e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005172:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005174:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005178:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e4      	bne.n	8005150 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800518c:	4618      	mov	r0, r3
 800518e:	f7fc fb0a 	bl	80017a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2202      	movs	r2, #2
 8005196:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	4619      	mov	r1, r3
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f8fd 	bl	80053ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80051b2:	e0df      	b.n	8005374 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 80d1 	beq.w	8005378 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80051d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 80cc 	beq.w	8005378 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	461a      	mov	r2, r3
 80051fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005202:	647b      	str	r3, [r7, #68]	@ 0x44
 8005204:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005206:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800520a:	e841 2300 	strex	r3, r2, [r1]
 800520e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005210:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1e4      	bne.n	80051e0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3308      	adds	r3, #8
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	623b      	str	r3, [r7, #32]
   return(result);
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800522c:	f023 0301 	bic.w	r3, r3, #1
 8005230:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800523e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005246:	e841 2300 	strex	r3, r2, [r1]
 800524a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800524c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1e1      	bne.n	8005216 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2220      	movs	r2, #32
 8005256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	e853 3f00 	ldrex	r3, [r3]
 8005272:	60fb      	str	r3, [r7, #12]
   return(result);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f023 0310 	bic.w	r3, r3, #16
 800527a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800528c:	69b9      	ldr	r1, [r7, #24]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	e841 2300 	strex	r3, r2, [r1]
 8005294:	617b      	str	r3, [r7, #20]
   return(result);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1e4      	bne.n	8005266 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80052a6:	4619      	mov	r1, r3
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f87f 	bl	80053ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80052ae:	e063      	b.n	8005378 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00e      	beq.n	80052da <HAL_UART_IRQHandler+0x59e>
 80052bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d008      	beq.n	80052da <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80052d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 ff74 	bl	80061c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80052d8:	e051      	b.n	800537e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80052da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d014      	beq.n	8005310 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80052e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d105      	bne.n	80052fe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80052f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d008      	beq.n	8005310 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005302:	2b00      	cmp	r3, #0
 8005304:	d03a      	beq.n	800537c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
    }
    return;
 800530e:	e035      	b.n	800537c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_UART_IRQHandler+0x5f4>
 800531c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005324:	2b00      	cmp	r3, #0
 8005326:	d003      	beq.n	8005330 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 ff1e 	bl	800616a <UART_EndTransmit_IT>
    return;
 800532e:	e026      	b.n	800537e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_UART_IRQHandler+0x614>
 800533c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005340:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 ff4d 	bl	80061e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800534e:	e016      	b.n	800537e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005354:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d010      	beq.n	800537e <HAL_UART_IRQHandler+0x642>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005360:	2b00      	cmp	r3, #0
 8005362:	da0c      	bge.n	800537e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 ff35 	bl	80061d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800536a:	e008      	b.n	800537e <HAL_UART_IRQHandler+0x642>
      return;
 800536c:	bf00      	nop
 800536e:	e006      	b.n	800537e <HAL_UART_IRQHandler+0x642>
    return;
 8005370:	bf00      	nop
 8005372:	e004      	b.n	800537e <HAL_UART_IRQHandler+0x642>
      return;
 8005374:	bf00      	nop
 8005376:	e002      	b.n	800537e <HAL_UART_IRQHandler+0x642>
      return;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <HAL_UART_IRQHandler+0x642>
    return;
 800537c:	bf00      	nop
  }
}
 800537e:	37e8      	adds	r7, #232	@ 0xe8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	460b      	mov	r3, r1
 80053b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr

080053c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053c8:	b08c      	sub	sp, #48	@ 0x30
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	431a      	orrs	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4baa      	ldr	r3, [pc, #680]	@ (800569c <UART_SetConfig+0x2d8>)
 80053f4:	4013      	ands	r3, r2
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	6812      	ldr	r2, [r2, #0]
 80053fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053fc:	430b      	orrs	r3, r1
 80053fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a9f      	ldr	r2, [pc, #636]	@ (80056a0 <UART_SetConfig+0x2dc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d004      	beq.n	8005430 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800542c:	4313      	orrs	r3, r2
 800542e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800543a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800543e:	697a      	ldr	r2, [r7, #20]
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005444:	430b      	orrs	r3, r1
 8005446:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544e:	f023 010f 	bic.w	r1, r3, #15
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a90      	ldr	r2, [pc, #576]	@ (80056a4 <UART_SetConfig+0x2e0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d125      	bne.n	80054b4 <UART_SetConfig+0xf0>
 8005468:	4b8f      	ldr	r3, [pc, #572]	@ (80056a8 <UART_SetConfig+0x2e4>)
 800546a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	2b03      	cmp	r3, #3
 8005474:	d81a      	bhi.n	80054ac <UART_SetConfig+0xe8>
 8005476:	a201      	add	r2, pc, #4	@ (adr r2, 800547c <UART_SetConfig+0xb8>)
 8005478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547c:	0800548d 	.word	0x0800548d
 8005480:	0800549d 	.word	0x0800549d
 8005484:	08005495 	.word	0x08005495
 8005488:	080054a5 	.word	0x080054a5
 800548c:	2301      	movs	r3, #1
 800548e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005492:	e116      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005494:	2302      	movs	r3, #2
 8005496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549a:	e112      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800549c:	2304      	movs	r3, #4
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a2:	e10e      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80054a4:	2308      	movs	r3, #8
 80054a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054aa:	e10a      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80054ac:	2310      	movs	r3, #16
 80054ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b2:	e106      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a7c      	ldr	r2, [pc, #496]	@ (80056ac <UART_SetConfig+0x2e8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d138      	bne.n	8005530 <UART_SetConfig+0x16c>
 80054be:	4b7a      	ldr	r3, [pc, #488]	@ (80056a8 <UART_SetConfig+0x2e4>)
 80054c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c4:	f003 030c 	and.w	r3, r3, #12
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d82d      	bhi.n	8005528 <UART_SetConfig+0x164>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <UART_SetConfig+0x110>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	08005509 	.word	0x08005509
 80054d8:	08005529 	.word	0x08005529
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005529 	.word	0x08005529
 80054e4:	08005519 	.word	0x08005519
 80054e8:	08005529 	.word	0x08005529
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005511 	.word	0x08005511
 80054f8:	08005529 	.word	0x08005529
 80054fc:	08005529 	.word	0x08005529
 8005500:	08005529 	.word	0x08005529
 8005504:	08005521 	.word	0x08005521
 8005508:	2300      	movs	r3, #0
 800550a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800550e:	e0d8      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005510:	2302      	movs	r3, #2
 8005512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005516:	e0d4      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005518:	2304      	movs	r3, #4
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800551e:	e0d0      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005520:	2308      	movs	r3, #8
 8005522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005526:	e0cc      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005528:	2310      	movs	r3, #16
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552e:	e0c8      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a5e      	ldr	r2, [pc, #376]	@ (80056b0 <UART_SetConfig+0x2ec>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d125      	bne.n	8005586 <UART_SetConfig+0x1c2>
 800553a:	4b5b      	ldr	r3, [pc, #364]	@ (80056a8 <UART_SetConfig+0x2e4>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005540:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005544:	2b30      	cmp	r3, #48	@ 0x30
 8005546:	d016      	beq.n	8005576 <UART_SetConfig+0x1b2>
 8005548:	2b30      	cmp	r3, #48	@ 0x30
 800554a:	d818      	bhi.n	800557e <UART_SetConfig+0x1ba>
 800554c:	2b20      	cmp	r3, #32
 800554e:	d00a      	beq.n	8005566 <UART_SetConfig+0x1a2>
 8005550:	2b20      	cmp	r3, #32
 8005552:	d814      	bhi.n	800557e <UART_SetConfig+0x1ba>
 8005554:	2b00      	cmp	r3, #0
 8005556:	d002      	beq.n	800555e <UART_SetConfig+0x19a>
 8005558:	2b10      	cmp	r3, #16
 800555a:	d008      	beq.n	800556e <UART_SetConfig+0x1aa>
 800555c:	e00f      	b.n	800557e <UART_SetConfig+0x1ba>
 800555e:	2300      	movs	r3, #0
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005564:	e0ad      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005566:	2302      	movs	r3, #2
 8005568:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800556c:	e0a9      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800556e:	2304      	movs	r3, #4
 8005570:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005574:	e0a5      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005576:	2308      	movs	r3, #8
 8005578:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800557c:	e0a1      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800557e:	2310      	movs	r3, #16
 8005580:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005584:	e09d      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4a      	ldr	r2, [pc, #296]	@ (80056b4 <UART_SetConfig+0x2f0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d125      	bne.n	80055dc <UART_SetConfig+0x218>
 8005590:	4b45      	ldr	r3, [pc, #276]	@ (80056a8 <UART_SetConfig+0x2e4>)
 8005592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005596:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800559a:	2bc0      	cmp	r3, #192	@ 0xc0
 800559c:	d016      	beq.n	80055cc <UART_SetConfig+0x208>
 800559e:	2bc0      	cmp	r3, #192	@ 0xc0
 80055a0:	d818      	bhi.n	80055d4 <UART_SetConfig+0x210>
 80055a2:	2b80      	cmp	r3, #128	@ 0x80
 80055a4:	d00a      	beq.n	80055bc <UART_SetConfig+0x1f8>
 80055a6:	2b80      	cmp	r3, #128	@ 0x80
 80055a8:	d814      	bhi.n	80055d4 <UART_SetConfig+0x210>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <UART_SetConfig+0x1f0>
 80055ae:	2b40      	cmp	r3, #64	@ 0x40
 80055b0:	d008      	beq.n	80055c4 <UART_SetConfig+0x200>
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x210>
 80055b4:	2300      	movs	r3, #0
 80055b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ba:	e082      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055c2:	e07e      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80055c4:	2304      	movs	r3, #4
 80055c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ca:	e07a      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80055cc:	2308      	movs	r3, #8
 80055ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055d2:	e076      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80055d4:	2310      	movs	r3, #16
 80055d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055da:	e072      	b.n	80056c2 <UART_SetConfig+0x2fe>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	@ (80056b8 <UART_SetConfig+0x2f4>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d12a      	bne.n	800563c <UART_SetConfig+0x278>
 80055e6:	4b30      	ldr	r3, [pc, #192]	@ (80056a8 <UART_SetConfig+0x2e4>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f4:	d01a      	beq.n	800562c <UART_SetConfig+0x268>
 80055f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055fa:	d81b      	bhi.n	8005634 <UART_SetConfig+0x270>
 80055fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005600:	d00c      	beq.n	800561c <UART_SetConfig+0x258>
 8005602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005606:	d815      	bhi.n	8005634 <UART_SetConfig+0x270>
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <UART_SetConfig+0x250>
 800560c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005610:	d008      	beq.n	8005624 <UART_SetConfig+0x260>
 8005612:	e00f      	b.n	8005634 <UART_SetConfig+0x270>
 8005614:	2300      	movs	r3, #0
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800561a:	e052      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800561c:	2302      	movs	r3, #2
 800561e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005622:	e04e      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005624:	2304      	movs	r3, #4
 8005626:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800562a:	e04a      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800562c:	2308      	movs	r3, #8
 800562e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005632:	e046      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005634:	2310      	movs	r3, #16
 8005636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800563a:	e042      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a17      	ldr	r2, [pc, #92]	@ (80056a0 <UART_SetConfig+0x2dc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d13a      	bne.n	80056bc <UART_SetConfig+0x2f8>
 8005646:	4b18      	ldr	r3, [pc, #96]	@ (80056a8 <UART_SetConfig+0x2e4>)
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800564c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005650:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005654:	d01a      	beq.n	800568c <UART_SetConfig+0x2c8>
 8005656:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800565a:	d81b      	bhi.n	8005694 <UART_SetConfig+0x2d0>
 800565c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005660:	d00c      	beq.n	800567c <UART_SetConfig+0x2b8>
 8005662:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005666:	d815      	bhi.n	8005694 <UART_SetConfig+0x2d0>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <UART_SetConfig+0x2b0>
 800566c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005670:	d008      	beq.n	8005684 <UART_SetConfig+0x2c0>
 8005672:	e00f      	b.n	8005694 <UART_SetConfig+0x2d0>
 8005674:	2300      	movs	r3, #0
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800567a:	e022      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800567c:	2302      	movs	r3, #2
 800567e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005682:	e01e      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005684:	2304      	movs	r3, #4
 8005686:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800568a:	e01a      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800568c:	2308      	movs	r3, #8
 800568e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005692:	e016      	b.n	80056c2 <UART_SetConfig+0x2fe>
 8005694:	2310      	movs	r3, #16
 8005696:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800569a:	e012      	b.n	80056c2 <UART_SetConfig+0x2fe>
 800569c:	cfff69f3 	.word	0xcfff69f3
 80056a0:	40008000 	.word	0x40008000
 80056a4:	40013800 	.word	0x40013800
 80056a8:	40021000 	.word	0x40021000
 80056ac:	40004400 	.word	0x40004400
 80056b0:	40004800 	.word	0x40004800
 80056b4:	40004c00 	.word	0x40004c00
 80056b8:	40005000 	.word	0x40005000
 80056bc:	2310      	movs	r3, #16
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4aae      	ldr	r2, [pc, #696]	@ (8005980 <UART_SetConfig+0x5bc>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	f040 8097 	bne.w	80057fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d823      	bhi.n	800571e <UART_SetConfig+0x35a>
 80056d6:	a201      	add	r2, pc, #4	@ (adr r2, 80056dc <UART_SetConfig+0x318>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005701 	.word	0x08005701
 80056e0:	0800571f 	.word	0x0800571f
 80056e4:	08005709 	.word	0x08005709
 80056e8:	0800571f 	.word	0x0800571f
 80056ec:	0800570f 	.word	0x0800570f
 80056f0:	0800571f 	.word	0x0800571f
 80056f4:	0800571f 	.word	0x0800571f
 80056f8:	0800571f 	.word	0x0800571f
 80056fc:	08005717 	.word	0x08005717
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005700:	f7fd f840 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8005704:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005706:	e010      	b.n	800572a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005708:	4b9e      	ldr	r3, [pc, #632]	@ (8005984 <UART_SetConfig+0x5c0>)
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800570c:	e00d      	b.n	800572a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800570e:	f7fc ffcb 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8005712:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005714:	e009      	b.n	800572a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005716:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800571c:	e005      	b.n	800572a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005728:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800572a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8130 	beq.w	8005992 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	4a94      	ldr	r2, [pc, #592]	@ (8005988 <UART_SetConfig+0x5c4>)
 8005738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800573c:	461a      	mov	r2, r3
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	fbb3 f3f2 	udiv	r3, r3, r2
 8005744:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	429a      	cmp	r2, r3
 8005754:	d305      	bcc.n	8005762 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	429a      	cmp	r2, r3
 8005760:	d903      	bls.n	800576a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005768:	e113      	b.n	8005992 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	2200      	movs	r2, #0
 800576e:	60bb      	str	r3, [r7, #8]
 8005770:	60fa      	str	r2, [r7, #12]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	4a84      	ldr	r2, [pc, #528]	@ (8005988 <UART_SetConfig+0x5c4>)
 8005778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800577c:	b29b      	uxth	r3, r3
 800577e:	2200      	movs	r2, #0
 8005780:	603b      	str	r3, [r7, #0]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800578c:	f7fa fda0 	bl	80002d0 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4610      	mov	r0, r2
 8005796:	4619      	mov	r1, r3
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	020b      	lsls	r3, r1, #8
 80057a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057a6:	0202      	lsls	r2, r0, #8
 80057a8:	6979      	ldr	r1, [r7, #20]
 80057aa:	6849      	ldr	r1, [r1, #4]
 80057ac:	0849      	lsrs	r1, r1, #1
 80057ae:	2000      	movs	r0, #0
 80057b0:	460c      	mov	r4, r1
 80057b2:	4605      	mov	r5, r0
 80057b4:	eb12 0804 	adds.w	r8, r2, r4
 80057b8:	eb43 0905 	adc.w	r9, r3, r5
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	469a      	mov	sl, r3
 80057c4:	4693      	mov	fp, r2
 80057c6:	4652      	mov	r2, sl
 80057c8:	465b      	mov	r3, fp
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa fd7f 	bl	80002d0 <__aeabi_uldivmod>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4613      	mov	r3, r2
 80057d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057e0:	d308      	bcc.n	80057f4 <UART_SetConfig+0x430>
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e8:	d204      	bcs.n	80057f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	60da      	str	r2, [r3, #12]
 80057f2:	e0ce      	b.n	8005992 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80057f4:	2301      	movs	r3, #1
 80057f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057fa:	e0ca      	b.n	8005992 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005804:	d166      	bne.n	80058d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800580a:	2b08      	cmp	r3, #8
 800580c:	d827      	bhi.n	800585e <UART_SetConfig+0x49a>
 800580e:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <UART_SetConfig+0x450>)
 8005810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005814:	08005839 	.word	0x08005839
 8005818:	08005841 	.word	0x08005841
 800581c:	08005849 	.word	0x08005849
 8005820:	0800585f 	.word	0x0800585f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800585f 	.word	0x0800585f
 800582c:	0800585f 	.word	0x0800585f
 8005830:	0800585f 	.word	0x0800585f
 8005834:	08005857 	.word	0x08005857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fc ffa4 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800583e:	e014      	b.n	800586a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005840:	f7fc ffb6 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8005844:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005846:	e010      	b.n	800586a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005848:	4b4e      	ldr	r3, [pc, #312]	@ (8005984 <UART_SetConfig+0x5c0>)
 800584a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800584c:	e00d      	b.n	800586a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584e:	f7fc ff2b 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8005852:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005854:	e009      	b.n	800586a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800585c:	e005      	b.n	800586a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800586a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8090 	beq.w	8005992 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	4a44      	ldr	r2, [pc, #272]	@ (8005988 <UART_SetConfig+0x5c4>)
 8005878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800587c:	461a      	mov	r2, r3
 800587e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005880:	fbb3 f3f2 	udiv	r3, r3, r2
 8005884:	005a      	lsls	r2, r3, #1
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	085b      	lsrs	r3, r3, #1
 800588c:	441a      	add	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	fbb2 f3f3 	udiv	r3, r2, r3
 8005896:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005898:	6a3b      	ldr	r3, [r7, #32]
 800589a:	2b0f      	cmp	r3, #15
 800589c:	d916      	bls.n	80058cc <UART_SetConfig+0x508>
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058a4:	d212      	bcs.n	80058cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f023 030f 	bic.w	r3, r3, #15
 80058ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	8bfb      	ldrh	r3, [r7, #30]
 80058be:	4313      	orrs	r3, r2
 80058c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	8bfa      	ldrh	r2, [r7, #30]
 80058c8:	60da      	str	r2, [r3, #12]
 80058ca:	e062      	b.n	8005992 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80058d2:	e05e      	b.n	8005992 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d828      	bhi.n	800592e <UART_SetConfig+0x56a>
 80058dc:	a201      	add	r2, pc, #4	@ (adr r2, 80058e4 <UART_SetConfig+0x520>)
 80058de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e2:	bf00      	nop
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005919 	.word	0x08005919
 80058f0:	0800592f 	.word	0x0800592f
 80058f4:	0800591f 	.word	0x0800591f
 80058f8:	0800592f 	.word	0x0800592f
 80058fc:	0800592f 	.word	0x0800592f
 8005900:	0800592f 	.word	0x0800592f
 8005904:	08005927 	.word	0x08005927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005908:	f7fc ff3c 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800590e:	e014      	b.n	800593a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005910:	f7fc ff4e 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8005914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005916:	e010      	b.n	800593a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005918:	4b1a      	ldr	r3, [pc, #104]	@ (8005984 <UART_SetConfig+0x5c0>)
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800591c:	e00d      	b.n	800593a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800591e:	f7fc fec3 	bl	80026a8 <HAL_RCC_GetSysClockFreq>
 8005922:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005924:	e009      	b.n	800593a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800592a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800592c:	e005      	b.n	800593a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005938:	bf00      	nop
    }

    if (pclk != 0U)
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	2b00      	cmp	r3, #0
 800593e:	d028      	beq.n	8005992 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005944:	4a10      	ldr	r2, [pc, #64]	@ (8005988 <UART_SetConfig+0x5c4>)
 8005946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800594a:	461a      	mov	r2, r3
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	441a      	add	r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d910      	bls.n	800598c <UART_SetConfig+0x5c8>
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005970:	d20c      	bcs.n	800598c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	b29a      	uxth	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60da      	str	r2, [r3, #12]
 800597c:	e009      	b.n	8005992 <UART_SetConfig+0x5ce>
 800597e:	bf00      	nop
 8005980:	40008000 	.word	0x40008000
 8005984:	00f42400 	.word	0x00f42400
 8005988:	08006d94 	.word	0x08006d94
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2201      	movs	r2, #1
 8005996:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	2201      	movs	r2, #1
 800599e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2200      	movs	r2, #0
 80059ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3730      	adds	r7, #48	@ 0x30
 80059b6:	46bd      	mov	sp, r7
 80059b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d00a      	beq.n	8005a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2e:	f003 0304 	and.w	r3, r3, #4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00a      	beq.n	8005a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	f003 0310 	and.w	r3, r3, #16
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00a      	beq.n	8005a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01a      	beq.n	8005ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aba:	d10a      	bne.n	8005ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	430a      	orrs	r2, r1
 8005af2:	605a      	str	r2, [r3, #4]
  }
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b098      	sub	sp, #96	@ 0x60
 8005b04:	af02      	add	r7, sp, #8
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b10:	f7fb fd0c 	bl	800152c <HAL_GetTick>
 8005b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0308 	and.w	r3, r3, #8
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d12f      	bne.n	8005b84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f88e 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d022      	beq.n	8005b84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e6      	bne.n	8005b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e063      	b.n	8005c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f003 0304 	and.w	r3, r3, #4
 8005b8e:	2b04      	cmp	r3, #4
 8005b90:	d149      	bne.n	8005c26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b92:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f857 	bl	8005c54 <UART_WaitOnFlagUntilTimeout>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d03c      	beq.n	8005c26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	e853 3f00 	ldrex	r3, [r3]
 8005bb8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bca:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bcc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1e6      	bne.n	8005bac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3308      	adds	r3, #8
 8005be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	e853 3f00 	ldrex	r3, [r3]
 8005bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bfe:	61fa      	str	r2, [r7, #28]
 8005c00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	69fa      	ldr	r2, [r7, #28]
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e5      	bne.n	8005bde <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2220      	movs	r2, #32
 8005c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e012      	b.n	8005c4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3758      	adds	r7, #88	@ 0x58
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	603b      	str	r3, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c64:	e04f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6c:	d04b      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c6e:	f7fb fc5d 	bl	800152c <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d302      	bcc.n	8005c84 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e04e      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0304 	and.w	r3, r3, #4
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d037      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d034      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d031      	beq.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d110      	bne.n	8005cd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f838 	bl	8005d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2208      	movs	r2, #8
 8005cc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e029      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ce0:	d111      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f81e 	bl	8005d2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e00f      	b.n	8005d26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	68ba      	ldr	r2, [r7, #8]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	bf0c      	ite	eq
 8005d16:	2301      	moveq	r3, #1
 8005d18:	2300      	movne	r3, #0
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d0a0      	beq.n	8005c66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b095      	sub	sp, #84	@ 0x54
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d54:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e6      	bne.n	8005d36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d7e:	f023 0301 	bic.w	r3, r3, #1
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3308      	adds	r3, #8
 8005d8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d94:	e841 2300 	strex	r3, r2, [r1]
 8005d98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1e3      	bne.n	8005d68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d118      	bne.n	8005dda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	f023 0310 	bic.w	r3, r3, #16
 8005dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	e841 2300 	strex	r3, r2, [r1]
 8005dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1e6      	bne.n	8005da8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dee:	bf00      	nop
 8005df0:	3754      	adds	r7, #84	@ 0x54
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff fabd 	bl	8005398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005e26:	b480      	push	{r7}
 8005e28:	b08f      	sub	sp, #60	@ 0x3c
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e34:	2b21      	cmp	r3, #33	@ 0x21
 8005e36:	d14c      	bne.n	8005ed2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d132      	bne.n	8005eaa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	e853 3f00 	ldrex	r3, [r3]
 8005e50:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e6      	bne.n	8005e44 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	e853 3f00 	ldrex	r3, [r3]
 8005e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e94:	61bb      	str	r3, [r7, #24]
 8005e96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e98:	6979      	ldr	r1, [r7, #20]
 8005e9a:	69ba      	ldr	r2, [r7, #24]
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1e6      	bne.n	8005e76 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8005ea8:	e013      	b.n	8005ed2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eae:	781a      	ldrb	r2, [r3, #0]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005ed2:	bf00      	nop
 8005ed4:	373c      	adds	r7, #60	@ 0x3c
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b091      	sub	sp, #68	@ 0x44
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eec:	2b21      	cmp	r3, #33	@ 0x21
 8005eee:	d151      	bne.n	8005f94 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d132      	bne.n	8005f62 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	e853 3f00 	ldrex	r3, [r3]
 8005f08:	623b      	str	r3, [r7, #32]
   return(result);
 8005f0a:	6a3b      	ldr	r3, [r7, #32]
 8005f0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f1a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e6      	bne.n	8005efc <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f4c:	61fb      	str	r3, [r7, #28]
 8005f4e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	617b      	str	r3, [r7, #20]
   return(result);
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8005f60:	e018      	b.n	8005f94 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8005f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f76:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f7c:	1c9a      	adds	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	b29a      	uxth	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8005f94:	bf00      	nop
 8005f96:	3744      	adds	r7, #68	@ 0x44
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b091      	sub	sp, #68	@ 0x44
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fae:	2b21      	cmp	r3, #33	@ 0x21
 8005fb0:	d160      	bne.n	8006074 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8005fb8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005fba:	e057      	b.n	800606c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d133      	bne.n	8006030 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fd8:	6a3b      	ldr	r3, [r7, #32]
 8005fda:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3308      	adds	r3, #8
 8005fe6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005fe8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e5      	bne.n	8005fc8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	60fb      	str	r3, [r7, #12]
   return(result);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006010:	637b      	str	r3, [r7, #52]	@ 0x34
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	461a      	mov	r2, r3
 8006018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	69fa      	ldr	r2, [r7, #28]
 8006022:	e841 2300 	strex	r3, r2, [r1]
 8006026:	617b      	str	r3, [r7, #20]
   return(result);
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d1e6      	bne.n	8005ffc <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800602e:	e021      	b.n	8006074 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603a:	2b00      	cmp	r3, #0
 800603c:	d013      	beq.n	8006066 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006042:	781a      	ldrb	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800605a:	b29b      	uxth	r3, r3
 800605c:	3b01      	subs	r3, #1
 800605e:	b29a      	uxth	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006066:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006068:	3b01      	subs	r3, #1
 800606a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800606c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1a4      	bne.n	8005fbc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8006072:	e7ff      	b.n	8006074 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8006074:	bf00      	nop
 8006076:	3744      	adds	r7, #68	@ 0x44
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b091      	sub	sp, #68	@ 0x44
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608e:	2b21      	cmp	r3, #33	@ 0x21
 8006090:	d165      	bne.n	800615e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8006098:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800609a:	e05c      	b.n	8006156 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d133      	bne.n	8006110 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3308      	adds	r3, #8
 80060ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80060be:	637b      	str	r3, [r7, #52]	@ 0x34
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3308      	adds	r3, #8
 80060c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80060c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060d0:	e841 2300 	strex	r3, r2, [r1]
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1e5      	bne.n	80060a8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	e853 3f00 	ldrex	r3, [r3]
 80060e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fa:	61bb      	str	r3, [r7, #24]
 80060fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fe:	6979      	ldr	r1, [r7, #20]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	e841 2300 	strex	r3, r2, [r1]
 8006106:	613b      	str	r3, [r7, #16]
   return(result);
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1e6      	bne.n	80060dc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800610e:	e026      	b.n	800615e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d018      	beq.n	8006150 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006122:	63bb      	str	r3, [r7, #56]	@ 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006132:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006138:	1c9a      	adds	r2, r3, #2
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006150:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006152:	3b01      	subs	r3, #1
 8006154:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006156:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006158:	2b00      	cmp	r3, #0
 800615a:	d19f      	bne.n	800609c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800615c:	e7ff      	b.n	800615e <UART_TxISR_16BIT_FIFOEN+0xde>
 800615e:	bf00      	nop
 8006160:	3744      	adds	r7, #68	@ 0x44
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr

0800616a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800616a:	b580      	push	{r7, lr}
 800616c:	b088      	sub	sp, #32
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	e853 3f00 	ldrex	r3, [r3]
 800617e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006186:	61fb      	str	r3, [r7, #28]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006194:	6979      	ldr	r1, [r7, #20]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	e841 2300 	strex	r3, r2, [r1]
 800619c:	613b      	str	r3, [r7, #16]
   return(result);
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1e6      	bne.n	8006172 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2220      	movs	r2, #32
 80061a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f8e6 	bl	8005384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b8:	bf00      	nop
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UARTEx_DisableFifoMode+0x16>
 800620e:	2302      	movs	r3, #2
 8006210:	e027      	b.n	8006262 <HAL_UARTEx_DisableFifoMode+0x66>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2224      	movs	r2, #36	@ 0x24
 800621e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006240:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2220      	movs	r2, #32
 8006254:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b084      	sub	sp, #16
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006282:	2302      	movs	r3, #2
 8006284:	e02d      	b.n	80062e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2224      	movs	r2, #36	@ 0x24
 8006292:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f850 	bl	8006368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b084      	sub	sp, #16
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d101      	bne.n	8006302 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062fe:	2302      	movs	r3, #2
 8006300:	e02d      	b.n	800635e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2224      	movs	r2, #36	@ 0x24
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0201 	bic.w	r2, r2, #1
 8006328:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f812 	bl	8006368 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006374:	2b00      	cmp	r3, #0
 8006376:	d108      	bne.n	800638a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006388:	e031      	b.n	80063ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800638a:	2308      	movs	r3, #8
 800638c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800638e:	2308      	movs	r3, #8
 8006390:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	0e5b      	lsrs	r3, r3, #25
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	0f5b      	lsrs	r3, r3, #29
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	f003 0307 	and.w	r3, r3, #7
 80063b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063b2:	7bbb      	ldrb	r3, [r7, #14]
 80063b4:	7b3a      	ldrb	r2, [r7, #12]
 80063b6:	4911      	ldr	r1, [pc, #68]	@ (80063fc <UARTEx_SetNbDataToProcess+0x94>)
 80063b8:	5c8a      	ldrb	r2, [r1, r2]
 80063ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063be:	7b3a      	ldrb	r2, [r7, #12]
 80063c0:	490f      	ldr	r1, [pc, #60]	@ (8006400 <UARTEx_SetNbDataToProcess+0x98>)
 80063c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
 80063d2:	7b7a      	ldrb	r2, [r7, #13]
 80063d4:	4909      	ldr	r1, [pc, #36]	@ (80063fc <UARTEx_SetNbDataToProcess+0x94>)
 80063d6:	5c8a      	ldrb	r2, [r1, r2]
 80063d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063dc:	7b7a      	ldrb	r2, [r7, #13]
 80063de:	4908      	ldr	r1, [pc, #32]	@ (8006400 <UARTEx_SetNbDataToProcess+0x98>)
 80063e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e6:	b29a      	uxth	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	08006dac 	.word	0x08006dac
 8006400:	08006db4 	.word	0x08006db4

08006404 <siprintf>:
 8006404:	b40e      	push	{r1, r2, r3}
 8006406:	b500      	push	{lr}
 8006408:	b09c      	sub	sp, #112	@ 0x70
 800640a:	ab1d      	add	r3, sp, #116	@ 0x74
 800640c:	9002      	str	r0, [sp, #8]
 800640e:	9006      	str	r0, [sp, #24]
 8006410:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006414:	4809      	ldr	r0, [pc, #36]	@ (800643c <siprintf+0x38>)
 8006416:	9107      	str	r1, [sp, #28]
 8006418:	9104      	str	r1, [sp, #16]
 800641a:	4909      	ldr	r1, [pc, #36]	@ (8006440 <siprintf+0x3c>)
 800641c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006420:	9105      	str	r1, [sp, #20]
 8006422:	6800      	ldr	r0, [r0, #0]
 8006424:	9301      	str	r3, [sp, #4]
 8006426:	a902      	add	r1, sp, #8
 8006428:	f000 f994 	bl	8006754 <_svfiprintf_r>
 800642c:	9b02      	ldr	r3, [sp, #8]
 800642e:	2200      	movs	r2, #0
 8006430:	701a      	strb	r2, [r3, #0]
 8006432:	b01c      	add	sp, #112	@ 0x70
 8006434:	f85d eb04 	ldr.w	lr, [sp], #4
 8006438:	b003      	add	sp, #12
 800643a:	4770      	bx	lr
 800643c:	2000000c 	.word	0x2000000c
 8006440:	ffff0208 	.word	0xffff0208

08006444 <memset>:
 8006444:	4402      	add	r2, r0
 8006446:	4603      	mov	r3, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <__errno>:
 8006454:	4b01      	ldr	r3, [pc, #4]	@ (800645c <__errno+0x8>)
 8006456:	6818      	ldr	r0, [r3, #0]
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	2000000c 	.word	0x2000000c

08006460 <__libc_init_array>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	4d0d      	ldr	r5, [pc, #52]	@ (8006498 <__libc_init_array+0x38>)
 8006464:	4c0d      	ldr	r4, [pc, #52]	@ (800649c <__libc_init_array+0x3c>)
 8006466:	1b64      	subs	r4, r4, r5
 8006468:	10a4      	asrs	r4, r4, #2
 800646a:	2600      	movs	r6, #0
 800646c:	42a6      	cmp	r6, r4
 800646e:	d109      	bne.n	8006484 <__libc_init_array+0x24>
 8006470:	4d0b      	ldr	r5, [pc, #44]	@ (80064a0 <__libc_init_array+0x40>)
 8006472:	4c0c      	ldr	r4, [pc, #48]	@ (80064a4 <__libc_init_array+0x44>)
 8006474:	f000 fc66 	bl	8006d44 <_init>
 8006478:	1b64      	subs	r4, r4, r5
 800647a:	10a4      	asrs	r4, r4, #2
 800647c:	2600      	movs	r6, #0
 800647e:	42a6      	cmp	r6, r4
 8006480:	d105      	bne.n	800648e <__libc_init_array+0x2e>
 8006482:	bd70      	pop	{r4, r5, r6, pc}
 8006484:	f855 3b04 	ldr.w	r3, [r5], #4
 8006488:	4798      	blx	r3
 800648a:	3601      	adds	r6, #1
 800648c:	e7ee      	b.n	800646c <__libc_init_array+0xc>
 800648e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006492:	4798      	blx	r3
 8006494:	3601      	adds	r6, #1
 8006496:	e7f2      	b.n	800647e <__libc_init_array+0x1e>
 8006498:	08006df8 	.word	0x08006df8
 800649c:	08006df8 	.word	0x08006df8
 80064a0:	08006df8 	.word	0x08006df8
 80064a4:	08006dfc 	.word	0x08006dfc

080064a8 <__retarget_lock_acquire_recursive>:
 80064a8:	4770      	bx	lr

080064aa <__retarget_lock_release_recursive>:
 80064aa:	4770      	bx	lr

080064ac <_free_r>:
 80064ac:	b538      	push	{r3, r4, r5, lr}
 80064ae:	4605      	mov	r5, r0
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d041      	beq.n	8006538 <_free_r+0x8c>
 80064b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064b8:	1f0c      	subs	r4, r1, #4
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	bfb8      	it	lt
 80064be:	18e4      	addlt	r4, r4, r3
 80064c0:	f000 f8e0 	bl	8006684 <__malloc_lock>
 80064c4:	4a1d      	ldr	r2, [pc, #116]	@ (800653c <_free_r+0x90>)
 80064c6:	6813      	ldr	r3, [r2, #0]
 80064c8:	b933      	cbnz	r3, 80064d8 <_free_r+0x2c>
 80064ca:	6063      	str	r3, [r4, #4]
 80064cc:	6014      	str	r4, [r2, #0]
 80064ce:	4628      	mov	r0, r5
 80064d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064d4:	f000 b8dc 	b.w	8006690 <__malloc_unlock>
 80064d8:	42a3      	cmp	r3, r4
 80064da:	d908      	bls.n	80064ee <_free_r+0x42>
 80064dc:	6820      	ldr	r0, [r4, #0]
 80064de:	1821      	adds	r1, r4, r0
 80064e0:	428b      	cmp	r3, r1
 80064e2:	bf01      	itttt	eq
 80064e4:	6819      	ldreq	r1, [r3, #0]
 80064e6:	685b      	ldreq	r3, [r3, #4]
 80064e8:	1809      	addeq	r1, r1, r0
 80064ea:	6021      	streq	r1, [r4, #0]
 80064ec:	e7ed      	b.n	80064ca <_free_r+0x1e>
 80064ee:	461a      	mov	r2, r3
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	b10b      	cbz	r3, 80064f8 <_free_r+0x4c>
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	d9fa      	bls.n	80064ee <_free_r+0x42>
 80064f8:	6811      	ldr	r1, [r2, #0]
 80064fa:	1850      	adds	r0, r2, r1
 80064fc:	42a0      	cmp	r0, r4
 80064fe:	d10b      	bne.n	8006518 <_free_r+0x6c>
 8006500:	6820      	ldr	r0, [r4, #0]
 8006502:	4401      	add	r1, r0
 8006504:	1850      	adds	r0, r2, r1
 8006506:	4283      	cmp	r3, r0
 8006508:	6011      	str	r1, [r2, #0]
 800650a:	d1e0      	bne.n	80064ce <_free_r+0x22>
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	6053      	str	r3, [r2, #4]
 8006512:	4408      	add	r0, r1
 8006514:	6010      	str	r0, [r2, #0]
 8006516:	e7da      	b.n	80064ce <_free_r+0x22>
 8006518:	d902      	bls.n	8006520 <_free_r+0x74>
 800651a:	230c      	movs	r3, #12
 800651c:	602b      	str	r3, [r5, #0]
 800651e:	e7d6      	b.n	80064ce <_free_r+0x22>
 8006520:	6820      	ldr	r0, [r4, #0]
 8006522:	1821      	adds	r1, r4, r0
 8006524:	428b      	cmp	r3, r1
 8006526:	bf04      	itt	eq
 8006528:	6819      	ldreq	r1, [r3, #0]
 800652a:	685b      	ldreq	r3, [r3, #4]
 800652c:	6063      	str	r3, [r4, #4]
 800652e:	bf04      	itt	eq
 8006530:	1809      	addeq	r1, r1, r0
 8006532:	6021      	streq	r1, [r4, #0]
 8006534:	6054      	str	r4, [r2, #4]
 8006536:	e7ca      	b.n	80064ce <_free_r+0x22>
 8006538:	bd38      	pop	{r3, r4, r5, pc}
 800653a:	bf00      	nop
 800653c:	200003f8 	.word	0x200003f8

08006540 <sbrk_aligned>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	4e0f      	ldr	r6, [pc, #60]	@ (8006580 <sbrk_aligned+0x40>)
 8006544:	460c      	mov	r4, r1
 8006546:	6831      	ldr	r1, [r6, #0]
 8006548:	4605      	mov	r5, r0
 800654a:	b911      	cbnz	r1, 8006552 <sbrk_aligned+0x12>
 800654c:	f000 fba6 	bl	8006c9c <_sbrk_r>
 8006550:	6030      	str	r0, [r6, #0]
 8006552:	4621      	mov	r1, r4
 8006554:	4628      	mov	r0, r5
 8006556:	f000 fba1 	bl	8006c9c <_sbrk_r>
 800655a:	1c43      	adds	r3, r0, #1
 800655c:	d103      	bne.n	8006566 <sbrk_aligned+0x26>
 800655e:	f04f 34ff 	mov.w	r4, #4294967295
 8006562:	4620      	mov	r0, r4
 8006564:	bd70      	pop	{r4, r5, r6, pc}
 8006566:	1cc4      	adds	r4, r0, #3
 8006568:	f024 0403 	bic.w	r4, r4, #3
 800656c:	42a0      	cmp	r0, r4
 800656e:	d0f8      	beq.n	8006562 <sbrk_aligned+0x22>
 8006570:	1a21      	subs	r1, r4, r0
 8006572:	4628      	mov	r0, r5
 8006574:	f000 fb92 	bl	8006c9c <_sbrk_r>
 8006578:	3001      	adds	r0, #1
 800657a:	d1f2      	bne.n	8006562 <sbrk_aligned+0x22>
 800657c:	e7ef      	b.n	800655e <sbrk_aligned+0x1e>
 800657e:	bf00      	nop
 8006580:	200003f4 	.word	0x200003f4

08006584 <_malloc_r>:
 8006584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006588:	1ccd      	adds	r5, r1, #3
 800658a:	f025 0503 	bic.w	r5, r5, #3
 800658e:	3508      	adds	r5, #8
 8006590:	2d0c      	cmp	r5, #12
 8006592:	bf38      	it	cc
 8006594:	250c      	movcc	r5, #12
 8006596:	2d00      	cmp	r5, #0
 8006598:	4606      	mov	r6, r0
 800659a:	db01      	blt.n	80065a0 <_malloc_r+0x1c>
 800659c:	42a9      	cmp	r1, r5
 800659e:	d904      	bls.n	80065aa <_malloc_r+0x26>
 80065a0:	230c      	movs	r3, #12
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	2000      	movs	r0, #0
 80065a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006680 <_malloc_r+0xfc>
 80065ae:	f000 f869 	bl	8006684 <__malloc_lock>
 80065b2:	f8d8 3000 	ldr.w	r3, [r8]
 80065b6:	461c      	mov	r4, r3
 80065b8:	bb44      	cbnz	r4, 800660c <_malloc_r+0x88>
 80065ba:	4629      	mov	r1, r5
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff ffbf 	bl	8006540 <sbrk_aligned>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	4604      	mov	r4, r0
 80065c6:	d158      	bne.n	800667a <_malloc_r+0xf6>
 80065c8:	f8d8 4000 	ldr.w	r4, [r8]
 80065cc:	4627      	mov	r7, r4
 80065ce:	2f00      	cmp	r7, #0
 80065d0:	d143      	bne.n	800665a <_malloc_r+0xd6>
 80065d2:	2c00      	cmp	r4, #0
 80065d4:	d04b      	beq.n	800666e <_malloc_r+0xea>
 80065d6:	6823      	ldr	r3, [r4, #0]
 80065d8:	4639      	mov	r1, r7
 80065da:	4630      	mov	r0, r6
 80065dc:	eb04 0903 	add.w	r9, r4, r3
 80065e0:	f000 fb5c 	bl	8006c9c <_sbrk_r>
 80065e4:	4581      	cmp	r9, r0
 80065e6:	d142      	bne.n	800666e <_malloc_r+0xea>
 80065e8:	6821      	ldr	r1, [r4, #0]
 80065ea:	1a6d      	subs	r5, r5, r1
 80065ec:	4629      	mov	r1, r5
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff ffa6 	bl	8006540 <sbrk_aligned>
 80065f4:	3001      	adds	r0, #1
 80065f6:	d03a      	beq.n	800666e <_malloc_r+0xea>
 80065f8:	6823      	ldr	r3, [r4, #0]
 80065fa:	442b      	add	r3, r5
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	f8d8 3000 	ldr.w	r3, [r8]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	bb62      	cbnz	r2, 8006660 <_malloc_r+0xdc>
 8006606:	f8c8 7000 	str.w	r7, [r8]
 800660a:	e00f      	b.n	800662c <_malloc_r+0xa8>
 800660c:	6822      	ldr	r2, [r4, #0]
 800660e:	1b52      	subs	r2, r2, r5
 8006610:	d420      	bmi.n	8006654 <_malloc_r+0xd0>
 8006612:	2a0b      	cmp	r2, #11
 8006614:	d917      	bls.n	8006646 <_malloc_r+0xc2>
 8006616:	1961      	adds	r1, r4, r5
 8006618:	42a3      	cmp	r3, r4
 800661a:	6025      	str	r5, [r4, #0]
 800661c:	bf18      	it	ne
 800661e:	6059      	strne	r1, [r3, #4]
 8006620:	6863      	ldr	r3, [r4, #4]
 8006622:	bf08      	it	eq
 8006624:	f8c8 1000 	streq.w	r1, [r8]
 8006628:	5162      	str	r2, [r4, r5]
 800662a:	604b      	str	r3, [r1, #4]
 800662c:	4630      	mov	r0, r6
 800662e:	f000 f82f 	bl	8006690 <__malloc_unlock>
 8006632:	f104 000b 	add.w	r0, r4, #11
 8006636:	1d23      	adds	r3, r4, #4
 8006638:	f020 0007 	bic.w	r0, r0, #7
 800663c:	1ac2      	subs	r2, r0, r3
 800663e:	bf1c      	itt	ne
 8006640:	1a1b      	subne	r3, r3, r0
 8006642:	50a3      	strne	r3, [r4, r2]
 8006644:	e7af      	b.n	80065a6 <_malloc_r+0x22>
 8006646:	6862      	ldr	r2, [r4, #4]
 8006648:	42a3      	cmp	r3, r4
 800664a:	bf0c      	ite	eq
 800664c:	f8c8 2000 	streq.w	r2, [r8]
 8006650:	605a      	strne	r2, [r3, #4]
 8006652:	e7eb      	b.n	800662c <_malloc_r+0xa8>
 8006654:	4623      	mov	r3, r4
 8006656:	6864      	ldr	r4, [r4, #4]
 8006658:	e7ae      	b.n	80065b8 <_malloc_r+0x34>
 800665a:	463c      	mov	r4, r7
 800665c:	687f      	ldr	r7, [r7, #4]
 800665e:	e7b6      	b.n	80065ce <_malloc_r+0x4a>
 8006660:	461a      	mov	r2, r3
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	42a3      	cmp	r3, r4
 8006666:	d1fb      	bne.n	8006660 <_malloc_r+0xdc>
 8006668:	2300      	movs	r3, #0
 800666a:	6053      	str	r3, [r2, #4]
 800666c:	e7de      	b.n	800662c <_malloc_r+0xa8>
 800666e:	230c      	movs	r3, #12
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	4630      	mov	r0, r6
 8006674:	f000 f80c 	bl	8006690 <__malloc_unlock>
 8006678:	e794      	b.n	80065a4 <_malloc_r+0x20>
 800667a:	6005      	str	r5, [r0, #0]
 800667c:	e7d6      	b.n	800662c <_malloc_r+0xa8>
 800667e:	bf00      	nop
 8006680:	200003f8 	.word	0x200003f8

08006684 <__malloc_lock>:
 8006684:	4801      	ldr	r0, [pc, #4]	@ (800668c <__malloc_lock+0x8>)
 8006686:	f7ff bf0f 	b.w	80064a8 <__retarget_lock_acquire_recursive>
 800668a:	bf00      	nop
 800668c:	200003f0 	.word	0x200003f0

08006690 <__malloc_unlock>:
 8006690:	4801      	ldr	r0, [pc, #4]	@ (8006698 <__malloc_unlock+0x8>)
 8006692:	f7ff bf0a 	b.w	80064aa <__retarget_lock_release_recursive>
 8006696:	bf00      	nop
 8006698:	200003f0 	.word	0x200003f0

0800669c <__ssputs_r>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	688e      	ldr	r6, [r1, #8]
 80066a2:	461f      	mov	r7, r3
 80066a4:	42be      	cmp	r6, r7
 80066a6:	680b      	ldr	r3, [r1, #0]
 80066a8:	4682      	mov	sl, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	4690      	mov	r8, r2
 80066ae:	d82d      	bhi.n	800670c <__ssputs_r+0x70>
 80066b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80066b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80066b8:	d026      	beq.n	8006708 <__ssputs_r+0x6c>
 80066ba:	6965      	ldr	r5, [r4, #20]
 80066bc:	6909      	ldr	r1, [r1, #16]
 80066be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80066c2:	eba3 0901 	sub.w	r9, r3, r1
 80066c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80066ca:	1c7b      	adds	r3, r7, #1
 80066cc:	444b      	add	r3, r9
 80066ce:	106d      	asrs	r5, r5, #1
 80066d0:	429d      	cmp	r5, r3
 80066d2:	bf38      	it	cc
 80066d4:	461d      	movcc	r5, r3
 80066d6:	0553      	lsls	r3, r2, #21
 80066d8:	d527      	bpl.n	800672a <__ssputs_r+0x8e>
 80066da:	4629      	mov	r1, r5
 80066dc:	f7ff ff52 	bl	8006584 <_malloc_r>
 80066e0:	4606      	mov	r6, r0
 80066e2:	b360      	cbz	r0, 800673e <__ssputs_r+0xa2>
 80066e4:	6921      	ldr	r1, [r4, #16]
 80066e6:	464a      	mov	r2, r9
 80066e8:	f000 fae8 	bl	8006cbc <memcpy>
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80066f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066f6:	81a3      	strh	r3, [r4, #12]
 80066f8:	6126      	str	r6, [r4, #16]
 80066fa:	6165      	str	r5, [r4, #20]
 80066fc:	444e      	add	r6, r9
 80066fe:	eba5 0509 	sub.w	r5, r5, r9
 8006702:	6026      	str	r6, [r4, #0]
 8006704:	60a5      	str	r5, [r4, #8]
 8006706:	463e      	mov	r6, r7
 8006708:	42be      	cmp	r6, r7
 800670a:	d900      	bls.n	800670e <__ssputs_r+0x72>
 800670c:	463e      	mov	r6, r7
 800670e:	6820      	ldr	r0, [r4, #0]
 8006710:	4632      	mov	r2, r6
 8006712:	4641      	mov	r1, r8
 8006714:	f000 faa8 	bl	8006c68 <memmove>
 8006718:	68a3      	ldr	r3, [r4, #8]
 800671a:	1b9b      	subs	r3, r3, r6
 800671c:	60a3      	str	r3, [r4, #8]
 800671e:	6823      	ldr	r3, [r4, #0]
 8006720:	4433      	add	r3, r6
 8006722:	6023      	str	r3, [r4, #0]
 8006724:	2000      	movs	r0, #0
 8006726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672a:	462a      	mov	r2, r5
 800672c:	f000 fad4 	bl	8006cd8 <_realloc_r>
 8006730:	4606      	mov	r6, r0
 8006732:	2800      	cmp	r0, #0
 8006734:	d1e0      	bne.n	80066f8 <__ssputs_r+0x5c>
 8006736:	6921      	ldr	r1, [r4, #16]
 8006738:	4650      	mov	r0, sl
 800673a:	f7ff feb7 	bl	80064ac <_free_r>
 800673e:	230c      	movs	r3, #12
 8006740:	f8ca 3000 	str.w	r3, [sl]
 8006744:	89a3      	ldrh	r3, [r4, #12]
 8006746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800674a:	81a3      	strh	r3, [r4, #12]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e7e9      	b.n	8006726 <__ssputs_r+0x8a>
	...

08006754 <_svfiprintf_r>:
 8006754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006758:	4698      	mov	r8, r3
 800675a:	898b      	ldrh	r3, [r1, #12]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	b09d      	sub	sp, #116	@ 0x74
 8006760:	4607      	mov	r7, r0
 8006762:	460d      	mov	r5, r1
 8006764:	4614      	mov	r4, r2
 8006766:	d510      	bpl.n	800678a <_svfiprintf_r+0x36>
 8006768:	690b      	ldr	r3, [r1, #16]
 800676a:	b973      	cbnz	r3, 800678a <_svfiprintf_r+0x36>
 800676c:	2140      	movs	r1, #64	@ 0x40
 800676e:	f7ff ff09 	bl	8006584 <_malloc_r>
 8006772:	6028      	str	r0, [r5, #0]
 8006774:	6128      	str	r0, [r5, #16]
 8006776:	b930      	cbnz	r0, 8006786 <_svfiprintf_r+0x32>
 8006778:	230c      	movs	r3, #12
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	f04f 30ff 	mov.w	r0, #4294967295
 8006780:	b01d      	add	sp, #116	@ 0x74
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006786:	2340      	movs	r3, #64	@ 0x40
 8006788:	616b      	str	r3, [r5, #20]
 800678a:	2300      	movs	r3, #0
 800678c:	9309      	str	r3, [sp, #36]	@ 0x24
 800678e:	2320      	movs	r3, #32
 8006790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006794:	f8cd 800c 	str.w	r8, [sp, #12]
 8006798:	2330      	movs	r3, #48	@ 0x30
 800679a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006938 <_svfiprintf_r+0x1e4>
 800679e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80067a2:	f04f 0901 	mov.w	r9, #1
 80067a6:	4623      	mov	r3, r4
 80067a8:	469a      	mov	sl, r3
 80067aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067ae:	b10a      	cbz	r2, 80067b4 <_svfiprintf_r+0x60>
 80067b0:	2a25      	cmp	r2, #37	@ 0x25
 80067b2:	d1f9      	bne.n	80067a8 <_svfiprintf_r+0x54>
 80067b4:	ebba 0b04 	subs.w	fp, sl, r4
 80067b8:	d00b      	beq.n	80067d2 <_svfiprintf_r+0x7e>
 80067ba:	465b      	mov	r3, fp
 80067bc:	4622      	mov	r2, r4
 80067be:	4629      	mov	r1, r5
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff ff6b 	bl	800669c <__ssputs_r>
 80067c6:	3001      	adds	r0, #1
 80067c8:	f000 80a7 	beq.w	800691a <_svfiprintf_r+0x1c6>
 80067cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067ce:	445a      	add	r2, fp
 80067d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80067d2:	f89a 3000 	ldrb.w	r3, [sl]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 809f 	beq.w	800691a <_svfiprintf_r+0x1c6>
 80067dc:	2300      	movs	r3, #0
 80067de:	f04f 32ff 	mov.w	r2, #4294967295
 80067e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067e6:	f10a 0a01 	add.w	sl, sl, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	9307      	str	r3, [sp, #28]
 80067ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80067f4:	4654      	mov	r4, sl
 80067f6:	2205      	movs	r2, #5
 80067f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067fc:	484e      	ldr	r0, [pc, #312]	@ (8006938 <_svfiprintf_r+0x1e4>)
 80067fe:	f7f9 fd17 	bl	8000230 <memchr>
 8006802:	9a04      	ldr	r2, [sp, #16]
 8006804:	b9d8      	cbnz	r0, 800683e <_svfiprintf_r+0xea>
 8006806:	06d0      	lsls	r0, r2, #27
 8006808:	bf44      	itt	mi
 800680a:	2320      	movmi	r3, #32
 800680c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006810:	0711      	lsls	r1, r2, #28
 8006812:	bf44      	itt	mi
 8006814:	232b      	movmi	r3, #43	@ 0x2b
 8006816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800681a:	f89a 3000 	ldrb.w	r3, [sl]
 800681e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006820:	d015      	beq.n	800684e <_svfiprintf_r+0xfa>
 8006822:	9a07      	ldr	r2, [sp, #28]
 8006824:	4654      	mov	r4, sl
 8006826:	2000      	movs	r0, #0
 8006828:	f04f 0c0a 	mov.w	ip, #10
 800682c:	4621      	mov	r1, r4
 800682e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006832:	3b30      	subs	r3, #48	@ 0x30
 8006834:	2b09      	cmp	r3, #9
 8006836:	d94b      	bls.n	80068d0 <_svfiprintf_r+0x17c>
 8006838:	b1b0      	cbz	r0, 8006868 <_svfiprintf_r+0x114>
 800683a:	9207      	str	r2, [sp, #28]
 800683c:	e014      	b.n	8006868 <_svfiprintf_r+0x114>
 800683e:	eba0 0308 	sub.w	r3, r0, r8
 8006842:	fa09 f303 	lsl.w	r3, r9, r3
 8006846:	4313      	orrs	r3, r2
 8006848:	9304      	str	r3, [sp, #16]
 800684a:	46a2      	mov	sl, r4
 800684c:	e7d2      	b.n	80067f4 <_svfiprintf_r+0xa0>
 800684e:	9b03      	ldr	r3, [sp, #12]
 8006850:	1d19      	adds	r1, r3, #4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	9103      	str	r1, [sp, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	bfbb      	ittet	lt
 800685a:	425b      	neglt	r3, r3
 800685c:	f042 0202 	orrlt.w	r2, r2, #2
 8006860:	9307      	strge	r3, [sp, #28]
 8006862:	9307      	strlt	r3, [sp, #28]
 8006864:	bfb8      	it	lt
 8006866:	9204      	strlt	r2, [sp, #16]
 8006868:	7823      	ldrb	r3, [r4, #0]
 800686a:	2b2e      	cmp	r3, #46	@ 0x2e
 800686c:	d10a      	bne.n	8006884 <_svfiprintf_r+0x130>
 800686e:	7863      	ldrb	r3, [r4, #1]
 8006870:	2b2a      	cmp	r3, #42	@ 0x2a
 8006872:	d132      	bne.n	80068da <_svfiprintf_r+0x186>
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	1d1a      	adds	r2, r3, #4
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	9203      	str	r2, [sp, #12]
 800687c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006880:	3402      	adds	r4, #2
 8006882:	9305      	str	r3, [sp, #20]
 8006884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006948 <_svfiprintf_r+0x1f4>
 8006888:	7821      	ldrb	r1, [r4, #0]
 800688a:	2203      	movs	r2, #3
 800688c:	4650      	mov	r0, sl
 800688e:	f7f9 fccf 	bl	8000230 <memchr>
 8006892:	b138      	cbz	r0, 80068a4 <_svfiprintf_r+0x150>
 8006894:	9b04      	ldr	r3, [sp, #16]
 8006896:	eba0 000a 	sub.w	r0, r0, sl
 800689a:	2240      	movs	r2, #64	@ 0x40
 800689c:	4082      	lsls	r2, r0
 800689e:	4313      	orrs	r3, r2
 80068a0:	3401      	adds	r4, #1
 80068a2:	9304      	str	r3, [sp, #16]
 80068a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068a8:	4824      	ldr	r0, [pc, #144]	@ (800693c <_svfiprintf_r+0x1e8>)
 80068aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80068ae:	2206      	movs	r2, #6
 80068b0:	f7f9 fcbe 	bl	8000230 <memchr>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	d036      	beq.n	8006926 <_svfiprintf_r+0x1d2>
 80068b8:	4b21      	ldr	r3, [pc, #132]	@ (8006940 <_svfiprintf_r+0x1ec>)
 80068ba:	bb1b      	cbnz	r3, 8006904 <_svfiprintf_r+0x1b0>
 80068bc:	9b03      	ldr	r3, [sp, #12]
 80068be:	3307      	adds	r3, #7
 80068c0:	f023 0307 	bic.w	r3, r3, #7
 80068c4:	3308      	adds	r3, #8
 80068c6:	9303      	str	r3, [sp, #12]
 80068c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ca:	4433      	add	r3, r6
 80068cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80068ce:	e76a      	b.n	80067a6 <_svfiprintf_r+0x52>
 80068d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068d4:	460c      	mov	r4, r1
 80068d6:	2001      	movs	r0, #1
 80068d8:	e7a8      	b.n	800682c <_svfiprintf_r+0xd8>
 80068da:	2300      	movs	r3, #0
 80068dc:	3401      	adds	r4, #1
 80068de:	9305      	str	r3, [sp, #20]
 80068e0:	4619      	mov	r1, r3
 80068e2:	f04f 0c0a 	mov.w	ip, #10
 80068e6:	4620      	mov	r0, r4
 80068e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068ec:	3a30      	subs	r2, #48	@ 0x30
 80068ee:	2a09      	cmp	r2, #9
 80068f0:	d903      	bls.n	80068fa <_svfiprintf_r+0x1a6>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0c6      	beq.n	8006884 <_svfiprintf_r+0x130>
 80068f6:	9105      	str	r1, [sp, #20]
 80068f8:	e7c4      	b.n	8006884 <_svfiprintf_r+0x130>
 80068fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80068fe:	4604      	mov	r4, r0
 8006900:	2301      	movs	r3, #1
 8006902:	e7f0      	b.n	80068e6 <_svfiprintf_r+0x192>
 8006904:	ab03      	add	r3, sp, #12
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	462a      	mov	r2, r5
 800690a:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <_svfiprintf_r+0x1f0>)
 800690c:	a904      	add	r1, sp, #16
 800690e:	4638      	mov	r0, r7
 8006910:	f3af 8000 	nop.w
 8006914:	1c42      	adds	r2, r0, #1
 8006916:	4606      	mov	r6, r0
 8006918:	d1d6      	bne.n	80068c8 <_svfiprintf_r+0x174>
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	065b      	lsls	r3, r3, #25
 800691e:	f53f af2d 	bmi.w	800677c <_svfiprintf_r+0x28>
 8006922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006924:	e72c      	b.n	8006780 <_svfiprintf_r+0x2c>
 8006926:	ab03      	add	r3, sp, #12
 8006928:	9300      	str	r3, [sp, #0]
 800692a:	462a      	mov	r2, r5
 800692c:	4b05      	ldr	r3, [pc, #20]	@ (8006944 <_svfiprintf_r+0x1f0>)
 800692e:	a904      	add	r1, sp, #16
 8006930:	4638      	mov	r0, r7
 8006932:	f000 f879 	bl	8006a28 <_printf_i>
 8006936:	e7ed      	b.n	8006914 <_svfiprintf_r+0x1c0>
 8006938:	08006dbc 	.word	0x08006dbc
 800693c:	08006dc6 	.word	0x08006dc6
 8006940:	00000000 	.word	0x00000000
 8006944:	0800669d 	.word	0x0800669d
 8006948:	08006dc2 	.word	0x08006dc2

0800694c <_printf_common>:
 800694c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006950:	4616      	mov	r6, r2
 8006952:	4698      	mov	r8, r3
 8006954:	688a      	ldr	r2, [r1, #8]
 8006956:	690b      	ldr	r3, [r1, #16]
 8006958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800695c:	4293      	cmp	r3, r2
 800695e:	bfb8      	it	lt
 8006960:	4613      	movlt	r3, r2
 8006962:	6033      	str	r3, [r6, #0]
 8006964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006968:	4607      	mov	r7, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b10a      	cbz	r2, 8006972 <_printf_common+0x26>
 800696e:	3301      	adds	r3, #1
 8006970:	6033      	str	r3, [r6, #0]
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	0699      	lsls	r1, r3, #26
 8006976:	bf42      	ittt	mi
 8006978:	6833      	ldrmi	r3, [r6, #0]
 800697a:	3302      	addmi	r3, #2
 800697c:	6033      	strmi	r3, [r6, #0]
 800697e:	6825      	ldr	r5, [r4, #0]
 8006980:	f015 0506 	ands.w	r5, r5, #6
 8006984:	d106      	bne.n	8006994 <_printf_common+0x48>
 8006986:	f104 0a19 	add.w	sl, r4, #25
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	6832      	ldr	r2, [r6, #0]
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dc26      	bgt.n	80069e2 <_printf_common+0x96>
 8006994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	3b00      	subs	r3, #0
 800699c:	bf18      	it	ne
 800699e:	2301      	movne	r3, #1
 80069a0:	0692      	lsls	r2, r2, #26
 80069a2:	d42b      	bmi.n	80069fc <_printf_common+0xb0>
 80069a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069a8:	4641      	mov	r1, r8
 80069aa:	4638      	mov	r0, r7
 80069ac:	47c8      	blx	r9
 80069ae:	3001      	adds	r0, #1
 80069b0:	d01e      	beq.n	80069f0 <_printf_common+0xa4>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	6922      	ldr	r2, [r4, #16]
 80069b6:	f003 0306 	and.w	r3, r3, #6
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	bf02      	ittt	eq
 80069be:	68e5      	ldreq	r5, [r4, #12]
 80069c0:	6833      	ldreq	r3, [r6, #0]
 80069c2:	1aed      	subeq	r5, r5, r3
 80069c4:	68a3      	ldr	r3, [r4, #8]
 80069c6:	bf0c      	ite	eq
 80069c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069cc:	2500      	movne	r5, #0
 80069ce:	4293      	cmp	r3, r2
 80069d0:	bfc4      	itt	gt
 80069d2:	1a9b      	subgt	r3, r3, r2
 80069d4:	18ed      	addgt	r5, r5, r3
 80069d6:	2600      	movs	r6, #0
 80069d8:	341a      	adds	r4, #26
 80069da:	42b5      	cmp	r5, r6
 80069dc:	d11a      	bne.n	8006a14 <_printf_common+0xc8>
 80069de:	2000      	movs	r0, #0
 80069e0:	e008      	b.n	80069f4 <_printf_common+0xa8>
 80069e2:	2301      	movs	r3, #1
 80069e4:	4652      	mov	r2, sl
 80069e6:	4641      	mov	r1, r8
 80069e8:	4638      	mov	r0, r7
 80069ea:	47c8      	blx	r9
 80069ec:	3001      	adds	r0, #1
 80069ee:	d103      	bne.n	80069f8 <_printf_common+0xac>
 80069f0:	f04f 30ff 	mov.w	r0, #4294967295
 80069f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f8:	3501      	adds	r5, #1
 80069fa:	e7c6      	b.n	800698a <_printf_common+0x3e>
 80069fc:	18e1      	adds	r1, r4, r3
 80069fe:	1c5a      	adds	r2, r3, #1
 8006a00:	2030      	movs	r0, #48	@ 0x30
 8006a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a06:	4422      	add	r2, r4
 8006a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7c7      	b.n	80069a4 <_printf_common+0x58>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4622      	mov	r2, r4
 8006a18:	4641      	mov	r1, r8
 8006a1a:	4638      	mov	r0, r7
 8006a1c:	47c8      	blx	r9
 8006a1e:	3001      	adds	r0, #1
 8006a20:	d0e6      	beq.n	80069f0 <_printf_common+0xa4>
 8006a22:	3601      	adds	r6, #1
 8006a24:	e7d9      	b.n	80069da <_printf_common+0x8e>
	...

08006a28 <_printf_i>:
 8006a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a2c:	7e0f      	ldrb	r7, [r1, #24]
 8006a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a30:	2f78      	cmp	r7, #120	@ 0x78
 8006a32:	4691      	mov	r9, r2
 8006a34:	4680      	mov	r8, r0
 8006a36:	460c      	mov	r4, r1
 8006a38:	469a      	mov	sl, r3
 8006a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a3e:	d807      	bhi.n	8006a50 <_printf_i+0x28>
 8006a40:	2f62      	cmp	r7, #98	@ 0x62
 8006a42:	d80a      	bhi.n	8006a5a <_printf_i+0x32>
 8006a44:	2f00      	cmp	r7, #0
 8006a46:	f000 80d2 	beq.w	8006bee <_printf_i+0x1c6>
 8006a4a:	2f58      	cmp	r7, #88	@ 0x58
 8006a4c:	f000 80b9 	beq.w	8006bc2 <_printf_i+0x19a>
 8006a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a58:	e03a      	b.n	8006ad0 <_printf_i+0xa8>
 8006a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a5e:	2b15      	cmp	r3, #21
 8006a60:	d8f6      	bhi.n	8006a50 <_printf_i+0x28>
 8006a62:	a101      	add	r1, pc, #4	@ (adr r1, 8006a68 <_printf_i+0x40>)
 8006a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a68:	08006ac1 	.word	0x08006ac1
 8006a6c:	08006ad5 	.word	0x08006ad5
 8006a70:	08006a51 	.word	0x08006a51
 8006a74:	08006a51 	.word	0x08006a51
 8006a78:	08006a51 	.word	0x08006a51
 8006a7c:	08006a51 	.word	0x08006a51
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006a51 	.word	0x08006a51
 8006a88:	08006a51 	.word	0x08006a51
 8006a8c:	08006a51 	.word	0x08006a51
 8006a90:	08006a51 	.word	0x08006a51
 8006a94:	08006bd5 	.word	0x08006bd5
 8006a98:	08006aff 	.word	0x08006aff
 8006a9c:	08006b8f 	.word	0x08006b8f
 8006aa0:	08006a51 	.word	0x08006a51
 8006aa4:	08006a51 	.word	0x08006a51
 8006aa8:	08006bf7 	.word	0x08006bf7
 8006aac:	08006a51 	.word	0x08006a51
 8006ab0:	08006aff 	.word	0x08006aff
 8006ab4:	08006a51 	.word	0x08006a51
 8006ab8:	08006a51 	.word	0x08006a51
 8006abc:	08006b97 	.word	0x08006b97
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6032      	str	r2, [r6, #0]
 8006ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e09d      	b.n	8006c10 <_printf_i+0x1e8>
 8006ad4:	6833      	ldr	r3, [r6, #0]
 8006ad6:	6820      	ldr	r0, [r4, #0]
 8006ad8:	1d19      	adds	r1, r3, #4
 8006ada:	6031      	str	r1, [r6, #0]
 8006adc:	0606      	lsls	r6, r0, #24
 8006ade:	d501      	bpl.n	8006ae4 <_printf_i+0xbc>
 8006ae0:	681d      	ldr	r5, [r3, #0]
 8006ae2:	e003      	b.n	8006aec <_printf_i+0xc4>
 8006ae4:	0645      	lsls	r5, r0, #25
 8006ae6:	d5fb      	bpl.n	8006ae0 <_printf_i+0xb8>
 8006ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aec:	2d00      	cmp	r5, #0
 8006aee:	da03      	bge.n	8006af8 <_printf_i+0xd0>
 8006af0:	232d      	movs	r3, #45	@ 0x2d
 8006af2:	426d      	negs	r5, r5
 8006af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006af8:	4859      	ldr	r0, [pc, #356]	@ (8006c60 <_printf_i+0x238>)
 8006afa:	230a      	movs	r3, #10
 8006afc:	e011      	b.n	8006b22 <_printf_i+0xfa>
 8006afe:	6821      	ldr	r1, [r4, #0]
 8006b00:	6833      	ldr	r3, [r6, #0]
 8006b02:	0608      	lsls	r0, r1, #24
 8006b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b08:	d402      	bmi.n	8006b10 <_printf_i+0xe8>
 8006b0a:	0649      	lsls	r1, r1, #25
 8006b0c:	bf48      	it	mi
 8006b0e:	b2ad      	uxthmi	r5, r5
 8006b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b12:	4853      	ldr	r0, [pc, #332]	@ (8006c60 <_printf_i+0x238>)
 8006b14:	6033      	str	r3, [r6, #0]
 8006b16:	bf14      	ite	ne
 8006b18:	230a      	movne	r3, #10
 8006b1a:	2308      	moveq	r3, #8
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b22:	6866      	ldr	r6, [r4, #4]
 8006b24:	60a6      	str	r6, [r4, #8]
 8006b26:	2e00      	cmp	r6, #0
 8006b28:	bfa2      	ittt	ge
 8006b2a:	6821      	ldrge	r1, [r4, #0]
 8006b2c:	f021 0104 	bicge.w	r1, r1, #4
 8006b30:	6021      	strge	r1, [r4, #0]
 8006b32:	b90d      	cbnz	r5, 8006b38 <_printf_i+0x110>
 8006b34:	2e00      	cmp	r6, #0
 8006b36:	d04b      	beq.n	8006bd0 <_printf_i+0x1a8>
 8006b38:	4616      	mov	r6, r2
 8006b3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b3e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b42:	5dc7      	ldrb	r7, [r0, r7]
 8006b44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b48:	462f      	mov	r7, r5
 8006b4a:	42bb      	cmp	r3, r7
 8006b4c:	460d      	mov	r5, r1
 8006b4e:	d9f4      	bls.n	8006b3a <_printf_i+0x112>
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d10b      	bne.n	8006b6c <_printf_i+0x144>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	07df      	lsls	r7, r3, #31
 8006b58:	d508      	bpl.n	8006b6c <_printf_i+0x144>
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	6861      	ldr	r1, [r4, #4]
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	bfde      	ittt	le
 8006b62:	2330      	movle	r3, #48	@ 0x30
 8006b64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b6c:	1b92      	subs	r2, r2, r6
 8006b6e:	6122      	str	r2, [r4, #16]
 8006b70:	f8cd a000 	str.w	sl, [sp]
 8006b74:	464b      	mov	r3, r9
 8006b76:	aa03      	add	r2, sp, #12
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f7ff fee6 	bl	800694c <_printf_common>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d14a      	bne.n	8006c1a <_printf_i+0x1f2>
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	b004      	add	sp, #16
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	6823      	ldr	r3, [r4, #0]
 8006b90:	f043 0320 	orr.w	r3, r3, #32
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	4833      	ldr	r0, [pc, #204]	@ (8006c64 <_printf_i+0x23c>)
 8006b98:	2778      	movs	r7, #120	@ 0x78
 8006b9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	6831      	ldr	r1, [r6, #0]
 8006ba2:	061f      	lsls	r7, r3, #24
 8006ba4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ba8:	d402      	bmi.n	8006bb0 <_printf_i+0x188>
 8006baa:	065f      	lsls	r7, r3, #25
 8006bac:	bf48      	it	mi
 8006bae:	b2ad      	uxthmi	r5, r5
 8006bb0:	6031      	str	r1, [r6, #0]
 8006bb2:	07d9      	lsls	r1, r3, #31
 8006bb4:	bf44      	itt	mi
 8006bb6:	f043 0320 	orrmi.w	r3, r3, #32
 8006bba:	6023      	strmi	r3, [r4, #0]
 8006bbc:	b11d      	cbz	r5, 8006bc6 <_printf_i+0x19e>
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	e7ac      	b.n	8006b1c <_printf_i+0xf4>
 8006bc2:	4827      	ldr	r0, [pc, #156]	@ (8006c60 <_printf_i+0x238>)
 8006bc4:	e7e9      	b.n	8006b9a <_printf_i+0x172>
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	f023 0320 	bic.w	r3, r3, #32
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	e7f6      	b.n	8006bbe <_printf_i+0x196>
 8006bd0:	4616      	mov	r6, r2
 8006bd2:	e7bd      	b.n	8006b50 <_printf_i+0x128>
 8006bd4:	6833      	ldr	r3, [r6, #0]
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	6961      	ldr	r1, [r4, #20]
 8006bda:	1d18      	adds	r0, r3, #4
 8006bdc:	6030      	str	r0, [r6, #0]
 8006bde:	062e      	lsls	r6, r5, #24
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0x1c0>
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0x1c6>
 8006be8:	0668      	lsls	r0, r5, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0x1bc>
 8006bec:	8019      	strh	r1, [r3, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	6123      	str	r3, [r4, #16]
 8006bf2:	4616      	mov	r6, r2
 8006bf4:	e7bc      	b.n	8006b70 <_printf_i+0x148>
 8006bf6:	6833      	ldr	r3, [r6, #0]
 8006bf8:	1d1a      	adds	r2, r3, #4
 8006bfa:	6032      	str	r2, [r6, #0]
 8006bfc:	681e      	ldr	r6, [r3, #0]
 8006bfe:	6862      	ldr	r2, [r4, #4]
 8006c00:	2100      	movs	r1, #0
 8006c02:	4630      	mov	r0, r6
 8006c04:	f7f9 fb14 	bl	8000230 <memchr>
 8006c08:	b108      	cbz	r0, 8006c0e <_printf_i+0x1e6>
 8006c0a:	1b80      	subs	r0, r0, r6
 8006c0c:	6060      	str	r0, [r4, #4]
 8006c0e:	6863      	ldr	r3, [r4, #4]
 8006c10:	6123      	str	r3, [r4, #16]
 8006c12:	2300      	movs	r3, #0
 8006c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c18:	e7aa      	b.n	8006b70 <_printf_i+0x148>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	4632      	mov	r2, r6
 8006c1e:	4649      	mov	r1, r9
 8006c20:	4640      	mov	r0, r8
 8006c22:	47d0      	blx	sl
 8006c24:	3001      	adds	r0, #1
 8006c26:	d0ad      	beq.n	8006b84 <_printf_i+0x15c>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	079b      	lsls	r3, r3, #30
 8006c2c:	d413      	bmi.n	8006c56 <_printf_i+0x22e>
 8006c2e:	68e0      	ldr	r0, [r4, #12]
 8006c30:	9b03      	ldr	r3, [sp, #12]
 8006c32:	4298      	cmp	r0, r3
 8006c34:	bfb8      	it	lt
 8006c36:	4618      	movlt	r0, r3
 8006c38:	e7a6      	b.n	8006b88 <_printf_i+0x160>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	47d0      	blx	sl
 8006c44:	3001      	adds	r0, #1
 8006c46:	d09d      	beq.n	8006b84 <_printf_i+0x15c>
 8006c48:	3501      	adds	r5, #1
 8006c4a:	68e3      	ldr	r3, [r4, #12]
 8006c4c:	9903      	ldr	r1, [sp, #12]
 8006c4e:	1a5b      	subs	r3, r3, r1
 8006c50:	42ab      	cmp	r3, r5
 8006c52:	dcf2      	bgt.n	8006c3a <_printf_i+0x212>
 8006c54:	e7eb      	b.n	8006c2e <_printf_i+0x206>
 8006c56:	2500      	movs	r5, #0
 8006c58:	f104 0619 	add.w	r6, r4, #25
 8006c5c:	e7f5      	b.n	8006c4a <_printf_i+0x222>
 8006c5e:	bf00      	nop
 8006c60:	08006dcd 	.word	0x08006dcd
 8006c64:	08006dde 	.word	0x08006dde

08006c68 <memmove>:
 8006c68:	4288      	cmp	r0, r1
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	eb01 0402 	add.w	r4, r1, r2
 8006c70:	d902      	bls.n	8006c78 <memmove+0x10>
 8006c72:	4284      	cmp	r4, r0
 8006c74:	4623      	mov	r3, r4
 8006c76:	d807      	bhi.n	8006c88 <memmove+0x20>
 8006c78:	1e43      	subs	r3, r0, #1
 8006c7a:	42a1      	cmp	r1, r4
 8006c7c:	d008      	beq.n	8006c90 <memmove+0x28>
 8006c7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c86:	e7f8      	b.n	8006c7a <memmove+0x12>
 8006c88:	4402      	add	r2, r0
 8006c8a:	4601      	mov	r1, r0
 8006c8c:	428a      	cmp	r2, r1
 8006c8e:	d100      	bne.n	8006c92 <memmove+0x2a>
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c9a:	e7f7      	b.n	8006c8c <memmove+0x24>

08006c9c <_sbrk_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d06      	ldr	r5, [pc, #24]	@ (8006cb8 <_sbrk_r+0x1c>)
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	4608      	mov	r0, r1
 8006ca6:	602b      	str	r3, [r5, #0]
 8006ca8:	f7f9 ffe6 	bl	8000c78 <_sbrk>
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d102      	bne.n	8006cb6 <_sbrk_r+0x1a>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	b103      	cbz	r3, 8006cb6 <_sbrk_r+0x1a>
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	200003ec 	.word	0x200003ec

08006cbc <memcpy>:
 8006cbc:	440a      	add	r2, r1
 8006cbe:	4291      	cmp	r1, r2
 8006cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cc4:	d100      	bne.n	8006cc8 <memcpy+0xc>
 8006cc6:	4770      	bx	lr
 8006cc8:	b510      	push	{r4, lr}
 8006cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	d1f9      	bne.n	8006cca <memcpy+0xe>
 8006cd6:	bd10      	pop	{r4, pc}

08006cd8 <_realloc_r>:
 8006cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cdc:	4680      	mov	r8, r0
 8006cde:	4615      	mov	r5, r2
 8006ce0:	460c      	mov	r4, r1
 8006ce2:	b921      	cbnz	r1, 8006cee <_realloc_r+0x16>
 8006ce4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce8:	4611      	mov	r1, r2
 8006cea:	f7ff bc4b 	b.w	8006584 <_malloc_r>
 8006cee:	b92a      	cbnz	r2, 8006cfc <_realloc_r+0x24>
 8006cf0:	f7ff fbdc 	bl	80064ac <_free_r>
 8006cf4:	2400      	movs	r4, #0
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfc:	f000 f81a 	bl	8006d34 <_malloc_usable_size_r>
 8006d00:	4285      	cmp	r5, r0
 8006d02:	4606      	mov	r6, r0
 8006d04:	d802      	bhi.n	8006d0c <_realloc_r+0x34>
 8006d06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006d0a:	d8f4      	bhi.n	8006cf6 <_realloc_r+0x1e>
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7ff fc38 	bl	8006584 <_malloc_r>
 8006d14:	4607      	mov	r7, r0
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0ec      	beq.n	8006cf4 <_realloc_r+0x1c>
 8006d1a:	42b5      	cmp	r5, r6
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4621      	mov	r1, r4
 8006d20:	bf28      	it	cs
 8006d22:	4632      	movcs	r2, r6
 8006d24:	f7ff ffca 	bl	8006cbc <memcpy>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4640      	mov	r0, r8
 8006d2c:	f7ff fbbe 	bl	80064ac <_free_r>
 8006d30:	463c      	mov	r4, r7
 8006d32:	e7e0      	b.n	8006cf6 <_realloc_r+0x1e>

08006d34 <_malloc_usable_size_r>:
 8006d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d38:	1f18      	subs	r0, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	bfbc      	itt	lt
 8006d3e:	580b      	ldrlt	r3, [r1, r0]
 8006d40:	18c0      	addlt	r0, r0, r3
 8006d42:	4770      	bx	lr

08006d44 <_init>:
 8006d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d46:	bf00      	nop
 8006d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d4a:	bc08      	pop	{r3}
 8006d4c:	469e      	mov	lr, r3
 8006d4e:	4770      	bx	lr

08006d50 <_fini>:
 8006d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d52:	bf00      	nop
 8006d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d56:	bc08      	pop	{r3}
 8006d58:	469e      	mov	lr, r3
 8006d5a:	4770      	bx	lr
