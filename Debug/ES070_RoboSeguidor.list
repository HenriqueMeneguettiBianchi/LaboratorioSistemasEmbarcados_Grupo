
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007708  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080078e0  080078e0  000088e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007924  08007924  0000901c  2**0
                  CONTENTS
  4 .ARM          00000008  08007924  08007924  00008924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800792c  0800792c  0000901c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800792c  0800792c  0000892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007930  08007930  00008930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08007934  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000001c  08007950  0000901c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08007950  00009678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000901c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e74e  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d0a  00000000  00000000  0002779a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0002b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000134f  00000000  00000000  0002cd78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a371  00000000  00000000  0002e0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020d44  00000000  00000000  00058438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115c20  00000000  00000000  0007917c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018ed9c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006970  00000000  00000000  0018ede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  00195750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000001c 	.word	0x2000001c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080078c8 	.word	0x080078c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000020 	.word	0x20000020
 8000214:	080078c8 	.word	0x080078c8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f007 f9a5 	bl	8007870 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b38      	ldr	r3, [pc, #224]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b36      	ldr	r3, [pc, #216]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b32      	ldr	r3, [pc, #200]	@ (8000608 <MX_ADC1_Init+0x100>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <MX_ADC1_Init+0x100>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055a:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <MX_ADC1_Init+0x100>)
 800055c:	2201      	movs	r2, #1
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057a:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <MX_ADC1_Init+0x100>)
 800057c:	2201      	movs	r2, #1
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x100>)
 800058a:	2201      	movs	r2, #1
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000592:	220c      	movs	r2, #12
 8000594:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x100>)
 800059e:	2200      	movs	r2, #0
 80005a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a8:	4817      	ldr	r0, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005aa:	f002 f8b1 	bl	8002710 <HAL_ADC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005b4:	f000 feea 	bl	800138c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c0:	4619      	mov	r1, r3
 80005c2:	4811      	ldr	r0, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005c4:	f003 f9d0 	bl	8003968 <HAL_ADCEx_MultiModeConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80005ce:	f000 fedd 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_ADC1_Init+0x104>)
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d6:	2306      	movs	r3, #6
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005de:	237f      	movs	r3, #127	@ 0x7f
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e2:	2304      	movs	r3, #4
 80005e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005f0:	f002 fb3c 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80005fa:	f000 fec7 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3730      	adds	r7, #48	@ 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000038 	.word	0x20000038
 800060c:	04300002 	.word	0x04300002

08000610 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f007 f927 	bl	8007870 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000622:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <MX_ADC2_Init+0xdc>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800062a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800064a:	2204      	movs	r2, #4
 800064c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000656:	2201      	movs	r2, #1
 8000658:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800065c:	2201      	movs	r2, #1
 800065e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000676:	2201      	movs	r2, #1
 8000678:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800068c:	220c      	movs	r2, #12
 800068e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000698:	2200      	movs	r2, #0
 800069a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 80006a4:	f002 f834 	bl	8002710 <HAL_ADC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 80006ae:	f000 fe6d 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_ADC2_Init+0xe0>)
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b6:	2306      	movs	r3, #6
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006be:	237f      	movs	r3, #127	@ 0x7f
 80006c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c2:	2304      	movs	r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 80006d0:	f002 facc 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80006da:	f000 fe57 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000a4 	.word	0x200000a4
 80006ec:	50000100 	.word	0x50000100
 80006f0:	0c900008 	.word	0x0c900008

080006f4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f007 f8af 	bl	8007870 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000712:	4b37      	ldr	r3, [pc, #220]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000714:	4a37      	ldr	r2, [pc, #220]	@ (80007f4 <MX_ADC3_Init+0x100>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000718:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800071a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800071e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800072c:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800073a:	2204      	movs	r2, #4
 800073c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000746:	2201      	movs	r2, #1
 8000748:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800074c:	2201      	movs	r2, #1
 800074e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000766:	2201      	movs	r2, #1
 8000768:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000774:	2201      	movs	r2, #1
 8000776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800077c:	220c      	movs	r2, #12
 800077e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800078e:	2201      	movs	r2, #1
 8000790:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000794:	f001 ffbc 	bl	8002710 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 800079e:	f000 fdf5 	bl	800138c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 80007ae:	f003 f8db 	bl	8003968 <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80007b8:	f000 fde8 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_ADC3_Init+0x104>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	@ 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 80007da:	f002 fa47 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80007e4:	f000 fdd2 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000110 	.word	0x20000110
 80007f4:	50000400 	.word	0x50000400
 80007f8:	14f00020 	.word	0x14f00020

080007fc <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2220      	movs	r2, #32
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 f831 	bl	8007870 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000810:	4a31      	ldr	r2, [pc, #196]	@ (80008d8 <MX_ADC4_Init+0xdc>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000814:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000816:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800081a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082e:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000836:	2204      	movs	r2, #4
 8000838:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000842:	2201      	movs	r2, #1
 8000844:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000862:	2201      	movs	r2, #1
 8000864:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000878:	220c      	movs	r2, #12
 800087a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000884:	2200      	movs	r2, #0
 8000886:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800088a:	2201      	movs	r2, #1
 800088c:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800088e:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000890:	f001 ff3e 	bl	8002710 <HAL_ADC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 800089a:	f000 fd77 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_ADC4_Init+0xe0>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2306      	movs	r3, #6
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008aa:	237f      	movs	r3, #127	@ 0x7f
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ae:	2304      	movs	r3, #4
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 80008bc:	f002 f9d6 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 80008c6:	f000 fd61 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000017c 	.word	0x2000017c
 80008d8:	50000500 	.word	0x50000500
 80008dc:	14f00020 	.word	0x14f00020

080008e0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f006 ffbf 	bl	8007870 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80008f2:	4b31      	ldr	r3, [pc, #196]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80008f4:	4a31      	ldr	r2, [pc, #196]	@ (80009bc <MX_ADC5_Init+0xdc>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80008fa:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008fe:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800090c:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800091a:	2204      	movs	r2, #4
 800091c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000924:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000926:	2201      	movs	r2, #1
 8000928:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800092c:	2201      	movs	r2, #1
 800092e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000946:	2201      	movs	r2, #1
 8000948:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800095c:	220c      	movs	r2, #12
 800095e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800096e:	2201      	movs	r2, #1
 8000970:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000974:	f001 fecc 	bl	8002710 <HAL_ADC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 800097e:	f000 fd05 	bl	800138c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_ADC5_Init+0xe0>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000986:	2306      	movs	r3, #6
 8000988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800098e:	237f      	movs	r3, #127	@ 0x7f
 8000990:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000992:	2304      	movs	r3, #4
 8000994:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80009a0:	f002 f964 	bl	8002c6c <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 80009aa:	f000 fcef 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001e8 	.word	0x200001e8
 80009bc:	50000600 	.word	0x50000600
 80009c0:	08600004 	.word	0x08600004

080009c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0a6      	sub	sp, #152	@ 0x98
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e0:	2254      	movs	r2, #84	@ 0x54
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f006 ff43 	bl	8007870 <memset>
  if(adcHandle->Instance==ADC1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009f2:	d16c      	bne.n	8000ace <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a04:	4618      	mov	r0, r3
 8000a06:	f003 ff3f 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a10:	f000 fcbc 	bl	800138c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a14:	4ba0      	ldr	r3, [pc, #640]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a9f      	ldr	r2, [pc, #636]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a26:	4b9d      	ldr	r3, [pc, #628]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a9c      	ldr	r2, [pc, #624]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b9a      	ldr	r3, [pc, #616]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b97      	ldr	r3, [pc, #604]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a96      	ldr	r2, [pc, #600]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b94      	ldr	r3, [pc, #592]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f003 fb55 	bl	8004120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a76:	4b8a      	ldr	r3, [pc, #552]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a78:	4a8a      	ldr	r2, [pc, #552]	@ (8000ca4 <HAL_ADC_MspInit+0x2e0>)
 8000a7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a7c:	4b88      	ldr	r3, [pc, #544]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a82:	4b87      	ldr	r3, [pc, #540]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a88:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a8e:	4b84      	ldr	r3, [pc, #528]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a94:	4b82      	ldr	r3, [pc, #520]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a9c:	4b80      	ldr	r3, [pc, #512]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab0:	487b      	ldr	r0, [pc, #492]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ab2:	f003 f971 	bl	8003d98 <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000abc:	f000 fc66 	bl	800138c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a77      	ldr	r2, [pc, #476]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ac4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ac6:	4a76      	ldr	r2, [pc, #472]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000acc:	e1e0      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a75      	ldr	r2, [pc, #468]	@ (8000ca8 <HAL_ADC_MspInit+0x2e4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d16c      	bne.n	8000bb2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ade:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ae2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fecd 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000af4:	f000 fc4a 	bl	800138c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000af8:	4b67      	ldr	r3, [pc, #412]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a66      	ldr	r2, [pc, #408]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b02:	4b65      	ldr	r3, [pc, #404]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b0a:	4b64      	ldr	r3, [pc, #400]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a63      	ldr	r2, [pc, #396]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b61      	ldr	r3, [pc, #388]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a5d      	ldr	r2, [pc, #372]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f003 fae3 	bl	8004120 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000b5a:	4b54      	ldr	r3, [pc, #336]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b5c:	4a54      	ldr	r2, [pc, #336]	@ (8000cb0 <HAL_ADC_MspInit+0x2ec>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b60:	4b52      	ldr	r3, [pc, #328]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b62:	2224      	movs	r2, #36	@ 0x24
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b66:	4b51      	ldr	r3, [pc, #324]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b4e      	ldr	r3, [pc, #312]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b78:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b86:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b88:	4b48      	ldr	r3, [pc, #288]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b47      	ldr	r3, [pc, #284]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b94:	4845      	ldr	r0, [pc, #276]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b96:	f003 f8ff 	bl	8003d98 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000ba0:	f000 fbf4 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a41      	ldr	r2, [pc, #260]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000ba8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000baa:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000bb0:	e16e      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb4 <HAL_ADC_MspInit+0x2f0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	f040 8085 	bne.w	8000cc8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000bc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fe5a 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000bda:	f000 fbd7 	bl	800138c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a34      	ldr	r2, [pc, #208]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10b      	bne.n	8000c08 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4820      	ldr	r0, [pc, #128]	@ (8000cbc <HAL_ADC_MspInit+0x2f8>)
 8000c3c:	f003 fa70 	bl	8004120 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c42:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <HAL_ADC_MspInit+0x300>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c48:	2225      	movs	r2, #37	@ 0x25
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c7c:	f003 f88c 	bl	8003d98 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000c86:	f000 fb81 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c96:	e0fb      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
 8000c98:	20000434 	.word	0x20000434
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	20000254 	.word	0x20000254
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	50000100 	.word	0x50000100
 8000cac:	200002b4 	.word	0x200002b4
 8000cb0:	4002001c 	.word	0x4002001c
 8000cb4:	50000400 	.word	0x50000400
 8000cb8:	20000438 	.word	0x20000438
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	20000314 	.word	0x20000314
 8000cc4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a72      	ldr	r2, [pc, #456]	@ (8000e98 <HAL_ADC_MspInit+0x4d4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d16c      	bne.n	8000dac <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fdd0 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000cee:	f000 fb4d 	bl	800138c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a68      	ldr	r2, [pc, #416]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cfc:	4b67      	ldr	r3, [pc, #412]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10b      	bne.n	8000d1c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d04:	4b66      	ldr	r3, [pc, #408]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	4a65      	ldr	r2, [pc, #404]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d10:	4b63      	ldr	r3, [pc, #396]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b60      	ldr	r3, [pc, #384]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a5f      	ldr	r2, [pc, #380]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4855      	ldr	r0, [pc, #340]	@ (8000ea4 <HAL_ADC_MspInit+0x4e0>)
 8000d50:	f003 f9e6 	bl	8004120 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000d54:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d56:	4a55      	ldr	r2, [pc, #340]	@ (8000eac <HAL_ADC_MspInit+0x4e8>)
 8000d58:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000d5a:	4b53      	ldr	r3, [pc, #332]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d5c:	2226      	movs	r2, #38	@ 0x26
 8000d5e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d60:	4b51      	ldr	r3, [pc, #324]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d66:	4b50      	ldr	r3, [pc, #320]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d78:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000d82:	4b49      	ldr	r3, [pc, #292]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d84:	2220      	movs	r2, #32
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b47      	ldr	r3, [pc, #284]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000d8e:	4846      	ldr	r0, [pc, #280]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d90:	f003 f802 	bl	8003d98 <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000d9a:	f000 faf7 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a41      	ldr	r2, [pc, #260]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000da2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000da4:	4a40      	ldr	r2, [pc, #256]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000daa:	e071      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb0 <HAL_ADC_MspInit+0x4ec>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d16c      	bne.n	8000e90 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000dbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fd5e 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000dd2:	f000 fadb 	bl	800138c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000dd6:	4b31      	ldr	r3, [pc, #196]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000dde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000de0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10b      	bne.n	8000e00 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e36:	f003 f973 	bl	8004120 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <HAL_ADC_MspInit+0x4f4>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e42:	2227      	movs	r2, #39	@ 0x27
 8000e44:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000e74:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e76:	f002 ff8f 	bl	8003d98 <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000e80:	f000 fa84 	bl	800138c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e88:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e90:	bf00      	nop
 8000e92:	3798      	adds	r7, #152	@ 0x98
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	50000500 	.word	0x50000500
 8000e9c:	20000438 	.word	0x20000438
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	20000374 	.word	0x20000374
 8000eac:	40020044 	.word	0x40020044
 8000eb0:	50000600 	.word	0x50000600
 8000eb4:	200003d4 	.word	0x200003d4
 8000eb8:	40020058 	.word	0x40020058

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f004 f933 	bl	800517c <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6838      	ldr	r0, [r7, #0]
 8000f1a:	f004 f92f 	bl	800517c <HAL_TIM_IC_Start_IT>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0) {
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <processarCaptura+0xb4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10a      	bne.n	8000f52 <processarCaptura+0x2a>
        valorCaptura1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	68f8      	ldr	r0, [r7, #12]
 8000f40:	f004 fe82 	bl	8005c48 <HAL_TIM_ReadCapturedValue>
 8000f44:	4603      	mov	r3, r0
 8000f46:	4a26      	ldr	r2, [pc, #152]	@ (8000fe0 <processarCaptura+0xb8>)
 8000f48:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8000f4a:	4b24      	ldr	r3, [pc, #144]	@ (8000fdc <processarCaptura+0xb4>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8000f50:	e040      	b.n	8000fd4 <processarCaptura+0xac>
        valorCaptura2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f52:	2100      	movs	r1, #0
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f004 fe77 	bl	8005c48 <HAL_TIM_ReadCapturedValue>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <processarCaptura+0xbc>)
 8000f5e:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 >= valorCaptura1) ? (valorCaptura2 - valorCaptura1) : (CONTADOR_MAX - valorCaptura1 + valorCaptura2);
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <processarCaptura+0xbc>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe0 <processarCaptura+0xb8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d305      	bcc.n	8000f78 <processarCaptura+0x50>
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <processarCaptura+0xbc>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe0 <processarCaptura+0xb8>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	e007      	b.n	8000f88 <processarCaptura+0x60>
 8000f78:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <processarCaptura+0xbc>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <processarCaptura+0xb8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 8000f86:	3350      	adds	r3, #80	@ 0x50
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <processarCaptura+0xc0>)
 8000f8a:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <processarCaptura+0xc4>)
 8000f8e:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <processarCaptura+0xc0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	ee07 3a90 	vmov	s15, r3
 8000f98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f9c:	edd7 6a05 	vldr	s13, [r7, #20]
 8000fa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	ed93 7a00 	vldr	s14, [r3]
 8000fb0:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000fb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fb8:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 8000fbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 8000fce:	4b03      	ldr	r3, [pc, #12]	@ (8000fdc <processarCaptura+0xb4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000448 	.word	0x20000448
 8000fe0:	2000043c 	.word	0x2000043c
 8000fe4:	20000440 	.word	0x20000440
 8000fe8:	20000444 	.word	0x20000444
 8000fec:	47c35000 	.word	0x47c35000

08000ff0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d105      	bne.n	800100c <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001000:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001002:	490b      	ldr	r1, [pc, #44]	@ (8001030 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff8f 	bl	8000f28 <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
    }
}
 800100a:	e008      	b.n	800101e <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d104      	bne.n	800101e <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 8001014:	4a08      	ldr	r2, [pc, #32]	@ (8001038 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001016:	4909      	ldr	r1, [pc, #36]	@ (800103c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff85 	bl	8000f28 <processarCaptura>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000548 	.word	0x20000548
 800102c:	20000454 	.word	0x20000454
 8001030:	2000044c 	.word	0x2000044c
 8001034:	20000594 	.word	0x20000594
 8001038:	20000458 	.word	0x20000458
 800103c:	20000450 	.word	0x20000450

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	@ 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b3b      	ldr	r3, [pc, #236]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105a:	4a3a      	ldr	r2, [pc, #232]	@ (8001144 <MX_GPIO_Init+0x104>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001062:	4b38      	ldr	r3, [pc, #224]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b35      	ldr	r3, [pc, #212]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001072:	4a34      	ldr	r2, [pc, #208]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800107a:	4b32      	ldr	r3, [pc, #200]	@ (8001144 <MX_GPIO_Init+0x104>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a2e      	ldr	r2, [pc, #184]	@ (8001144 <MX_GPIO_Init+0x104>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <MX_GPIO_Init+0x104>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <MX_GPIO_Init+0x104>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <MX_GPIO_Init+0x104>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_GPIO_Init+0x104>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80010bc:	4822      	ldr	r0, [pc, #136]	@ (8001148 <MX_GPIO_Init+0x108>)
 80010be:	f003 f9b1 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010cc:	f003 f9aa 	bl	8004424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	4619      	mov	r1, r3
 80010e6:	4819      	ldr	r0, [pc, #100]	@ (800114c <MX_GPIO_Init+0x10c>)
 80010e8:	f003 f81a 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 80010ec:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80010f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	@ (8001148 <MX_GPIO_Init+0x108>)
 8001106:	f003 f80b 	bl	8004120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 800110a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800110e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001110:	2301      	movs	r3, #1
 8001112:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001118:	2300      	movs	r3, #0
 800111a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001126:	f002 fffb 	bl	8004120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2028      	movs	r0, #40	@ 0x28
 8001130:	f002 fdfd 	bl	8003d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f002 fe14 	bl	8003d62 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	@ 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	48000400 	.word	0x48000400
 800114c:	48000800 	.word	0x48000800

08001150 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_I2C2_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_I2C2_Init+0x74>)
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <MX_I2C2_Init+0x7c>)
 800115e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	@ (80011c4 <MX_I2C2_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <MX_I2C2_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_I2C2_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	@ (80011c4 <MX_I2C2_Init+0x74>)
 800118c:	f003 f985 	bl	800449a <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 f8f9 	bl	800138c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <MX_I2C2_Init+0x74>)
 800119e:	f003 fa31 	bl	8004604 <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 f8f0 	bl	800138c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_I2C2_Init+0x74>)
 80011b0:	f003 fa73 	bl	800469a <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f8e7 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000045c 	.word	0x2000045c
 80011c8:	40005800 	.word	0x40005800
 80011cc:	30a0a7fb 	.word	0x30a0a7fb

080011d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b0a0      	sub	sp, #128	@ 0x80
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011e8:	f107 0318 	add.w	r3, r7, #24
 80011ec:	2254      	movs	r2, #84	@ 0x54
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f006 fb3d 	bl	8007870 <memset>
  if(i2cHandle->Instance==I2C2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a31      	ldr	r2, [pc, #196]	@ (80012c0 <HAL_I2C_MspInit+0xf0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d15b      	bne.n	80012b8 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001204:	2300      	movs	r3, #0
 8001206:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001208:	f107 0318 	add.w	r3, r7, #24
 800120c:	4618      	mov	r0, r3
 800120e:	f003 fb3b 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001218:	f000 f8b8 	bl	800138c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121c:	4b29      	ldr	r3, [pc, #164]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001220:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001228:	4b26      	ldr	r3, [pc, #152]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001234:	4b23      	ldr	r3, [pc, #140]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 8001236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001238:	4a22      	ldr	r2, [pc, #136]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001240:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 8001242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 800124c:	2310      	movs	r3, #16
 800124e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001250:	2312      	movs	r3, #18
 8001252:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800125c:	2304      	movs	r3, #4
 800125e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001264:	4619      	mov	r1, r3
 8001266:	4818      	ldr	r0, [pc, #96]	@ (80012c8 <HAL_I2C_MspInit+0xf8>)
 8001268:	f002 ff5a 	bl	8004120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 800126c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001270:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001272:	2312      	movs	r3, #18
 8001274:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800127e:	2304      	movs	r3, #4
 8001280:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001282:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001286:	4619      	mov	r1, r3
 8001288:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128c:	f002 ff48 	bl	8004120 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	4a0b      	ldr	r2, [pc, #44]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 8001296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800129a:	6593      	str	r3, [r2, #88]	@ 0x58
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <HAL_I2C_MspInit+0xf4>)
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80012a8:	2200      	movs	r2, #0
 80012aa:	2100      	movs	r1, #0
 80012ac:	2021      	movs	r0, #33	@ 0x21
 80012ae:	f002 fd3e 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012b2:	2021      	movs	r0, #33	@ 0x21
 80012b4:	f002 fd55 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012b8:	bf00      	nop
 80012ba:	3780      	adds	r7, #128	@ 0x80
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40005800 	.word	0x40005800
 80012c4:	40021000 	.word	0x40021000
 80012c8:	48000800 	.word	0x48000800

080012cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80012d0:	f000 ff47 	bl	8002162 <HAL_Init>

//    /* Configure the system clock */
//    SystemClock_Config();

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80012d4:	f7ff feb4 	bl	8001040 <MX_GPIO_Init>
    MX_DMA_Init();
 80012d8:	f7ff fdf0 	bl	8000ebc <MX_DMA_Init>
    MX_LPUART1_UART_Init();
 80012dc:	f000 fe76 	bl	8001fcc <MX_LPUART1_UART_Init>
    MX_TIM1_Init();
 80012e0:	f000 fc40 	bl	8001b64 <MX_TIM1_Init>
    MX_I2C2_Init();
 80012e4:	f7ff ff34 	bl	8001150 <MX_I2C2_Init>
    MX_ADC3_Init();
 80012e8:	f7ff fa04 	bl	80006f4 <MX_ADC3_Init>
    MX_ADC1_Init();
 80012ec:	f7ff f90c 	bl	8000508 <MX_ADC1_Init>
    MX_ADC2_Init();
 80012f0:	f7ff f98e 	bl	8000610 <MX_ADC2_Init>
    MX_ADC4_Init();
 80012f4:	f7ff fa82 	bl	80007fc <MX_ADC4_Init>
    MX_ADC5_Init();
 80012f8:	f7ff faf2 	bl	80008e0 <MX_ADC5_Init>
    MX_TIM16_Init();
 80012fc:	f000 fcee 	bl	8001cdc <MX_TIM16_Init>
    MX_TIM17_Init();
 8001300:	f000 fd38 	bl	8001d74 <MX_TIM17_Init>

    /* Initialize encoders and sensors */
    inicializarEncoders(&htim16, &htim17);
 8001304:	4916      	ldr	r1, [pc, #88]	@ (8001360 <main+0x94>)
 8001306:	4817      	ldr	r0, [pc, #92]	@ (8001364 <main+0x98>)
 8001308:	f7ff fdfc 	bl	8000f04 <inicializarEncoders>
    vMotorInit(&htim1);
 800130c:	4816      	ldr	r0, [pc, #88]	@ (8001368 <main+0x9c>)
 800130e:	f000 f843 	bl	8001398 <vMotorInit>

    vLineSensor1Init(&hadc1);
 8001312:	4816      	ldr	r0, [pc, #88]	@ (800136c <main+0xa0>)
 8001314:	f000 f8a2 	bl	800145c <vLineSensor1Init>
    vLineSensor2Init(&hadc2);
 8001318:	4815      	ldr	r0, [pc, #84]	@ (8001370 <main+0xa4>)
 800131a:	f000 f8bb 	bl	8001494 <vLineSensor2Init>
    vLineSensor3Init(&hadc3);
 800131e:	4815      	ldr	r0, [pc, #84]	@ (8001374 <main+0xa8>)
 8001320:	f000 f8d4 	bl	80014cc <vLineSensor3Init>
    vLineSensor4Init(&hadc4);
 8001324:	4814      	ldr	r0, [pc, #80]	@ (8001378 <main+0xac>)
 8001326:	f000 f8ed 	bl	8001504 <vLineSensor4Init>
    vLineSensor5Init(&hadc5);
 800132a:	4814      	ldr	r0, [pc, #80]	@ (800137c <main+0xb0>)
 800132c:	f000 f906 	bl	800153c <vLineSensor5Init>
    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Controla o PID para ajustar os motores
        vLineSensorPIDControl(velocidadeRodaEsquerda, velocidadeRodaDireita);
 8001330:	4b13      	ldr	r3, [pc, #76]	@ (8001380 <main+0xb4>)
 8001332:	edd3 7a00 	vldr	s15, [r3]
 8001336:	4b13      	ldr	r3, [pc, #76]	@ (8001384 <main+0xb8>)
 8001338:	ed93 7a00 	vldr	s14, [r3]
 800133c:	eef0 0a47 	vmov.f32	s1, s14
 8001340:	eeb0 0a67 	vmov.f32	s0, s15
 8001344:	f000 f9a8 	bl	8001698 <vLineSensorPIDControl>
        position2=fLineSensorCalculatePosition();
 8001348:	f000 f914 	bl	8001574 <fLineSensorCalculatePosition>
 800134c:	eef0 7a40 	vmov.f32	s15, s0
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <main+0xbc>)
 8001352:	edc3 7a00 	vstr	s15, [r3]
        // Adiciona um pequeno atraso se necessário
        HAL_Delay(10);
 8001356:	200a      	movs	r0, #10
 8001358:	f000 ff74 	bl	8002244 <HAL_Delay>
        vLineSensorPIDControl(velocidadeRodaEsquerda, velocidadeRodaDireita);
 800135c:	bf00      	nop
 800135e:	e7e7      	b.n	8001330 <main+0x64>
 8001360:	20000594 	.word	0x20000594
 8001364:	20000548 	.word	0x20000548
 8001368:	200004fc 	.word	0x200004fc
 800136c:	20000038 	.word	0x20000038
 8001370:	200000a4 	.word	0x200000a4
 8001374:	20000110 	.word	0x20000110
 8001378:	2000017c 	.word	0x2000017c
 800137c:	200001e8 	.word	0x200001e8
 8001380:	20000454 	.word	0x20000454
 8001384:	20000458 	.word	0x20000458
 8001388:	200004b0 	.word	0x200004b0

0800138c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001390:	b672      	cpsid	i
}
 8001392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <Error_Handler+0x8>

08001398 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80013a0:	4a15      	ldr	r2, [pc, #84]	@ (80013f8 <vMotorInit+0x60>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80013a6:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <vMotorInit+0x60>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fd71 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80013b2:	4b11      	ldr	r3, [pc, #68]	@ (80013f8 <vMotorInit+0x60>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2104      	movs	r1, #4
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 fd6b 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013c4:	480d      	ldr	r0, [pc, #52]	@ (80013fc <vMotorInit+0x64>)
 80013c6:	f003 f82d 	bl	8004424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d0:	480a      	ldr	r0, [pc, #40]	@ (80013fc <vMotorInit+0x64>)
 80013d2:	f003 f827 	bl	8004424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2180      	movs	r1, #128	@ 0x80
 80013da:	4808      	ldr	r0, [pc, #32]	@ (80013fc <vMotorInit+0x64>)
 80013dc:	f003 f822 	bl	8004424 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 80013e0:	2201      	movs	r2, #1
 80013e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ea:	f003 f81b 	bl	8004424 <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200004b4 	.word	0x200004b4
 80013fc:	48000400 	.word	0x48000400

08001400 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	ed87 0a01 	vstr	s0, [r7, #4]
 800140a:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 800140e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001412:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001454 <vSetRodasDC+0x54>
 8001416:	ee67 7a87 	vmul.f32	s15, s15, s14
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <vSetRodasDC+0x58>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001424:	ee17 2a90 	vmov	r2, s15
 8001428:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 800142a:	edd7 7a00 	vldr	s15, [r7]
 800142e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001454 <vSetRodasDC+0x54>
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <vSetRodasDC+0x58>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001440:	ee17 2a90 	vmov	r2, s15
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	447a0000 	.word	0x447a0000
 8001458:	200004b4 	.word	0x200004b4

0800145c <vLineSensor1Init>:
// Velocidade base dos motores
float base_speed = 0.15f; // Valor entre 0.0f e 1.0f
float max_duty_cycle = 0.2f; // Limite máximo do duty cycle

// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 8001464:	4a09      	ldr	r2, [pc, #36]	@ (800148c <vLineSensor1Init+0x30>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 800146a:	4b08      	ldr	r3, [pc, #32]	@ (800148c <vLineSensor1Init+0x30>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	217f      	movs	r1, #127	@ 0x7f
 8001470:	4618      	mov	r0, r3
 8001472:	f002 fa17 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <vLineSensor1Init+0x30>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2201      	movs	r2, #1
 800147c:	4904      	ldr	r1, [pc, #16]	@ (8001490 <vLineSensor1Init+0x34>)
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fb02 	bl	8002a88 <HAL_ADC_Start_DMA>
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200004b8 	.word	0x200004b8
 8001490:	200004cc 	.word	0x200004cc

08001494 <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 800149c:	4a09      	ldr	r2, [pc, #36]	@ (80014c4 <vLineSensor2Init+0x30>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <vLineSensor2Init+0x30>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	217f      	movs	r1, #127	@ 0x7f
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 f9fb 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 80014ae:	4b05      	ldr	r3, [pc, #20]	@ (80014c4 <vLineSensor2Init+0x30>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	4904      	ldr	r1, [pc, #16]	@ (80014c8 <vLineSensor2Init+0x34>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fae6 	bl	8002a88 <HAL_ADC_Start_DMA>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200004bc 	.word	0x200004bc
 80014c8:	200004d0 	.word	0x200004d0

080014cc <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 80014d4:	4a09      	ldr	r2, [pc, #36]	@ (80014fc <vLineSensor3Init+0x30>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 80014da:	4b08      	ldr	r3, [pc, #32]	@ (80014fc <vLineSensor3Init+0x30>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	217f      	movs	r1, #127	@ 0x7f
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 f9df 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <vLineSensor3Init+0x30>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4904      	ldr	r1, [pc, #16]	@ (8001500 <vLineSensor3Init+0x34>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f001 faca 	bl	8002a88 <HAL_ADC_Start_DMA>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200004c0 	.word	0x200004c0
 8001500:	200004d4 	.word	0x200004d4

08001504 <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 800150c:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <vLineSensor4Init+0x30>)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <vLineSensor4Init+0x30>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	217f      	movs	r1, #127	@ 0x7f
 8001518:	4618      	mov	r0, r3
 800151a:	f002 f9c3 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 800151e:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <vLineSensor4Init+0x30>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2201      	movs	r2, #1
 8001524:	4904      	ldr	r1, [pc, #16]	@ (8001538 <vLineSensor4Init+0x34>)
 8001526:	4618      	mov	r0, r3
 8001528:	f001 faae 	bl	8002a88 <HAL_ADC_Start_DMA>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	200004c4 	.word	0x200004c4
 8001538:	200004d8 	.word	0x200004d8

0800153c <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <vLineSensor5Init+0x30>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <vLineSensor5Init+0x30>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	217f      	movs	r1, #127	@ 0x7f
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f9a7 	bl	80038a4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 8001556:	4b05      	ldr	r3, [pc, #20]	@ (800156c <vLineSensor5Init+0x30>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2201      	movs	r2, #1
 800155c:	4904      	ldr	r1, [pc, #16]	@ (8001570 <vLineSensor5Init+0x34>)
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fa92 	bl	8002a88 <HAL_ADC_Start_DMA>
}
 8001564:	bf00      	nop
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200004c8 	.word	0x200004c8
 8001570:	200004dc 	.word	0x200004dc

08001574 <fLineSensorCalculatePosition>:

// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8001574:	b4b0      	push	{r4, r5, r7}
 8001576:	b091      	sub	sp, #68	@ 0x44
 8001578:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 800157a:	4b40      	ldr	r3, [pc, #256]	@ (800167c <fLineSensorCalculatePosition+0x108>)
 800157c:	f107 0418 	add.w	r4, r7, #24
 8001580:	461d      	mov	r5, r3
 8001582:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001584:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001586:	682b      	ldr	r3, [r5, #0]
 8001588:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <fLineSensorCalculatePosition+0x10c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <fLineSensorCalculatePosition+0x110>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60bb      	str	r3, [r7, #8]
 80015a2:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <fLineSensorCalculatePosition+0x114>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b38      	ldr	r3, [pc, #224]	@ (800168c <fLineSensorCalculatePosition+0x118>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b38      	ldr	r3, [pc, #224]	@ (8001690 <fLineSensorCalculatePosition+0x11c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80015b8:	e042      	b.n	8001640 <fLineSensorCalculatePosition+0xcc>
        if (sensorValues[i] >= 300 && sensorValues[i] <= 600) {
 80015ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	3340      	adds	r3, #64	@ 0x40
 80015c0:	443b      	add	r3, r7
 80015c2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80015c6:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80015ca:	d336      	bcc.n	800163a <fLineSensorCalculatePosition+0xc6>
 80015cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	3340      	adds	r3, #64	@ 0x40
 80015d2:	443b      	add	r3, r7
 80015d4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80015d8:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 80015dc:	d82d      	bhi.n	800163a <fLineSensorCalculatePosition+0xc6>
            float weight = 1.0f / (sensorValues[i] - 300 + 1);
 80015de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	3340      	adds	r3, #64	@ 0x40
 80015e4:	443b      	add	r3, r7
 80015e6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80015ea:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fe:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8001602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	3340      	adds	r3, #64	@ 0x40
 8001608:	443b      	add	r3, r7
 800160a:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001616:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 800162a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800162e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001636:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 800163a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800163c:	3301      	adds	r3, #1
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001642:	2b04      	cmp	r3, #4
 8001644:	ddb9      	ble.n	80015ba <fLineSensorCalculatePosition+0x46>
        }
    }

    if (totalWeight == 0) {
 8001646:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800164a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	d101      	bne.n	8001658 <fLineSensorCalculatePosition+0xe4>
        return 99; // Nenhum sensor detectou a linha
 8001654:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <fLineSensorCalculatePosition+0x120>)
 8001656:	e008      	b.n	800166a <fLineSensorCalculatePosition+0xf6>
    }

    float posicao = totalWeightedPosition / totalWeight;
 8001658:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800165c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001664:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return posicao;
 8001668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb0 0a67 	vmov.f32	s0, s15
 8001672:	3744      	adds	r7, #68	@ 0x44
 8001674:	46bd      	mov	sp, r7
 8001676:	bcb0      	pop	{r4, r5, r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	080078e0 	.word	0x080078e0
 8001680:	200004cc 	.word	0x200004cc
 8001684:	200004d0 	.word	0x200004d0
 8001688:	200004d4 	.word	0x200004d4
 800168c:	200004d8 	.word	0x200004d8
 8001690:	200004dc 	.word	0x200004dc
 8001694:	42c60000 	.word	0x42c60000

08001698 <vLineSensorPIDControl>:

void vLineSensorPIDControl(float left_encoder_speed, float right_encoder_speed) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	ed87 0a01 	vstr	s0, [r7, #4]
 80016a2:	edc7 0a00 	vstr	s1, [r7]
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80016a6:	f000 fdc1 	bl	800222c <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]
    delta_time = (current_time - previous_time) / 1000.0f;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <vLineSensorPIDControl+0x70>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	ee07 3a90 	vmov	s15, r3
 80016b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80016bc:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800170c <vLineSensorPIDControl+0x74>
 80016c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <vLineSensorPIDControl+0x78>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <vLineSensorPIDControl+0x78>)
 80016cc:	edd3 7a00 	vldr	s15, [r3]
 80016d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d8:	d802      	bhi.n	80016e0 <vLineSensorPIDControl+0x48>
        delta_time = 0.01f; // Evita divisão por zero
 80016da:	4b0d      	ldr	r3, [pc, #52]	@ (8001710 <vLineSensorPIDControl+0x78>)
 80016dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001714 <vLineSensorPIDControl+0x7c>)
 80016de:	601a      	str	r2, [r3, #0]
    }

    float position = fLineSensorCalculatePosition();
 80016e0:	f7ff ff48 	bl	8001574 <fLineSensorCalculatePosition>
 80016e4:	ed87 0a02 	vstr	s0, [r7, #8]

    // Se nenhum sensor detectar a linha
    if (position == 99) {
 80016e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001718 <vLineSensorPIDControl+0x80>
 80016f0:	eef4 7a47 	vcmp.f32	s15, s14
 80016f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f8:	d112      	bne.n	8001720 <vLineSensorPIDControl+0x88>
        vSetRodasDC(0, 0);
 80016fa:	eddf 0a08 	vldr	s1, [pc, #32]	@ 800171c <vLineSensorPIDControl+0x84>
 80016fe:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800171c <vLineSensorPIDControl+0x84>
 8001702:	f7ff fe7d 	bl	8001400 <vSetRodasDC>
        return;
 8001706:	e180      	b.n	8001a0a <vLineSensorPIDControl+0x372>
 8001708:	200004f8 	.word	0x200004f8
 800170c:	447a0000 	.word	0x447a0000
 8001710:	20000008 	.word	0x20000008
 8001714:	3c23d70a 	.word	0x3c23d70a
 8001718:	42c60000 	.word	0x42c60000
 800171c:	00000000 	.word	0x00000000
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position;
 8001720:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 800171c <vLineSensorPIDControl+0x84>
 8001724:	edd7 7a02 	vldr	s15, [r7, #8]
 8001728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800172c:	4bb8      	ldr	r3, [pc, #736]	@ (8001a10 <vLineSensorPIDControl+0x378>)
 800172e:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8001732:	4bb7      	ldr	r3, [pc, #732]	@ (8001a10 <vLineSensorPIDControl+0x378>)
 8001734:	ed93 7a00 	vldr	s14, [r3]
 8001738:	4bb6      	ldr	r3, [pc, #728]	@ (8001a14 <vLineSensorPIDControl+0x37c>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001742:	4bb5      	ldr	r3, [pc, #724]	@ (8001a18 <vLineSensorPIDControl+0x380>)
 8001744:	edd3 7a00 	vldr	s15, [r3]
 8001748:	ee77 7a27 	vadd.f32	s15, s14, s15
 800174c:	4bb2      	ldr	r3, [pc, #712]	@ (8001a18 <vLineSensorPIDControl+0x380>)
 800174e:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8001752:	4baf      	ldr	r3, [pc, #700]	@ (8001a10 <vLineSensorPIDControl+0x378>)
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	4bb0      	ldr	r3, [pc, #704]	@ (8001a1c <vLineSensorPIDControl+0x384>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001762:	4bac      	ldr	r3, [pc, #688]	@ (8001a14 <vLineSensorPIDControl+0x37c>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176c:	4bac      	ldr	r3, [pc, #688]	@ (8001a20 <vLineSensorPIDControl+0x388>)
 800176e:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 8001772:	4bac      	ldr	r3, [pc, #688]	@ (8001a24 <vLineSensorPIDControl+0x38c>)
 8001774:	ed93 7a00 	vldr	s14, [r3]
 8001778:	4ba5      	ldr	r3, [pc, #660]	@ (8001a10 <vLineSensorPIDControl+0x378>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001782:	4ba9      	ldr	r3, [pc, #676]	@ (8001a28 <vLineSensorPIDControl+0x390>)
 8001784:	edd3 6a00 	vldr	s13, [r3]
 8001788:	4ba3      	ldr	r3, [pc, #652]	@ (8001a18 <vLineSensorPIDControl+0x380>)
 800178a:	edd3 7a00 	vldr	s15, [r3]
 800178e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001792:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001796:	4ba5      	ldr	r3, [pc, #660]	@ (8001a2c <vLineSensorPIDControl+0x394>)
 8001798:	edd3 6a00 	vldr	s13, [r3]
 800179c:	4ba0      	ldr	r3, [pc, #640]	@ (8001a20 <vLineSensorPIDControl+0x388>)
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017aa:	eef1 7a67 	vneg.f32	s15, s15
 80017ae:	4ba0      	ldr	r3, [pc, #640]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 80017b4:	4b9e      	ldr	r3, [pc, #632]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4b9e      	ldr	r3, [pc, #632]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	dd03      	ble.n	80017d2 <vLineSensorPIDControl+0x13a>
 80017ca:	4b9a      	ldr	r3, [pc, #616]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a98      	ldr	r2, [pc, #608]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80017d0:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 80017d2:	4b98      	ldr	r3, [pc, #608]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80017d4:	edd3 7a00 	vldr	s15, [r3]
 80017d8:	eeb1 7a67 	vneg.f32	s14, s15
 80017dc:	4b94      	ldr	r3, [pc, #592]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80017de:	edd3 7a00 	vldr	s15, [r3]
 80017e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ea:	dd07      	ble.n	80017fc <vLineSensorPIDControl+0x164>
 80017ec:	4b91      	ldr	r3, [pc, #580]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	eef1 7a67 	vneg.f32	s15, s15
 80017f6:	4b8e      	ldr	r3, [pc, #568]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80017f8:	edc3 7a00 	vstr	s15, [r3]

    previous_error = error;
 80017fc:	4b84      	ldr	r3, [pc, #528]	@ (8001a10 <vLineSensorPIDControl+0x378>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a86      	ldr	r2, [pc, #536]	@ (8001a1c <vLineSensorPIDControl+0x384>)
 8001802:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8001804:	4a8c      	ldr	r2, [pc, #560]	@ (8001a38 <vLineSensorPIDControl+0x3a0>)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6013      	str	r3, [r2, #0]

    // Ajusta velocidades dos motores com base nos sensores
    float left_speed = left_encoder_speed;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	617b      	str	r3, [r7, #20]
    float right_speed = right_encoder_speed;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	613b      	str	r3, [r7, #16]

    // Ajuste de velocidade para os sensores
    if (position >= 1 && position < 2 ) {
 8001812:	edd7 7a02 	vldr	s15, [r7, #8]
 8001816:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	db1a      	blt.n	800185a <vLineSensorPIDControl+0x1c2>
 8001824:	edd7 7a02 	vldr	s15, [r7, #8]
 8001828:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800182c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	d511      	bpl.n	800185a <vLineSensorPIDControl+0x1c2>
        left_speed += control_output;//left_speed * 0.65f; // Incremento de 5% na roda esquerda
 8001836:	4b7e      	ldr	r3, [pc, #504]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001840:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001844:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed -= control_output;//right_speed * 0.65f; // Decremento de 5% na roda direita
 8001848:	4b79      	ldr	r3, [pc, #484]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001856:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    if (position == 2) {
 800185a:	edd7 7a02 	vldr	s15, [r7, #8]
 800185e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001862:	eef4 7a47 	vcmp.f32	s15, s14
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	d111      	bne.n	8001890 <vLineSensorPIDControl+0x1f8>
        left_speed += control_output;//left_speed * 0.65f; // Incremento de 10% na roda esquerda
 800186c:	4b70      	ldr	r3, [pc, #448]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	ed97 7a05 	vldr	s14, [r7, #20]
 8001876:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187a:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed -= control_output;//right_speed * 0.65f; // Decremento de 10% na roda direita
 800187e:	4b6c      	ldr	r3, [pc, #432]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001880:	edd3 7a00 	vldr	s15, [r3]
 8001884:	ed97 7a04 	vldr	s14, [r7, #16]
 8001888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    if (position > 0 && position < 1) {
 8001890:	edd7 7a02 	vldr	s15, [r7, #8]
 8001894:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800189c:	dd1a      	ble.n	80018d4 <vLineSensorPIDControl+0x23c>
 800189e:	edd7 7a02 	vldr	s15, [r7, #8]
 80018a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d511      	bpl.n	80018d4 <vLineSensorPIDControl+0x23c>
        left_speed += control_output;//left_speed * 0.65f; // Incremento de 10% na roda esquerda
 80018b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80018ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018be:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed -= control_output;//right_speed * 0.65f; // Decremento de 10% na roda direita
 80018c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80018cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d0:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    if (position >-1 && position < 0) {
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	dd18      	ble.n	8001918 <vLineSensorPIDControl+0x280>
 80018e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	d511      	bpl.n	8001918 <vLineSensorPIDControl+0x280>
        left_speed -= control_output;//left_speed * 0.65f; // Incremento de 10% na roda esquerda
 80018f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 80018f6:	edd3 7a00 	vldr	s15, [r3]
 80018fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80018fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001902:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed += control_output;//right_speed * 0.65f; // Decremento de 10% na roda direita
 8001906:	4b4a      	ldr	r3, [pc, #296]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001914:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    if (position <= -1 && position >-2) {
 8001918:	edd7 7a02 	vldr	s15, [r7, #8]
 800191c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001928:	d81a      	bhi.n	8001960 <vLineSensorPIDControl+0x2c8>
 800192a:	edd7 7a02 	vldr	s15, [r7, #8]
 800192e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800193a:	dd11      	ble.n	8001960 <vLineSensorPIDControl+0x2c8>
        left_speed -= control_output;//left_speed * 0.65f; // Incremento de 10% na roda esquerda
 800193c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 800193e:	edd3 7a00 	vldr	s15, [r3]
 8001942:	ed97 7a05 	vldr	s14, [r7, #20]
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed += control_output;//right_speed * 0.65f; // Decremento de 10% na roda direita
 800194e:	4b38      	ldr	r3, [pc, #224]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ed97 7a04 	vldr	s14, [r7, #16]
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	edc7 7a04 	vstr	s15, [r7, #16]
    }

    if (position == -2) {
 8001960:	edd7 7a02 	vldr	s15, [r7, #8]
 8001964:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001968:	eef4 7a47 	vcmp.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d111      	bne.n	8001996 <vLineSensorPIDControl+0x2fe>
        right_speed += control_output;//right_speed * 0.35f; // Incremento de 10% na roda direita
 8001972:	4b2f      	ldr	r3, [pc, #188]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ed97 7a04 	vldr	s14, [r7, #16]
 800197c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001980:	edc7 7a04 	vstr	s15, [r7, #16]
        left_speed -= control_output;//left_speed * 0.35f; // Decremento de 10% na roda esquerda
 8001984:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <vLineSensorPIDControl+0x398>)
 8001986:	edd3 7a00 	vldr	s15, [r3]
 800198a:	ed97 7a05 	vldr	s14, [r7, #20]
 800198e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001992:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    if (position == 0) {
 8001996:	edd7 7a02 	vldr	s15, [r7, #8]
 800199a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        right_speed = right_speed; // mantem
        left_speed = left_speed; //
    }
    // Garante que as velocidades estão entre 0 e max_duty_cycle
    if (left_speed > max_duty_cycle) left_speed = max_duty_cycle;
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80019ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b4:	dd02      	ble.n	80019bc <vLineSensorPIDControl+0x324>
 80019b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	617b      	str	r3, [r7, #20]
    if (left_speed < 0.0f) left_speed = 0.0f;
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c8:	d502      	bpl.n	80019d0 <vLineSensorPIDControl+0x338>
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
    if (right_speed > max_duty_cycle) right_speed = max_duty_cycle;
 80019d0:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80019da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	dd02      	ble.n	80019ea <vLineSensorPIDControl+0x352>
 80019e4:	4b13      	ldr	r3, [pc, #76]	@ (8001a34 <vLineSensorPIDControl+0x39c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	613b      	str	r3, [r7, #16]
    if (right_speed < 0.0f) right_speed = 0.0f;
 80019ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80019ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f6:	d502      	bpl.n	80019fe <vLineSensorPIDControl+0x366>
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]

    // Ajusta as velocidades dos motores
    vSetRodasDC(left_speed, right_speed);
 80019fe:	edd7 0a04 	vldr	s1, [r7, #16]
 8001a02:	ed97 0a05 	vldr	s0, [r7, #20]
 8001a06:	f7ff fcfb 	bl	8001400 <vSetRodasDC>
}
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200004e4 	.word	0x200004e4
 8001a14:	20000008 	.word	0x20000008
 8001a18:	200004ec 	.word	0x200004ec
 8001a1c:	200004e8 	.word	0x200004e8
 8001a20:	200004f0 	.word	0x200004f0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	200004e0 	.word	0x200004e0
 8001a2c:	20000004 	.word	0x20000004
 8001a30:	200004f4 	.word	0x200004f4
 8001a34:	2000000c 	.word	0x2000000c
 8001a38:	200004f8 	.word	0x200004f8

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a46:	4a0e      	ldr	r2, [pc, #56]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a5e:	4a08      	ldr	r2, [pc, #32]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a66:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_MspInit+0x44>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6e:	603b      	str	r3, [r7, #0]
 8001a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a72:	f002 fe5f 	bl	8004734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40021000 	.word	0x40021000

08001a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <NMI_Handler+0x4>

08001a8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <BusFault_Handler+0x4>

08001aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <UsageFault_Handler+0x4>

08001aac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ada:	f000 fb95 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001aea:	f003 fc97 	bl	800541c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001aee:	4803      	ldr	r0, [pc, #12]	@ (8001afc <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001af0:	f003 fc94 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200004fc 	.word	0x200004fc
 8001afc:	20000548 	.word	0x20000548

08001b00 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b04:	4803      	ldr	r0, [pc, #12]	@ (8001b14 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001b06:	f003 fc89 	bl	800541c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001b0a:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001b0c:	f003 fc86 	bl	800541c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200004fc 	.word	0x200004fc
 8001b18:	20000594 	.word	0x20000594

08001b1c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b20:	4802      	ldr	r0, [pc, #8]	@ (8001b2c <I2C2_EV_IRQHandler+0x10>)
 8001b22:	f002 fd55 	bl	80045d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000045c 	.word	0x2000045c

08001b30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b34:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b38:	f002 fc8c 	bl	8004454 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	@ (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b09c      	sub	sp, #112	@ 0x70
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b84:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
 8001b94:	615a      	str	r2, [r3, #20]
 8001b96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2234      	movs	r2, #52	@ 0x34
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f005 fe66 	bl	8007870 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8001cd8 <MX_TIM1_Init+0x174>)
 8001ba8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001baa:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bac:	22a9      	movs	r2, #169	@ 0xa9
 8001bae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb0:	4b48      	ldr	r3, [pc, #288]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001bb6:	4b47      	ldr	r3, [pc, #284]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bbc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbe:	4b45      	ldr	r3, [pc, #276]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bc4:	4b43      	ldr	r3, [pc, #268]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b42      	ldr	r3, [pc, #264]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bd0:	4840      	ldr	r0, [pc, #256]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bd2:	f003 f8a7 	bl	8004d24 <HAL_TIM_Base_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bdc:	f7ff fbd6 	bl	800138c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001be4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001be6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bea:	4619      	mov	r1, r3
 8001bec:	4839      	ldr	r0, [pc, #228]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bee:	f003 ff15 	bl	8005a1c <HAL_TIM_ConfigClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001bf8:	f7ff fbc8 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001bfc:	4835      	ldr	r0, [pc, #212]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001bfe:	f003 f8e8 	bl	8004dd2 <HAL_TIM_PWM_Init>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c08:	f7ff fbc0 	bl	800138c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	482d      	ldr	r0, [pc, #180]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001c20:	f004 fe48 	bl	80068b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c2a:	f7ff fbaf 	bl	800138c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2e:	2360      	movs	r3, #96	@ 0x60
 8001c30:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c36:	2300      	movs	r3, #0
 8001c38:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c46:	2300      	movs	r3, #0
 8001c48:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001c54:	f003 fdce 	bl	80057f4 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c5e:	f7ff fb95 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c62:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c66:	2204      	movs	r2, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	481a      	ldr	r0, [pc, #104]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001c6c:	f003 fdc2 	bl	80057f4 <HAL_TIM_PWM_ConfigChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c76:	f7ff fb89 	bl	800138c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ca0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4807      	ldr	r0, [pc, #28]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001cb8:	f004 fe92 	bl	80069e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001cc2:	f7ff fb63 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cc6:	4803      	ldr	r0, [pc, #12]	@ (8001cd4 <MX_TIM1_Init+0x170>)
 8001cc8:	f000 f948 	bl	8001f5c <HAL_TIM_MspPostInit>

}
 8001ccc:	bf00      	nop
 8001cce:	3770      	adds	r7, #112	@ 0x70
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200004fc 	.word	0x200004fc
 8001cd8:	40012c00 	.word	0x40012c00

08001cdc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ce2:	463b      	mov	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	605a      	str	r2, [r3, #4]
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d70 <MX_TIM16_Init+0x94>)
 8001cf2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001cf6:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001cfa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50000;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d04:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001d08:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b18      	ldr	r3, [pc, #96]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d10:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d1c:	4813      	ldr	r0, [pc, #76]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d1e:	f003 f801 	bl	8004d24 <HAL_TIM_Base_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8001d28:	f7ff fb30 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001d2c:	480f      	ldr	r0, [pc, #60]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d2e:	f003 f9c3 	bl	80050b8 <HAL_TIM_IC_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001d38:	f7ff fb28 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d40:	2301      	movs	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4806      	ldr	r0, [pc, #24]	@ (8001d6c <MX_TIM16_Init+0x90>)
 8001d54:	f003 fcb1 	bl	80056ba <HAL_TIM_IC_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 8001d5e:	f7ff fb15 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000548 	.word	0x20000548
 8001d70:	40014400 	.word	0x40014400

08001d74 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001d86:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001d88:	4a1f      	ldr	r2, [pc, #124]	@ (8001e08 <MX_TIM17_Init+0x94>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001d8e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d92:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 8001d9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001d9c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001da0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001da8:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001db6:	f002 ffb5 	bl	8004d24 <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8001dc0:	f7ff fae4 	bl	800138c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001dc4:	480f      	ldr	r0, [pc, #60]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001dc6:	f003 f977 	bl	80050b8 <HAL_TIM_IC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001dd0:	f7ff fadc 	bl	800138c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	@ (8001e04 <MX_TIM17_Init+0x90>)
 8001dec:	f003 fc65 	bl	80056ba <HAL_TIM_IC_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8001df6:	f7ff fac9 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000594 	.word	0x20000594
 8001e08:	40014800 	.word	0x40014800

08001e0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a47      	ldr	r2, [pc, #284]	@ (8001f48 <HAL_TIM_Base_MspInit+0x13c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d11c      	bne.n	8001e68 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e2e:	4b47      	ldr	r3, [pc, #284]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e38:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e3a:	4b44      	ldr	r3, [pc, #272]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e46:	2200      	movs	r2, #0
 8001e48:	2100      	movs	r1, #0
 8001e4a:	2019      	movs	r0, #25
 8001e4c:	f001 ff6f 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e50:	2019      	movs	r0, #25
 8001e52:	f001 ff86 	bl	8003d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2100      	movs	r1, #0
 8001e5a:	201a      	movs	r0, #26
 8001e5c:	f001 ff67 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e60:	201a      	movs	r0, #26
 8001e62:	f001 ff7e 	bl	8003d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e66:	e06a      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM16)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a38      	ldr	r2, [pc, #224]	@ (8001f50 <HAL_TIM_Base_MspInit+0x144>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d130      	bne.n	8001ed4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e72:	4b36      	ldr	r3, [pc, #216]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e76:	4a35      	ldr	r2, [pc, #212]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e7e:	4b33      	ldr	r3, [pc, #204]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8a:	4b30      	ldr	r3, [pc, #192]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e90:	f043 0302 	orr.w	r3, r3, #2
 8001e94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e96:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4825      	ldr	r0, [pc, #148]	@ (8001f54 <HAL_TIM_Base_MspInit+0x148>)
 8001ebe:	f002 f92f 	bl	8004120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2019      	movs	r0, #25
 8001ec8:	f001 ff31 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ecc:	2019      	movs	r0, #25
 8001ece:	f001 ff48 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8001ed2:	e034      	b.n	8001f3e <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM17)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <HAL_TIM_Base_MspInit+0x14c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12f      	bne.n	8001f3e <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001ede:	4b1b      	ldr	r3, [pc, #108]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eea:	4b18      	ldr	r3, [pc, #96]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	4b15      	ldr	r3, [pc, #84]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	4a14      	ldr	r2, [pc, #80]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f02:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <HAL_TIM_Base_MspInit+0x140>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 8001f0e:	2320      	movs	r3, #32
 8001f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001f1e:	230a      	movs	r3, #10
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	480a      	ldr	r0, [pc, #40]	@ (8001f54 <HAL_TIM_Base_MspInit+0x148>)
 8001f2a:	f002 f8f9 	bl	8004120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	201a      	movs	r0, #26
 8001f34:	f001 fefb 	bl	8003d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f38:	201a      	movs	r0, #26
 8001f3a:	f001 ff12 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8001f3e:	bf00      	nop
 8001f40:	3730      	adds	r7, #48	@ 0x30
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40014400 	.word	0x40014400
 8001f54:	48000400 	.word	0x48000400
 8001f58:	40014800 	.word	0x40014800

08001f5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a11      	ldr	r2, [pc, #68]	@ (8001fc0 <HAL_TIM_MspPostInit+0x64>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f82:	4a10      	ldr	r2, [pc, #64]	@ (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f84:	f043 0304 	orr.w	r3, r3, #4
 8001f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <HAL_TIM_MspPostInit+0x68>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8001f96:	2303      	movs	r3, #3
 8001f98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001faa:	f107 030c 	add.w	r3, r7, #12
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <HAL_TIM_MspPostInit+0x6c>)
 8001fb2:	f002 f8b5 	bl	8004120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3720      	adds	r7, #32
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40012c00 	.word	0x40012c00
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	48000800 	.word	0x48000800

08001fcc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001fd2:	4a22      	ldr	r2, [pc, #136]	@ (800205c <MX_LPUART1_UART_Init+0x90>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001fd6:	4b20      	ldr	r3, [pc, #128]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b1e      	ldr	r3, [pc, #120]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b1c      	ldr	r3, [pc, #112]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8002004:	2200      	movs	r2, #0
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002008:	4b13      	ldr	r3, [pc, #76]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800200e:	4812      	ldr	r0, [pc, #72]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8002010:	f004 fdc0 	bl	8006b94 <HAL_UART_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800201a:	f7ff f9b7 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800201e:	2100      	movs	r1, #0
 8002020:	480d      	ldr	r0, [pc, #52]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8002022:	f005 fb5b 	bl	80076dc <HAL_UARTEx_SetTxFifoThreshold>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800202c:	f7ff f9ae 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002030:	2100      	movs	r1, #0
 8002032:	4809      	ldr	r0, [pc, #36]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8002034:	f005 fb90 	bl	8007758 <HAL_UARTEx_SetRxFifoThreshold>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800203e:	f7ff f9a5 	bl	800138c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	@ (8002058 <MX_LPUART1_UART_Init+0x8c>)
 8002044:	f005 fb11 	bl	800766a <HAL_UARTEx_DisableFifoMode>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800204e:	f7ff f99d 	bl	800138c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	200005e0 	.word	0x200005e0
 800205c:	40008000 	.word	0x40008000

08002060 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b09e      	sub	sp, #120	@ 0x78
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002078:	f107 0310 	add.w	r3, r7, #16
 800207c:	2254      	movs	r2, #84	@ 0x54
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f005 fbf5 	bl	8007870 <memset>
  if(uartHandle->Instance==LPUART1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a1f      	ldr	r2, [pc, #124]	@ (8002108 <HAL_UART_MspInit+0xa8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d136      	bne.n	80020fe <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002090:	2320      	movs	r3, #32
 8002092:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4618      	mov	r0, r3
 800209e:	f002 fbf3 	bl	8004888 <HAL_RCCEx_PeriphCLKConfig>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020a8:	f7ff f970 	bl	800138c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020ac:	4b17      	ldr	r3, [pc, #92]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020b0:	4a16      	ldr	r2, [pc, #88]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020b8:	4b14      	ldr	r3, [pc, #80]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c8:	4a10      	ldr	r2, [pc, #64]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <HAL_UART_MspInit+0xac>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80020dc:	230c      	movs	r3, #12
 80020de:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e0:	2302      	movs	r3, #2
 80020e2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e8:	2300      	movs	r3, #0
 80020ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80020ec:	230c      	movs	r3, #12
 80020ee:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80020f4:	4619      	mov	r1, r3
 80020f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020fa:	f002 f811 	bl	8004120 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80020fe:	bf00      	nop
 8002100:	3778      	adds	r7, #120	@ 0x78
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40008000 	.word	0x40008000
 800210c:	40021000 	.word	0x40021000

08002110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002110:	480d      	ldr	r0, [pc, #52]	@ (8002148 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002112:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002114:	f7ff fd14 	bl	8001b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002118:	480c      	ldr	r0, [pc, #48]	@ (800214c <LoopForever+0x6>)
  ldr r1, =_edata
 800211a:	490d      	ldr	r1, [pc, #52]	@ (8002150 <LoopForever+0xa>)
  ldr r2, =_sidata
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <LoopForever+0xe>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002130:	4c0a      	ldr	r4, [pc, #40]	@ (800215c <LoopForever+0x16>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213e:	f005 fb9f 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002142:	f7ff f8c3 	bl	80012cc <main>

08002146 <LoopForever>:

LoopForever:
    b LoopForever
 8002146:	e7fe      	b.n	8002146 <LoopForever>
  ldr   r0, =_estack
 8002148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8002154:	08007934 	.word	0x08007934
  ldr r2, =_sbss
 8002158:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800215c:	20000678 	.word	0x20000678

08002160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC1_2_IRQHandler>

08002162 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002168:	2300      	movs	r3, #0
 800216a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216c:	2003      	movs	r0, #3
 800216e:	f001 fdd3 	bl	8003d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002172:	2000      	movs	r0, #0
 8002174:	f000 f80e 	bl	8002194 <HAL_InitTick>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	e001      	b.n	8002188 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002184:	f7ff fc5a 	bl	8001a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002188:	79fb      	ldrb	r3, [r7, #7]

}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800219c:	2300      	movs	r3, #0
 800219e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021a0:	4b16      	ldr	r3, [pc, #88]	@ (80021fc <HAL_InitTick+0x68>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d022      	beq.n	80021ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <HAL_InitTick+0x6c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	4b13      	ldr	r3, [pc, #76]	@ (80021fc <HAL_InitTick+0x68>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	4618      	mov	r0, r3
 80021be:	f001 fdde 	bl	8003d7e <HAL_SYSTICK_Config>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b0f      	cmp	r3, #15
 80021cc:	d809      	bhi.n	80021e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ce:	2200      	movs	r2, #0
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	f04f 30ff 	mov.w	r0, #4294967295
 80021d6:	f001 fdaa 	bl	8003d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021da:	4a0a      	ldr	r2, [pc, #40]	@ (8002204 <HAL_InitTick+0x70>)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	73fb      	strb	r3, [r7, #15]
 80021e6:	e004      	b.n	80021f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	73fb      	strb	r3, [r7, #15]
 80021ec:	e001      	b.n	80021f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000018 	.word	0x20000018
 8002200:	20000010 	.word	0x20000010
 8002204:	20000014 	.word	0x20000014

08002208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b05      	ldr	r3, [pc, #20]	@ (8002224 <HAL_IncTick+0x1c>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_IncTick+0x20>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4413      	add	r3, r2
 8002216:	4a03      	ldr	r2, [pc, #12]	@ (8002224 <HAL_IncTick+0x1c>)
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	20000674 	.word	0x20000674
 8002228:	20000018 	.word	0x20000018

0800222c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return uwTick;
 8002230:	4b03      	ldr	r3, [pc, #12]	@ (8002240 <HAL_GetTick+0x14>)
 8002232:	681b      	ldr	r3, [r3, #0]
}
 8002234:	4618      	mov	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000674 	.word	0x20000674

08002244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff ffee 	bl	800222c <HAL_GetTick>
 8002250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d004      	beq.n	8002268 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_Delay+0x40>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002268:	bf00      	nop
 800226a:	f7ff ffdf 	bl	800222c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	429a      	cmp	r2, r3
 8002278:	d8f7      	bhi.n	800226a <HAL_Delay+0x26>
  {
  }
}
 800227a:	bf00      	nop
 800227c:	bf00      	nop
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000018 	.word	0x20000018

08002288 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	609a      	str	r2, [r3, #8]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b087      	sub	sp, #28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3360      	adds	r3, #96	@ 0x60
 8002302:	461a      	mov	r2, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <LL_ADC_SetOffset+0x44>)
 8002312:	4013      	ands	r3, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800231a:	683a      	ldr	r2, [r7, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	4313      	orrs	r3, r2
 8002320:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	03fff000 	.word	0x03fff000

08002338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3360      	adds	r3, #96	@ 0x60
 8002346:	461a      	mov	r2, r3
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	3360      	adds	r3, #96	@ 0x60
 8002374:	461a      	mov	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800239a:	b480      	push	{r7}
 800239c:	b087      	sub	sp, #28
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3360      	adds	r3, #96	@ 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	431a      	orrs	r2, r3
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	3360      	adds	r3, #96	@ 0x60
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	4413      	add	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80023fa:	bf00      	nop
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	615a      	str	r2, [r3, #20]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800243c:	2b00      	cmp	r3, #0
 800243e:	d101      	bne.n	8002444 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002452:	b480      	push	{r7}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3330      	adds	r3, #48	@ 0x30
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	0a1b      	lsrs	r3, r3, #8
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	4413      	add	r3, r2
 8002470:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	f003 031f 	and.w	r3, r3, #31
 800247c:	211f      	movs	r1, #31
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	401a      	ands	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	f003 011f 	and.w	r1, r3, #31
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa01 f303 	lsl.w	r3, r1, r3
 8002498:	431a      	orrs	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b087      	sub	sp, #28
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3314      	adds	r3, #20
 80024ba:	461a      	mov	r2, r3
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	f003 0304 	and.w	r3, r3, #4
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	0d1b      	lsrs	r3, r3, #20
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2107      	movs	r1, #7
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	401a      	ands	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	0d1b      	lsrs	r3, r3, #20
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	431a      	orrs	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	43db      	mvns	r3, r3
 800251a:	401a      	ands	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0318 	and.w	r3, r3, #24
 8002522:	4908      	ldr	r1, [pc, #32]	@ (8002544 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002524:	40d9      	lsrs	r1, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	400b      	ands	r3, r1
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	431a      	orrs	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002536:	bf00      	nop
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	0007ffff 	.word	0x0007ffff

08002548 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 031f 	and.w	r3, r3, #31
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6093      	str	r3, [r2, #8]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800259c:	d101      	bne.n	80025a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025ec:	d101      	bne.n	80025f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025ee:	2301      	movs	r3, #1
 80025f0:	e000      	b.n	80025f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002614:	f043 0201 	orr.w	r2, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002638:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d101      	bne.n	8002668 <LL_ADC_IsEnabled+0x18>
 8002664:	2301      	movs	r3, #1
 8002666:	e000      	b.n	800266a <LL_ADC_IsEnabled+0x1a>
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b02      	cmp	r3, #2
 8002688:	d101      	bne.n	800268e <LL_ADC_IsDisableOngoing+0x18>
 800268a:	2301      	movs	r3, #1
 800268c:	e000      	b.n	8002690 <LL_ADC_IsDisableOngoing+0x1a>
 800268e:	2300      	movs	r3, #0
}
 8002690:	4618      	mov	r0, r3
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026b0:	f043 0204 	orr.w	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b04      	cmp	r3, #4
 80026d6:	d101      	bne.n	80026dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d8:	2301      	movs	r3, #1
 80026da:	e000      	b.n	80026de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 0308 	and.w	r3, r3, #8
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d101      	bne.n	8002702 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b089      	sub	sp, #36	@ 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1a9      	b.n	8002a7e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002734:	2b00      	cmp	r3, #0
 8002736:	d109      	bne.n	800274c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7fe f943 	bl	80009c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff19 	bl	8002588 <LL_ADC_IsDeepPowerDownEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d004      	beq.n	8002766 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff feff 	bl	8002564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff ff34 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d115      	bne.n	80027a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff ff18 	bl	80025b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002780:	4b9c      	ldr	r3, [pc, #624]	@ (80029f4 <HAL_ADC_Init+0x2e4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	4a9c      	ldr	r2, [pc, #624]	@ (80029f8 <HAL_ADC_Init+0x2e8>)
 8002788:	fba2 2303 	umull	r2, r3, r2, r3
 800278c:	099b      	lsrs	r3, r3, #6
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002794:	e002      	b.n	800279c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3b01      	subs	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f9      	bne.n	8002796 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff16 	bl	80025d8 <LL_ADC_IsInternalRegulatorEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10d      	bne.n	80027ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b6:	f043 0210 	orr.w	r2, r3, #16
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c2:	f043 0201 	orr.w	r2, r3, #1
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ff76 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 80027d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f040 8142 	bne.w	8002a6c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f040 813e 	bne.w	8002a6c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027f8:	f043 0202 	orr.w	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff ff23 	bl	8002650 <LL_ADC_IsEnabled>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d141      	bne.n	8002894 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002818:	d004      	beq.n	8002824 <HAL_ADC_Init+0x114>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a77      	ldr	r2, [pc, #476]	@ (80029fc <HAL_ADC_Init+0x2ec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d10f      	bne.n	8002844 <HAL_ADC_Init+0x134>
 8002824:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002828:	f7ff ff12 	bl	8002650 <LL_ADC_IsEnabled>
 800282c:	4604      	mov	r4, r0
 800282e:	4873      	ldr	r0, [pc, #460]	@ (80029fc <HAL_ADC_Init+0x2ec>)
 8002830:	f7ff ff0e 	bl	8002650 <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	4323      	orrs	r3, r4
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e012      	b.n	800286a <HAL_ADC_Init+0x15a>
 8002844:	486e      	ldr	r0, [pc, #440]	@ (8002a00 <HAL_ADC_Init+0x2f0>)
 8002846:	f7ff ff03 	bl	8002650 <LL_ADC_IsEnabled>
 800284a:	4604      	mov	r4, r0
 800284c:	486d      	ldr	r0, [pc, #436]	@ (8002a04 <HAL_ADC_Init+0x2f4>)
 800284e:	f7ff feff 	bl	8002650 <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	431c      	orrs	r4, r3
 8002856:	486c      	ldr	r0, [pc, #432]	@ (8002a08 <HAL_ADC_Init+0x2f8>)
 8002858:	f7ff fefa 	bl	8002650 <LL_ADC_IsEnabled>
 800285c:	4603      	mov	r3, r0
 800285e:	4323      	orrs	r3, r4
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002876:	d004      	beq.n	8002882 <HAL_ADC_Init+0x172>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a5f      	ldr	r2, [pc, #380]	@ (80029fc <HAL_ADC_Init+0x2ec>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_ADC_Init+0x176>
 8002882:	4a62      	ldr	r2, [pc, #392]	@ (8002a0c <HAL_ADC_Init+0x2fc>)
 8002884:	e000      	b.n	8002888 <HAL_ADC_Init+0x178>
 8002886:	4a62      	ldr	r2, [pc, #392]	@ (8002a10 <HAL_ADC_Init+0x300>)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f7ff fcfa 	bl	8002288 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7f5b      	ldrb	r3, [r3, #29]
 8002898:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800289e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d106      	bne.n	80028d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	045b      	lsls	r3, r3, #17
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	4b48      	ldr	r3, [pc, #288]	@ (8002a14 <HAL_ADC_Init+0x304>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	6812      	ldr	r2, [r2, #0]
 80028fa:	69b9      	ldr	r1, [r7, #24]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fee5 	bl	80026ea <LL_ADC_INJ_IsConversionOngoing>
 8002920:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d17f      	bne.n	8002a28 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d17c      	bne.n	8002a28 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002932:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800293a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800294a:	f023 0302 	bic.w	r3, r3, #2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	69b9      	ldr	r1, [r7, #24]
 8002954:	430b      	orrs	r3, r1
 8002956:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800296e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002978:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800297c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6911      	ldr	r1, [r2, #16]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	430b      	orrs	r3, r1
 800298a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800298e:	e013      	b.n	80029b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800299e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d12a      	bne.n	8002a18 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029d8:	4311      	orrs	r1, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029de:	4311      	orrs	r1, r2
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029e4:	430a      	orrs	r2, r1
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
 80029f2:	e019      	b.n	8002a28 <HAL_ADC_Init+0x318>
 80029f4:	20000010 	.word	0x20000010
 80029f8:	053e2d63 	.word	0x053e2d63
 80029fc:	50000100 	.word	0x50000100
 8002a00:	50000400 	.word	0x50000400
 8002a04:	50000500 	.word	0x50000500
 8002a08:	50000600 	.word	0x50000600
 8002a0c:	50000300 	.word	0x50000300
 8002a10:	50000700 	.word	0x50000700
 8002a14:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d10c      	bne.n	8002a4a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	f023 010f 	bic.w	r1, r3, #15
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	1e5a      	subs	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a48:	e007      	b.n	8002a5a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020f 	bic.w	r2, r2, #15
 8002a58:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a6a:	e007      	b.n	8002a7c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a70:	f043 0210 	orr.w	r2, r3, #16
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	@ 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd90      	pop	{r4, r7, pc}
 8002a86:	bf00      	nop

08002a88 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a9c:	d004      	beq.n	8002aa8 <HAL_ADC_Start_DMA+0x20>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a5a      	ldr	r2, [pc, #360]	@ (8002c0c <HAL_ADC_Start_DMA+0x184>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_Start_DMA+0x24>
 8002aa8:	4b59      	ldr	r3, [pc, #356]	@ (8002c10 <HAL_ADC_Start_DMA+0x188>)
 8002aaa:	e000      	b.n	8002aae <HAL_ADC_Start_DMA+0x26>
 8002aac:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_ADC_Start_DMA+0x18c>)
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fd4a 	bl	8002548 <LL_ADC_GetMultimode>
 8002ab4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff fe02 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 809b 	bne.w	8002bfe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_ADC_Start_DMA+0x4e>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e096      	b.n	8002c04 <HAL_ADC_Start_DMA+0x17c>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a4d      	ldr	r2, [pc, #308]	@ (8002c18 <HAL_ADC_Start_DMA+0x190>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d008      	beq.n	8002afa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	2b05      	cmp	r3, #5
 8002af2:	d002      	beq.n	8002afa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b09      	cmp	r3, #9
 8002af8:	d17a      	bne.n	8002bf0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fcf6 	bl	80034ec <ADC_Enable>
 8002b00:	4603      	mov	r3, r0
 8002b02:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d16d      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b12:	f023 0301 	bic.w	r3, r3, #1
 8002b16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a3a      	ldr	r2, [pc, #232]	@ (8002c0c <HAL_ADC_Start_DMA+0x184>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_ADC_Start_DMA+0xb4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c1c <HAL_ADC_Start_DMA+0x194>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d002      	beq.n	8002b38 <HAL_ADC_Start_DMA+0xb0>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	e003      	b.n	8002b40 <HAL_ADC_Start_DMA+0xb8>
 8002b38:	4b39      	ldr	r3, [pc, #228]	@ (8002c20 <HAL_ADC_Start_DMA+0x198>)
 8002b3a:	e001      	b.n	8002b40 <HAL_ADC_Start_DMA+0xb8>
 8002b3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d002      	beq.n	8002b4e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d105      	bne.n	8002b5a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d006      	beq.n	8002b74 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6a:	f023 0206 	bic.w	r2, r3, #6
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b72:	e002      	b.n	8002b7a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7e:	4a29      	ldr	r2, [pc, #164]	@ (8002c24 <HAL_ADC_Start_DMA+0x19c>)
 8002b80:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b86:	4a28      	ldr	r2, [pc, #160]	@ (8002c28 <HAL_ADC_Start_DMA+0x1a0>)
 8002b88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8e:	4a27      	ldr	r2, [pc, #156]	@ (8002c2c <HAL_ADC_Start_DMA+0x1a4>)
 8002b90:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	221c      	movs	r2, #28
 8002b98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0210 	orr.w	r2, r2, #16
 8002bb0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f042 0201 	orr.w	r2, r2, #1
 8002bc0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3340      	adds	r3, #64	@ 0x40
 8002bcc:	4619      	mov	r1, r3
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f001 f989 	bl	8003ee8 <HAL_DMA_Start_IT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff fd5c 	bl	800269c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002be4:	e00d      	b.n	8002c02 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002bee:	e008      	b.n	8002c02 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002bfc:	e001      	b.n	8002c02 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	50000100 	.word	0x50000100
 8002c10:	50000300 	.word	0x50000300
 8002c14:	50000700 	.word	0x50000700
 8002c18:	50000600 	.word	0x50000600
 8002c1c:	50000500 	.word	0x50000500
 8002c20:	50000400 	.word	0x50000400
 8002c24:	080036d7 	.word	0x080036d7
 8002c28:	080037af 	.word	0x080037af
 8002c2c:	080037cb 	.word	0x080037cb

08002c30 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b0b6      	sub	sp, #216	@ 0xd8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d102      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x24>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	f000 bc13 	b.w	80034b6 <HAL_ADC_ConfigChannel+0x84a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fd11 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 83f3 	bne.w	8003490 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f7ff fbcb 	bl	8002452 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fcff 	bl	80026c4 <LL_ADC_REG_IsConversionOngoing>
 8002cc6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fd0b 	bl	80026ea <LL_ADC_INJ_IsConversionOngoing>
 8002cd4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f040 81d9 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 81d4 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002cf4:	d10f      	bne.n	8002d16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7ff fbd2 	bl	80024aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fb79 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>
 8002d14:	e00e      	b.n	8002d34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6819      	ldr	r1, [r3, #0]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	461a      	mov	r2, r3
 8002d24:	f7ff fbc1 	bl	80024aa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fb69 	bl	8002406 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	695a      	ldr	r2, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	08db      	lsrs	r3, r3, #3
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d022      	beq.n	8002d9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6919      	ldr	r1, [r3, #16]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002d66:	f7ff fac3 	bl	80022f0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6919      	ldr	r1, [r3, #16]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7ff fb0f 	bl	800239a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d102      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x126>
 8002d8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d90:	e000      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x128>
 8002d92:	2300      	movs	r3, #0
 8002d94:	461a      	mov	r2, r3
 8002d96:	f7ff fb1b 	bl	80023d0 <LL_ADC_SetOffsetSaturation>
 8002d9a:	e17b      	b.n	8003094 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2100      	movs	r1, #0
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fac8 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10a      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x15c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fabd 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	e01e      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x19a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fab2 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002de6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002df6:	2320      	movs	r3, #32
 8002df8:	e004      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002dfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002dfe:	fab3 f383 	clz	r3, r3
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <HAL_ADC_ConfigChannel+0x1b2>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 031f 	and.w	r3, r3, #31
 8002e1c:	e018      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e42:	2320      	movs	r3, #32
 8002e44:	e004      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e4a:	fab3 f383 	clz	r3, r3
 8002e4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d106      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff fa81 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2101      	movs	r1, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff fa65 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10a      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x222>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fa5a 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	e01e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x260>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fa4f 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ea4:	fa93 f3a3 	rbit	r3, r3
 8002ea8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002eac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002eb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	e004      	b.n	8002eca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d105      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x278>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	0e9b      	lsrs	r3, r3, #26
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	e018      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002ef8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002efc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f08:	2320      	movs	r3, #32
 8002f0a:	e004      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f10:	fab3 f383 	clz	r3, r3
 8002f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	2101      	movs	r1, #1
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fa1e 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fa02 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2e8>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f9f7 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	0e9b      	lsrs	r3, r3, #26
 8002f4e:	f003 021f 	and.w	r2, r3, #31
 8002f52:	e01e      	b.n	8002f92 <HAL_ADC_ConfigChannel+0x326>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f9ec 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002f82:	2320      	movs	r3, #32
 8002f84:	e004      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f8a:	fab3 f383 	clz	r3, r3
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d105      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x33e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	0e9b      	lsrs	r3, r3, #26
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	e016      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002fbc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d106      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff f9bd 	bl	8002364 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2103      	movs	r1, #3
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff f9a1 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x3aa>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f996 	bl	8002338 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	f003 021f 	and.w	r2, r3, #31
 8003014:	e017      	b.n	8003046 <HAL_ADC_ConfigChannel+0x3da>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f98b 	bl	8002338 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800302e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003030:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003034:	2b00      	cmp	r3, #0
 8003036:	d101      	bne.n	800303c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003038:	2320      	movs	r3, #32
 800303a:	e003      	b.n	8003044 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800303c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800303e:	fab3 f383 	clz	r3, r3
 8003042:	b2db      	uxtb	r3, r3
 8003044:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d105      	bne.n	800305e <HAL_ADC_ConfigChannel+0x3f2>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	e011      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800306c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800306e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003070:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003076:	2320      	movs	r3, #32
 8003078:	e003      	b.n	8003082 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800307a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800307c:	fab3 f383 	clz	r3, r3
 8003080:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003082:	429a      	cmp	r2, r3
 8003084:	d106      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2200      	movs	r2, #0
 800308c:	2103      	movs	r1, #3
 800308e:	4618      	mov	r0, r3
 8003090:	f7ff f968 	bl	8002364 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fad9 	bl	8002650 <LL_ADC_IsEnabled>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f040 813d 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f7ff fa24 	bl	8002500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4aa2      	ldr	r2, [pc, #648]	@ (8003348 <HAL_ADC_ConfigChannel+0x6dc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	f040 812e 	bne.w	8003320 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10b      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x480>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	0e9b      	lsrs	r3, r3, #26
 80030da:	3301      	adds	r3, #1
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	2b09      	cmp	r3, #9
 80030e2:	bf94      	ite	ls
 80030e4:	2301      	movls	r3, #1
 80030e6:	2300      	movhi	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	e019      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4b4>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80030fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80030fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2b09      	cmp	r3, #9
 8003118:	bf94      	ite	ls
 800311a:	2301      	movls	r3, #1
 800311c:	2300      	movhi	r3, #0
 800311e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	2b00      	cmp	r3, #0
 8003122:	d079      	beq.n	8003218 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800312c:	2b00      	cmp	r3, #0
 800312e:	d107      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x4d4>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0e9b      	lsrs	r3, r3, #26
 8003136:	3301      	adds	r3, #1
 8003138:	069b      	lsls	r3, r3, #26
 800313a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800313e:	e015      	b.n	800316c <HAL_ADC_ConfigChannel+0x500>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003146:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003148:	fa93 f3a3 	rbit	r3, r3
 800314c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800314e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003150:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003158:	2320      	movs	r3, #32
 800315a:	e003      	b.n	8003164 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	3301      	adds	r3, #1
 8003166:	069b      	lsls	r3, r3, #26
 8003168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d109      	bne.n	800318c <HAL_ADC_ConfigChannel+0x520>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2101      	movs	r1, #1
 8003186:	fa01 f303 	lsl.w	r3, r1, r3
 800318a:	e017      	b.n	80031bc <HAL_ADC_ConfigChannel+0x550>
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003192:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800319a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800319c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800319e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	e003      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031aa:	fab3 f383 	clz	r3, r3
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f303 	lsl.w	r3, r1, r3
 80031bc:	ea42 0103 	orr.w	r1, r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d10a      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x576>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	0e9b      	lsrs	r3, r3, #26
 80031d2:	3301      	adds	r3, #1
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	051b      	lsls	r3, r3, #20
 80031e0:	e018      	b.n	8003214 <HAL_ADC_ConfigChannel+0x5a8>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031ea:	fa93 f3a3 	rbit	r3, r3
 80031ee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80031f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80031f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80031fa:	2320      	movs	r3, #32
 80031fc:	e003      	b.n	8003206 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80031fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3301      	adds	r3, #1
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4613      	mov	r3, r2
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	4413      	add	r3, r2
 8003212:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003214:	430b      	orrs	r3, r1
 8003216:	e07e      	b.n	8003316 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003220:	2b00      	cmp	r3, #0
 8003222:	d107      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x5c8>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0e9b      	lsrs	r3, r3, #26
 800322a:	3301      	adds	r3, #1
 800322c:	069b      	lsls	r3, r3, #26
 800322e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003232:	e015      	b.n	8003260 <HAL_ADC_ConfigChannel+0x5f4>
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003244:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800324c:	2320      	movs	r3, #32
 800324e:	e003      	b.n	8003258 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	3301      	adds	r3, #1
 800325a:	069b      	lsls	r3, r3, #26
 800325c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d109      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x614>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	2101      	movs	r1, #1
 800327a:	fa01 f303 	lsl.w	r3, r1, r3
 800327e:	e017      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x644>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	61fb      	str	r3, [r7, #28]
  return result;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003298:	2320      	movs	r3, #32
 800329a:	e003      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	fab3 f383 	clz	r3, r3
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3301      	adds	r3, #1
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	2101      	movs	r1, #1
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	ea42 0103 	orr.w	r1, r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10d      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x670>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	0e9b      	lsrs	r3, r3, #26
 80032c6:	3301      	adds	r3, #1
 80032c8:	f003 021f 	and.w	r2, r3, #31
 80032cc:	4613      	mov	r3, r2
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	4413      	add	r3, r2
 80032d2:	3b1e      	subs	r3, #30
 80032d4:	051b      	lsls	r3, r3, #20
 80032d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032da:	e01b      	b.n	8003314 <HAL_ADC_ConfigChannel+0x6a8>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	fa93 f3a3 	rbit	r3, r3
 80032e8:	613b      	str	r3, [r7, #16]
  return result;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d101      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80032f4:	2320      	movs	r3, #32
 80032f6:	e003      	b.n	8003300 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	3301      	adds	r3, #1
 8003302:	f003 021f 	and.w	r2, r3, #31
 8003306:	4613      	mov	r3, r2
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4413      	add	r3, r2
 800330c:	3b1e      	subs	r3, #30
 800330e:	051b      	lsls	r3, r3, #20
 8003310:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003314:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003316:	683a      	ldr	r2, [r7, #0]
 8003318:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331a:	4619      	mov	r1, r3
 800331c:	f7ff f8c5 	bl	80024aa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_ADC_ConfigChannel+0x6e0>)
 8003326:	4013      	ands	r3, r2
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80be 	beq.w	80034aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003336:	d004      	beq.n	8003342 <HAL_ADC_ConfigChannel+0x6d6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <HAL_ADC_ConfigChannel+0x6e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d10a      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x6ec>
 8003342:	4b04      	ldr	r3, [pc, #16]	@ (8003354 <HAL_ADC_ConfigChannel+0x6e8>)
 8003344:	e009      	b.n	800335a <HAL_ADC_ConfigChannel+0x6ee>
 8003346:	bf00      	nop
 8003348:	407f0000 	.word	0x407f0000
 800334c:	80080000 	.word	0x80080000
 8003350:	50000100 	.word	0x50000100
 8003354:	50000300 	.word	0x50000300
 8003358:	4b59      	ldr	r3, [pc, #356]	@ (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe ffba 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 8003360:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a56      	ldr	r2, [pc, #344]	@ (80034c4 <HAL_ADC_ConfigChannel+0x858>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d004      	beq.n	8003378 <HAL_ADC_ConfigChannel+0x70c>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <HAL_ADC_ConfigChannel+0x85c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d13a      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003378:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800337c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d134      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800338c:	d005      	beq.n	800339a <HAL_ADC_ConfigChannel+0x72e>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a4e      	ldr	r2, [pc, #312]	@ (80034cc <HAL_ADC_ConfigChannel+0x860>)
 8003394:	4293      	cmp	r3, r2
 8003396:	f040 8085 	bne.w	80034a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033a2:	d004      	beq.n	80033ae <HAL_ADC_ConfigChannel+0x742>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a49      	ldr	r2, [pc, #292]	@ (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d101      	bne.n	80033b2 <HAL_ADC_ConfigChannel+0x746>
 80033ae:	4a49      	ldr	r2, [pc, #292]	@ (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 80033b0:	e000      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x748>
 80033b2:	4a43      	ldr	r2, [pc, #268]	@ (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 80033b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f7fe ff75 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033c4:	4b44      	ldr	r3, [pc, #272]	@ (80034d8 <HAL_ADC_ConfigChannel+0x86c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	099b      	lsrs	r3, r3, #6
 80033ca:	4a44      	ldr	r2, [pc, #272]	@ (80034dc <HAL_ADC_ConfigChannel+0x870>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	099b      	lsrs	r3, r3, #6
 80033d2:	1c5a      	adds	r2, r3, #1
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033de:	e002      	b.n	80033e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1f9      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033ec:	e05a      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a3b      	ldr	r2, [pc, #236]	@ (80034e0 <HAL_ADC_ConfigChannel+0x874>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d125      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d11f      	bne.n	8003444 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a31      	ldr	r2, [pc, #196]	@ (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d104      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x7ac>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a34      	ldr	r2, [pc, #208]	@ (80034e4 <HAL_ADC_ConfigChannel+0x878>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d047      	beq.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003420:	d004      	beq.n	800342c <HAL_ADC_ConfigChannel+0x7c0>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a2a      	ldr	r2, [pc, #168]	@ (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d101      	bne.n	8003430 <HAL_ADC_ConfigChannel+0x7c4>
 800342c:	4a29      	ldr	r2, [pc, #164]	@ (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800342e:	e000      	b.n	8003432 <HAL_ADC_ConfigChannel+0x7c6>
 8003430:	4a23      	ldr	r2, [pc, #140]	@ (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 8003432:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe ff36 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003442:	e031      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a27      	ldr	r2, [pc, #156]	@ (80034e8 <HAL_ADC_ConfigChannel+0x87c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d12d      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800344e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d127      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1c      	ldr	r2, [pc, #112]	@ (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d022      	beq.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800346c:	d004      	beq.n	8003478 <HAL_ADC_ConfigChannel+0x80c>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <HAL_ADC_ConfigChannel+0x864>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_ADC_ConfigChannel+0x810>
 8003478:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <HAL_ADC_ConfigChannel+0x868>)
 800347a:	e000      	b.n	800347e <HAL_ADC_ConfigChannel+0x812>
 800347c:	4a10      	ldr	r2, [pc, #64]	@ (80034c0 <HAL_ADC_ConfigChannel+0x854>)
 800347e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003482:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003486:	4619      	mov	r1, r3
 8003488:	4610      	mov	r0, r2
 800348a:	f7fe ff10 	bl	80022ae <LL_ADC_SetCommonPathInternalCh>
 800348e:	e00c      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	f043 0220 	orr.w	r2, r3, #32
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80034a2:	e002      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034a4:	bf00      	nop
 80034a6:	e000      	b.n	80034aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80034b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	37d8      	adds	r7, #216	@ 0xd8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	50000700 	.word	0x50000700
 80034c4:	c3210000 	.word	0xc3210000
 80034c8:	90c00010 	.word	0x90c00010
 80034cc:	50000600 	.word	0x50000600
 80034d0:	50000100 	.word	0x50000100
 80034d4:	50000300 	.word	0x50000300
 80034d8:	20000010 	.word	0x20000010
 80034dc:	053e2d63 	.word	0x053e2d63
 80034e0:	c7520000 	.word	0xc7520000
 80034e4:	50000500 	.word	0x50000500
 80034e8:	cb840000 	.word	0xcb840000

080034ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff f8a7 	bl	8002650 <LL_ADC_IsEnabled>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d176      	bne.n	80035f6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	4b3c      	ldr	r3, [pc, #240]	@ (8003600 <ADC_Enable+0x114>)
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00d      	beq.n	8003532 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800351a:	f043 0210 	orr.w	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003526:	f043 0201 	orr.w	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e062      	b.n	80035f8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff f862 	bl	8002600 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003544:	d004      	beq.n	8003550 <ADC_Enable+0x64>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a2e      	ldr	r2, [pc, #184]	@ (8003604 <ADC_Enable+0x118>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <ADC_Enable+0x68>
 8003550:	4b2d      	ldr	r3, [pc, #180]	@ (8003608 <ADC_Enable+0x11c>)
 8003552:	e000      	b.n	8003556 <ADC_Enable+0x6a>
 8003554:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <ADC_Enable+0x120>)
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe febc 	bl	80022d4 <LL_ADC_GetCommonPathInternalCh>
 800355c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800355e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003562:	2b00      	cmp	r3, #0
 8003564:	d013      	beq.n	800358e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003566:	4b2a      	ldr	r3, [pc, #168]	@ (8003610 <ADC_Enable+0x124>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <ADC_Enable+0x128>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	1c5a      	adds	r2, r3, #1
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003580:	e002      	b.n	8003588 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3b01      	subs	r3, #1
 8003586:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f9      	bne.n	8003582 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800358e:	f7fe fe4d 	bl	800222c <HAL_GetTick>
 8003592:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003594:	e028      	b.n	80035e8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7ff f858 	bl	8002650 <LL_ADC_IsEnabled>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d104      	bne.n	80035b0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff f828 	bl	8002600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035b0:	f7fe fe3c 	bl	800222c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d914      	bls.n	80035e8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0301 	and.w	r3, r3, #1
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d00d      	beq.n	80035e8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d0:	f043 0210 	orr.w	r2, r3, #16
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035dc:	f043 0201 	orr.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d1cf      	bne.n	8003596 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	8000003f 	.word	0x8000003f
 8003604:	50000100 	.word	0x50000100
 8003608:	50000300 	.word	0x50000300
 800360c:	50000700 	.word	0x50000700
 8003610:	20000010 	.word	0x20000010
 8003614:	053e2d63 	.word	0x053e2d63

08003618 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff f826 	bl	8002676 <LL_ADC_IsDisableOngoing>
 800362a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff f80d 	bl	8002650 <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d047      	beq.n	80036cc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d144      	bne.n	80036cc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030d 	and.w	r3, r3, #13
 800364c:	2b01      	cmp	r3, #1
 800364e:	d10c      	bne.n	800366a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe ffe7 	bl	8002628 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2203      	movs	r2, #3
 8003660:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003662:	f7fe fde3 	bl	800222c <HAL_GetTick>
 8003666:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003668:	e029      	b.n	80036be <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366e:	f043 0210 	orr.w	r2, r3, #16
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800367a:	f043 0201 	orr.w	r2, r3, #1
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e023      	b.n	80036ce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003686:	f7fe fdd1 	bl	800222c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d914      	bls.n	80036be <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00d      	beq.n	80036be <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f043 0210 	orr.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b2:	f043 0201 	orr.w	r2, r3, #1
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e007      	b.n	80036ce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1dc      	bne.n	8003686 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d14b      	bne.n	8003788 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b00      	cmp	r3, #0
 8003708:	d021      	beq.n	800374e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fe8c 	bl	800242c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d032      	beq.n	8003780 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d12b      	bne.n	8003780 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11f      	bne.n	8003780 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800374c:	e018      	b.n	8003780 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d111      	bne.n	8003780 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800376c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d105      	bne.n	8003780 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7ff fa55 	bl	8002c30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003786:	e00e      	b.n	80037a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff fa5f 	bl	8002c58 <HAL_ADC_ErrorCallback>
}
 800379a:	e004      	b.n	80037a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	4798      	blx	r3
}
 80037a6:	bf00      	nop
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f7ff fa41 	bl	8002c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037c2:	bf00      	nop
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037e8:	f043 0204 	orr.w	r2, r3, #4
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f7ff fa31 	bl	8002c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80037f6:	bf00      	nop
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <LL_ADC_IsEnabled>:
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <LL_ADC_IsEnabled+0x18>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_IsEnabled+0x1a>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_StartCalibration>:
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003836:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003840:	4313      	orrs	r3, r2
 8003842:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	609a      	str	r2, [r3, #8]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <LL_ADC_IsCalibrationOnGoing>:
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800386a:	d101      	bne.n	8003870 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <LL_ADC_REG_IsConversionOngoing>:
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b04      	cmp	r3, #4
 8003890:	d101      	bne.n	8003896 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_ADCEx_Calibration_Start+0x1c>
 80038bc:	2302      	movs	r3, #2
 80038be:	e04d      	b.n	800395c <HAL_ADCEx_Calibration_Start+0xb8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fea5 	bl	8003618 <ADC_Disable>
 80038ce:	4603      	mov	r3, r0
 80038d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d136      	bne.n	8003946 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80038e0:	f023 0302 	bic.w	r3, r3, #2
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff96 	bl	8003824 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80038f8:	e014      	b.n	8003924 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3301      	adds	r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a18      	ldr	r2, [pc, #96]	@ (8003964 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d90d      	bls.n	8003924 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800390c:	f023 0312 	bic.w	r3, r3, #18
 8003910:	f043 0210 	orr.w	r2, r3, #16
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e01b      	b.n	800395c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff94 	bl	8003856 <LL_ADC_IsCalibrationOnGoing>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e2      	bne.n	80038fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003938:	f023 0303 	bic.w	r3, r3, #3
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003944:	e005      	b.n	8003952 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	f043 0210 	orr.w	r2, r3, #16
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800395a:	7bfb      	ldrb	r3, [r7, #15]
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	0004de01 	.word	0x0004de01

08003968 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b0a1      	sub	sp, #132	@ 0x84
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e0e7      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800398e:	2300      	movs	r3, #0
 8003990:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003992:	2300      	movs	r3, #0
 8003994:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800399e:	d102      	bne.n	80039a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a2:	60bb      	str	r3, [r7, #8]
 80039a4:	e009      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a6e      	ldr	r2, [pc, #440]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d102      	bne.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80039b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80039b2:	60bb      	str	r3, [r7, #8]
 80039b4:	e001      	b.n	80039ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	f043 0220 	orr.w	r2, r3, #32
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0be      	b.n	8003b56 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ff4f 	bl	800387e <LL_ADC_REG_IsConversionOngoing>
 80039e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff ff49 	bl	800387e <LL_ADC_REG_IsConversionOngoing>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f040 80a0 	bne.w	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80039f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 809c 	bne.w	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a04:	d004      	beq.n	8003a10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a55      	ldr	r2, [pc, #340]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003a10:	4b56      	ldr	r3, [pc, #344]	@ (8003b6c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a12:	e000      	b.n	8003a16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003a14:	4b56      	ldr	r3, [pc, #344]	@ (8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003a16:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d04b      	beq.n	8003ab8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a32:	035b      	lsls	r3, r3, #13
 8003a34:	430b      	orrs	r3, r1
 8003a36:	431a      	orrs	r2, r3
 8003a38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a44:	d004      	beq.n	8003a50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a45      	ldr	r2, [pc, #276]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d10f      	bne.n	8003a70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003a50:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003a54:	f7ff fed3 	bl	80037fe <LL_ADC_IsEnabled>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4841      	ldr	r0, [pc, #260]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a5c:	f7ff fecf 	bl	80037fe <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4323      	orrs	r3, r4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e012      	b.n	8003a96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003a70:	483c      	ldr	r0, [pc, #240]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a72:	f7ff fec4 	bl	80037fe <LL_ADC_IsEnabled>
 8003a76:	4604      	mov	r4, r0
 8003a78:	483b      	ldr	r0, [pc, #236]	@ (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a7a:	f7ff fec0 	bl	80037fe <LL_ADC_IsEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	431c      	orrs	r4, r3
 8003a82:	483c      	ldr	r0, [pc, #240]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003a84:	f7ff febb 	bl	80037fe <LL_ADC_IsEnabled>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4323      	orrs	r3, r4
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d056      	beq.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003aa2:	f023 030f 	bic.w	r3, r3, #15
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	6811      	ldr	r1, [r2, #0]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	6892      	ldr	r2, [r2, #8]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ab4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ab6:	e047      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003ab8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ac0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ac2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a23      	ldr	r2, [pc, #140]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10f      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003ad8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003adc:	f7ff fe8f 	bl	80037fe <LL_ADC_IsEnabled>
 8003ae0:	4604      	mov	r4, r0
 8003ae2:	481f      	ldr	r0, [pc, #124]	@ (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ae4:	f7ff fe8b 	bl	80037fe <LL_ADC_IsEnabled>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4323      	orrs	r3, r4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e012      	b.n	8003b1e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003af8:	481a      	ldr	r0, [pc, #104]	@ (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003afa:	f7ff fe80 	bl	80037fe <LL_ADC_IsEnabled>
 8003afe:	4604      	mov	r4, r0
 8003b00:	4819      	ldr	r0, [pc, #100]	@ (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b02:	f7ff fe7c 	bl	80037fe <LL_ADC_IsEnabled>
 8003b06:	4603      	mov	r3, r0
 8003b08:	431c      	orrs	r4, r3
 8003b0a:	481a      	ldr	r0, [pc, #104]	@ (8003b74 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b0c:	f7ff fe77 	bl	80037fe <LL_ADC_IsEnabled>
 8003b10:	4603      	mov	r3, r0
 8003b12:	4323      	orrs	r3, r4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d012      	beq.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003b2a:	f023 030f 	bic.w	r3, r3, #15
 8003b2e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b30:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b32:	e009      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b38:	f043 0220 	orr.w	r2, r3, #32
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003b46:	e000      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3784      	adds	r7, #132	@ 0x84
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd90      	pop	{r4, r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	50000100 	.word	0x50000100
 8003b64:	50000400 	.word	0x50000400
 8003b68:	50000500 	.word	0x50000500
 8003b6c:	50000300 	.word	0x50000300
 8003b70:	50000700 	.word	0x50000700
 8003b74:	50000600 	.word	0x50000600

08003b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b085      	sub	sp, #20
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b88:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b94:	4013      	ands	r3, r2
 8003b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003baa:	4a04      	ldr	r2, [pc, #16]	@ (8003bbc <__NVIC_SetPriorityGrouping+0x44>)
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	60d3      	str	r3, [r2, #12]
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	e000ed00 	.word	0xe000ed00

08003bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc4:	4b04      	ldr	r3, [pc, #16]	@ (8003bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	0a1b      	lsrs	r3, r3, #8
 8003bca:	f003 0307 	and.w	r3, r3, #7
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	e000ed00 	.word	0xe000ed00

08003bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	db0b      	blt.n	8003c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bee:	79fb      	ldrb	r3, [r7, #7]
 8003bf0:	f003 021f 	and.w	r2, r3, #31
 8003bf4:	4907      	ldr	r1, [pc, #28]	@ (8003c14 <__NVIC_EnableIRQ+0x38>)
 8003bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8003c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	e000e100 	.word	0xe000e100

08003c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	6039      	str	r1, [r7, #0]
 8003c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	db0a      	blt.n	8003c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	490c      	ldr	r1, [pc, #48]	@ (8003c64 <__NVIC_SetPriority+0x4c>)
 8003c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c36:	0112      	lsls	r2, r2, #4
 8003c38:	b2d2      	uxtb	r2, r2
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c40:	e00a      	b.n	8003c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	4908      	ldr	r1, [pc, #32]	@ (8003c68 <__NVIC_SetPriority+0x50>)
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	0112      	lsls	r2, r2, #4
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	440b      	add	r3, r1
 8003c56:	761a      	strb	r2, [r3, #24]
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000e100 	.word	0xe000e100
 8003c68:	e000ed00 	.word	0xe000ed00

08003c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	@ 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f1c3 0307 	rsb	r3, r3, #7
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	bf28      	it	cs
 8003c8a:	2304      	movcs	r3, #4
 8003c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	3304      	adds	r3, #4
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d902      	bls.n	8003c9c <NVIC_EncodePriority+0x30>
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	3b03      	subs	r3, #3
 8003c9a:	e000      	b.n	8003c9e <NVIC_EncodePriority+0x32>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43da      	mvns	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	401a      	ands	r2, r3
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	fa01 f303 	lsl.w	r3, r1, r3
 8003cbe:	43d9      	mvns	r1, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	4313      	orrs	r3, r2
         );
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3724      	adds	r7, #36	@ 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
	...

08003cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce4:	d301      	bcc.n	8003cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e00f      	b.n	8003d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cea:	4a0a      	ldr	r2, [pc, #40]	@ (8003d14 <SysTick_Config+0x40>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf2:	210f      	movs	r1, #15
 8003cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf8:	f7ff ff8e 	bl	8003c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <SysTick_Config+0x40>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d02:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <SysTick_Config+0x40>)
 8003d04:	2207      	movs	r2, #7
 8003d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	e000e010 	.word	0xe000e010

08003d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff29 	bl	8003b78 <__NVIC_SetPriorityGrouping>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b086      	sub	sp, #24
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	607a      	str	r2, [r7, #4]
 8003d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3c:	f7ff ff40 	bl	8003bc0 <__NVIC_GetPriorityGrouping>
 8003d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff90 	bl	8003c6c <NVIC_EncodePriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff5f 	bl	8003c18 <__NVIC_SetPriority>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff33 	bl	8003bdc <__NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffa4 	bl	8003cd4 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e08d      	b.n	8003ec6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	4b47      	ldr	r3, [pc, #284]	@ (8003ed0 <HAL_DMA_Init+0x138>)
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d80f      	bhi.n	8003dd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	461a      	mov	r2, r3
 8003dbc:	4b45      	ldr	r3, [pc, #276]	@ (8003ed4 <HAL_DMA_Init+0x13c>)
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a45      	ldr	r2, [pc, #276]	@ (8003ed8 <HAL_DMA_Init+0x140>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	009a      	lsls	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a42      	ldr	r2, [pc, #264]	@ (8003edc <HAL_DMA_Init+0x144>)
 8003dd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003dd4:	e00e      	b.n	8003df4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b40      	ldr	r3, [pc, #256]	@ (8003ee0 <HAL_DMA_Init+0x148>)
 8003dde:	4413      	add	r3, r2
 8003de0:	4a3d      	ldr	r2, [pc, #244]	@ (8003ed8 <HAL_DMA_Init+0x140>)
 8003de2:	fba2 2303 	umull	r2, r3, r2, r3
 8003de6:	091b      	lsrs	r3, r3, #4
 8003de8:	009a      	lsls	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a3c      	ldr	r2, [pc, #240]	@ (8003ee4 <HAL_DMA_Init+0x14c>)
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f908 	bl	800405c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e54:	d102      	bne.n	8003e5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d010      	beq.n	8003e9c <HAL_DMA_Init+0x104>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d80c      	bhi.n	8003e9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f928 	bl	80040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	e008      	b.n	8003eae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40020407 	.word	0x40020407
 8003ed4:	bffdfff8 	.word	0xbffdfff8
 8003ed8:	cccccccd 	.word	0xcccccccd
 8003edc:	40020000 	.word	0x40020000
 8003ee0:	bffdfbf8 	.word	0xbffdfbf8
 8003ee4:	40020400 	.word	0x40020400

08003ee8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_DMA_Start_IT+0x20>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e066      	b.n	8003fd6 <HAL_DMA_Start_IT+0xee>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d155      	bne.n	8003fc8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0201 	bic.w	r2, r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f84c 	bl	8003fde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d008      	beq.n	8003f60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 020e 	orr.w	r2, r2, #14
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e00f      	b.n	8003f80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0204 	bic.w	r2, r2, #4
 8003f6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 020a 	orr.w	r2, r2, #10
 8003f7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e005      	b.n	8003fd4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b085      	sub	sp, #20
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ff4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004006:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800400c:	f003 021f 	and.w	r2, r3, #31
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	2101      	movs	r1, #1
 8004016:	fa01 f202 	lsl.w	r2, r1, r2
 800401a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b10      	cmp	r3, #16
 800402a:	d108      	bne.n	800403e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800403c:	e007      	b.n	800404e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	60da      	str	r2, [r3, #12]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d802      	bhi.n	8004076 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004070:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e001      	b.n	800407a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004076:	4b15      	ldr	r3, [pc, #84]	@ (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004078:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	3b08      	subs	r3, #8
 8004086:	4a12      	ldr	r2, [pc, #72]	@ (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	461a      	mov	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a0b      	ldr	r2, [pc, #44]	@ (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 031f 	and.w	r3, r3, #31
 80040ae:	2201      	movs	r2, #1
 80040b0:	409a      	lsls	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80040b6:	bf00      	nop
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40020407 	.word	0x40020407
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020820 	.word	0x40020820
 80040d0:	cccccccd 	.word	0xcccccccd
 80040d4:	40020880 	.word	0x40020880

080040d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a08      	ldr	r2, [pc, #32]	@ (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80040fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	1000823f 	.word	0x1000823f
 800411c:	40020940 	.word	0x40020940

08004120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800412e:	e15a      	b.n	80043e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	fa01 f303 	lsl.w	r3, r1, r3
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 814c 	beq.w	80043e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 0303 	and.w	r3, r3, #3
 8004150:	2b01      	cmp	r3, #1
 8004152:	d005      	beq.n	8004160 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800415c:	2b02      	cmp	r3, #2
 800415e:	d130      	bne.n	80041c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	2203      	movs	r2, #3
 800416c:	fa02 f303 	lsl.w	r3, r2, r3
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004196:	2201      	movs	r2, #1
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	fa02 f303 	lsl.w	r3, r2, r3
 800419e:	43db      	mvns	r3, r3
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4013      	ands	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0201 	and.w	r2, r3, #1
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	2b03      	cmp	r3, #3
 80041cc:	d017      	beq.n	80041fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 0303 	and.w	r3, r3, #3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d123      	bne.n	8004252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	08da      	lsrs	r2, r3, #3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	3208      	adds	r2, #8
 8004212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	220f      	movs	r2, #15
 8004222:	fa02 f303 	lsl.w	r3, r2, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	08da      	lsrs	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3208      	adds	r2, #8
 800424c:	6939      	ldr	r1, [r7, #16]
 800424e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	2203      	movs	r2, #3
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43db      	mvns	r3, r3
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4013      	ands	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f003 0203 	and.w	r2, r3, #3
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	005b      	lsls	r3, r3, #1
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80a6 	beq.w	80043e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004294:	4b5b      	ldr	r3, [pc, #364]	@ (8004404 <HAL_GPIO_Init+0x2e4>)
 8004296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004298:	4a5a      	ldr	r2, [pc, #360]	@ (8004404 <HAL_GPIO_Init+0x2e4>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6613      	str	r3, [r2, #96]	@ 0x60
 80042a0:	4b58      	ldr	r3, [pc, #352]	@ (8004404 <HAL_GPIO_Init+0x2e4>)
 80042a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
 80042aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ac:	4a56      	ldr	r2, [pc, #344]	@ (8004408 <HAL_GPIO_Init+0x2e8>)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	089b      	lsrs	r3, r3, #2
 80042b2:	3302      	adds	r3, #2
 80042b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 0303 	and.w	r3, r3, #3
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	220f      	movs	r2, #15
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	43db      	mvns	r3, r3
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	4013      	ands	r3, r2
 80042ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042d6:	d01f      	beq.n	8004318 <HAL_GPIO_Init+0x1f8>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a4c      	ldr	r2, [pc, #304]	@ (800440c <HAL_GPIO_Init+0x2ec>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d019      	beq.n	8004314 <HAL_GPIO_Init+0x1f4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a4b      	ldr	r2, [pc, #300]	@ (8004410 <HAL_GPIO_Init+0x2f0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d013      	beq.n	8004310 <HAL_GPIO_Init+0x1f0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a4a      	ldr	r2, [pc, #296]	@ (8004414 <HAL_GPIO_Init+0x2f4>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00d      	beq.n	800430c <HAL_GPIO_Init+0x1ec>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a49      	ldr	r2, [pc, #292]	@ (8004418 <HAL_GPIO_Init+0x2f8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <HAL_GPIO_Init+0x1e8>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a48      	ldr	r2, [pc, #288]	@ (800441c <HAL_GPIO_Init+0x2fc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d101      	bne.n	8004304 <HAL_GPIO_Init+0x1e4>
 8004300:	2305      	movs	r3, #5
 8004302:	e00a      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 8004304:	2306      	movs	r3, #6
 8004306:	e008      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 8004308:	2304      	movs	r3, #4
 800430a:	e006      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 800430c:	2303      	movs	r3, #3
 800430e:	e004      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 8004310:	2302      	movs	r3, #2
 8004312:	e002      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 8004314:	2301      	movs	r3, #1
 8004316:	e000      	b.n	800431a <HAL_GPIO_Init+0x1fa>
 8004318:	2300      	movs	r3, #0
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	f002 0203 	and.w	r2, r2, #3
 8004320:	0092      	lsls	r2, r2, #2
 8004322:	4093      	lsls	r3, r2
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800432a:	4937      	ldr	r1, [pc, #220]	@ (8004408 <HAL_GPIO_Init+0x2e8>)
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	089b      	lsrs	r3, r3, #2
 8004330:	3302      	adds	r3, #2
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004338:	4b39      	ldr	r3, [pc, #228]	@ (8004420 <HAL_GPIO_Init+0x300>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800435c:	4a30      	ldr	r2, [pc, #192]	@ (8004420 <HAL_GPIO_Init+0x300>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_GPIO_Init+0x300>)
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	43db      	mvns	r3, r3
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	4013      	ands	r3, r2
 8004370:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004386:	4a26      	ldr	r2, [pc, #152]	@ (8004420 <HAL_GPIO_Init+0x300>)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800438c:	4b24      	ldr	r3, [pc, #144]	@ (8004420 <HAL_GPIO_Init+0x300>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	43db      	mvns	r3, r3
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	4013      	ands	r3, r2
 800439a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80043b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043b6:	4b1a      	ldr	r3, [pc, #104]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	43db      	mvns	r3, r3
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4013      	ands	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043da:	4a11      	ldr	r2, [pc, #68]	@ (8004420 <HAL_GPIO_Init+0x300>)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f ae9d 	bne.w	8004130 <HAL_GPIO_Init+0x10>
  }
}
 80043f6:	bf00      	nop
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	40010000 	.word	0x40010000
 800440c:	48000400 	.word	0x48000400
 8004410:	48000800 	.word	0x48000800
 8004414:	48000c00 	.word	0x48000c00
 8004418:	48001000 	.word	0x48001000
 800441c:	48001400 	.word	0x48001400
 8004420:	40010400 	.word	0x40010400

08004424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	807b      	strh	r3, [r7, #2]
 8004430:	4613      	mov	r3, r2
 8004432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004434:	787b      	ldrb	r3, [r7, #1]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004440:	e002      	b.n	8004448 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004442:	887a      	ldrh	r2, [r7, #2]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800445e:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	88fb      	ldrh	r3, [r7, #6]
 8004464:	4013      	ands	r3, r2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d006      	beq.n	8004478 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800446a:	4a05      	ldr	r2, [pc, #20]	@ (8004480 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800446c:	88fb      	ldrh	r3, [r7, #6]
 800446e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004470:	88fb      	ldrh	r3, [r7, #6]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f806 	bl	8004484 <HAL_GPIO_EXTI_Callback>
  }
}
 8004478:	bf00      	nop
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40010400 	.word	0x40010400

08004484 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e08d      	b.n	80045c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d106      	bne.n	80044c6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7fc fe85 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2224      	movs	r2, #36	@ 0x24
 80044ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685a      	ldr	r2, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80044ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004510:	609a      	str	r2, [r3, #8]
 8004512:	e006      	b.n	8004522 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004520:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	2b02      	cmp	r3, #2
 8004528:	d108      	bne.n	800453c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	e007      	b.n	800454c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800454a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6812      	ldr	r2, [r2, #0]
 8004556:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800455a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800455e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800456e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69d9      	ldr	r1, [r3, #28]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a1a      	ldr	r2, [r3, #32]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	4798      	blx	r3
  }
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b20      	cmp	r3, #32
 8004618:	d138      	bne.n	800468c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004620:	2b01      	cmp	r3, #1
 8004622:	d101      	bne.n	8004628 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004624:	2302      	movs	r3, #2
 8004626:	e032      	b.n	800468e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2224      	movs	r2, #36	@ 0x24
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004656:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	e000      	b.n	800468e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800468c:	2302      	movs	r3, #2
  }
}
 800468e:	4618      	mov	r0, r3
 8004690:	370c      	adds	r7, #12
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr

0800469a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d139      	bne.n	8004724 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d101      	bne.n	80046be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80046ba:	2302      	movs	r3, #2
 80046bc:	e033      	b.n	8004726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2224      	movs	r2, #36	@ 0x24
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0201 	bic.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80046ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	021b      	lsls	r3, r3, #8
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004720:	2300      	movs	r3, #0
 8004722:	e000      	b.n	8004726 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004724:	2302      	movs	r3, #2
  }
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004738:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	4a04      	ldr	r2, [pc, #16]	@ (8004750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800473e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004742:	6093      	str	r3, [r2, #8]
}
 8004744:	bf00      	nop
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40007000 	.word	0x40007000

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800475a:	4b2c      	ldr	r3, [pc, #176]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 030c 	and.w	r3, r3, #12
 8004762:	2b04      	cmp	r3, #4
 8004764:	d102      	bne.n	800476c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004766:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e047      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800476c:	4b27      	ldr	r3, [pc, #156]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d102      	bne.n	800477e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004778:	4b26      	ldr	r3, [pc, #152]	@ (8004814 <HAL_RCC_GetSysClockFreq+0xc0>)
 800477a:	613b      	str	r3, [r7, #16]
 800477c:	e03e      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800477e:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 030c 	and.w	r3, r3, #12
 8004786:	2b0c      	cmp	r3, #12
 8004788:	d136      	bne.n	80047f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800478a:	4b20      	ldr	r3, [pc, #128]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004794:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	3301      	adds	r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b03      	cmp	r3, #3
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047a8:	4a1a      	ldr	r2, [pc, #104]	@ (8004814 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	4a16      	ldr	r2, [pc, #88]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b2:	68d2      	ldr	r2, [r2, #12]
 80047b4:	0a12      	lsrs	r2, r2, #8
 80047b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047ba:	fb02 f303 	mul.w	r3, r2, r3
 80047be:	617b      	str	r3, [r7, #20]
      break;
 80047c0:	e00c      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047c2:	4a13      	ldr	r2, [pc, #76]	@ (8004810 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ca:	4a10      	ldr	r2, [pc, #64]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	0a12      	lsrs	r2, r2, #8
 80047d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047d4:	fb02 f303 	mul.w	r3, r2, r3
 80047d8:	617b      	str	r3, [r7, #20]
      break;
 80047da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	0e5b      	lsrs	r3, r3, #25
 80047e2:	f003 0303 	and.w	r3, r3, #3
 80047e6:	3301      	adds	r3, #1
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80047ec:	697a      	ldr	r2, [r7, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f4:	613b      	str	r3, [r7, #16]
 80047f6:	e001      	b.n	80047fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80047f8:	2300      	movs	r3, #0
 80047fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047fc:	693b      	ldr	r3, [r7, #16]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	371c      	adds	r7, #28
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40021000 	.word	0x40021000
 8004810:	00f42400 	.word	0x00f42400
 8004814:	016e3600 	.word	0x016e3600

08004818 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800481c:	4b03      	ldr	r3, [pc, #12]	@ (800482c <HAL_RCC_GetHCLKFreq+0x14>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	4618      	mov	r0, r3
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	20000010 	.word	0x20000010

08004830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004834:	f7ff fff0 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004838:	4602      	mov	r2, r0
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <HAL_RCC_GetPCLK1Freq+0x24>)
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	0a1b      	lsrs	r3, r3, #8
 8004840:	f003 0307 	and.w	r3, r3, #7
 8004844:	4904      	ldr	r1, [pc, #16]	@ (8004858 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004846:	5ccb      	ldrb	r3, [r1, r3]
 8004848:	f003 031f 	and.w	r3, r3, #31
 800484c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	080078f4 	.word	0x080078f4

0800485c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004860:	f7ff ffda 	bl	8004818 <HAL_RCC_GetHCLKFreq>
 8004864:	4602      	mov	r2, r0
 8004866:	4b06      	ldr	r3, [pc, #24]	@ (8004880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	0adb      	lsrs	r3, r3, #11
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	4904      	ldr	r1, [pc, #16]	@ (8004884 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004872:	5ccb      	ldrb	r3, [r1, r3]
 8004874:	f003 031f 	and.w	r3, r3, #31
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40021000 	.word	0x40021000
 8004884:	080078f4 	.word	0x080078f4

08004888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004890:	2300      	movs	r3, #0
 8004892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004894:	2300      	movs	r3, #0
 8004896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8098 	beq.w	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048a6:	2300      	movs	r3, #0
 80048a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048aa:	4b43      	ldr	r3, [pc, #268]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048b6:	4b40      	ldr	r3, [pc, #256]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	4a3f      	ldr	r2, [pc, #252]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c2:	4b3d      	ldr	r3, [pc, #244]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048ce:	2301      	movs	r3, #1
 80048d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048d2:	4b3a      	ldr	r3, [pc, #232]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048de:	f7fd fca5 	bl	800222c <HAL_GetTick>
 80048e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048e4:	e009      	b.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048e6:	f7fd fca1 	bl	800222c <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d902      	bls.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	74fb      	strb	r3, [r7, #19]
        break;
 80048f8:	e005      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048fa:	4b30      	ldr	r3, [pc, #192]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0ef      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004906:	7cfb      	ldrb	r3, [r7, #19]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d159      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800490c:	4b2a      	ldr	r3, [pc, #168]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01e      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	429a      	cmp	r2, r3
 8004926:	d019      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004928:	4b23      	ldr	r3, [pc, #140]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800492a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800492e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004934:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	4a1f      	ldr	r2, [pc, #124]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004940:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004944:	4b1c      	ldr	r3, [pc, #112]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	4a1b      	ldr	r2, [pc, #108]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800494c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004954:	4a18      	ldr	r2, [pc, #96]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004966:	f7fd fc61 	bl	800222c <HAL_GetTick>
 800496a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800496c:	e00b      	b.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800496e:	f7fd fc5d 	bl	800222c <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497c:	4293      	cmp	r3, r2
 800497e:	d902      	bls.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	74fb      	strb	r3, [r7, #19]
            break;
 8004984:	e006      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0ec      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004994:	7cfb      	ldrb	r3, [r7, #19]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049a8:	4903      	ldr	r1, [pc, #12]	@ (80049b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049b0:	e008      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049b2:	7cfb      	ldrb	r3, [r7, #19]
 80049b4:	74bb      	strb	r3, [r7, #18]
 80049b6:	e005      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80049b8:	40021000 	.word	0x40021000
 80049bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049c4:	7c7b      	ldrb	r3, [r7, #17]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ca:	4ba7      	ldr	r3, [pc, #668]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ce:	4aa6      	ldr	r2, [pc, #664]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049e2:	4ba1      	ldr	r3, [pc, #644]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f023 0203 	bic.w	r2, r3, #3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	499d      	ldr	r1, [pc, #628]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a04:	4b98      	ldr	r3, [pc, #608]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 020c 	bic.w	r2, r3, #12
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	4995      	ldr	r1, [pc, #596]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0304 	and.w	r3, r3, #4
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00a      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a26:	4b90      	ldr	r3, [pc, #576]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	498c      	ldr	r1, [pc, #560]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00a      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a48:	4b87      	ldr	r3, [pc, #540]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4984      	ldr	r1, [pc, #528]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0310 	and.w	r3, r3, #16
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	497b      	ldr	r1, [pc, #492]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00a      	beq.n	8004aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a8c:	4b76      	ldr	r3, [pc, #472]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	699b      	ldr	r3, [r3, #24]
 8004a9a:	4973      	ldr	r1, [pc, #460]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aae:	4b6e      	ldr	r3, [pc, #440]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	496a      	ldr	r1, [pc, #424]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00a      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ad0:	4b65      	ldr	r3, [pc, #404]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	4962      	ldr	r1, [pc, #392]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004af2:	4b5d      	ldr	r3, [pc, #372]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	4959      	ldr	r1, [pc, #356]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00a      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b14:	4b54      	ldr	r3, [pc, #336]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b1a:	f023 0203 	bic.w	r2, r3, #3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	4951      	ldr	r1, [pc, #324]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b36:	4b4c      	ldr	r3, [pc, #304]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	4948      	ldr	r1, [pc, #288]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d015      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b58:	4b43      	ldr	r3, [pc, #268]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b66:	4940      	ldr	r1, [pc, #256]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b76:	d105      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b78:	4b3b      	ldr	r3, [pc, #236]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d015      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b90:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9e:	4932      	ldr	r1, [pc, #200]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004baa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004bc8:	4b27      	ldr	r3, [pc, #156]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd6:	4924      	ldr	r1, [pc, #144]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004be6:	d105      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004be8:	4b1f      	ldr	r3, [pc, #124]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	4a1e      	ldr	r2, [pc, #120]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bf2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d015      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c00:	4b19      	ldr	r3, [pc, #100]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0e:	4916      	ldr	r1, [pc, #88]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c1e:	d105      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c20:	4b11      	ldr	r3, [pc, #68]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4a10      	ldr	r2, [pc, #64]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d019      	beq.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	4908      	ldr	r1, [pc, #32]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c56:	d109      	bne.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c58:	4b03      	ldr	r3, [pc, #12]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	4a02      	ldr	r2, [pc, #8]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e002      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004c66:	bf00      	nop
 8004c68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d015      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004c78:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c7e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c86:	4926      	ldr	r1, [pc, #152]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c98:	4b21      	ldr	r3, [pc, #132]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	4a20      	ldr	r2, [pc, #128]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004c9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ca2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d015      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cbe:	4918      	ldr	r1, [pc, #96]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cce:	d105      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004cd0:	4b13      	ldr	r3, [pc, #76]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	4a12      	ldr	r2, [pc, #72]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d015      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cf6:	490a      	ldr	r1, [pc, #40]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d14:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3718      	adds	r7, #24
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000

08004d24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e049      	b.n	8004dca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d106      	bne.n	8004d50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd f85e 	bl	8001e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f000 ffdc 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3708      	adds	r7, #8
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004dd2:	b580      	push	{r7, lr}
 8004dd4:	b082      	sub	sp, #8
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e049      	b.n	8004e78 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f841 	bl	8004e80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4610      	mov	r0, r2
 8004e12:	f000 ff85 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2201      	movs	r2, #1
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2201      	movs	r2, #1
 8004e4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d109      	bne.n	8004eb8 <HAL_TIM_PWM_Start+0x24>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	bf14      	ite	ne
 8004eb0:	2301      	movne	r3, #1
 8004eb2:	2300      	moveq	r3, #0
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e03c      	b.n	8004f32 <HAL_TIM_PWM_Start+0x9e>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d109      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x3e>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	bf14      	ite	ne
 8004eca:	2301      	movne	r3, #1
 8004ecc:	2300      	moveq	r3, #0
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	e02f      	b.n	8004f32 <HAL_TIM_PWM_Start+0x9e>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d109      	bne.n	8004eec <HAL_TIM_PWM_Start+0x58>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	bf14      	ite	ne
 8004ee4:	2301      	movne	r3, #1
 8004ee6:	2300      	moveq	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e022      	b.n	8004f32 <HAL_TIM_PWM_Start+0x9e>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d109      	bne.n	8004f06 <HAL_TIM_PWM_Start+0x72>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	bf14      	ite	ne
 8004efe:	2301      	movne	r3, #1
 8004f00:	2300      	moveq	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e015      	b.n	8004f32 <HAL_TIM_PWM_Start+0x9e>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d109      	bne.n	8004f20 <HAL_TIM_PWM_Start+0x8c>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e008      	b.n	8004f32 <HAL_TIM_PWM_Start+0x9e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0a6      	b.n	8005088 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_PWM_Start+0xb6>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f48:	e023      	b.n	8004f92 <HAL_TIM_PWM_Start+0xfe>
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d104      	bne.n	8004f5a <HAL_TIM_PWM_Start+0xc6>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f58:	e01b      	b.n	8004f92 <HAL_TIM_PWM_Start+0xfe>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d104      	bne.n	8004f6a <HAL_TIM_PWM_Start+0xd6>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f68:	e013      	b.n	8004f92 <HAL_TIM_PWM_Start+0xfe>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b0c      	cmp	r3, #12
 8004f6e:	d104      	bne.n	8004f7a <HAL_TIM_PWM_Start+0xe6>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2202      	movs	r2, #2
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f78:	e00b      	b.n	8004f92 <HAL_TIM_PWM_Start+0xfe>
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b10      	cmp	r3, #16
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xf6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f88:	e003      	b.n	8004f92 <HAL_TIM_PWM_Start+0xfe>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	6839      	ldr	r1, [r7, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 fc64 	bl	8006868 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8005090 <HAL_TIM_PWM_Start+0x1fc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x148>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a39      	ldr	r2, [pc, #228]	@ (8005094 <HAL_TIM_PWM_Start+0x200>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x148>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a37      	ldr	r2, [pc, #220]	@ (8005098 <HAL_TIM_PWM_Start+0x204>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x148>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a36      	ldr	r2, [pc, #216]	@ (800509c <HAL_TIM_PWM_Start+0x208>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x148>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a34      	ldr	r2, [pc, #208]	@ (80050a0 <HAL_TIM_PWM_Start+0x20c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_PWM_Start+0x148>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a33      	ldr	r2, [pc, #204]	@ (80050a4 <HAL_TIM_PWM_Start+0x210>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d101      	bne.n	8004fe0 <HAL_TIM_PWM_Start+0x14c>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e000      	b.n	8004fe2 <HAL_TIM_PWM_Start+0x14e>
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d007      	beq.n	8004ff6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a25      	ldr	r2, [pc, #148]	@ (8005090 <HAL_TIM_PWM_Start+0x1fc>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d022      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005008:	d01d      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a26      	ldr	r2, [pc, #152]	@ (80050a8 <HAL_TIM_PWM_Start+0x214>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d018      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a24      	ldr	r2, [pc, #144]	@ (80050ac <HAL_TIM_PWM_Start+0x218>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a23      	ldr	r2, [pc, #140]	@ (80050b0 <HAL_TIM_PWM_Start+0x21c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d00e      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a19      	ldr	r2, [pc, #100]	@ (8005094 <HAL_TIM_PWM_Start+0x200>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d009      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a18      	ldr	r2, [pc, #96]	@ (8005098 <HAL_TIM_PWM_Start+0x204>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d004      	beq.n	8005046 <HAL_TIM_PWM_Start+0x1b2>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIM_PWM_Start+0x210>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d115      	bne.n	8005072 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	4b19      	ldr	r3, [pc, #100]	@ (80050b4 <HAL_TIM_PWM_Start+0x220>)
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2b06      	cmp	r3, #6
 8005056:	d015      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1f0>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800505e:	d011      	beq.n	8005084 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005070:	e008      	b.n	8005084 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e000      	b.n	8005086 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40013400 	.word	0x40013400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800
 80050a4:	40015000 	.word	0x40015000
 80050a8:	40000400 	.word	0x40000400
 80050ac:	40000800 	.word	0x40000800
 80050b0:	40000c00 	.word	0x40000c00
 80050b4:	00010007 	.word	0x00010007

080050b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e049      	b.n	800515e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f841 	bl	8005166 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	3304      	adds	r3, #4
 80050f4:	4619      	mov	r1, r3
 80050f6:	4610      	mov	r0, r2
 80050f8:	f000 fe12 	bl	8005d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
	...

0800517c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d104      	bne.n	800519a <HAL_TIM_IC_Start_IT+0x1e>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e023      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x66>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b04      	cmp	r3, #4
 800519e:	d104      	bne.n	80051aa <HAL_TIM_IC_Start_IT+0x2e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	e01b      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x66>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_IC_Start_IT+0x3e>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e013      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x66>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b0c      	cmp	r3, #12
 80051be:	d104      	bne.n	80051ca <HAL_TIM_IC_Start_IT+0x4e>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	e00b      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x66>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d104      	bne.n	80051da <HAL_TIM_IC_Start_IT+0x5e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e003      	b.n	80051e2 <HAL_TIM_IC_Start_IT+0x66>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <HAL_TIM_IC_Start_IT+0x78>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e013      	b.n	800521c <HAL_TIM_IC_Start_IT+0xa0>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d104      	bne.n	8005204 <HAL_TIM_IC_Start_IT+0x88>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e00b      	b.n	800521c <HAL_TIM_IC_Start_IT+0xa0>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b08      	cmp	r3, #8
 8005208:	d104      	bne.n	8005214 <HAL_TIM_IC_Start_IT+0x98>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005210:	b2db      	uxtb	r3, r3
 8005212:	e003      	b.n	800521c <HAL_TIM_IC_Start_IT+0xa0>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800521a:	b2db      	uxtb	r3, r3
 800521c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800521e:	7bbb      	ldrb	r3, [r7, #14]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d102      	bne.n	800522a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005224:	7b7b      	ldrb	r3, [r7, #13]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e0e2      	b.n	80053f4 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d104      	bne.n	800523e <HAL_TIM_IC_Start_IT+0xc2>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800523c:	e023      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x10a>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d104      	bne.n	800524e <HAL_TIM_IC_Start_IT+0xd2>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800524c:	e01b      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x10a>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b08      	cmp	r3, #8
 8005252:	d104      	bne.n	800525e <HAL_TIM_IC_Start_IT+0xe2>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2202      	movs	r2, #2
 8005258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800525c:	e013      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x10a>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b0c      	cmp	r3, #12
 8005262:	d104      	bne.n	800526e <HAL_TIM_IC_Start_IT+0xf2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800526c:	e00b      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x10a>
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	2b10      	cmp	r3, #16
 8005272:	d104      	bne.n	800527e <HAL_TIM_IC_Start_IT+0x102>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800527c:	e003      	b.n	8005286 <HAL_TIM_IC_Start_IT+0x10a>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start_IT+0x11a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005294:	e013      	b.n	80052be <HAL_TIM_IC_Start_IT+0x142>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_IC_Start_IT+0x12a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052a4:	e00b      	b.n	80052be <HAL_TIM_IC_Start_IT+0x142>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start_IT+0x13a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052b4:	e003      	b.n	80052be <HAL_TIM_IC_Start_IT+0x142>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b0c      	cmp	r3, #12
 80052c2:	d841      	bhi.n	8005348 <HAL_TIM_IC_Start_IT+0x1cc>
 80052c4:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <HAL_TIM_IC_Start_IT+0x150>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005301 	.word	0x08005301
 80052d0:	08005349 	.word	0x08005349
 80052d4:	08005349 	.word	0x08005349
 80052d8:	08005349 	.word	0x08005349
 80052dc:	08005313 	.word	0x08005313
 80052e0:	08005349 	.word	0x08005349
 80052e4:	08005349 	.word	0x08005349
 80052e8:	08005349 	.word	0x08005349
 80052ec:	08005325 	.word	0x08005325
 80052f0:	08005349 	.word	0x08005349
 80052f4:	08005349 	.word	0x08005349
 80052f8:	08005349 	.word	0x08005349
 80052fc:	08005337 	.word	0x08005337
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0202 	orr.w	r2, r2, #2
 800530e:	60da      	str	r2, [r3, #12]
      break;
 8005310:	e01d      	b.n	800534e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0204 	orr.w	r2, r2, #4
 8005320:	60da      	str	r2, [r3, #12]
      break;
 8005322:	e014      	b.n	800534e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68da      	ldr	r2, [r3, #12]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f042 0208 	orr.w	r2, r2, #8
 8005332:	60da      	str	r2, [r3, #12]
      break;
 8005334:	e00b      	b.n	800534e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f042 0210 	orr.w	r2, r2, #16
 8005344:	60da      	str	r2, [r3, #12]
      break;
 8005346:	e002      	b.n	800534e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
      break;
 800534c:	bf00      	nop
  }

  if (status == HAL_OK)
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d14e      	bne.n	80053f2 <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2201      	movs	r2, #1
 800535a:	6839      	ldr	r1, [r7, #0]
 800535c:	4618      	mov	r0, r3
 800535e:	f001 fa83 	bl	8006868 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a25      	ldr	r2, [pc, #148]	@ (80053fc <HAL_TIM_IC_Start_IT+0x280>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d022      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d01d      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <HAL_TIM_IC_Start_IT+0x284>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d018      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <HAL_TIM_IC_Start_IT+0x288>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1e      	ldr	r2, [pc, #120]	@ (8005408 <HAL_TIM_IC_Start_IT+0x28c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <HAL_TIM_IC_Start_IT+0x290>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d009      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005410 <HAL_TIM_IC_Start_IT+0x294>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_TIM_IC_Start_IT+0x236>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a19      	ldr	r2, [pc, #100]	@ (8005414 <HAL_TIM_IC_Start_IT+0x298>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d115      	bne.n	80053de <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <HAL_TIM_IC_Start_IT+0x29c>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d015      	beq.n	80053f0 <HAL_TIM_IC_Start_IT+0x274>
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053ca:	d011      	beq.n	80053f0 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f042 0201 	orr.w	r2, r2, #1
 80053da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053dc:	e008      	b.n	80053f0 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0201 	orr.w	r2, r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e000      	b.n	80053f2 <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80053f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40012c00 	.word	0x40012c00
 8005400:	40000400 	.word	0x40000400
 8005404:	40000800 	.word	0x40000800
 8005408:	40000c00 	.word	0x40000c00
 800540c:	40013400 	.word	0x40013400
 8005410:	40014000 	.word	0x40014000
 8005414:	40015000 	.word	0x40015000
 8005418:	00010007 	.word	0x00010007

0800541c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d020      	beq.n	8005480 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01b      	beq.n	8005480 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0202 	mvn.w	r2, #2
 8005450:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fb fdc2 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 800546c:	e005      	b.n	800547a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fc38 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fc3f 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f003 0304 	and.w	r3, r3, #4
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01b      	beq.n	80054cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0204 	mvn.w	r2, #4
 800549c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7fb fd9c 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fc12 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fc19 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f003 0308 	and.w	r3, r3, #8
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d020      	beq.n	8005518 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f003 0308 	and.w	r3, r3, #8
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01b      	beq.n	8005518 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0208 	mvn.w	r2, #8
 80054e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2204      	movs	r2, #4
 80054ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d003      	beq.n	8005506 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fb fd76 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005504:	e005      	b.n	8005512 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fbec 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 fbf3 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 0310 	and.w	r3, r3, #16
 800551e:	2b00      	cmp	r3, #0
 8005520:	d020      	beq.n	8005564 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f003 0310 	and.w	r3, r3, #16
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01b      	beq.n	8005564 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f06f 0210 	mvn.w	r2, #16
 8005534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2208      	movs	r2, #8
 800553a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fd50 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8005550:	e005      	b.n	800555e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fbc6 	bl	8005ce4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fbcd 	bl	8005cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b00      	cmp	r3, #0
 8005576:	d007      	beq.n	8005588 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0201 	mvn.w	r2, #1
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fba4 	bl	8005cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800558e:	2b00      	cmp	r3, #0
 8005590:	d104      	bne.n	800559c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00c      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d007      	beq.n	80055b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f001 fab3 	bl	8006b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00c      	beq.n	80055da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80055d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f001 faab 	bl	8006b30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00c      	beq.n	80055fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 fb87 	bl	8005d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00c      	beq.n	8005622 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0220 	mvn.w	r2, #32
 800561a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fa73 	bl	8006b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00c      	beq.n	8005646 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800563e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f001 fa7f 	bl	8006b44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d007      	beq.n	800566a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 fa77 	bl	8006b58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00c      	beq.n	800568e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d007      	beq.n	800568e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fa6f 	bl	8006b6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00c      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f001 fa67 	bl	8006b80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056b2:	bf00      	nop
 80056b4:	3710      	adds	r7, #16
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b086      	sub	sp, #24
 80056be:	af00      	add	r7, sp, #0
 80056c0:	60f8      	str	r0, [r7, #12]
 80056c2:	60b9      	str	r1, [r7, #8]
 80056c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e088      	b.n	80057ea <HAL_TIM_IC_ConfigChannel+0x130>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d11b      	bne.n	800571e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80056f6:	f000 fef1 	bl	80064dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699a      	ldr	r2, [r3, #24]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 020c 	bic.w	r2, r2, #12
 8005708:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6999      	ldr	r1, [r3, #24]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	619a      	str	r2, [r3, #24]
 800571c:	e060      	b.n	80057e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b04      	cmp	r3, #4
 8005722:	d11c      	bne.n	800575e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005734:	f000 ff75 	bl	8006622 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699a      	ldr	r2, [r3, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005746:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6999      	ldr	r1, [r3, #24]
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	619a      	str	r2, [r3, #24]
 800575c:	e040      	b.n	80057e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b08      	cmp	r3, #8
 8005762:	d11b      	bne.n	800579c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005774:	f000 ffc2 	bl	80066fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 020c 	bic.w	r2, r2, #12
 8005786:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69d9      	ldr	r1, [r3, #28]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	61da      	str	r2, [r3, #28]
 800579a:	e021      	b.n	80057e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b0c      	cmp	r3, #12
 80057a0:	d11c      	bne.n	80057dc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80057b2:	f000 ffdf 	bl	8006774 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057c4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69d9      	ldr	r1, [r3, #28]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	021a      	lsls	r2, r3, #8
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	61da      	str	r2, [r3, #28]
 80057da:	e001      	b.n	80057e0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3718      	adds	r7, #24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b086      	sub	sp, #24
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005800:	2300      	movs	r3, #0
 8005802:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800580a:	2b01      	cmp	r3, #1
 800580c:	d101      	bne.n	8005812 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800580e:	2302      	movs	r3, #2
 8005810:	e0ff      	b.n	8005a12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b14      	cmp	r3, #20
 800581e:	f200 80f0 	bhi.w	8005a02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005822:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	0800587d 	.word	0x0800587d
 800582c:	08005a03 	.word	0x08005a03
 8005830:	08005a03 	.word	0x08005a03
 8005834:	08005a03 	.word	0x08005a03
 8005838:	080058bd 	.word	0x080058bd
 800583c:	08005a03 	.word	0x08005a03
 8005840:	08005a03 	.word	0x08005a03
 8005844:	08005a03 	.word	0x08005a03
 8005848:	080058ff 	.word	0x080058ff
 800584c:	08005a03 	.word	0x08005a03
 8005850:	08005a03 	.word	0x08005a03
 8005854:	08005a03 	.word	0x08005a03
 8005858:	0800593f 	.word	0x0800593f
 800585c:	08005a03 	.word	0x08005a03
 8005860:	08005a03 	.word	0x08005a03
 8005864:	08005a03 	.word	0x08005a03
 8005868:	08005981 	.word	0x08005981
 800586c:	08005a03 	.word	0x08005a03
 8005870:	08005a03 	.word	0x08005a03
 8005874:	08005a03 	.word	0x08005a03
 8005878:	080059c1 	.word	0x080059c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68b9      	ldr	r1, [r7, #8]
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb00 	bl	8005e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	699a      	ldr	r2, [r3, #24]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0208 	orr.w	r2, r2, #8
 8005896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	699a      	ldr	r2, [r3, #24]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f022 0204 	bic.w	r2, r2, #4
 80058a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6999      	ldr	r1, [r3, #24]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	619a      	str	r2, [r3, #24]
      break;
 80058ba:	e0a5      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68b9      	ldr	r1, [r7, #8]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 fb7a 	bl	8005fbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699a      	ldr	r2, [r3, #24]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6999      	ldr	r1, [r3, #24]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	691b      	ldr	r3, [r3, #16]
 80058f2:	021a      	lsls	r2, r3, #8
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	430a      	orrs	r2, r1
 80058fa:	619a      	str	r2, [r3, #24]
      break;
 80058fc:	e084      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fbed 	bl	80060e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	69da      	ldr	r2, [r3, #28]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0208 	orr.w	r2, r2, #8
 8005918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 0204 	bic.w	r2, r2, #4
 8005928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69d9      	ldr	r1, [r3, #28]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	691a      	ldr	r2, [r3, #16]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	430a      	orrs	r2, r1
 800593a:	61da      	str	r2, [r3, #28]
      break;
 800593c:	e064      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fc5f 	bl	8006208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69da      	ldr	r2, [r3, #28]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005958:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005968:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69d9      	ldr	r1, [r3, #28]
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	021a      	lsls	r2, r3, #8
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	430a      	orrs	r2, r1
 800597c:	61da      	str	r2, [r3, #28]
      break;
 800597e:	e043      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	4618      	mov	r0, r3
 8005988:	f000 fcd2 	bl	8006330 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0208 	orr.w	r2, r2, #8
 800599a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0204 	bic.w	r2, r2, #4
 80059aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	691a      	ldr	r2, [r3, #16]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	430a      	orrs	r2, r1
 80059bc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80059be:	e023      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68b9      	ldr	r1, [r7, #8]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fd1c 	bl	8006404 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059da:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ea:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	021a      	lsls	r2, r3, #8
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005a00:	e002      	b.n	8005a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	75fb      	strb	r3, [r7, #23]
      break;
 8005a06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop

08005a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIM_ConfigClockSource+0x1c>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e0f6      	b.n	8005c26 <HAL_TIM_ConfigClockSource+0x20a>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a6f      	ldr	r2, [pc, #444]	@ (8005c30 <HAL_TIM_ConfigClockSource+0x214>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	f000 80c1 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005a78:	4a6d      	ldr	r2, [pc, #436]	@ (8005c30 <HAL_TIM_ConfigClockSource+0x214>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	f200 80c6 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a80:	4a6c      	ldr	r2, [pc, #432]	@ (8005c34 <HAL_TIM_ConfigClockSource+0x218>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	f000 80b9 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005a88:	4a6a      	ldr	r2, [pc, #424]	@ (8005c34 <HAL_TIM_ConfigClockSource+0x218>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	f200 80be 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005a90:	4a69      	ldr	r2, [pc, #420]	@ (8005c38 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	f000 80b1 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005a98:	4a67      	ldr	r2, [pc, #412]	@ (8005c38 <HAL_TIM_ConfigClockSource+0x21c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	f200 80b6 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005aa0:	4a66      	ldr	r2, [pc, #408]	@ (8005c3c <HAL_TIM_ConfigClockSource+0x220>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	f000 80a9 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005aa8:	4a64      	ldr	r2, [pc, #400]	@ (8005c3c <HAL_TIM_ConfigClockSource+0x220>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f200 80ae 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ab0:	4a63      	ldr	r2, [pc, #396]	@ (8005c40 <HAL_TIM_ConfigClockSource+0x224>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	f000 80a1 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005ab8:	4a61      	ldr	r2, [pc, #388]	@ (8005c40 <HAL_TIM_ConfigClockSource+0x224>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	f200 80a6 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ac0:	4a60      	ldr	r2, [pc, #384]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x228>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	f000 8099 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8005c44 <HAL_TIM_ConfigClockSource+0x228>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	f200 809e 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ad0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005ad4:	f000 8091 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005ad8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005adc:	f200 8096 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ae0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ae4:	f000 8089 	beq.w	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005ae8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aec:	f200 808e 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af4:	d03e      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0x158>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afa:	f200 8087 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b02:	f000 8086 	beq.w	8005c12 <HAL_TIM_ConfigClockSource+0x1f6>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0a:	d87f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b0c:	2b70      	cmp	r3, #112	@ 0x70
 8005b0e:	d01a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x12a>
 8005b10:	2b70      	cmp	r3, #112	@ 0x70
 8005b12:	d87b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b14:	2b60      	cmp	r3, #96	@ 0x60
 8005b16:	d050      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x19e>
 8005b18:	2b60      	cmp	r3, #96	@ 0x60
 8005b1a:	d877      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b1c:	2b50      	cmp	r3, #80	@ 0x50
 8005b1e:	d03c      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0x17e>
 8005b20:	2b50      	cmp	r3, #80	@ 0x50
 8005b22:	d873      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b24:	2b40      	cmp	r3, #64	@ 0x40
 8005b26:	d058      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x1be>
 8005b28:	2b40      	cmp	r3, #64	@ 0x40
 8005b2a:	d86f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b2c:	2b30      	cmp	r3, #48	@ 0x30
 8005b2e:	d064      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005b30:	2b30      	cmp	r3, #48	@ 0x30
 8005b32:	d86b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d060      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d867      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d05c      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d05a      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x1de>
 8005b44:	e062      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b56:	f000 fe67 	bl	8006828 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	609a      	str	r2, [r3, #8]
      break;
 8005b72:	e04f      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b84:	f000 fe50 	bl	8006828 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b96:	609a      	str	r2, [r3, #8]
      break;
 8005b98:	e03c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fd0c 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2150      	movs	r1, #80	@ 0x50
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fe1b 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e02c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fd68 	bl	800669c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2160      	movs	r1, #96	@ 0x60
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fe0b 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e01c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 fcec 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2140      	movs	r1, #64	@ 0x40
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fdfb 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e00c      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fdf2 	bl	80067ee <TIM_ITRx_SetConfig>
      break;
 8005c0a:	e003      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c10:	e000      	b.n	8005c14 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005c12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	00100070 	.word	0x00100070
 8005c34:	00100060 	.word	0x00100060
 8005c38:	00100050 	.word	0x00100050
 8005c3c:	00100040 	.word	0x00100040
 8005c40:	00100030 	.word	0x00100030
 8005c44:	00100020 	.word	0x00100020

08005c48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b0c      	cmp	r3, #12
 8005c5a:	d831      	bhi.n	8005cc0 <HAL_TIM_ReadCapturedValue+0x78>
 8005c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c62:	bf00      	nop
 8005c64:	08005c99 	.word	0x08005c99
 8005c68:	08005cc1 	.word	0x08005cc1
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005cc1 	.word	0x08005cc1
 8005c74:	08005ca3 	.word	0x08005ca3
 8005c78:	08005cc1 	.word	0x08005cc1
 8005c7c:	08005cc1 	.word	0x08005cc1
 8005c80:	08005cc1 	.word	0x08005cc1
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cc1 	.word	0x08005cc1
 8005c8c:	08005cc1 	.word	0x08005cc1
 8005c90:	08005cc1 	.word	0x08005cc1
 8005c94:	08005cb7 	.word	0x08005cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9e:	60fb      	str	r3, [r7, #12]

      break;
 8005ca0:	e00f      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca8:	60fb      	str	r3, [r7, #12]

      break;
 8005caa:	e00a      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb2:	60fb      	str	r3, [r7, #12]

      break;
 8005cb4:	e005      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbc:	60fb      	str	r3, [r7, #12]

      break;
 8005cbe:	e000      	b.n	8005cc2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005cc0:	bf00      	nop
  }

  return tmpreg;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3714      	adds	r7, #20
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b085      	sub	sp, #20
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a4c      	ldr	r2, [pc, #304]	@ (8005e64 <TIM_Base_SetConfig+0x144>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d017      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d3e:	d013      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a49      	ldr	r2, [pc, #292]	@ (8005e68 <TIM_Base_SetConfig+0x148>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00f      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a48      	ldr	r2, [pc, #288]	@ (8005e6c <TIM_Base_SetConfig+0x14c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00b      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a47      	ldr	r2, [pc, #284]	@ (8005e70 <TIM_Base_SetConfig+0x150>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d007      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a46      	ldr	r2, [pc, #280]	@ (8005e74 <TIM_Base_SetConfig+0x154>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_Base_SetConfig+0x48>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a45      	ldr	r2, [pc, #276]	@ (8005e78 <TIM_Base_SetConfig+0x158>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d108      	bne.n	8005d7a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a39      	ldr	r2, [pc, #228]	@ (8005e64 <TIM_Base_SetConfig+0x144>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d023      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d88:	d01f      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a36      	ldr	r2, [pc, #216]	@ (8005e68 <TIM_Base_SetConfig+0x148>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d01b      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a35      	ldr	r2, [pc, #212]	@ (8005e6c <TIM_Base_SetConfig+0x14c>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d017      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a34      	ldr	r2, [pc, #208]	@ (8005e70 <TIM_Base_SetConfig+0x150>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d013      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a33      	ldr	r2, [pc, #204]	@ (8005e74 <TIM_Base_SetConfig+0x154>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d00f      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a33      	ldr	r2, [pc, #204]	@ (8005e7c <TIM_Base_SetConfig+0x15c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00b      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a32      	ldr	r2, [pc, #200]	@ (8005e80 <TIM_Base_SetConfig+0x160>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a31      	ldr	r2, [pc, #196]	@ (8005e84 <TIM_Base_SetConfig+0x164>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d003      	beq.n	8005dca <TIM_Base_SetConfig+0xaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8005e78 <TIM_Base_SetConfig+0x158>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d108      	bne.n	8005ddc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <TIM_Base_SetConfig+0x144>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d013      	beq.n	8005e30 <TIM_Base_SetConfig+0x110>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005e74 <TIM_Base_SetConfig+0x154>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00f      	beq.n	8005e30 <TIM_Base_SetConfig+0x110>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a1a      	ldr	r2, [pc, #104]	@ (8005e7c <TIM_Base_SetConfig+0x15c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d00b      	beq.n	8005e30 <TIM_Base_SetConfig+0x110>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <TIM_Base_SetConfig+0x160>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d007      	beq.n	8005e30 <TIM_Base_SetConfig+0x110>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <TIM_Base_SetConfig+0x164>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d003      	beq.n	8005e30 <TIM_Base_SetConfig+0x110>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	@ (8005e78 <TIM_Base_SetConfig+0x158>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d103      	bne.n	8005e38 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	691a      	ldr	r2, [r3, #16]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d105      	bne.n	8005e56 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f023 0201 	bic.w	r2, r3, #1
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	611a      	str	r2, [r3, #16]
  }
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40012c00 	.word	0x40012c00
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40013400 	.word	0x40013400
 8005e78:	40015000 	.word	0x40015000
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f023 0201 	bic.w	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0303 	bic.w	r3, r3, #3
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 0302 	bic.w	r3, r3, #2
 8005ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a30      	ldr	r2, [pc, #192]	@ (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <TIM_OC1_SetConfig+0x88>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a2f      	ldr	r2, [pc, #188]	@ (8005fa8 <TIM_OC1_SetConfig+0x120>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d00f      	beq.n	8005f10 <TIM_OC1_SetConfig+0x88>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8005fac <TIM_OC1_SetConfig+0x124>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00b      	beq.n	8005f10 <TIM_OC1_SetConfig+0x88>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb0 <TIM_OC1_SetConfig+0x128>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC1_SetConfig+0x88>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb4 <TIM_OC1_SetConfig+0x12c>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC1_SetConfig+0x88>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8005fb8 <TIM_OC1_SetConfig+0x130>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0308 	bic.w	r3, r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa4 <TIM_OC1_SetConfig+0x11c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d013      	beq.n	8005f5a <TIM_OC1_SetConfig+0xd2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa8 <TIM_OC1_SetConfig+0x120>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00f      	beq.n	8005f5a <TIM_OC1_SetConfig+0xd2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <TIM_OC1_SetConfig+0x124>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d00b      	beq.n	8005f5a <TIM_OC1_SetConfig+0xd2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1a      	ldr	r2, [pc, #104]	@ (8005fb0 <TIM_OC1_SetConfig+0x128>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d007      	beq.n	8005f5a <TIM_OC1_SetConfig+0xd2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a19      	ldr	r2, [pc, #100]	@ (8005fb4 <TIM_OC1_SetConfig+0x12c>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d003      	beq.n	8005f5a <TIM_OC1_SetConfig+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a18      	ldr	r2, [pc, #96]	@ (8005fb8 <TIM_OC1_SetConfig+0x130>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d111      	bne.n	8005f7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	693a      	ldr	r2, [r7, #16]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	621a      	str	r2, [r3, #32]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr
 8005fa4:	40012c00 	.word	0x40012c00
 8005fa8:	40013400 	.word	0x40013400
 8005fac:	40014000 	.word	0x40014000
 8005fb0:	40014400 	.word	0x40014400
 8005fb4:	40014800 	.word	0x40014800
 8005fb8:	40015000 	.word	0x40015000

08005fbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f023 0210 	bic.w	r2, r3, #16
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0320 	bic.w	r3, r3, #32
 800600a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	011b      	lsls	r3, r3, #4
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a2c      	ldr	r2, [pc, #176]	@ (80060cc <TIM_OC2_SetConfig+0x110>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_OC2_SetConfig+0x74>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a2b      	ldr	r2, [pc, #172]	@ (80060d0 <TIM_OC2_SetConfig+0x114>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC2_SetConfig+0x74>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a2a      	ldr	r2, [pc, #168]	@ (80060d4 <TIM_OC2_SetConfig+0x118>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10d      	bne.n	800604c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1f      	ldr	r2, [pc, #124]	@ (80060cc <TIM_OC2_SetConfig+0x110>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_OC2_SetConfig+0xc0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1e      	ldr	r2, [pc, #120]	@ (80060d0 <TIM_OC2_SetConfig+0x114>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_OC2_SetConfig+0xc0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1e      	ldr	r2, [pc, #120]	@ (80060d8 <TIM_OC2_SetConfig+0x11c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_OC2_SetConfig+0xc0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1d      	ldr	r2, [pc, #116]	@ (80060dc <TIM_OC2_SetConfig+0x120>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_OC2_SetConfig+0xc0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a1c      	ldr	r2, [pc, #112]	@ (80060e0 <TIM_OC2_SetConfig+0x124>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_OC2_SetConfig+0xc0>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a17      	ldr	r2, [pc, #92]	@ (80060d4 <TIM_OC2_SetConfig+0x118>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d113      	bne.n	80060a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40012c00 	.word	0x40012c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40015000 	.word	0x40015000
 80060d8:	40014000 	.word	0x40014000
 80060dc:	40014400 	.word	0x40014400
 80060e0:	40014800 	.word	0x40014800

080060e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b087      	sub	sp, #28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f023 0303 	bic.w	r3, r3, #3
 800611e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006130:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	021b      	lsls	r3, r3, #8
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a2b      	ldr	r2, [pc, #172]	@ (80061f0 <TIM_OC3_SetConfig+0x10c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <TIM_OC3_SetConfig+0x72>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a2a      	ldr	r2, [pc, #168]	@ (80061f4 <TIM_OC3_SetConfig+0x110>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d003      	beq.n	8006156 <TIM_OC3_SetConfig+0x72>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a29      	ldr	r2, [pc, #164]	@ (80061f8 <TIM_OC3_SetConfig+0x114>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10d      	bne.n	8006172 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800615c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a1e      	ldr	r2, [pc, #120]	@ (80061f0 <TIM_OC3_SetConfig+0x10c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <TIM_OC3_SetConfig+0xbe>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4a1d      	ldr	r2, [pc, #116]	@ (80061f4 <TIM_OC3_SetConfig+0x110>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00f      	beq.n	80061a2 <TIM_OC3_SetConfig+0xbe>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1d      	ldr	r2, [pc, #116]	@ (80061fc <TIM_OC3_SetConfig+0x118>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d00b      	beq.n	80061a2 <TIM_OC3_SetConfig+0xbe>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a1c      	ldr	r2, [pc, #112]	@ (8006200 <TIM_OC3_SetConfig+0x11c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d007      	beq.n	80061a2 <TIM_OC3_SetConfig+0xbe>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a1b      	ldr	r2, [pc, #108]	@ (8006204 <TIM_OC3_SetConfig+0x120>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d003      	beq.n	80061a2 <TIM_OC3_SetConfig+0xbe>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <TIM_OC3_SetConfig+0x114>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d113      	bne.n	80061ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40013400 	.word	0x40013400
 80061f8:	40015000 	.word	0x40015000
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800

08006208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <TIM_OC4_SetConfig+0x110>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d007      	beq.n	800627c <TIM_OC4_SetConfig+0x74>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_OC4_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC4_SetConfig+0x74>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_OC4_SetConfig+0x118>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	031b      	lsls	r3, r3, #12
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1f      	ldr	r2, [pc, #124]	@ (8006318 <TIM_OC4_SetConfig+0x110>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_OC4_SetConfig+0xc0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <TIM_OC4_SetConfig+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_OC4_SetConfig+0xc0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <TIM_OC4_SetConfig+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_OC4_SetConfig+0xc0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <TIM_OC4_SetConfig+0x120>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_OC4_SetConfig+0xc0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <TIM_OC4_SetConfig+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC4_SetConfig+0xc0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <TIM_OC4_SetConfig+0x118>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d113      	bne.n	80062f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80062d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	019b      	lsls	r3, r3, #6
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	019b      	lsls	r3, r3, #6
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40015000 	.word	0x40015000
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006374:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	041b      	lsls	r3, r3, #16
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4313      	orrs	r3, r2
 8006380:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a19      	ldr	r2, [pc, #100]	@ (80063ec <TIM_OC5_SetConfig+0xbc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d013      	beq.n	80063b2 <TIM_OC5_SetConfig+0x82>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a18      	ldr	r2, [pc, #96]	@ (80063f0 <TIM_OC5_SetConfig+0xc0>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00f      	beq.n	80063b2 <TIM_OC5_SetConfig+0x82>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a17      	ldr	r2, [pc, #92]	@ (80063f4 <TIM_OC5_SetConfig+0xc4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d00b      	beq.n	80063b2 <TIM_OC5_SetConfig+0x82>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a16      	ldr	r2, [pc, #88]	@ (80063f8 <TIM_OC5_SetConfig+0xc8>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d007      	beq.n	80063b2 <TIM_OC5_SetConfig+0x82>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a15      	ldr	r2, [pc, #84]	@ (80063fc <TIM_OC5_SetConfig+0xcc>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d003      	beq.n	80063b2 <TIM_OC5_SetConfig+0x82>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a14      	ldr	r2, [pc, #80]	@ (8006400 <TIM_OC5_SetConfig+0xd0>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d109      	bne.n	80063c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	021b      	lsls	r3, r3, #8
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	693a      	ldr	r2, [r7, #16]
 80063de:	621a      	str	r2, [r3, #32]
}
 80063e0:	bf00      	nop
 80063e2:	371c      	adds	r7, #28
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	40012c00 	.word	0x40012c00
 80063f0:	40013400 	.word	0x40013400
 80063f4:	40014000 	.word	0x40014000
 80063f8:	40014400 	.word	0x40014400
 80063fc:	40014800 	.word	0x40014800
 8006400:	40015000 	.word	0x40015000

08006404 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006404:	b480      	push	{r7}
 8006406:	b087      	sub	sp, #28
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a1b      	ldr	r3, [r3, #32]
 8006418:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800642a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800644a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	051b      	lsls	r3, r3, #20
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	4313      	orrs	r3, r2
 8006456:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1a      	ldr	r2, [pc, #104]	@ (80064c4 <TIM_OC6_SetConfig+0xc0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_OC6_SetConfig+0x84>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a19      	ldr	r2, [pc, #100]	@ (80064c8 <TIM_OC6_SetConfig+0xc4>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00f      	beq.n	8006488 <TIM_OC6_SetConfig+0x84>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a18      	ldr	r2, [pc, #96]	@ (80064cc <TIM_OC6_SetConfig+0xc8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_OC6_SetConfig+0x84>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a17      	ldr	r2, [pc, #92]	@ (80064d0 <TIM_OC6_SetConfig+0xcc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_OC6_SetConfig+0x84>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <TIM_OC6_SetConfig+0xd0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_OC6_SetConfig+0x84>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a15      	ldr	r2, [pc, #84]	@ (80064d8 <TIM_OC6_SetConfig+0xd4>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d109      	bne.n	800649c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	029b      	lsls	r3, r3, #10
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	4313      	orrs	r3, r2
 800649a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	40012c00 	.word	0x40012c00
 80064c8:	40013400 	.word	0x40013400
 80064cc:	40014000 	.word	0x40014000
 80064d0:	40014400 	.word	0x40014400
 80064d4:	40014800 	.word	0x40014800
 80064d8:	40015000 	.word	0x40015000

080064dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80064dc:	b480      	push	{r7}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1b      	ldr	r3, [r3, #32]
 80064ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6a1b      	ldr	r3, [r3, #32]
 80064f4:	f023 0201 	bic.w	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a28      	ldr	r2, [pc, #160]	@ (80065a8 <TIM_TI1_SetConfig+0xcc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01b      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006510:	d017      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	4a25      	ldr	r2, [pc, #148]	@ (80065ac <TIM_TI1_SetConfig+0xd0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d013      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4a24      	ldr	r2, [pc, #144]	@ (80065b0 <TIM_TI1_SetConfig+0xd4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d00f      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4a23      	ldr	r2, [pc, #140]	@ (80065b4 <TIM_TI1_SetConfig+0xd8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00b      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	4a22      	ldr	r2, [pc, #136]	@ (80065b8 <TIM_TI1_SetConfig+0xdc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d007      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4a21      	ldr	r2, [pc, #132]	@ (80065bc <TIM_TI1_SetConfig+0xe0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_TI1_SetConfig+0x66>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a20      	ldr	r2, [pc, #128]	@ (80065c0 <TIM_TI1_SetConfig+0xe4>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d101      	bne.n	8006546 <TIM_TI1_SetConfig+0x6a>
 8006542:	2301      	movs	r3, #1
 8006544:	e000      	b.n	8006548 <TIM_TI1_SetConfig+0x6c>
 8006546:	2300      	movs	r3, #0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d008      	beq.n	800655e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0303 	bic.w	r3, r3, #3
 8006552:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
 800655c:	e003      	b.n	8006566 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f043 0301 	orr.w	r3, r3, #1
 8006564:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800656c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	011b      	lsls	r3, r3, #4
 8006572:	b2db      	uxtb	r3, r3
 8006574:	697a      	ldr	r2, [r7, #20]
 8006576:	4313      	orrs	r3, r2
 8006578:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	f023 030a 	bic.w	r3, r3, #10
 8006580:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f003 030a 	and.w	r3, r3, #10
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	40012c00 	.word	0x40012c00
 80065ac:	40000400 	.word	0x40000400
 80065b0:	40000800 	.word	0x40000800
 80065b4:	40000c00 	.word	0x40000c00
 80065b8:	40013400 	.word	0x40013400
 80065bc:	40014000 	.word	0x40014000
 80065c0:	40015000 	.word	0x40015000

080065c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f023 0210 	bic.w	r2, r3, #16
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800664e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	021b      	lsls	r3, r3, #8
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4313      	orrs	r3, r2
 8006658:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	031b      	lsls	r3, r3, #12
 8006666:	b29b      	uxth	r3, r3
 8006668:	693a      	ldr	r2, [r7, #16]
 800666a:	4313      	orrs	r3, r2
 800666c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006674:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	621a      	str	r2, [r3, #32]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a1b      	ldr	r3, [r3, #32]
 80066ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	f023 0210 	bic.w	r2, r3, #16
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	031b      	lsls	r3, r3, #12
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80066d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	371c      	adds	r7, #28
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f023 0303 	bic.w	r3, r3, #3
 8006728:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006738:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	b2db      	uxtb	r3, r3
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	4313      	orrs	r3, r2
 8006744:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800674c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	621a      	str	r2, [r3, #32]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a1b      	ldr	r3, [r3, #32]
 8006786:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	031b      	lsls	r3, r3, #12
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80067c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	031b      	lsls	r3, r3, #12
 80067cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	f043 0307 	orr.w	r3, r3, #7
 8006814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	609a      	str	r2, [r3, #8]
}
 800681c:	bf00      	nop
 800681e:	3714      	adds	r7, #20
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006842:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	021a      	lsls	r2, r3, #8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	431a      	orrs	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4313      	orrs	r3, r2
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	697a      	ldr	r2, [r7, #20]
 800685a:	609a      	str	r2, [r3, #8]
}
 800685c:	bf00      	nop
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f003 031f 	and.w	r3, r3, #31
 800687a:	2201      	movs	r2, #1
 800687c:	fa02 f303 	lsl.w	r3, r2, r3
 8006880:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1a      	ldr	r2, [r3, #32]
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	43db      	mvns	r3, r3
 800688a:	401a      	ands	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	6879      	ldr	r1, [r7, #4]
 800689c:	fa01 f303 	lsl.w	r3, r1, r3
 80068a0:	431a      	orrs	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	621a      	str	r2, [r3, #32]
}
 80068a6:	bf00      	nop
 80068a8:	371c      	adds	r7, #28
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr
	...

080068b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e074      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2202      	movs	r2, #2
 80068d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a34      	ldr	r2, [pc, #208]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d009      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a33      	ldr	r2, [pc, #204]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d004      	beq.n	800690a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a31      	ldr	r2, [pc, #196]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006910:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1f      	ldr	r2, [pc, #124]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1d      	ldr	r2, [pc, #116]	@ (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1c      	ldr	r2, [pc, #112]	@ (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a18      	ldr	r2, [pc, #96]	@ (80069dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a11      	ldr	r2, [pc, #68]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40012c00 	.word	0x40012c00
 80069c8:	40013400 	.word	0x40013400
 80069cc:	40015000 	.word	0x40015000
 80069d0:	40000400 	.word	0x40000400
 80069d4:	40000800 	.word	0x40000800
 80069d8:	40000c00 	.word	0x40000c00
 80069dc:	40014000 	.word	0x40014000

080069e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ea:	2300      	movs	r3, #0
 80069ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d101      	bne.n	80069fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f8:	2302      	movs	r3, #2
 80069fa:	e078      	b.n	8006aee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a62:	4313      	orrs	r3, r2
 8006a64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	69db      	ldr	r3, [r3, #28]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1c      	ldr	r2, [pc, #112]	@ (8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d009      	beq.n	8006aa2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a1b      	ldr	r2, [pc, #108]	@ (8006b00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d004      	beq.n	8006aa2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a19      	ldr	r2, [pc, #100]	@ (8006b04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d11c      	bne.n	8006adc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aac:	051b      	lsls	r3, r3, #20
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40015000 	.word	0x40015000

08006b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e042      	b.n	8006c2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d106      	bne.n	8006bbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7fb fa51 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2224      	movs	r2, #36	@ 0x24
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0201 	bic.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d002      	beq.n	8006be4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 fb24 	bl	800722c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f825 	bl	8006c34 <UART_SetConfig>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e01b      	b.n	8006c2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689a      	ldr	r2, [r3, #8]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f042 0201 	orr.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fba3 	bl	8007370 <UART_CheckIdleState>
 8006c2a:	4603      	mov	r3, r0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3708      	adds	r7, #8
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c38:	b08c      	sub	sp, #48	@ 0x30
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	689a      	ldr	r2, [r3, #8]
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	431a      	orrs	r2, r3
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	431a      	orrs	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	69db      	ldr	r3, [r3, #28]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	4baa      	ldr	r3, [pc, #680]	@ (8006f0c <UART_SetConfig+0x2d8>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a9f      	ldr	r2, [pc, #636]	@ (8006f10 <UART_SetConfig+0x2dc>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006caa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cb4:	430b      	orrs	r3, r1
 8006cb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	f023 010f 	bic.w	r1, r3, #15
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a90      	ldr	r2, [pc, #576]	@ (8006f14 <UART_SetConfig+0x2e0>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d125      	bne.n	8006d24 <UART_SetConfig+0xf0>
 8006cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cde:	f003 0303 	and.w	r3, r3, #3
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	d81a      	bhi.n	8006d1c <UART_SetConfig+0xe8>
 8006ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cec <UART_SetConfig+0xb8>)
 8006ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cec:	08006cfd 	.word	0x08006cfd
 8006cf0:	08006d0d 	.word	0x08006d0d
 8006cf4:	08006d05 	.word	0x08006d05
 8006cf8:	08006d15 	.word	0x08006d15
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d02:	e116      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d04:	2302      	movs	r3, #2
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0a:	e112      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d0c:	2304      	movs	r3, #4
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d12:	e10e      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d14:	2308      	movs	r3, #8
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1a:	e10a      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d1c:	2310      	movs	r3, #16
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d22:	e106      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a7c      	ldr	r2, [pc, #496]	@ (8006f1c <UART_SetConfig+0x2e8>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d138      	bne.n	8006da0 <UART_SetConfig+0x16c>
 8006d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d34:	f003 030c 	and.w	r3, r3, #12
 8006d38:	2b0c      	cmp	r3, #12
 8006d3a:	d82d      	bhi.n	8006d98 <UART_SetConfig+0x164>
 8006d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d44 <UART_SetConfig+0x110>)
 8006d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d42:	bf00      	nop
 8006d44:	08006d79 	.word	0x08006d79
 8006d48:	08006d99 	.word	0x08006d99
 8006d4c:	08006d99 	.word	0x08006d99
 8006d50:	08006d99 	.word	0x08006d99
 8006d54:	08006d89 	.word	0x08006d89
 8006d58:	08006d99 	.word	0x08006d99
 8006d5c:	08006d99 	.word	0x08006d99
 8006d60:	08006d99 	.word	0x08006d99
 8006d64:	08006d81 	.word	0x08006d81
 8006d68:	08006d99 	.word	0x08006d99
 8006d6c:	08006d99 	.word	0x08006d99
 8006d70:	08006d99 	.word	0x08006d99
 8006d74:	08006d91 	.word	0x08006d91
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d7e:	e0d8      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d80:	2302      	movs	r3, #2
 8006d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d86:	e0d4      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d8e:	e0d0      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d90:	2308      	movs	r3, #8
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d96:	e0cc      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d9e:	e0c8      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f20 <UART_SetConfig+0x2ec>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d125      	bne.n	8006df6 <UART_SetConfig+0x1c2>
 8006daa:	4b5b      	ldr	r3, [pc, #364]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006db4:	2b30      	cmp	r3, #48	@ 0x30
 8006db6:	d016      	beq.n	8006de6 <UART_SetConfig+0x1b2>
 8006db8:	2b30      	cmp	r3, #48	@ 0x30
 8006dba:	d818      	bhi.n	8006dee <UART_SetConfig+0x1ba>
 8006dbc:	2b20      	cmp	r3, #32
 8006dbe:	d00a      	beq.n	8006dd6 <UART_SetConfig+0x1a2>
 8006dc0:	2b20      	cmp	r3, #32
 8006dc2:	d814      	bhi.n	8006dee <UART_SetConfig+0x1ba>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <UART_SetConfig+0x19a>
 8006dc8:	2b10      	cmp	r3, #16
 8006dca:	d008      	beq.n	8006dde <UART_SetConfig+0x1aa>
 8006dcc:	e00f      	b.n	8006dee <UART_SetConfig+0x1ba>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dd4:	e0ad      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ddc:	e0a9      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006dde:	2304      	movs	r3, #4
 8006de0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de4:	e0a5      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006de6:	2308      	movs	r3, #8
 8006de8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dec:	e0a1      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006dee:	2310      	movs	r3, #16
 8006df0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df4:	e09d      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a4a      	ldr	r2, [pc, #296]	@ (8006f24 <UART_SetConfig+0x2f0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d125      	bne.n	8006e4c <UART_SetConfig+0x218>
 8006e00:	4b45      	ldr	r3, [pc, #276]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006e0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e0c:	d016      	beq.n	8006e3c <UART_SetConfig+0x208>
 8006e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e10:	d818      	bhi.n	8006e44 <UART_SetConfig+0x210>
 8006e12:	2b80      	cmp	r3, #128	@ 0x80
 8006e14:	d00a      	beq.n	8006e2c <UART_SetConfig+0x1f8>
 8006e16:	2b80      	cmp	r3, #128	@ 0x80
 8006e18:	d814      	bhi.n	8006e44 <UART_SetConfig+0x210>
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <UART_SetConfig+0x1f0>
 8006e1e:	2b40      	cmp	r3, #64	@ 0x40
 8006e20:	d008      	beq.n	8006e34 <UART_SetConfig+0x200>
 8006e22:	e00f      	b.n	8006e44 <UART_SetConfig+0x210>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2a:	e082      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e32:	e07e      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e34:	2304      	movs	r3, #4
 8006e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e3a:	e07a      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e3c:	2308      	movs	r3, #8
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e42:	e076      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e44:	2310      	movs	r3, #16
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e4a:	e072      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a35      	ldr	r2, [pc, #212]	@ (8006f28 <UART_SetConfig+0x2f4>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d12a      	bne.n	8006eac <UART_SetConfig+0x278>
 8006e56:	4b30      	ldr	r3, [pc, #192]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e64:	d01a      	beq.n	8006e9c <UART_SetConfig+0x268>
 8006e66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e6a:	d81b      	bhi.n	8006ea4 <UART_SetConfig+0x270>
 8006e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e70:	d00c      	beq.n	8006e8c <UART_SetConfig+0x258>
 8006e72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e76:	d815      	bhi.n	8006ea4 <UART_SetConfig+0x270>
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <UART_SetConfig+0x250>
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e80:	d008      	beq.n	8006e94 <UART_SetConfig+0x260>
 8006e82:	e00f      	b.n	8006ea4 <UART_SetConfig+0x270>
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8a:	e052      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e04e      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e94:	2304      	movs	r3, #4
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e04a      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	e046      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e042      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a17      	ldr	r2, [pc, #92]	@ (8006f10 <UART_SetConfig+0x2dc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d13a      	bne.n	8006f2c <UART_SetConfig+0x2f8>
 8006eb6:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <UART_SetConfig+0x2e4>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ec0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ec4:	d01a      	beq.n	8006efc <UART_SetConfig+0x2c8>
 8006ec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006eca:	d81b      	bhi.n	8006f04 <UART_SetConfig+0x2d0>
 8006ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed0:	d00c      	beq.n	8006eec <UART_SetConfig+0x2b8>
 8006ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ed6:	d815      	bhi.n	8006f04 <UART_SetConfig+0x2d0>
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d003      	beq.n	8006ee4 <UART_SetConfig+0x2b0>
 8006edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ee0:	d008      	beq.n	8006ef4 <UART_SetConfig+0x2c0>
 8006ee2:	e00f      	b.n	8006f04 <UART_SetConfig+0x2d0>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eea:	e022      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006eec:	2302      	movs	r3, #2
 8006eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef2:	e01e      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006ef4:	2304      	movs	r3, #4
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006efa:	e01a      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006efc:	2308      	movs	r3, #8
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e016      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006f04:	2310      	movs	r3, #16
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e012      	b.n	8006f32 <UART_SetConfig+0x2fe>
 8006f0c:	cfff69f3 	.word	0xcfff69f3
 8006f10:	40008000 	.word	0x40008000
 8006f14:	40013800 	.word	0x40013800
 8006f18:	40021000 	.word	0x40021000
 8006f1c:	40004400 	.word	0x40004400
 8006f20:	40004800 	.word	0x40004800
 8006f24:	40004c00 	.word	0x40004c00
 8006f28:	40005000 	.word	0x40005000
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4aae      	ldr	r2, [pc, #696]	@ (80071f0 <UART_SetConfig+0x5bc>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	f040 8097 	bne.w	800706c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d823      	bhi.n	8006f8e <UART_SetConfig+0x35a>
 8006f46:	a201      	add	r2, pc, #4	@ (adr r2, 8006f4c <UART_SetConfig+0x318>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f8f 	.word	0x08006f8f
 8006f54:	08006f79 	.word	0x08006f79
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f7f 	.word	0x08006f7f
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006f8f 	.word	0x08006f8f
 8006f68:	08006f8f 	.word	0x08006f8f
 8006f6c:	08006f87 	.word	0x08006f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fd fc5e 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 8006f74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f76:	e010      	b.n	8006f9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f78:	4b9e      	ldr	r3, [pc, #632]	@ (80071f4 <UART_SetConfig+0x5c0>)
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f7c:	e00d      	b.n	8006f9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fd fbe9 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8006f82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f84:	e009      	b.n	8006f9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006f8c:	e005      	b.n	8006f9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006f98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	f000 8130 	beq.w	8007202 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa6:	4a94      	ldr	r2, [pc, #592]	@ (80071f8 <UART_SetConfig+0x5c4>)
 8006fa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fac:	461a      	mov	r2, r3
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	4413      	add	r3, r2
 8006fc0:	69ba      	ldr	r2, [r7, #24]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d305      	bcc.n	8006fd2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d903      	bls.n	8006fda <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006fd8:	e113      	b.n	8007202 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fdc:	2200      	movs	r2, #0
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	60fa      	str	r2, [r7, #12]
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	4a84      	ldr	r2, [pc, #528]	@ (80071f8 <UART_SetConfig+0x5c4>)
 8006fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2200      	movs	r2, #0
 8006ff0:	603b      	str	r3, [r7, #0]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ff8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ffc:	f7f9 f90c 	bl	8000218 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4610      	mov	r0, r2
 8007006:	4619      	mov	r1, r3
 8007008:	f04f 0200 	mov.w	r2, #0
 800700c:	f04f 0300 	mov.w	r3, #0
 8007010:	020b      	lsls	r3, r1, #8
 8007012:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007016:	0202      	lsls	r2, r0, #8
 8007018:	6979      	ldr	r1, [r7, #20]
 800701a:	6849      	ldr	r1, [r1, #4]
 800701c:	0849      	lsrs	r1, r1, #1
 800701e:	2000      	movs	r0, #0
 8007020:	460c      	mov	r4, r1
 8007022:	4605      	mov	r5, r0
 8007024:	eb12 0804 	adds.w	r8, r2, r4
 8007028:	eb43 0905 	adc.w	r9, r3, r5
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	469a      	mov	sl, r3
 8007034:	4693      	mov	fp, r2
 8007036:	4652      	mov	r2, sl
 8007038:	465b      	mov	r3, fp
 800703a:	4640      	mov	r0, r8
 800703c:	4649      	mov	r1, r9
 800703e:	f7f9 f8eb 	bl	8000218 <__aeabi_uldivmod>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4613      	mov	r3, r2
 8007048:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007050:	d308      	bcc.n	8007064 <UART_SetConfig+0x430>
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007058:	d204      	bcs.n	8007064 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a3a      	ldr	r2, [r7, #32]
 8007060:	60da      	str	r2, [r3, #12]
 8007062:	e0ce      	b.n	8007202 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800706a:	e0ca      	b.n	8007202 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	69db      	ldr	r3, [r3, #28]
 8007070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007074:	d166      	bne.n	8007144 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007076:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800707a:	2b08      	cmp	r3, #8
 800707c:	d827      	bhi.n	80070ce <UART_SetConfig+0x49a>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <UART_SetConfig+0x450>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070b1 	.word	0x080070b1
 800708c:	080070b9 	.word	0x080070b9
 8007090:	080070cf 	.word	0x080070cf
 8007094:	080070bf 	.word	0x080070bf
 8007098:	080070cf 	.word	0x080070cf
 800709c:	080070cf 	.word	0x080070cf
 80070a0:	080070cf 	.word	0x080070cf
 80070a4:	080070c7 	.word	0x080070c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fd fbc2 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 80070ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070ae:	e014      	b.n	80070da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070b0:	f7fd fbd4 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 80070b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070b6:	e010      	b.n	80070da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070b8:	4b4e      	ldr	r3, [pc, #312]	@ (80071f4 <UART_SetConfig+0x5c0>)
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070bc:	e00d      	b.n	80070da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070be:	f7fd fb49 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 80070c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80070c4:	e009      	b.n	80070da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80070cc:	e005      	b.n	80070da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8090 	beq.w	8007202 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	4a44      	ldr	r2, [pc, #272]	@ (80071f8 <UART_SetConfig+0x5c4>)
 80070e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070ec:	461a      	mov	r2, r3
 80070ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80070f4:	005a      	lsls	r2, r3, #1
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	085b      	lsrs	r3, r3, #1
 80070fc:	441a      	add	r2, r3
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	fbb2 f3f3 	udiv	r3, r2, r3
 8007106:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	2b0f      	cmp	r3, #15
 800710c:	d916      	bls.n	800713c <UART_SetConfig+0x508>
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007114:	d212      	bcs.n	800713c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f023 030f 	bic.w	r3, r3, #15
 800711e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	085b      	lsrs	r3, r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	b29a      	uxth	r2, r3
 800712c:	8bfb      	ldrh	r3, [r7, #30]
 800712e:	4313      	orrs	r3, r2
 8007130:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	8bfa      	ldrh	r2, [r7, #30]
 8007138:	60da      	str	r2, [r3, #12]
 800713a:	e062      	b.n	8007202 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007142:	e05e      	b.n	8007202 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007144:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007148:	2b08      	cmp	r3, #8
 800714a:	d828      	bhi.n	800719e <UART_SetConfig+0x56a>
 800714c:	a201      	add	r2, pc, #4	@ (adr r2, 8007154 <UART_SetConfig+0x520>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007179 	.word	0x08007179
 8007158:	08007181 	.word	0x08007181
 800715c:	08007189 	.word	0x08007189
 8007160:	0800719f 	.word	0x0800719f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800719f 	.word	0x0800719f
 800716c:	0800719f 	.word	0x0800719f
 8007170:	0800719f 	.word	0x0800719f
 8007174:	08007197 	.word	0x08007197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fd fb5a 	bl	8004830 <HAL_RCC_GetPCLK1Freq>
 800717c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800717e:	e014      	b.n	80071aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fd fb6c 	bl	800485c <HAL_RCC_GetPCLK2Freq>
 8007184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007186:	e010      	b.n	80071aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b1a      	ldr	r3, [pc, #104]	@ (80071f4 <UART_SetConfig+0x5c0>)
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800718c:	e00d      	b.n	80071aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd fae1 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8007192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007194:	e009      	b.n	80071aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800719a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800719c:	e005      	b.n	80071aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071a8:	bf00      	nop
    }

    if (pclk != 0U)
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d028      	beq.n	8007202 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b4:	4a10      	ldr	r2, [pc, #64]	@ (80071f8 <UART_SetConfig+0x5c4>)
 80071b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ba:	461a      	mov	r2, r3
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	fbb3 f2f2 	udiv	r2, r3, r2
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	441a      	add	r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80071d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071d4:	6a3b      	ldr	r3, [r7, #32]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d910      	bls.n	80071fc <UART_SetConfig+0x5c8>
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071e0:	d20c      	bcs.n	80071fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071e2:	6a3b      	ldr	r3, [r7, #32]
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60da      	str	r2, [r3, #12]
 80071ec:	e009      	b.n	8007202 <UART_SetConfig+0x5ce>
 80071ee:	bf00      	nop
 80071f0:	40008000 	.word	0x40008000
 80071f4:	00f42400 	.word	0x00f42400
 80071f8:	080078fc 	.word	0x080078fc
      }
      else
      {
        ret = HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	2201      	movs	r2, #1
 8007206:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2201      	movs	r2, #1
 800720e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2200      	movs	r2, #0
 8007216:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2200      	movs	r2, #0
 800721c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800721e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007222:	4618      	mov	r0, r3
 8007224:	3730      	adds	r7, #48	@ 0x30
 8007226:	46bd      	mov	sp, r7
 8007228:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800722c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	430a      	orrs	r2, r1
 8007276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	f003 0302 	and.w	r3, r3, #2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e2:	f003 0320 	and.w	r3, r3, #32
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d01a      	beq.n	8007342 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007326:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800732a:	d10a      	bne.n	8007342 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b098      	sub	sp, #96	@ 0x60
 8007374:	af02      	add	r7, sp, #8
 8007376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007380:	f7fa ff54 	bl	800222c <HAL_GetTick>
 8007384:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f003 0308 	and.w	r3, r3, #8
 8007390:	2b08      	cmp	r3, #8
 8007392:	d12f      	bne.n	80073f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007394:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800739c:	2200      	movs	r2, #0
 800739e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f88e 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d022      	beq.n	80073f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073b6:	e853 3f00 	ldrex	r3, [r3]
 80073ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80073bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80073ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073d4:	e841 2300 	strex	r3, r2, [r1]
 80073d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80073da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e6      	bne.n	80073ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2220      	movs	r2, #32
 80073e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e063      	b.n	80074bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0304 	and.w	r3, r3, #4
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d149      	bne.n	8007496 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007402:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800740a:	2200      	movs	r2, #0
 800740c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f857 	bl	80074c4 <UART_WaitOnFlagUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d03c      	beq.n	8007496 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	623b      	str	r3, [r7, #32]
   return(result);
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007430:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800743a:	633b      	str	r3, [r7, #48]	@ 0x30
 800743c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007442:	e841 2300 	strex	r3, r2, [r1]
 8007446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e6      	bne.n	800741c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	3308      	adds	r3, #8
 8007454:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	60fb      	str	r3, [r7, #12]
   return(result);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f023 0301 	bic.w	r3, r3, #1
 8007464:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3308      	adds	r3, #8
 800746c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800746e:	61fa      	str	r2, [r7, #28]
 8007470:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	69b9      	ldr	r1, [r7, #24]
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	617b      	str	r3, [r7, #20]
   return(result);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e5      	bne.n	800744e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e012      	b.n	80074bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074ba:	2300      	movs	r3, #0
}
 80074bc:	4618      	mov	r0, r3
 80074be:	3758      	adds	r7, #88	@ 0x58
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	4613      	mov	r3, r2
 80074d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074d4:	e04f      	b.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074dc:	d04b      	beq.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074de:	f7fa fea5 	bl	800222c <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d302      	bcc.n	80074f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e04e      	b.n	8007596 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d037      	beq.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	2b80      	cmp	r3, #128	@ 0x80
 800750a:	d034      	beq.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b40      	cmp	r3, #64	@ 0x40
 8007510:	d031      	beq.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	69db      	ldr	r3, [r3, #28]
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b08      	cmp	r3, #8
 800751e:	d110      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2208      	movs	r2, #8
 8007526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f838 	bl	800759e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2208      	movs	r2, #8
 8007532:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e029      	b.n	8007596 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800754c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007550:	d111      	bne.n	8007576 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800755a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f81e 	bl	800759e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2220      	movs	r2, #32
 8007566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e00f      	b.n	8007596 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4013      	ands	r3, r2
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	429a      	cmp	r2, r3
 8007584:	bf0c      	ite	eq
 8007586:	2301      	moveq	r3, #1
 8007588:	2300      	movne	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	461a      	mov	r2, r3
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	429a      	cmp	r2, r3
 8007592:	d0a0      	beq.n	80074d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3710      	adds	r7, #16
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800759e:	b480      	push	{r7}
 80075a0:	b095      	sub	sp, #84	@ 0x54
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80075ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80075d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80075fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007602:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e3      	bne.n	80075d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d118      	bne.n	800764a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	60bb      	str	r3, [r7, #8]
   return(result);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	613b      	str	r3, [r7, #16]
   return(result);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e6      	bne.n	8007618 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800765e:	bf00      	nop
 8007660:	3754      	adds	r7, #84	@ 0x54
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_UARTEx_DisableFifoMode+0x16>
 800767c:	2302      	movs	r3, #2
 800767e:	e027      	b.n	80076d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2224      	movs	r2, #36	@ 0x24
 800768c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0201 	bic.w	r2, r2, #1
 80076a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80076ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2220      	movs	r2, #32
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076f0:	2302      	movs	r3, #2
 80076f2:	e02d      	b.n	8007750 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2224      	movs	r2, #36	@ 0x24
 8007700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 0201 	bic.w	r2, r2, #1
 800771a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	430a      	orrs	r2, r1
 800772e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f84f 	bl	80077d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007768:	2b01      	cmp	r3, #1
 800776a:	d101      	bne.n	8007770 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800776c:	2302      	movs	r3, #2
 800776e:	e02d      	b.n	80077cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2224      	movs	r2, #36	@ 0x24
 800777c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0201 	bic.w	r2, r2, #1
 8007796:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	430a      	orrs	r2, r1
 80077aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f811 	bl	80077d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2220      	movs	r2, #32
 80077be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ca:	2300      	movs	r3, #0
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077f4:	e031      	b.n	800785a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077f6:	2308      	movs	r3, #8
 80077f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077fa:	2308      	movs	r3, #8
 80077fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	0e5b      	lsrs	r3, r3, #25
 8007806:	b2db      	uxtb	r3, r3
 8007808:	f003 0307 	and.w	r3, r3, #7
 800780c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	0f5b      	lsrs	r3, r3, #29
 8007816:	b2db      	uxtb	r3, r3
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800781e:	7bbb      	ldrb	r3, [r7, #14]
 8007820:	7b3a      	ldrb	r2, [r7, #12]
 8007822:	4911      	ldr	r1, [pc, #68]	@ (8007868 <UARTEx_SetNbDataToProcess+0x94>)
 8007824:	5c8a      	ldrb	r2, [r1, r2]
 8007826:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800782a:	7b3a      	ldrb	r2, [r7, #12]
 800782c:	490f      	ldr	r1, [pc, #60]	@ (800786c <UARTEx_SetNbDataToProcess+0x98>)
 800782e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007830:	fb93 f3f2 	sdiv	r3, r3, r2
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	7b7a      	ldrb	r2, [r7, #13]
 8007840:	4909      	ldr	r1, [pc, #36]	@ (8007868 <UARTEx_SetNbDataToProcess+0x94>)
 8007842:	5c8a      	ldrb	r2, [r1, r2]
 8007844:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007848:	7b7a      	ldrb	r2, [r7, #13]
 800784a:	4908      	ldr	r1, [pc, #32]	@ (800786c <UARTEx_SetNbDataToProcess+0x98>)
 800784c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800784e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007852:	b29a      	uxth	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	08007914 	.word	0x08007914
 800786c:	0800791c 	.word	0x0800791c

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	@ (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	@ (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	@ (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	@ (80078c4 <__libc_init_array+0x44>)
 8007894:	f000 f818 	bl	80078c8 <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	0800792c 	.word	0x0800792c
 80078bc:	0800792c 	.word	0x0800792c
 80078c0:	0800792c 	.word	0x0800792c
 80078c4:	08007930 	.word	0x08007930

080078c8 <_init>:
 80078c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ca:	bf00      	nop
 80078cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ce:	bc08      	pop	{r3}
 80078d0:	469e      	mov	lr, r3
 80078d2:	4770      	bx	lr

080078d4 <_fini>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr
