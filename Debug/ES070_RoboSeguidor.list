
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009124  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080092fc  080092fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800933c  0800933c  0000b020  2**0
                  CONTENTS
  4 .ARM          00000008  0800933c  0800933c  0000a33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009344  08009344  0000b020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009344  08009344  0000a344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009348  08009348  0000a348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800934c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  20000020  0800936c  0000b020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800936c  0000b66c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f5d2  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000400d  00000000  00000000  0002a622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001960  00000000  00000000  0002e630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013b4  00000000  00000000  0002ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa6a  00000000  00000000  00031344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021efd  00000000  00000000  0005bdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115d47  00000000  00000000  0007dcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001939f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006af4  00000000  00000000  00193a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009c  00000000  00000000  0019a52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080092e4 	.word	0x080092e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	080092e4 	.word	0x080092e4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f008 feb3 	bl	800928c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f002 f8db 	bl	800274c <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f001 f841 	bl	8001622 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f003 fa6c 	bl	8003a88 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f001 f834 	bl	8001622 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f002 fc6c 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f001 f81e 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	2000003c 	.word	0x2000003c
 80005f4:	04300002 	.word	0x04300002

080005f8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 fe41 	bl	800928c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800060a:	4b2b      	ldr	r3, [pc, #172]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800060c:	4a2b      	ldr	r2, [pc, #172]	@ (80006bc <MX_ADC2_Init+0xc4>)
 800060e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000610:	4b29      	ldr	r3, [pc, #164]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000612:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000616:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062a:	4b23      	ldr	r3, [pc, #140]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000630:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000632:	2204      	movs	r2, #4
 8000634:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000638:	2200      	movs	r2, #0
 800063a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000644:	2201      	movs	r2, #1
 8000646:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000650:	4b19      	ldr	r3, [pc, #100]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000656:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800065c:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000672:	4811      	ldr	r0, [pc, #68]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 8000674:	f002 f86a 	bl	800274c <HAL_ADC_Init>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800067e:	f000 ffd0 	bl	8001622 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_ADC2_Init+0xc8>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000686:	2306      	movs	r3, #6
 8000688:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068e:	237f      	movs	r3, #127	@ 0x7f
 8000690:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000692:	2304      	movs	r3, #4
 8000694:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	4619      	mov	r1, r3
 800069e:	4806      	ldr	r0, [pc, #24]	@ (80006b8 <MX_ADC2_Init+0xc0>)
 80006a0:	f002 fc08 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006aa:	f000 ffba 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	3720      	adds	r7, #32
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200000a8 	.word	0x200000a8
 80006bc:	50000100 	.word	0x50000100
 80006c0:	0c900008 	.word	0x0c900008

080006c4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08c      	sub	sp, #48	@ 0x30
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2220      	movs	r2, #32
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 fdd5 	bl	800928c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006e2:	4b31      	ldr	r3, [pc, #196]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 80006e4:	4a31      	ldr	r2, [pc, #196]	@ (80007ac <MX_ADC3_Init+0xe8>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80006e8:	4b2f      	ldr	r3, [pc, #188]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 80006ea:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80006ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006f0:	4b2d      	ldr	r3, [pc, #180]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80006fc:	4b2a      	ldr	r3, [pc, #168]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000702:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000704:	2200      	movs	r2, #0
 8000706:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000708:	4b27      	ldr	r3, [pc, #156]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 800070a:	2204      	movs	r2, #4
 800070c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800070e:	4b26      	ldr	r3, [pc, #152]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000710:	2200      	movs	r2, #0
 8000712:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800071a:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 800071c:	2201      	movs	r2, #1
 800071e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000720:	4b21      	ldr	r3, [pc, #132]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000728:	4b1f      	ldr	r3, [pc, #124]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000734:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b1a      	ldr	r3, [pc, #104]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000742:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800074a:	4817      	ldr	r0, [pc, #92]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 800074c:	f001 fffe 	bl	800274c <HAL_ADC_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000756:	f000 ff64 	bl	8001622 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800075e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000762:	4619      	mov	r1, r3
 8000764:	4810      	ldr	r0, [pc, #64]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000766:	f003 f98f 	bl	8003a88 <HAL_ADCEx_MultiModeConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000770:	f000 ff57 	bl	8001622 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_ADC3_Init+0xec>)
 8000776:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000778:	2306      	movs	r3, #6
 800077a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000780:	237f      	movs	r3, #127	@ 0x7f
 8000782:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000784:	2304      	movs	r3, #4
 8000786:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	@ (80007a8 <MX_ADC3_Init+0xe4>)
 8000792:	f002 fb8f 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800079c:	f000 ff41 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3730      	adds	r7, #48	@ 0x30
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000114 	.word	0x20000114
 80007ac:	50000400 	.word	0x50000400
 80007b0:	14f00020 	.word	0x14f00020

080007b4 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2220      	movs	r2, #32
 80007be:	2100      	movs	r1, #0
 80007c0:	4618      	mov	r0, r3
 80007c2:	f008 fd63 	bl	800928c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80007c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000878 <MX_ADC4_Init+0xc4>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007ce:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80007d2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007d4:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80007e0:	4b24      	ldr	r3, [pc, #144]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e6:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_ADC4_Init+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000800:	2201      	movs	r2, #1
 8000802:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_ADC4_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b18      	ldr	r3, [pc, #96]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b16      	ldr	r3, [pc, #88]	@ (8000874 <MX_ADC4_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800082e:	4811      	ldr	r0, [pc, #68]	@ (8000874 <MX_ADC4_Init+0xc0>)
 8000830:	f001 ff8c 	bl	800274c <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800083a:	f000 fef2 	bl	8001622 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_ADC4_Init+0xc8>)
 8000840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	2306      	movs	r3, #6
 8000844:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000846:	2300      	movs	r3, #0
 8000848:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800084a:	237f      	movs	r3, #127	@ 0x7f
 800084c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800084e:	2304      	movs	r3, #4
 8000850:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000856:	463b      	mov	r3, r7
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	@ (8000874 <MX_ADC4_Init+0xc0>)
 800085c:	f002 fb2a 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000866:	f000 fedc 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000180 	.word	0x20000180
 8000878:	50000500 	.word	0x50000500
 800087c:	14f00020 	.word	0x14f00020

08000880 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2220      	movs	r2, #32
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f008 fcfd 	bl	800928c <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000892:	4b2b      	ldr	r3, [pc, #172]	@ (8000940 <MX_ADC5_Init+0xc0>)
 8000894:	4a2b      	ldr	r2, [pc, #172]	@ (8000944 <MX_ADC5_Init+0xc4>)
 8000896:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000898:	4b29      	ldr	r3, [pc, #164]	@ (8000940 <MX_ADC5_Init+0xc0>)
 800089a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800089e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 80008a0:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a6:	4b26      	ldr	r3, [pc, #152]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008b2:	4b23      	ldr	r3, [pc, #140]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b8:	4b21      	ldr	r3, [pc, #132]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 80008be:	4b20      	ldr	r3, [pc, #128]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 80008e4:	4b16      	ldr	r3, [pc, #88]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80008fa:	4811      	ldr	r0, [pc, #68]	@ (8000940 <MX_ADC5_Init+0xc0>)
 80008fc:	f001 ff26 	bl	800274c <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC5_Init+0x8a>
  {
    Error_Handler();
 8000906:	f000 fe8c 	bl	8001622 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_ADC5_Init+0xc8>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	237f      	movs	r3, #127	@ 0x7f
 8000918:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	@ (8000940 <MX_ADC5_Init+0xc0>)
 8000928:	f002 fac4 	bl	8002eb4 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC5_Init+0xb6>
  {
    Error_Handler();
 8000932:	f000 fe76 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200001ec 	.word	0x200001ec
 8000944:	50000600 	.word	0x50000600
 8000948:	08600004 	.word	0x08600004

0800094c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b0a6      	sub	sp, #152	@ 0x98
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000968:	2254      	movs	r2, #84	@ 0x54
 800096a:	2100      	movs	r1, #0
 800096c:	4618      	mov	r0, r3
 800096e:	f008 fc8d 	bl	800928c <memset>
  if(adcHandle->Instance==ADC1)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800097a:	d16c      	bne.n	8000a56 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800097c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000980:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000982:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000986:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000988:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800098c:	4618      	mov	r0, r3
 800098e:	f005 fc89 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000998:	f000 fe43 	bl	8001622 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800099c:	4ba0      	ldr	r3, [pc, #640]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a9f      	ldr	r2, [pc, #636]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 80009a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80009a6:	4b9e      	ldr	r3, [pc, #632]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d10b      	bne.n	80009c6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80009ae:	4b9d      	ldr	r3, [pc, #628]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a9c      	ldr	r2, [pc, #624]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b9a      	ldr	r3, [pc, #616]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b97      	ldr	r3, [pc, #604]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ca:	4a96      	ldr	r2, [pc, #600]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d2:	4b94      	ldr	r3, [pc, #592]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 80009de:	2301      	movs	r3, #1
 80009e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e4:	2303      	movs	r3, #3
 80009e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f003 fc8b 	bl	8004314 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80009fe:	4b8a      	ldr	r3, [pc, #552]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a00:	4a8a      	ldr	r2, [pc, #552]	@ (8000c2c <HAL_ADC_MspInit+0x2e0>)
 8000a02:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a04:	4b88      	ldr	r3, [pc, #544]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a06:	2205      	movs	r2, #5
 8000a08:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0a:	4b87      	ldr	r3, [pc, #540]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	4b85      	ldr	r3, [pc, #532]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b84      	ldr	r3, [pc, #528]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a18:	2280      	movs	r2, #128	@ 0x80
 8000a1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a1c:	4b82      	ldr	r3, [pc, #520]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a24:	4b80      	ldr	r3, [pc, #512]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a2a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a2c:	4b7e      	ldr	r3, [pc, #504]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a2e:	2220      	movs	r2, #32
 8000a30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a32:	4b7d      	ldr	r3, [pc, #500]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a38:	487b      	ldr	r0, [pc, #492]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a3a:	f003 fa3d 	bl	8003eb8 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000a44:	f000 fded 	bl	8001622 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a77      	ldr	r2, [pc, #476]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a4c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a4e:	4a76      	ldr	r2, [pc, #472]	@ (8000c28 <HAL_ADC_MspInit+0x2dc>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000a54:	e1e0      	b.n	8000e18 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a75      	ldr	r2, [pc, #468]	@ (8000c30 <HAL_ADC_MspInit+0x2e4>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d16c      	bne.n	8000b3a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000a60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000a66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000a6a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a70:	4618      	mov	r0, r3
 8000a72:	f005 fc17 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000a7c:	f000 fdd1 	bl	8001622 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a80:	4b67      	ldr	r3, [pc, #412]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a66      	ldr	r2, [pc, #408]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 8000a88:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a8a:	4b65      	ldr	r3, [pc, #404]	@ (8000c20 <HAL_ADC_MspInit+0x2d4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	d10b      	bne.n	8000aaa <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a92:	4b64      	ldr	r3, [pc, #400]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a96:	4a63      	ldr	r2, [pc, #396]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000a98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a9e:	4b61      	ldr	r3, [pc, #388]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b5e      	ldr	r3, [pc, #376]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aae:	4a5d      	ldr	r2, [pc, #372]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab6:	4b5b      	ldr	r3, [pc, #364]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	623b      	str	r3, [r7, #32]
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000ac2:	2340      	movs	r3, #64	@ 0x40
 8000ac4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ade:	f003 fc19 	bl	8004314 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000ae2:	4b54      	ldr	r3, [pc, #336]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000ae4:	4a54      	ldr	r2, [pc, #336]	@ (8000c38 <HAL_ADC_MspInit+0x2ec>)
 8000ae6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ae8:	4b52      	ldr	r3, [pc, #328]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000aea:	2224      	movs	r2, #36	@ 0x24
 8000aec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aee:	4b51      	ldr	r3, [pc, #324]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af4:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000afa:	4b4e      	ldr	r3, [pc, #312]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000afc:	2280      	movs	r2, #128	@ 0x80
 8000afe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b00:	4b4c      	ldr	r3, [pc, #304]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b06:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b08:	4b4a      	ldr	r3, [pc, #296]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b10:	4b48      	ldr	r3, [pc, #288]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b12:	2220      	movs	r2, #32
 8000b14:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b16:	4b47      	ldr	r3, [pc, #284]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b1c:	4845      	ldr	r0, [pc, #276]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b1e:	f003 f9cb 	bl	8003eb8 <HAL_DMA_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000b28:	f000 fd7b 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a41      	ldr	r2, [pc, #260]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b30:	655a      	str	r2, [r3, #84]	@ 0x54
 8000b32:	4a40      	ldr	r2, [pc, #256]	@ (8000c34 <HAL_ADC_MspInit+0x2e8>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000b38:	e16e      	b.n	8000e18 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c3c <HAL_ADC_MspInit+0x2f0>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	f040 8085 	bne.w	8000c50 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000b46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000b4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000b50:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b52:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b56:	4618      	mov	r0, r3
 8000b58:	f005 fba4 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000b62:	f000 fd5e 	bl	8001622 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000b66:	4b36      	ldr	r3, [pc, #216]	@ (8000c40 <HAL_ADC_MspInit+0x2f4>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a34      	ldr	r2, [pc, #208]	@ (8000c40 <HAL_ADC_MspInit+0x2f4>)
 8000b6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000b70:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <HAL_ADC_MspInit+0x2f4>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d10b      	bne.n	8000b90 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000b78:	4b2a      	ldr	r3, [pc, #168]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7c:	4a29      	ldr	r2, [pc, #164]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b84:	4b27      	ldr	r3, [pc, #156]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b90:	4b24      	ldr	r3, [pc, #144]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b94:	4a23      	ldr	r2, [pc, #140]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b96:	f043 0302 	orr.w	r3, r3, #2
 8000b9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9c:	4b21      	ldr	r3, [pc, #132]	@ (8000c24 <HAL_ADC_MspInit+0x2d8>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba0:	f003 0302 	and.w	r3, r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4820      	ldr	r0, [pc, #128]	@ (8000c44 <HAL_ADC_MspInit+0x2f8>)
 8000bc4:	f003 fba6 	bl	8004314 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bca:	4a20      	ldr	r2, [pc, #128]	@ (8000c4c <HAL_ADC_MspInit+0x300>)
 8000bcc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bd0:	2225      	movs	r2, #37	@ 0x25
 8000bd2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000be2:	2280      	movs	r2, #128	@ 0x80
 8000be4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000be6:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bec:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000bf6:	4b14      	ldr	r3, [pc, #80]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bf8:	2220      	movs	r2, #32
 8000bfa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c02:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000c04:	f003 f958 	bl	8003eb8 <HAL_DMA_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000c0e:	f000 fd08 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000c16:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c18:	4a0b      	ldr	r2, [pc, #44]	@ (8000c48 <HAL_ADC_MspInit+0x2fc>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c1e:	e0fb      	b.n	8000e18 <HAL_ADC_MspInit+0x4cc>
 8000c20:	20000438 	.word	0x20000438
 8000c24:	40021000 	.word	0x40021000
 8000c28:	20000258 	.word	0x20000258
 8000c2c:	40020008 	.word	0x40020008
 8000c30:	50000100 	.word	0x50000100
 8000c34:	200002b8 	.word	0x200002b8
 8000c38:	4002001c 	.word	0x4002001c
 8000c3c:	50000400 	.word	0x50000400
 8000c40:	2000043c 	.word	0x2000043c
 8000c44:	48000400 	.word	0x48000400
 8000c48:	20000318 	.word	0x20000318
 8000c4c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a72      	ldr	r2, [pc, #456]	@ (8000e20 <HAL_ADC_MspInit+0x4d4>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d16c      	bne.n	8000d34 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000c5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c5e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000c60:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000c64:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f005 fb1a 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000c76:	f000 fcd4 	bl	8001622 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000c7a:	4b6a      	ldr	r3, [pc, #424]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	4a68      	ldr	r2, [pc, #416]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000c82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000c84:	4b67      	ldr	r3, [pc, #412]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d10b      	bne.n	8000ca4 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000c8c:	4b66      	ldr	r3, [pc, #408]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c90:	4a65      	ldr	r2, [pc, #404]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000c92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c98:	4b63      	ldr	r3, [pc, #396]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000c9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca4:	4b60      	ldr	r3, [pc, #384]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000ca6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca8:	4a5f      	ldr	r2, [pc, #380]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000cb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000cbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000cc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4855      	ldr	r0, [pc, #340]	@ (8000e2c <HAL_ADC_MspInit+0x4e0>)
 8000cd8:	f003 fb1c 	bl	8004314 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000cdc:	4b54      	ldr	r3, [pc, #336]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000cde:	4a55      	ldr	r2, [pc, #340]	@ (8000e34 <HAL_ADC_MspInit+0x4e8>)
 8000ce0:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000ce2:	4b53      	ldr	r3, [pc, #332]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000ce4:	2226      	movs	r2, #38	@ 0x26
 8000ce6:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ce8:	4b51      	ldr	r3, [pc, #324]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cee:	4b50      	ldr	r3, [pc, #320]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000cf6:	2280      	movs	r2, #128	@ 0x80
 8000cf8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cfa:	4b4d      	ldr	r3, [pc, #308]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000cfc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d00:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d02:	4b4b      	ldr	r3, [pc, #300]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d08:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000d0a:	4b49      	ldr	r3, [pc, #292]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000d10:	4b47      	ldr	r3, [pc, #284]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000d16:	4846      	ldr	r0, [pc, #280]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d18:	f003 f8ce 	bl	8003eb8 <HAL_DMA_Init>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000d22:	f000 fc7e 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a41      	ldr	r2, [pc, #260]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8000d2c:	4a40      	ldr	r2, [pc, #256]	@ (8000e30 <HAL_ADC_MspInit+0x4e4>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000d32:	e071      	b.n	8000e18 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a3f      	ldr	r2, [pc, #252]	@ (8000e38 <HAL_ADC_MspInit+0x4ec>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d16c      	bne.n	8000e18 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000d3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000d44:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000d48:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f005 faa8 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000d5a:	f000 fc62 	bl	8001622 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000d5e:	4b31      	ldr	r3, [pc, #196]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	3301      	adds	r3, #1
 8000d64:	4a2f      	ldr	r2, [pc, #188]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000d66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000d68:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_ADC_MspInit+0x4d8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d10b      	bne.n	8000d88 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d70:	4b2d      	ldr	r3, [pc, #180]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d74:	4a2c      	ldr	r2, [pc, #176]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b27      	ldr	r3, [pc, #156]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d94:	4b24      	ldr	r3, [pc, #144]	@ (8000e28 <HAL_ADC_MspInit+0x4dc>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f003 faa9 	bl	8004314 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8000e40 <HAL_ADC_MspInit+0x4f4>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000dc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dca:	2227      	movs	r2, #39	@ 0x27
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de0:	4b16      	ldr	r3, [pc, #88]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de8:	4b14      	ldr	r3, [pc, #80]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000dfc:	480f      	ldr	r0, [pc, #60]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000dfe:	f003 f85b 	bl	8003eb8 <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000e08:	f000 fc0b 	bl	8001622 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000e10:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e12:	4a0a      	ldr	r2, [pc, #40]	@ (8000e3c <HAL_ADC_MspInit+0x4f0>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e18:	bf00      	nop
 8000e1a:	3798      	adds	r7, #152	@ 0x98
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	50000500 	.word	0x50000500
 8000e24:	2000043c 	.word	0x2000043c
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	48000400 	.word	0x48000400
 8000e30:	20000378 	.word	0x20000378
 8000e34:	40020044 	.word	0x40020044
 8000e38:	50000600 	.word	0x50000600
 8000e3c:	200003d8 	.word	0x200003d8
 8000e40:	40020058 	.word	0x40020058

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e4a:	4b22      	ldr	r3, [pc, #136]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e4e:	4a21      	ldr	r2, [pc, #132]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e56:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e66:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8000e6e:	4b19      	ldr	r3, [pc, #100]	@ (8000ed4 <MX_DMA_Init+0x90>)
 8000e70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	200b      	movs	r0, #11
 8000e80:	f002 ffe5 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e84:	200b      	movs	r0, #11
 8000e86:	f002 fffc 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200c      	movs	r0, #12
 8000e90:	f002 ffdd 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000e94:	200c      	movs	r0, #12
 8000e96:	f002 fff4 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	200d      	movs	r0, #13
 8000ea0:	f002 ffd5 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ea4:	200d      	movs	r0, #13
 8000ea6:	f002 ffec 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f002 ffcd 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000eb4:	200e      	movs	r0, #14
 8000eb6:	f002 ffe4 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200f      	movs	r0, #15
 8000ec0:	f002 ffc5 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000ec4:	200f      	movs	r0, #15
 8000ec6:	f002 ffdc 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f005 fe57 	bl	8006b98 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8000eea:	2100      	movs	r1, #0
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f005 fe53 	bl	8006b98 <HAL_TIM_IC_Start_IT>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0) {
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <processarCaptura+0xb4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10a      	bne.n	8000f26 <processarCaptura+0x2a>
        valorCaptura1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	68f8      	ldr	r0, [r7, #12]
 8000f14:	f006 fba6 	bl	8007664 <HAL_TIM_ReadCapturedValue>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <processarCaptura+0xb8>)
 8000f1c:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8000f1e:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <processarCaptura+0xb4>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8000f24:	e040      	b.n	8000fa8 <processarCaptura+0xac>
        valorCaptura2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	68f8      	ldr	r0, [r7, #12]
 8000f2a:	f006 fb9b 	bl	8007664 <HAL_TIM_ReadCapturedValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <processarCaptura+0xbc>)
 8000f32:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 >= valorCaptura1) ? (valorCaptura2 - valorCaptura1) : (CONTADOR_MAX - valorCaptura1 + valorCaptura2);
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <processarCaptura+0xbc>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b1e      	ldr	r3, [pc, #120]	@ (8000fb4 <processarCaptura+0xb8>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d305      	bcc.n	8000f4c <processarCaptura+0x50>
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <processarCaptura+0xbc>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb4 <processarCaptura+0xb8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	e007      	b.n	8000f5c <processarCaptura+0x60>
 8000f4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <processarCaptura+0xbc>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b18      	ldr	r3, [pc, #96]	@ (8000fb4 <processarCaptura+0xb8>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 8000f5a:	3350      	adds	r3, #80	@ 0x50
 8000f5c:	4a17      	ldr	r2, [pc, #92]	@ (8000fbc <processarCaptura+0xc0>)
 8000f5e:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8000f60:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <processarCaptura+0xc4>)
 8000f62:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <processarCaptura+0xc0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f70:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	ed93 7a00 	vldr	s14, [r3]
 8000f84:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000f88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f8c:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000fc4 <processarCaptura+0xc8>
 8000f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 8000fa2:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <processarCaptura+0xb4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	2000044c 	.word	0x2000044c
 8000fb4:	20000440 	.word	0x20000440
 8000fb8:	20000444 	.word	0x20000444
 8000fbc:	20000448 	.word	0x20000448
 8000fc0:	47c35000 	.word	0x47c35000
 8000fc4:	41a33333 	.word	0x41a33333

08000fc8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_TIM_IC_CaptureCallback+0x38>)
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d105      	bne.n	8000fe4 <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000fda:	490b      	ldr	r1, [pc, #44]	@ (8001008 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff8d 	bl	8000efc <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
    }
}
 8000fe2:	e008      	b.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a09      	ldr	r2, [pc, #36]	@ (800100c <HAL_TIM_IC_CaptureCallback+0x44>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d104      	bne.n	8000ff6 <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000fee:	4909      	ldr	r1, [pc, #36]	@ (8001014 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff83 	bl	8000efc <processarCaptura>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000053c 	.word	0x2000053c
 8001004:	20000458 	.word	0x20000458
 8001008:	20000450 	.word	0x20000450
 800100c:	20000588 	.word	0x20000588
 8001010:	2000045c 	.word	0x2000045c
 8001014:	20000454 	.word	0x20000454

08001018 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	@ 0x28
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b3b      	ldr	r3, [pc, #236]	@ (800111c <MX_GPIO_Init+0x104>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001032:	4a3a      	ldr	r2, [pc, #232]	@ (800111c <MX_GPIO_Init+0x104>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103a:	4b38      	ldr	r3, [pc, #224]	@ (800111c <MX_GPIO_Init+0x104>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	613b      	str	r3, [r7, #16]
 8001044:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001046:	4b35      	ldr	r3, [pc, #212]	@ (800111c <MX_GPIO_Init+0x104>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800104a:	4a34      	ldr	r2, [pc, #208]	@ (800111c <MX_GPIO_Init+0x104>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001052:	4b32      	ldr	r3, [pc, #200]	@ (800111c <MX_GPIO_Init+0x104>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <MX_GPIO_Init+0x104>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <MX_GPIO_Init+0x104>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_GPIO_Init+0x104>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_GPIO_Init+0x104>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <MX_GPIO_Init+0x104>)
 800107c:	f043 0302 	orr.w	r3, r3, #2
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_GPIO_Init+0x104>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motor_Dir_IN2_Pin, GPIO_PIN_RESET);
 800108e:	2200      	movs	r2, #0
 8001090:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 8001094:	4822      	ldr	r0, [pc, #136]	@ (8001120 <MX_GPIO_Init+0x108>)
 8001096:	f003 fabf 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a4:	f003 fab8 	bl	8004618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	4819      	ldr	r0, [pc, #100]	@ (8001124 <MX_GPIO_Init+0x10c>)
 80010c0:	f003 f928 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motor_Dir_IN2_Pin;
 80010c4:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ca:	2301      	movs	r3, #1
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4810      	ldr	r0, [pc, #64]	@ (8001120 <MX_GPIO_Init+0x108>)
 80010de:	f003 f919 	bl	8004314 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 80010e2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010fe:	f003 f909 	bl	8004314 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2028      	movs	r0, #40	@ 0x28
 8001108:	f002 fea1 	bl	8003e4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110c:	2028      	movs	r0, #40	@ 0x28
 800110e:	f002 feb8 	bl	8003e82 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	@ 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000800 	.word	0x48000800

08001128 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <MX_I2C2_Init+0x74>)
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_I2C2_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8001132:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_I2C2_Init+0x74>)
 8001134:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <MX_I2C2_Init+0x7c>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_I2C2_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_I2C2_Init+0x74>)
 8001140:	2201      	movs	r2, #1
 8001142:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_I2C2_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_I2C2_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_I2C2_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_I2C2_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_I2C2_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <MX_I2C2_Init+0x74>)
 8001164:	f003 fa93 	bl	800468e <HAL_I2C_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800116e:	f000 fa58 	bl	8001622 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <MX_I2C2_Init+0x74>)
 8001176:	f004 ff53 	bl	8006020 <HAL_I2CEx_ConfigAnalogFilter>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001180:	f000 fa4f 	bl	8001622 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_I2C2_Init+0x74>)
 8001188:	f004 ff95 	bl	80060b6 <HAL_I2CEx_ConfigDigitalFilter>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001192:	f000 fa46 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000460 	.word	0x20000460
 80011a0:	40005800 	.word	0x40005800
 80011a4:	30a0a7fb 	.word	0x30a0a7fb

080011a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0a0      	sub	sp, #128	@ 0x80
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c0:	f107 0318 	add.w	r3, r7, #24
 80011c4:	2254      	movs	r2, #84	@ 0x54
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f008 f85f 	bl	800928c <memset>
  if(i2cHandle->Instance==I2C2)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <HAL_I2C_MspInit+0xf0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d15b      	bne.n	8001290 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e0:	f107 0318 	add.w	r3, r7, #24
 80011e4:	4618      	mov	r0, r3
 80011e6:	f005 f85d 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011f0:	f000 fa17 	bl	8001622 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f4:	4b29      	ldr	r3, [pc, #164]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 80011f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f8:	4a28      	ldr	r2, [pc, #160]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 80011fa:	f043 0304 	orr.w	r3, r3, #4
 80011fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001200:	4b26      	ldr	r3, [pc, #152]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 8001202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 800120e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 8001212:	f043 0301 	orr.w	r3, r3, #1
 8001216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001218:	4b20      	ldr	r3, [pc, #128]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	f003 0301 	and.w	r3, r3, #1
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 8001224:	2310      	movs	r3, #16
 8001226:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001228:	2312      	movs	r3, #18
 800122a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001234:	2304      	movs	r3, #4
 8001236:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	@ (80012a0 <HAL_I2C_MspInit+0xf8>)
 8001240:	f003 f868 	bl	8004314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 8001244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001248:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001256:	2304      	movs	r3, #4
 8001258:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001264:	f003 f856 	bl	8004314 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001268:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 800126a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126c:	4a0b      	ldr	r2, [pc, #44]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 800126e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001272:	6593      	str	r3, [r2, #88]	@ 0x58
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <HAL_I2C_MspInit+0xf4>)
 8001276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001278:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	2021      	movs	r0, #33	@ 0x21
 8001286:	f002 fde2 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800128a:	2021      	movs	r0, #33	@ 0x21
 800128c:	f002 fdf9 	bl	8003e82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001290:	bf00      	nop
 8001292:	3780      	adds	r7, #128	@ 0x80
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40005800 	.word	0x40005800
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000800 	.word	0x48000800

080012a4 <vLcdInitLcd>:
/* Input params:       n/a                          */
/* Output params:      *hi2c=>pointer to the i2c    */
/*                     addrress=>LCD I2C address    */
/* ************************************************ */
void vLcdInitLcd(I2C_HandleTypeDef *hi2c, char cAddress)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	70fb      	strb	r3, [r7, #3]
	unsigned char ucTemp = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	73fb      	strb	r3, [r7, #15]

	//TODO: register in a global variable the i2c handler and address
	cLcdAddress = cAddress;
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <vLcdInitLcd+0x78>)
 80012b6:	78fb      	ldrb	r3, [r7, #3]
 80012b8:	7013      	strb	r3, [r2, #0]
	pComI2C = hi2c;
 80012ba:	4a19      	ldr	r2, [pc, #100]	@ (8001320 <vLcdInitLcd+0x7c>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6013      	str	r3, [r2, #0]

	// Time to the LCD's microcontroller start
	HAL_Delay(20);
 80012c0:	2014      	movs	r0, #20
 80012c2:	f000 ffcf 	bl	8002264 <HAL_Delay>

	// set LCD to 4-bit mode
	ucTemp = 0x20 | LCD_BIT_E;
 80012c6:	2324      	movs	r3, #36	@ 0x24
 80012c8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit_IT(&hi2c2, cAddress<<1, &ucTemp, 1);
 80012ca:	78fb      	ldrb	r3, [r7, #3]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b299      	uxth	r1, r3
 80012d2:	f107 020f 	add.w	r2, r7, #15
 80012d6:	2301      	movs	r3, #1
 80012d8:	4812      	ldr	r0, [pc, #72]	@ (8001324 <vLcdInitLcd+0x80>)
 80012da:	f003 fa73 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 ffc0 	bl	8002264 <HAL_Delay>
	ucTemp = 0x20;
 80012e4:	2320      	movs	r3, #32
 80012e6:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit_IT(&hi2c2, cAddress<<1, &ucTemp, 1);
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	b299      	uxth	r1, r3
 80012f0:	f107 020f 	add.w	r2, r7, #15
 80012f4:	2301      	movs	r3, #1
 80012f6:	480b      	ldr	r0, [pc, #44]	@ (8001324 <vLcdInitLcd+0x80>)
 80012f8:	f003 fa64 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(2);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f000 ffb1 	bl	8002264 <HAL_Delay>

	// turn-on LCD, with data length 4, 2 lines, character 5x8 */
	vLcdSendCommand(CMD_INIT_CONFIG);
 8001302:	2028      	movs	r0, #40	@ 0x28
 8001304:	f000 f81e 	bl	8001344 <vLcdSendCommand>

	// init LCD
	vLcdSendCommand(CMD_LCDON_CURSOROFF);
 8001308:	200c      	movs	r0, #12
 800130a:	f000 f81b 	bl	8001344 <vLcdSendCommand>

	// clear LCD
	vLcdSendCommand(CMD_CLEAR);
 800130e:	2001      	movs	r0, #1
 8001310:	f000 f818 	bl	8001344 <vLcdSendCommand>
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200004b4 	.word	0x200004b4
 8001320:	200004b8 	.word	0x200004b8
 8001324:	20000460 	.word	0x20000460

08001328 <vLcdWriteData>:
/* Method description: Write data to be displayed   */
/* Input params:       ucData => char to be written */
/* Output params:      n/a                          */
/* ************************************************ */
void vLcdWriteData(unsigned char ucData)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
	/* just a relay to send data */
	vLcdWrite2Lcd(ucData, LCD_RS_DATA);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2101      	movs	r1, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f828 	bl	800138c <vLcdWrite2Lcd>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <vLcdSendCommand>:
/* Method description: Write command to LCD         */
/* Input params:       ucCmd=>command to be executed*/
/* Output params:      n/a                          */
/* ************************************************ */
void vLcdSendCommand(unsigned char ucCmd)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
	/* just a relay to send command */
	vLcdWrite2Lcd(ucCmd, LCD_RS_CMD);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f81a 	bl	800138c <vLcdWrite2Lcd>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <vLcdWriteString>:
/* Input params:       cBuffer => string to be      */
/*                     written in LCD               */
/* Output params:      n/a                          */
/* ************************************************ */
void vLcdWriteString(const char *cBuffer)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	while(*cBuffer)
 8001368:	e006      	b.n	8001378 <vLcdWriteString+0x18>
	{
		vLcdWriteData(*cBuffer++);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	607a      	str	r2, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff ffd8 	bl	8001328 <vLcdWriteData>
	while(*cBuffer)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f4      	bne.n	800136a <vLcdWriteString+0xa>
	};
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <vLcdWrite2Lcd>:
/*                   cDataType => command LCD_RS_CMD*/
/*                     or data LCD_RS_DATA          */
/* Output params:	   n/a 							*/
/* ************************************************ */
static void vLcdWrite2Lcd(unsigned char ucBuffer,  unsigned char cDataType)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	71fb      	strb	r3, [r7, #7]
 8001398:	4613      	mov	r3, r2
 800139a:	71bb      	strb	r3, [r7, #6]

	//code based on https://embeddedthere.com/interfacing-stm32-with-i2c-lcd-with-hal-code-example/

	uint8_t upper_bits = ucBuffer >> 4; //isolating the upper bits
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	091b      	lsrs	r3, r3, #4
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	73fb      	strb	r3, [r7, #15]
	uint8_t lower_bits = ucBuffer & 0x0F; //isolating the lower bits
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	73bb      	strb	r3, [r7, #14]

	upper_bits = upper_bits << 4; //shifting to high position
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	73fb      	strb	r3, [r7, #15]
	upper_bits |= cDataType; //command or data RS pin
 80013b6:	7bfa      	ldrb	r2, [r7, #15]
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	73fb      	strb	r3, [r7, #15]
	upper_bits |= 1 << 3; // back light pin
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	f043 0308 	orr.w	r3, r3, #8
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	73fb      	strb	r3, [r7, #15]
	upper_bits |= 1 << 2; // enable pin
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f043 0304 	orr.w	r3, r3, #4
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit_IT(pComI2C, cLcdAddress << 1, &upper_bits, 1);
 80013d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001488 <vLcdWrite2Lcd+0xfc>)
 80013d6:	6818      	ldr	r0, [r3, #0]
 80013d8:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <vLcdWrite2Lcd+0x100>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	b299      	uxth	r1, r3
 80013e0:	f107 020f 	add.w	r2, r7, #15
 80013e4:	2301      	movs	r3, #1
 80013e6:	f003 f9ed 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(2);
 80013ea:	2002      	movs	r0, #2
 80013ec:	f000 ff3a 	bl	8002264 <HAL_Delay>
	upper_bits &= ~(1 << 2);
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f023 0304 	bic.w	r3, r3, #4
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit_IT(pComI2C, cLcdAddress << 1, &upper_bits, 1);
 80013fa:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <vLcdWrite2Lcd+0xfc>)
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	4b23      	ldr	r3, [pc, #140]	@ (800148c <vLcdWrite2Lcd+0x100>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	b299      	uxth	r1, r3
 8001406:	f107 020f 	add.w	r2, r7, #15
 800140a:	2301      	movs	r3, #1
 800140c:	f003 f9da 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(2);
 8001410:	2002      	movs	r0, #2
 8001412:	f000 ff27 	bl	8002264 <HAL_Delay>


	lower_bits = lower_bits << 4; //shifting to high position
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	b2db      	uxtb	r3, r3
 800141c:	73bb      	strb	r3, [r7, #14]
	lower_bits |= cDataType << 0; //command or data RS pin
 800141e:	7bba      	ldrb	r2, [r7, #14]
 8001420:	79bb      	ldrb	r3, [r7, #6]
 8001422:	4313      	orrs	r3, r2
 8001424:	b2db      	uxtb	r3, r3
 8001426:	73bb      	strb	r3, [r7, #14]
	lower_bits |= 1 << 3; // Include back light state in data
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	f043 0308 	orr.w	r3, r3, #8
 800142e:	b2db      	uxtb	r3, r3
 8001430:	73bb      	strb	r3, [r7, #14]
	lower_bits |= 1 << 2; // enable pin
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	b2db      	uxtb	r3, r3
 800143a:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit_IT(pComI2C, cLcdAddress << 1, &lower_bits, 1);
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <vLcdWrite2Lcd+0xfc>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <vLcdWrite2Lcd+0x100>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b299      	uxth	r1, r3
 8001448:	f107 020e 	add.w	r2, r7, #14
 800144c:	2301      	movs	r3, #1
 800144e:	f003 f9b9 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(2);
 8001452:	2002      	movs	r0, #2
 8001454:	f000 ff06 	bl	8002264 <HAL_Delay>
	lower_bits &= ~(1 << 2);
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	f023 0304 	bic.w	r3, r3, #4
 800145e:	b2db      	uxtb	r3, r3
 8001460:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit_IT(pComI2C, cLcdAddress << 1, &lower_bits, 1);
 8001462:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <vLcdWrite2Lcd+0xfc>)
 8001464:	6818      	ldr	r0, [r3, #0]
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <vLcdWrite2Lcd+0x100>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b299      	uxth	r1, r3
 800146e:	f107 020e 	add.w	r2, r7, #14
 8001472:	2301      	movs	r3, #1
 8001474:	f003 f9a6 	bl	80047c4 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(2);
 8001478:	2002      	movs	r0, #2
 800147a:	f000 fef3 	bl	8002264 <HAL_Delay>
	// Para escrever um dado ou um comando o pino Write/Read do display deve estar em nível baixo

	// Na escrita vocês podem acender ou desligar o backlight do LCD (P3 do CI PCF8574). Registrem em uma
	// variável global se o backlight deve ficar aceso ou apagado. Essa variável global será atualizada nas
	// funções vLcdBacklighON() e vLcdBacklighOFF()
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200004b8 	.word	0x200004b8
 800148c:	200004b4 	.word	0x200004b4

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8001494:	f000 fe75 	bl	8002182 <HAL_Init>
  SystemClock_Config();
 8001498:	f000 f8bc 	bl	8001614 <SystemClock_Config>
  MX_GPIO_Init();
 800149c:	f7ff fdbc 	bl	8001018 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a0:	f7ff fcd0 	bl	8000e44 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80014a4:	f000 fda2 	bl	8001fec <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80014a8:	f000 fb6c 	bl	8001b84 <MX_TIM1_Init>
  MX_I2C2_Init();
 80014ac:	f7ff fe3c 	bl	8001128 <MX_I2C2_Init>
  MX_ADC3_Init();
 80014b0:	f7ff f908 	bl	80006c4 <MX_ADC3_Init>
  MX_ADC1_Init();
 80014b4:	f7ff f828 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 80014b8:	f7ff f89e 	bl	80005f8 <MX_ADC2_Init>
  MX_ADC4_Init();
 80014bc:	f7ff f97a 	bl	80007b4 <MX_ADC4_Init>
  MX_ADC5_Init();
 80014c0:	f7ff f9de 	bl	8000880 <MX_ADC5_Init>
  MX_TIM16_Init();
 80014c4:	f000 fc1a 	bl	8001cfc <MX_TIM16_Init>
  MX_TIM17_Init();
 80014c8:	f000 fc64 	bl	8001d94 <MX_TIM17_Init>

  inicializarEncoders(&htim16, &htim17);
 80014cc:	4941      	ldr	r1, [pc, #260]	@ (80015d4 <main+0x144>)
 80014ce:	4842      	ldr	r0, [pc, #264]	@ (80015d8 <main+0x148>)
 80014d0:	f7ff fd02 	bl	8000ed8 <inicializarEncoders>
  vMotorInit(&htim1);
 80014d4:	4841      	ldr	r0, [pc, #260]	@ (80015dc <main+0x14c>)
 80014d6:	f000 f8ab 	bl	8001630 <vMotorInit>
  vLcdInitLcd(&hi2c2, 0x27);
 80014da:	2127      	movs	r1, #39	@ 0x27
 80014dc:	4840      	ldr	r0, [pc, #256]	@ (80015e0 <main+0x150>)
 80014de:	f7ff fee1 	bl	80012a4 <vLcdInitLcd>
  vLcdWriteString("Teste de LCD!");
 80014e2:	4840      	ldr	r0, [pc, #256]	@ (80015e4 <main+0x154>)
 80014e4:	f7ff ff3c 	bl	8001360 <vLcdWriteString>

  SensorInit(&hadc1);
 80014e8:	483f      	ldr	r0, [pc, #252]	@ (80015e8 <main+0x158>)
 80014ea:	f000 f9d1 	bl	8001890 <SensorInit>
  SensorInit(&hadc2);
 80014ee:	483f      	ldr	r0, [pc, #252]	@ (80015ec <main+0x15c>)
 80014f0:	f000 f9ce 	bl	8001890 <SensorInit>
  SensorInit(&hadc3);
 80014f4:	483e      	ldr	r0, [pc, #248]	@ (80015f0 <main+0x160>)
 80014f6:	f000 f9cb 	bl	8001890 <SensorInit>
  SensorInit(&hadc4);
 80014fa:	483e      	ldr	r0, [pc, #248]	@ (80015f4 <main+0x164>)
 80014fc:	f000 f9c8 	bl	8001890 <SensorInit>
  SensorInit(&hadc5);
 8001500:	483d      	ldr	r0, [pc, #244]	@ (80015f8 <main+0x168>)
 8001502:	f000 f9c5 	bl	8001890 <SensorInit>
  PidInit(kp, ki, kd, 1);
 8001506:	4b3d      	ldr	r3, [pc, #244]	@ (80015fc <main+0x16c>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	4b3c      	ldr	r3, [pc, #240]	@ (8001600 <main+0x170>)
 800150e:	ed93 7a00 	vldr	s14, [r3]
 8001512:	4b3c      	ldr	r3, [pc, #240]	@ (8001604 <main+0x174>)
 8001514:	edd3 6a00 	vldr	s13, [r3]
 8001518:	eef7 1a00 	vmov.f32	s3, #112	@ 0x3f800000  1.0
 800151c:	eeb0 1a66 	vmov.f32	s2, s13
 8001520:	eef0 0a47 	vmov.f32	s1, s14
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	f000 f8e4 	bl	80016f4 <PidInit>

  /* Infinite loop */
  while (1)
  {
	  fLinhaPosicaoSensor = fSensorLinhaLeituraSensor();
 800152c:	f000 f9c0 	bl	80018b0 <fSensorLinhaLeituraSensor>
 8001530:	eef0 7a40 	vmov.f32	s15, s0
 8001534:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <main+0x178>)
 8001536:	edc3 7a00 	vstr	s15, [r3]

	    // Chama a função do PID e atualiza as velocidades das rodas
	  fPidUpdateData(fLinhaPosicaoSensor, &fRodaEsquerdaDC, &fRodaDireitaDC);
 800153a:	4b33      	ldr	r3, [pc, #204]	@ (8001608 <main+0x178>)
 800153c:	edd3 7a00 	vldr	s15, [r3]
 8001540:	4932      	ldr	r1, [pc, #200]	@ (800160c <main+0x17c>)
 8001542:	4833      	ldr	r0, [pc, #204]	@ (8001610 <main+0x180>)
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	f000 f906 	bl	8001758 <fPidUpdateData>

	  // Garantir que os valores de duty cycle estão dentro de limites
	  if (fRodaEsquerdaDC > 1.0) fRodaEsquerdaDC = 1.0;
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <main+0x180>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	dd03      	ble.n	8001568 <main+0xd8>
 8001560:	4b2b      	ldr	r3, [pc, #172]	@ (8001610 <main+0x180>)
 8001562:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001566:	601a      	str	r2, [r3, #0]
	  if (fRodaEsquerdaDC < 0.0) fRodaEsquerdaDC = 0.0;
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <main+0x180>)
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001576:	d503      	bpl.n	8001580 <main+0xf0>
 8001578:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <main+0x180>)
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
	  if (fRodaDireitaDC > 1.0) fRodaDireitaDC = 1.0;
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <main+0x17c>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd03      	ble.n	800159c <main+0x10c>
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <main+0x17c>)
 8001596:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800159a:	601a      	str	r2, [r3, #0]
	  if (fRodaDireitaDC < 0.0) fRodaDireitaDC = 0.0;
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <main+0x17c>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015aa:	d503      	bpl.n	80015b4 <main+0x124>
 80015ac:	4b17      	ldr	r3, [pc, #92]	@ (800160c <main+0x17c>)
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

	  vSetRodasDC(fRodaEsquerdaDC, fRodaDireitaDC);
 80015b4:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <main+0x180>)
 80015b6:	edd3 7a00 	vldr	s15, [r3]
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <main+0x17c>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	eef0 0a47 	vmov.f32	s1, s14
 80015c4:	eeb0 0a67 	vmov.f32	s0, s15
 80015c8:	f000 f866 	bl	8001698 <vSetRodasDC>

	  HAL_Delay(100);
 80015cc:	2064      	movs	r0, #100	@ 0x64
 80015ce:	f000 fe49 	bl	8002264 <HAL_Delay>
	  fLinhaPosicaoSensor = fSensorLinhaLeituraSensor();
 80015d2:	e7ab      	b.n	800152c <main+0x9c>
 80015d4:	20000588 	.word	0x20000588
 80015d8:	2000053c 	.word	0x2000053c
 80015dc:	200004f0 	.word	0x200004f0
 80015e0:	20000460 	.word	0x20000460
 80015e4:	080092fc 	.word	0x080092fc
 80015e8:	2000003c 	.word	0x2000003c
 80015ec:	200000a8 	.word	0x200000a8
 80015f0:	20000114 	.word	0x20000114
 80015f4:	20000180 	.word	0x20000180
 80015f8:	200001ec 	.word	0x200001ec
 80015fc:	20000008 	.word	0x20000008
 8001600:	2000000c 	.word	0x2000000c
 8001604:	20000010 	.word	0x20000010
 8001608:	200004bc 	.word	0x200004bc
 800160c:	20000004 	.word	0x20000004
 8001610:	20000000 	.word	0x20000000

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  // Código de configuração do clock (sem alterações necessárias)
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001626:	b672      	cpsid	i
}
 8001628:	bf00      	nop
  __disable_irq();
  while (1) {}
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <Error_Handler+0x8>
	...

08001630 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 8001638:	4a15      	ldr	r2, [pc, #84]	@ (8001690 <vMotorInit+0x60>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <vMotorInit+0x60>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2100      	movs	r1, #0
 8001644:	4618      	mov	r0, r3
 8001646:	f005 f933 	bl	80068b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <vMotorInit+0x60>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2104      	movs	r1, #4
 8001650:	4618      	mov	r0, r3
 8001652:	f005 f92d 	bl	80068b0 <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 1);
 8001656:	2201      	movs	r2, #1
 8001658:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800165c:	480d      	ldr	r0, [pc, #52]	@ (8001694 <vMotorInit+0x64>)
 800165e:	f002 ffdb 	bl	8004618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Dir_IN2_GPIO_Port, Motor_Dir_IN2_Pin, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001668:	480a      	ldr	r0, [pc, #40]	@ (8001694 <vMotorInit+0x64>)
 800166a:	f002 ffd5 	bl	8004618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 1);
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	4808      	ldr	r0, [pc, #32]	@ (8001694 <vMotorInit+0x64>)
 8001674:	f002 ffd0 	bl	8004618 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f002 ffc9 	bl	8004618 <HAL_GPIO_WritePin>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200004c0 	.word	0x200004c0
 8001694:	48000400 	.word	0x48000400

08001698 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	ed87 0a01 	vstr	s0, [r7, #4]
 80016a2:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 80016a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80016aa:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80016ec <vSetRodasDC+0x54>
 80016ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016b2:	4b0f      	ldr	r3, [pc, #60]	@ (80016f0 <vSetRodasDC+0x58>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016bc:	ee17 2a90 	vmov	r2, s15
 80016c0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 80016c2:	edd7 7a00 	vldr	s15, [r7]
 80016c6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80016ec <vSetRodasDC+0x54>
 80016ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ce:	4b08      	ldr	r3, [pc, #32]	@ (80016f0 <vSetRodasDC+0x58>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016d8:	ee17 2a90 	vmov	r2, s15
 80016dc:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	447a0000 	.word	0x447a0000
 80016f0:	200004c0 	.word	0x200004c0

080016f4 <PidInit>:

float Kp, Ki, Kd;
float setpoint, integral, previous_error;

// Inicializa o PID
void PidInit(float kp, float ki, float kd, float initial_setpoint) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80016fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001702:	ed87 1a01 	vstr	s2, [r7, #4]
 8001706:	edc7 1a00 	vstr	s3, [r7]
    Kp = kp;
 800170a:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <PidInit+0x4c>)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6013      	str	r3, [r2, #0]
    Ki = ki;
 8001710:	4a0c      	ldr	r2, [pc, #48]	@ (8001744 <PidInit+0x50>)
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	6013      	str	r3, [r2, #0]
    Kd = kd;
 8001716:	4a0c      	ldr	r2, [pc, #48]	@ (8001748 <PidInit+0x54>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
    setpoint = initial_setpoint; // Posição desejada (idealmente o centro da linha)
 800171c:	4a0b      	ldr	r2, [pc, #44]	@ (800174c <PidInit+0x58>)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6013      	str	r3, [r2, #0]
    integral = 0;
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <PidInit+0x5c>)
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
    previous_error = 0;
 800172a:	4b0a      	ldr	r3, [pc, #40]	@ (8001754 <PidInit+0x60>)
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	200004c4 	.word	0x200004c4
 8001744:	200004c8 	.word	0x200004c8
 8001748:	200004cc 	.word	0x200004cc
 800174c:	200004d0 	.word	0x200004d0
 8001750:	200004d4 	.word	0x200004d4
 8001754:	200004d8 	.word	0x200004d8

08001758 <fPidUpdateData>:

// Atualiza os dados do PID e calcula os ajustes para as rodas
void fPidUpdateData(float fLinhaPosicaoSensor, float *fRodaEsquerdaDC, float *fRodaDireitaDC) {
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001762:	60b8      	str	r0, [r7, #8]
 8001764:	6079      	str	r1, [r7, #4]
    float error = setpoint - fLinhaPosicaoSensor; // Erro de posição
 8001766:	4b42      	ldr	r3, [pc, #264]	@ (8001870 <fPidUpdateData+0x118>)
 8001768:	ed93 7a00 	vldr	s14, [r3]
 800176c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001774:	edc7 7a06 	vstr	s15, [r7, #24]
    integral += error;
 8001778:	4b3e      	ldr	r3, [pc, #248]	@ (8001874 <fPidUpdateData+0x11c>)
 800177a:	ed93 7a00 	vldr	s14, [r3]
 800177e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001786:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <fPidUpdateData+0x11c>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
    float derivative = error - previous_error;
 800178c:	4b3a      	ldr	r3, [pc, #232]	@ (8001878 <fPidUpdateData+0x120>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed97 7a06 	vldr	s14, [r7, #24]
 8001796:	ee77 7a67 	vsub.f32	s15, s14, s15
 800179a:	edc7 7a05 	vstr	s15, [r7, #20]

    float output = Kp * error + Ki * integral + Kd * derivative; // Saída do PID
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <fPidUpdateData+0x124>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ac:	4b34      	ldr	r3, [pc, #208]	@ (8001880 <fPidUpdateData+0x128>)
 80017ae:	edd3 6a00 	vldr	s13, [r3]
 80017b2:	4b30      	ldr	r3, [pc, #192]	@ (8001874 <fPidUpdateData+0x11c>)
 80017b4:	edd3 7a00 	vldr	s15, [r3]
 80017b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017c0:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <fPidUpdateData+0x12c>)
 80017c2:	edd3 6a00 	vldr	s13, [r3]
 80017c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d2:	edc7 7a07 	vstr	s15, [r7, #28]
    previous_error = error;
 80017d6:	4a28      	ldr	r2, [pc, #160]	@ (8001878 <fPidUpdateData+0x120>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6013      	str	r3, [r2, #0]

    // Saturação do output
    if (output > 1.0) output = 1.0;
 80017dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80017e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	dd02      	ble.n	80017f4 <fPidUpdateData+0x9c>
 80017ee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80017f2:	61fb      	str	r3, [r7, #28]
    if (output < -1.0) output = -1.0;
 80017f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80017f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80017fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001804:	d501      	bpl.n	800180a <fPidUpdateData+0xb2>
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <fPidUpdateData+0x130>)
 8001808:	61fb      	str	r3, [r7, #28]

    // Ajustar a velocidade das rodas com base na saída do PID
    float base_speed = 0.34; // Velocidade base das rodas
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <fPidUpdateData+0x134>)
 800180c:	613b      	str	r3, [r7, #16]
    *fRodaEsquerdaDC = base_speed - output;  // Roda esquerda ajusta para o erro
 800180e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001812:	edd7 7a07 	vldr	s15, [r7, #28]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	edc3 7a00 	vstr	s15, [r3]
    *fRodaDireitaDC = base_speed + output; // Roda direita ajusta para o erro
 8001820:	ed97 7a04 	vldr	s14, [r7, #16]
 8001824:	edd7 7a07 	vldr	s15, [r7, #28]
 8001828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edc3 7a00 	vstr	s15, [r3]

    // Saturação das velocidades das rodas
    if (*fRodaEsquerdaDC < 0) *fRodaEsquerdaDC = 0;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	d503      	bpl.n	800184a <fPidUpdateData+0xf2>
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
    if (*fRodaDireitaDC < 0) *fRodaDireitaDC = 0;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 7a00 	vldr	s15, [r3]
 8001850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001858:	d400      	bmi.n	800185c <fPidUpdateData+0x104>
}
 800185a:	e003      	b.n	8001864 <fPidUpdateData+0x10c>
    if (*fRodaDireitaDC < 0) *fRodaDireitaDC = 0;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
}
 8001864:	bf00      	nop
 8001866:	3724      	adds	r7, #36	@ 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	200004d0 	.word	0x200004d0
 8001874:	200004d4 	.word	0x200004d4
 8001878:	200004d8 	.word	0x200004d8
 800187c:	200004c4 	.word	0x200004c4
 8001880:	200004c8 	.word	0x200004c8
 8001884:	200004cc 	.word	0x200004cc
 8001888:	bf800000 	.word	0xbf800000
 800188c:	3eae147b 	.word	0x3eae147b

08001890 <SensorInit>:
extern ADC_HandleTypeDef hadc1, hadc2, hadc3, hadc4, hadc5;

float fSensor1, fSensor2, fSensor3, fSensor4, fSensor5;
unsigned int uiSensor1, uiSensor2, uiSensor3, uiSensor4, uiSensor5;

void SensorInit(ADC_HandleTypeDef *hadc) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    HAL_ADCEx_Calibration_Start(hadc, ADC_SINGLE_ENDED);
 8001898:	217f      	movs	r1, #127	@ 0x7f
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f002 f892 	bl	80039c4 <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f001 f90f 	bl	8002ac4 <HAL_ADC_Start>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <fSensorLinhaLeituraSensor>:

float fSensorLinhaLeituraSensor() {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80018b6:	4846      	ldr	r0, [pc, #280]	@ (80019d0 <fSensorLinhaLeituraSensor+0x120>)
 80018b8:	f001 f904 	bl	8002ac4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80018bc:	f04f 31ff 	mov.w	r1, #4294967295
 80018c0:	4843      	ldr	r0, [pc, #268]	@ (80019d0 <fSensorLinhaLeituraSensor+0x120>)
 80018c2:	f001 f9e3 	bl	8002c8c <HAL_ADC_PollForConversion>
    uiSensor1 = HAL_ADC_GetValue(&hadc1);
 80018c6:	4842      	ldr	r0, [pc, #264]	@ (80019d0 <fSensorLinhaLeituraSensor+0x120>)
 80018c8:	f001 fae6 	bl	8002e98 <HAL_ADC_GetValue>
 80018cc:	4603      	mov	r3, r0
 80018ce:	4a41      	ldr	r2, [pc, #260]	@ (80019d4 <fSensorLinhaLeituraSensor+0x124>)
 80018d0:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(&hadc2);
 80018d2:	4841      	ldr	r0, [pc, #260]	@ (80019d8 <fSensorLinhaLeituraSensor+0x128>)
 80018d4:	f001 f8f6 	bl	8002ac4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295
 80018dc:	483e      	ldr	r0, [pc, #248]	@ (80019d8 <fSensorLinhaLeituraSensor+0x128>)
 80018de:	f001 f9d5 	bl	8002c8c <HAL_ADC_PollForConversion>
    uiSensor2 = HAL_ADC_GetValue(&hadc2);
 80018e2:	483d      	ldr	r0, [pc, #244]	@ (80019d8 <fSensorLinhaLeituraSensor+0x128>)
 80018e4:	f001 fad8 	bl	8002e98 <HAL_ADC_GetValue>
 80018e8:	4603      	mov	r3, r0
 80018ea:	4a3c      	ldr	r2, [pc, #240]	@ (80019dc <fSensorLinhaLeituraSensor+0x12c>)
 80018ec:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(&hadc3);
 80018ee:	483c      	ldr	r0, [pc, #240]	@ (80019e0 <fSensorLinhaLeituraSensor+0x130>)
 80018f0:	f001 f8e8 	bl	8002ac4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 80018f4:	f04f 31ff 	mov.w	r1, #4294967295
 80018f8:	4839      	ldr	r0, [pc, #228]	@ (80019e0 <fSensorLinhaLeituraSensor+0x130>)
 80018fa:	f001 f9c7 	bl	8002c8c <HAL_ADC_PollForConversion>
    uiSensor3 = HAL_ADC_GetValue(&hadc3);
 80018fe:	4838      	ldr	r0, [pc, #224]	@ (80019e0 <fSensorLinhaLeituraSensor+0x130>)
 8001900:	f001 faca 	bl	8002e98 <HAL_ADC_GetValue>
 8001904:	4603      	mov	r3, r0
 8001906:	4a37      	ldr	r2, [pc, #220]	@ (80019e4 <fSensorLinhaLeituraSensor+0x134>)
 8001908:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(&hadc4);
 800190a:	4837      	ldr	r0, [pc, #220]	@ (80019e8 <fSensorLinhaLeituraSensor+0x138>)
 800190c:	f001 f8da 	bl	8002ac4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	4834      	ldr	r0, [pc, #208]	@ (80019e8 <fSensorLinhaLeituraSensor+0x138>)
 8001916:	f001 f9b9 	bl	8002c8c <HAL_ADC_PollForConversion>
    uiSensor4 = HAL_ADC_GetValue(&hadc4);
 800191a:	4833      	ldr	r0, [pc, #204]	@ (80019e8 <fSensorLinhaLeituraSensor+0x138>)
 800191c:	f001 fabc 	bl	8002e98 <HAL_ADC_GetValue>
 8001920:	4603      	mov	r3, r0
 8001922:	4a32      	ldr	r2, [pc, #200]	@ (80019ec <fSensorLinhaLeituraSensor+0x13c>)
 8001924:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(&hadc5);
 8001926:	4832      	ldr	r0, [pc, #200]	@ (80019f0 <fSensorLinhaLeituraSensor+0x140>)
 8001928:	f001 f8cc 	bl	8002ac4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc5, HAL_MAX_DELAY);
 800192c:	f04f 31ff 	mov.w	r1, #4294967295
 8001930:	482f      	ldr	r0, [pc, #188]	@ (80019f0 <fSensorLinhaLeituraSensor+0x140>)
 8001932:	f001 f9ab 	bl	8002c8c <HAL_ADC_PollForConversion>
    uiSensor5 = HAL_ADC_GetValue(&hadc5);
 8001936:	482e      	ldr	r0, [pc, #184]	@ (80019f0 <fSensorLinhaLeituraSensor+0x140>)
 8001938:	f001 faae 	bl	8002e98 <HAL_ADC_GetValue>
 800193c:	4603      	mov	r3, r0
 800193e:	4a2d      	ldr	r2, [pc, #180]	@ (80019f4 <fSensorLinhaLeituraSensor+0x144>)
 8001940:	6013      	str	r3, [r2, #0]

    float total = uiSensor1 + uiSensor2 + uiSensor3 + uiSensor4 + uiSensor5;
 8001942:	4b24      	ldr	r3, [pc, #144]	@ (80019d4 <fSensorLinhaLeituraSensor+0x124>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b25      	ldr	r3, [pc, #148]	@ (80019dc <fSensorLinhaLeituraSensor+0x12c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	441a      	add	r2, r3
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <fSensorLinhaLeituraSensor+0x134>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	441a      	add	r2, r3
 8001952:	4b26      	ldr	r3, [pc, #152]	@ (80019ec <fSensorLinhaLeituraSensor+0x13c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	441a      	add	r2, r3
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <fSensorLinhaLeituraSensor+0x144>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4413      	add	r3, r2
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001966:	edc7 7a01 	vstr	s15, [r7, #4]
    if (total == 0) return 0; // Para evitar divisão por zero
 800196a:	edd7 7a01 	vldr	s15, [r7, #4]
 800196e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d102      	bne.n	800197e <fSensorLinhaLeituraSensor+0xce>
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e020      	b.n	80019c0 <fSensorLinhaLeituraSensor+0x110>
    float posicao = (1 * uiSensor1 + 2 * uiSensor2 + 3 * uiSensor3 + 4 * uiSensor4 + 5 * uiSensor5) / total;
 800197e:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <fSensorLinhaLeituraSensor+0x12c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	0059      	lsls	r1, r3, #1
 8001984:	4b17      	ldr	r3, [pc, #92]	@ (80019e4 <fSensorLinhaLeituraSensor+0x134>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	18ca      	adds	r2, r1, r3
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <fSensorLinhaLeituraSensor+0x124>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	18d1      	adds	r1, r2, r3
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <fSensorLinhaLeituraSensor+0x144>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	441a      	add	r2, r3
 80019a0:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <fSensorLinhaLeituraSensor+0x13c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	ee07 3a90 	vmov	s15, r3
 80019ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ba:	edc7 7a00 	vstr	s15, [r7]

    return posicao;
 80019be:	683b      	ldr	r3, [r7, #0]
}
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb0 0a67 	vmov.f32	s0, s15
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000003c 	.word	0x2000003c
 80019d4:	200004dc 	.word	0x200004dc
 80019d8:	200000a8 	.word	0x200000a8
 80019dc:	200004e0 	.word	0x200004e0
 80019e0:	20000114 	.word	0x20000114
 80019e4:	200004e4 	.word	0x200004e4
 80019e8:	20000180 	.word	0x20000180
 80019ec:	200004e8 	.word	0x200004e8
 80019f0:	200001ec 	.word	0x200001ec
 80019f4:	200004ec 	.word	0x200004ec

080019f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a02:	4a0e      	ldr	r2, [pc, #56]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	607b      	str	r3, [r7, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a16:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1a:	4a08      	ldr	r2, [pc, #32]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_MspInit+0x44>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a2a:	603b      	str	r3, [r7, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a2e:	f004 fb8f 	bl	8006150 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000

08001a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <NMI_Handler+0x4>

08001a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <HardFault_Handler+0x4>

08001a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <MemManage_Handler+0x4>

08001a58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <BusFault_Handler+0x4>

08001a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <UsageFault_Handler+0x4>

08001a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a96:	f000 fbc7 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <DMA1_Channel1_IRQHandler+0x10>)
 8001aa6:	f002 fb16 	bl	80040d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000258 	.word	0x20000258

08001ab4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <DMA1_Channel2_IRQHandler+0x10>)
 8001aba:	f002 fb0c 	bl	80040d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002b8 	.word	0x200002b8

08001ac8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <DMA1_Channel3_IRQHandler+0x10>)
 8001ace:	f002 fb02 	bl	80040d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000318 	.word	0x20000318

08001adc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001ae0:	4802      	ldr	r0, [pc, #8]	@ (8001aec <DMA1_Channel4_IRQHandler+0x10>)
 8001ae2:	f002 faf8 	bl	80040d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20000378 	.word	0x20000378

08001af0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <DMA1_Channel5_IRQHandler+0x10>)
 8001af6:	f002 faee 	bl	80040d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	200003d8 	.word	0x200003d8

08001b04 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001b0a:	f005 f995 	bl	8006e38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001b10:	f005 f992 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200004f0 	.word	0x200004f0
 8001b1c:	2000053c 	.word	0x2000053c

08001b20 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b24:	4803      	ldr	r0, [pc, #12]	@ (8001b34 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001b26:	f005 f987 	bl	8006e38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001b2a:	4803      	ldr	r0, [pc, #12]	@ (8001b38 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001b2c:	f005 f984 	bl	8006e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	200004f0 	.word	0x200004f0
 8001b38:	20000588 	.word	0x20000588

08001b3c <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <I2C2_EV_IRQHandler+0x10>)
 8001b42:	f002 fed7 	bl	80048f4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000460 	.word	0x20000460

08001b50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001b54:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b58:	f002 fd76 	bl	8004648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b64:	4b06      	ldr	r3, [pc, #24]	@ (8001b80 <SystemInit+0x20>)
 8001b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <SystemInit+0x20>)
 8001b6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b09c      	sub	sp, #112	@ 0x70
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ba4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
 8001bb4:	615a      	str	r2, [r3, #20]
 8001bb6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2234      	movs	r2, #52	@ 0x34
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 fb64 	bl	800928c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bc4:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf8 <MX_TIM1_Init+0x174>)
 8001bc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001bca:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bcc:	22a9      	movs	r2, #169	@ 0xa9
 8001bce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd0:	4b48      	ldr	r3, [pc, #288]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001bd6:	4b47      	ldr	r3, [pc, #284]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001bdc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bde:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b42      	ldr	r3, [pc, #264]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bf0:	4840      	ldr	r0, [pc, #256]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001bf2:	f004 fda5 	bl	8006740 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bfc:	f7ff fd11 	bl	8001622 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4839      	ldr	r0, [pc, #228]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001c0e:	f005 fc13 	bl	8007438 <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c18:	f7ff fd03 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c1c:	4835      	ldr	r0, [pc, #212]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001c1e:	f004 fde6 	bl	80067ee <HAL_TIM_PWM_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c28:	f7ff fcfb 	bl	8001622 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	482d      	ldr	r0, [pc, #180]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001c40:	f006 fb46 	bl	80082d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c4a:	f7ff fcea 	bl	8001622 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4e:	2360      	movs	r3, #96	@ 0x60
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c56:	2300      	movs	r3, #0
 8001c58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c6e:	2200      	movs	r2, #0
 8001c70:	4619      	mov	r1, r3
 8001c72:	4820      	ldr	r0, [pc, #128]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001c74:	f005 facc 	bl	8007210 <HAL_TIM_PWM_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c7e:	f7ff fcd0 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c86:	2204      	movs	r2, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	481a      	ldr	r0, [pc, #104]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001c8c:	f005 fac0 	bl	8007210 <HAL_TIM_PWM_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c96:	f7ff fcc4 	bl	8001622 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cc0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001cd2:	1d3b      	adds	r3, r7, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4807      	ldr	r0, [pc, #28]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001cd8:	f006 fb90 	bl	80083fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001ce2:	f7ff fc9e 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ce6:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <MX_TIM1_Init+0x170>)
 8001ce8:	f000 f948 	bl	8001f7c <HAL_TIM_MspPostInit>

}
 8001cec:	bf00      	nop
 8001cee:	3770      	adds	r7, #112	@ 0x70
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200004f0 	.word	0x200004f0
 8001cf8:	40012c00 	.word	0x40012c00

08001cfc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d10:	4a1f      	ldr	r2, [pc, #124]	@ (8001d90 <MX_TIM16_Init+0x94>)
 8001d12:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d16:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001d1a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50000;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d24:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001d28:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d30:	4b16      	ldr	r3, [pc, #88]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d3c:	4813      	ldr	r0, [pc, #76]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d3e:	f004 fcff 	bl	8006740 <HAL_TIM_Base_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8001d48:	f7ff fc6b 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001d4c:	480f      	ldr	r0, [pc, #60]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d4e:	f004 fec1 	bl	8006ad4 <HAL_TIM_IC_Init>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8001d58:	f7ff fc63 	bl	8001622 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <MX_TIM16_Init+0x90>)
 8001d74:	f005 f9af 	bl	80070d6 <HAL_TIM_IC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 8001d7e:	f7ff fc50 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000053c 	.word	0x2000053c
 8001d90:	40014400 	.word	0x40014400

08001d94 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001da6:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001da8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e28 <MX_TIM17_Init+0x94>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 8001dac:	4b1d      	ldr	r3, [pc, #116]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dae:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001db2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 8001dba:	4b1a      	ldr	r3, [pc, #104]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dbc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001dc0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001dc8:	4b16      	ldr	r3, [pc, #88]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001dd4:	4813      	ldr	r0, [pc, #76]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001dd6:	f004 fcb3 	bl	8006740 <HAL_TIM_Base_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8001de0:	f7ff fc1f 	bl	8001622 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001de4:	480f      	ldr	r0, [pc, #60]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001de6:	f004 fe75 	bl	8006ad4 <HAL_TIM_IC_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8001df0:	f7ff fc17 	bl	8001622 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e04:	463b      	mov	r3, r7
 8001e06:	2200      	movs	r2, #0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4806      	ldr	r0, [pc, #24]	@ (8001e24 <MX_TIM17_Init+0x90>)
 8001e0c:	f005 f963 	bl	80070d6 <HAL_TIM_IC_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 8001e16:	f7ff fc04 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000588 	.word	0x20000588
 8001e28:	40014800 	.word	0x40014800

08001e2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08c      	sub	sp, #48	@ 0x30
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a47      	ldr	r2, [pc, #284]	@ (8001f68 <HAL_TIM_Base_MspInit+0x13c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11c      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	4b47      	ldr	r3, [pc, #284]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e52:	4a46      	ldr	r2, [pc, #280]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e5a:	4b44      	ldr	r3, [pc, #272]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2019      	movs	r0, #25
 8001e6c:	f001 ffef 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e70:	2019      	movs	r0, #25
 8001e72:	f002 f806 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	201a      	movs	r0, #26
 8001e7c:	f001 ffe7 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001e80:	201a      	movs	r0, #26
 8001e82:	f001 fffe 	bl	8003e82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001e86:	e06a      	b.n	8001f5e <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM16)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a38      	ldr	r2, [pc, #224]	@ (8001f70 <HAL_TIM_Base_MspInit+0x144>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d130      	bne.n	8001ef4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001e92:	4b36      	ldr	r3, [pc, #216]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e96:	4a35      	ldr	r2, [pc, #212]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e9e:	4b33      	ldr	r3, [pc, #204]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eaa:	4b30      	ldr	r3, [pc, #192]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eae:	4a2f      	ldr	r2, [pc, #188]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_Pin;
 8001ec2:	2310      	movs	r3, #16
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Esq_GPIO_Port, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	4825      	ldr	r0, [pc, #148]	@ (8001f74 <HAL_TIM_Base_MspInit+0x148>)
 8001ede:	f002 fa19 	bl	8004314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2019      	movs	r0, #25
 8001ee8:	f001 ffb1 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eec:	2019      	movs	r0, #25
 8001eee:	f001 ffc8 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 8001ef2:	e034      	b.n	8001f5e <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM17)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f78 <HAL_TIM_Base_MspInit+0x14c>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d12f      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001efe:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f02:	4a1a      	ldr	r2, [pc, #104]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f0a:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	4a14      	ldr	r2, [pc, #80]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_TIM_Base_MspInit+0x140>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_Pin;
 8001f2e:	2320      	movs	r3, #32
 8001f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001f3e:	230a      	movs	r3, #10
 8001f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Dir_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 031c 	add.w	r3, r7, #28
 8001f46:	4619      	mov	r1, r3
 8001f48:	480a      	ldr	r0, [pc, #40]	@ (8001f74 <HAL_TIM_Base_MspInit+0x148>)
 8001f4a:	f002 f9e3 	bl	8004314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	201a      	movs	r0, #26
 8001f54:	f001 ff7b 	bl	8003e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f58:	201a      	movs	r0, #26
 8001f5a:	f001 ff92 	bl	8003e82 <HAL_NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3730      	adds	r7, #48	@ 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40012c00 	.word	0x40012c00
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40014400 	.word	0x40014400
 8001f74:	48000400 	.word	0x48000400
 8001f78:	40014800 	.word	0x40014800

08001f7c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_TIM_MspPostInit+0x64>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d11b      	bne.n	8001fd6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_TIM_MspPostInit+0x68>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <HAL_TIM_MspPostInit+0x68>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_TIM_MspPostInit+0x68>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_TIM_MspPostInit+0x6c>)
 8001fd2:	f002 f99f 	bl	8004314 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3720      	adds	r7, #32
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40012c00 	.word	0x40012c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	48000800 	.word	0x48000800

08001fec <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8001ff2:	4a22      	ldr	r2, [pc, #136]	@ (800207c <MX_LPUART1_UART_Init+0x90>)
 8001ff4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800200a:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002022:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002028:	4b13      	ldr	r3, [pc, #76]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 800202a:	2200      	movs	r2, #0
 800202c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800202e:	4812      	ldr	r0, [pc, #72]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002030:	f006 fabe 	bl	80085b0 <HAL_UART_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800203a:	f7ff faf2 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800203e:	2100      	movs	r1, #0
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002042:	f007 f859 	bl	80090f8 <HAL_UARTEx_SetTxFifoThreshold>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800204c:	f7ff fae9 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002050:	2100      	movs	r1, #0
 8002052:	4809      	ldr	r0, [pc, #36]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002054:	f007 f88e 	bl	8009174 <HAL_UARTEx_SetRxFifoThreshold>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800205e:	f7ff fae0 	bl	8001622 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002062:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_LPUART1_UART_Init+0x8c>)
 8002064:	f007 f80f 	bl	8009086 <HAL_UARTEx_DisableFifoMode>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800206e:	f7ff fad8 	bl	8001622 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200005d4 	.word	0x200005d4
 800207c:	40008000 	.word	0x40008000

08002080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b09e      	sub	sp, #120	@ 0x78
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	2254      	movs	r2, #84	@ 0x54
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f007 f8f3 	bl	800928c <memset>
  if(uartHandle->Instance==LPUART1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002128 <HAL_UART_MspInit+0xa8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d136      	bne.n	800211e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80020b0:	2320      	movs	r3, #32
 80020b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f8f1 	bl	80062a4 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020c8:	f7ff faab 	bl	8001622 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020cc:	4b17      	ldr	r3, [pc, #92]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d0:	4a16      	ldr	r2, [pc, #88]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80020d8:	4b14      	ldr	r3, [pc, #80]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	60fb      	str	r3, [r7, #12]
 80020e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e4:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e8:	4a10      	ldr	r2, [pc, #64]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020ea:	f043 0301 	orr.w	r3, r3, #1
 80020ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f0:	4b0e      	ldr	r3, [pc, #56]	@ (800212c <HAL_UART_MspInit+0xac>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80020fc:	230c      	movs	r3, #12
 80020fe:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002108:	2300      	movs	r3, #0
 800210a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800210c:	230c      	movs	r3, #12
 800210e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800211a:	f002 f8fb 	bl	8004314 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800211e:	bf00      	nop
 8002120:	3778      	adds	r7, #120	@ 0x78
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40008000 	.word	0x40008000
 800212c:	40021000 	.word	0x40021000

08002130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002130:	480d      	ldr	r0, [pc, #52]	@ (8002168 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002132:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002134:	f7ff fd14 	bl	8001b60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <LoopForever+0x6>)
  ldr r1, =_edata
 800213a:	490d      	ldr	r1, [pc, #52]	@ (8002170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <LoopForever+0xe>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002150:	4c0a      	ldr	r4, [pc, #40]	@ (800217c <LoopForever+0x16>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215e:	f007 f89d 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002162:	f7ff f995 	bl	8001490 <main>

08002166 <LoopForever>:

LoopForever:
    b LoopForever
 8002166:	e7fe      	b.n	8002166 <LoopForever>
  ldr   r0, =_estack
 8002168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8002174:	0800934c 	.word	0x0800934c
  ldr r2, =_sbss
 8002178:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800217c:	2000066c 	.word	0x2000066c

08002180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC1_2_IRQHandler>

08002182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002188:	2300      	movs	r3, #0
 800218a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f001 fe53 	bl	8003e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f80e 	bl	80021b4 <HAL_InitTick>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	e001      	b.n	80021a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021a4:	f7ff fc28 	bl	80019f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021a8:	79fb      	ldrb	r3, [r7, #7]

}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_InitTick+0x68>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d022      	beq.n	800220e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021c8:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_InitTick+0x6c>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <HAL_InitTick+0x68>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f001 fe5e 	bl	8003e9e <HAL_SYSTICK_Config>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10f      	bne.n	8002208 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	d809      	bhi.n	8002202 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ee:	2200      	movs	r2, #0
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	f04f 30ff 	mov.w	r0, #4294967295
 80021f6:	f001 fe2a 	bl	8003e4e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_InitTick+0x70>)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	e007      	b.n	8002212 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	e004      	b.n	8002212 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
 800220c:	e001      	b.n	8002212 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	2000001c 	.word	0x2000001c
 8002220:	20000014 	.word	0x20000014
 8002224:	20000018 	.word	0x20000018

08002228 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <HAL_IncTick+0x1c>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b05      	ldr	r3, [pc, #20]	@ (8002248 <HAL_IncTick+0x20>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4413      	add	r3, r2
 8002236:	4a03      	ldr	r2, [pc, #12]	@ (8002244 <HAL_IncTick+0x1c>)
 8002238:	6013      	str	r3, [r2, #0]
}
 800223a:	bf00      	nop
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	20000668 	.word	0x20000668
 8002248:	2000001c 	.word	0x2000001c

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000668 	.word	0x20000668

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d004      	beq.n	8002288 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_Delay+0x40>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002288:	bf00      	nop
 800228a:	f7ff ffdf 	bl	800224c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	429a      	cmp	r2, r3
 8002298:	d8f7      	bhi.n	800228a <HAL_Delay+0x26>
  {
  }
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000001c 	.word	0x2000001c

080022a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	609a      	str	r2, [r3, #8]
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	3360      	adds	r3, #96	@ 0x60
 8002322:	461a      	mov	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <LL_ADC_SetOffset+0x44>)
 8002332:	4013      	ands	r3, r2
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	4313      	orrs	r3, r2
 8002340:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	03fff000 	.word	0x03fff000

08002358 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3360      	adds	r3, #96	@ 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3360      	adds	r3, #96	@ 0x60
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80023ae:	bf00      	nop
 80023b0:	371c      	adds	r7, #28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b087      	sub	sp, #28
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	60b9      	str	r1, [r7, #8]
 80023c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	3360      	adds	r3, #96	@ 0x60
 80023ca:	461a      	mov	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	431a      	orrs	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3360      	adds	r3, #96	@ 0x60
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr

08002426 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002426:	b480      	push	{r7}
 8002428:	b083      	sub	sp, #12
 800242a:	af00      	add	r7, sp, #0
 800242c:	6078      	str	r0, [r7, #4]
 800242e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	431a      	orrs	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	615a      	str	r2, [r3, #20]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002472:	b480      	push	{r7}
 8002474:	b087      	sub	sp, #28
 8002476:	af00      	add	r7, sp, #0
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	60b9      	str	r1, [r7, #8]
 800247c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	3330      	adds	r3, #48	@ 0x30
 8002482:	461a      	mov	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	4413      	add	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	211f      	movs	r1, #31
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	0e9b      	lsrs	r3, r3, #26
 80024aa:	f003 011f 	and.w	r1, r3, #31
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa01 f303 	lsl.w	r3, r1, r3
 80024b8:	431a      	orrs	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024be:	bf00      	nop
 80024c0:	371c      	adds	r7, #28
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b087      	sub	sp, #28
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	60f8      	str	r0, [r7, #12]
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3314      	adds	r3, #20
 80024da:	461a      	mov	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	0e5b      	lsrs	r3, r3, #25
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	4413      	add	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0d1b      	lsrs	r3, r3, #20
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	2107      	movs	r1, #7
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	401a      	ands	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	0d1b      	lsrs	r3, r3, #20
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0318 	and.w	r3, r3, #24
 8002542:	4908      	ldr	r1, [pc, #32]	@ (8002564 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002544:	40d9      	lsrs	r1, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	400b      	ands	r3, r1
 800254a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800254e:	431a      	orrs	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	0007ffff 	.word	0x0007ffff

08002568 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 031f 	and.w	r3, r3, #31
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6093      	str	r3, [r2, #8]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025d8:	d101      	bne.n	80025de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80025fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002600:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002624:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002628:	d101      	bne.n	800262e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800264c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002650:	f043 0201 	orr.w	r2, r3, #1
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002678:	f043 0202 	orr.w	r2, r3, #2
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <LL_ADC_IsEnabled+0x18>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <LL_ADC_IsEnabled+0x1a>
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d101      	bne.n	80026ca <LL_ADC_IsDisableOngoing+0x18>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <LL_ADC_IsDisableOngoing+0x1a>
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026ec:	f043 0204 	orr.w	r2, r3, #4
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b04      	cmp	r3, #4
 8002712:	d101      	bne.n	8002718 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b08      	cmp	r3, #8
 8002738:	d101      	bne.n	800273e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b089      	sub	sp, #36	@ 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1a9      	b.n	8002aba <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe f8e9 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff19 	bl	80025c4 <LL_ADC_IsDeepPowerDownEnabled>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff feff 	bl	80025a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff34 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ff18 	bl	80025ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027bc:	4b9c      	ldr	r3, [pc, #624]	@ (8002a30 <HAL_ADC_Init+0x2e4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	4a9c      	ldr	r2, [pc, #624]	@ (8002a34 <HAL_ADC_Init+0x2e8>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	099b      	lsrs	r3, r3, #6
 80027ca:	3301      	adds	r3, #1
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027d0:	e002      	b.n	80027d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f9      	bne.n	80027d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff16 	bl	8002614 <LL_ADC_IsInternalRegulatorEnabled>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10d      	bne.n	800280a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff76 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002814:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281a:	f003 0310 	and.w	r3, r3, #16
 800281e:	2b00      	cmp	r3, #0
 8002820:	f040 8142 	bne.w	8002aa8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 813e 	bne.w	8002aa8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002830:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002834:	f043 0202 	orr.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff23 	bl	800268c <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d141      	bne.n	80028d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002854:	d004      	beq.n	8002860 <HAL_ADC_Init+0x114>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a77      	ldr	r2, [pc, #476]	@ (8002a38 <HAL_ADC_Init+0x2ec>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d10f      	bne.n	8002880 <HAL_ADC_Init+0x134>
 8002860:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002864:	f7ff ff12 	bl	800268c <LL_ADC_IsEnabled>
 8002868:	4604      	mov	r4, r0
 800286a:	4873      	ldr	r0, [pc, #460]	@ (8002a38 <HAL_ADC_Init+0x2ec>)
 800286c:	f7ff ff0e 	bl	800268c <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	4323      	orrs	r3, r4
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_ADC_Init+0x15a>
 8002880:	486e      	ldr	r0, [pc, #440]	@ (8002a3c <HAL_ADC_Init+0x2f0>)
 8002882:	f7ff ff03 	bl	800268c <LL_ADC_IsEnabled>
 8002886:	4604      	mov	r4, r0
 8002888:	486d      	ldr	r0, [pc, #436]	@ (8002a40 <HAL_ADC_Init+0x2f4>)
 800288a:	f7ff feff 	bl	800268c <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	431c      	orrs	r4, r3
 8002892:	486c      	ldr	r0, [pc, #432]	@ (8002a44 <HAL_ADC_Init+0x2f8>)
 8002894:	f7ff fefa 	bl	800268c <LL_ADC_IsEnabled>
 8002898:	4603      	mov	r3, r0
 800289a:	4323      	orrs	r3, r4
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028b2:	d004      	beq.n	80028be <HAL_ADC_Init+0x172>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5f      	ldr	r2, [pc, #380]	@ (8002a38 <HAL_ADC_Init+0x2ec>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d101      	bne.n	80028c2 <HAL_ADC_Init+0x176>
 80028be:	4a62      	ldr	r2, [pc, #392]	@ (8002a48 <HAL_ADC_Init+0x2fc>)
 80028c0:	e000      	b.n	80028c4 <HAL_ADC_Init+0x178>
 80028c2:	4a62      	ldr	r2, [pc, #392]	@ (8002a4c <HAL_ADC_Init+0x300>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	4619      	mov	r1, r3
 80028ca:	4610      	mov	r0, r2
 80028cc:	f7ff fcec 	bl	80022a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	7f5b      	ldrb	r3, [r3, #29]
 80028d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f0:	4313      	orrs	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d106      	bne.n	800290c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	3b01      	subs	r3, #1
 8002904:	045b      	lsls	r3, r3, #17
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	68da      	ldr	r2, [r3, #12]
 800292e:	4b48      	ldr	r3, [pc, #288]	@ (8002a50 <HAL_ADC_Init+0x304>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	69b9      	ldr	r1, [r7, #24]
 8002938:	430b      	orrs	r3, r1
 800293a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fee5 	bl	8002726 <LL_ADC_INJ_IsConversionOngoing>
 800295c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d17f      	bne.n	8002a64 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d17c      	bne.n	8002a64 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800296e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002976:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002986:	f023 0302 	bic.w	r3, r3, #2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	430b      	orrs	r3, r1
 8002992:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691a      	ldr	r2, [r3, #16]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80029aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029b4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6911      	ldr	r1, [r2, #16]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80029ca:	e013      	b.n	80029f4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80029da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80029ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80029f0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12a      	bne.n	8002a54 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a20:	430a      	orrs	r2, r1
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f042 0201 	orr.w	r2, r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
 8002a2e:	e019      	b.n	8002a64 <HAL_ADC_Init+0x318>
 8002a30:	20000014 	.word	0x20000014
 8002a34:	053e2d63 	.word	0x053e2d63
 8002a38:	50000100 	.word	0x50000100
 8002a3c:	50000400 	.word	0x50000400
 8002a40:	50000500 	.word	0x50000500
 8002a44:	50000600 	.word	0x50000600
 8002a48:	50000300 	.word	0x50000300
 8002a4c:	50000700 	.word	0x50000700
 8002a50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10c      	bne.n	8002a86 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	f023 010f 	bic.w	r1, r3, #15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	1e5a      	subs	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a84:	e007      	b.n	8002a96 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 020f 	bic.w	r2, r2, #15
 8002a94:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9a:	f023 0303 	bic.w	r3, r3, #3
 8002a9e:	f043 0201 	orr.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002aa6:	e007      	b.n	8002ab8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aac:	f043 0210 	orr.w	r2, r3, #16
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	@ 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd90      	pop	{r4, r7, pc}
 8002ac2:	bf00      	nop

08002ac4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ad4:	d004      	beq.n	8002ae0 <HAL_ADC_Start+0x1c>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a67      	ldr	r2, [pc, #412]	@ (8002c78 <HAL_ADC_Start+0x1b4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_Start+0x20>
 8002ae0:	4b66      	ldr	r3, [pc, #408]	@ (8002c7c <HAL_ADC_Start+0x1b8>)
 8002ae2:	e000      	b.n	8002ae6 <HAL_ADC_Start+0x22>
 8002ae4:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_ADC_Start+0x1bc>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fd3e 	bl	8002568 <LL_ADC_GetMultimode>
 8002aec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fe04 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f040 80b4 	bne.w	8002c68 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_Start+0x4a>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e0af      	b.n	8002c6e <HAL_ADC_Start+0x1aa>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fe0c 	bl	8003734 <ADC_Enable>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b20:	7dfb      	ldrb	r3, [r7, #23]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f040 809b 	bne.w	8002c5e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a4d      	ldr	r2, [pc, #308]	@ (8002c78 <HAL_ADC_Start+0x1b4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d009      	beq.n	8002b5a <HAL_ADC_Start+0x96>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c84 <HAL_ADC_Start+0x1c0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d002      	beq.n	8002b56 <HAL_ADC_Start+0x92>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	e003      	b.n	8002b5e <HAL_ADC_Start+0x9a>
 8002b56:	4b4c      	ldr	r3, [pc, #304]	@ (8002c88 <HAL_ADC_Start+0x1c4>)
 8002b58:	e001      	b.n	8002b5e <HAL_ADC_Start+0x9a>
 8002b5a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d002      	beq.n	8002b6c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b84:	d106      	bne.n	8002b94 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b8a:	f023 0206 	bic.w	r2, r3, #6
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	661a      	str	r2, [r3, #96]	@ 0x60
 8002b92:	e002      	b.n	8002b9a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	221c      	movs	r2, #28
 8002ba0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a32      	ldr	r2, [pc, #200]	@ (8002c78 <HAL_ADC_Start+0x1b4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d009      	beq.n	8002bc8 <HAL_ADC_Start+0x104>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a32      	ldr	r2, [pc, #200]	@ (8002c84 <HAL_ADC_Start+0x1c0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d002      	beq.n	8002bc4 <HAL_ADC_Start+0x100>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	e003      	b.n	8002bcc <HAL_ADC_Start+0x108>
 8002bc4:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <HAL_ADC_Start+0x1c4>)
 8002bc6:	e001      	b.n	8002bcc <HAL_ADC_Start+0x108>
 8002bc8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d008      	beq.n	8002be6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d005      	beq.n	8002be6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d002      	beq.n	8002be6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b09      	cmp	r3, #9
 8002be4:	d114      	bne.n	8002c10 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bfc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fd65 	bl	80026d8 <LL_ADC_REG_StartConversion>
 8002c0e:	e02d      	b.n	8002c6c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c14:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a15      	ldr	r2, [pc, #84]	@ (8002c78 <HAL_ADC_Start+0x1b4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d009      	beq.n	8002c3a <HAL_ADC_Start+0x176>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a16      	ldr	r2, [pc, #88]	@ (8002c84 <HAL_ADC_Start+0x1c0>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d002      	beq.n	8002c36 <HAL_ADC_Start+0x172>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	e003      	b.n	8002c3e <HAL_ADC_Start+0x17a>
 8002c36:	4b14      	ldr	r3, [pc, #80]	@ (8002c88 <HAL_ADC_Start+0x1c4>)
 8002c38:	e001      	b.n	8002c3e <HAL_ADC_Start+0x17a>
 8002c3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c3e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00f      	beq.n	8002c6c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c54:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002c5c:	e006      	b.n	8002c6c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002c66:	e001      	b.n	8002c6c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	50000100 	.word	0x50000100
 8002c7c:	50000300 	.word	0x50000300
 8002c80:	50000700 	.word	0x50000700
 8002c84:	50000500 	.word	0x50000500
 8002c88:	50000400 	.word	0x50000400

08002c8c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9e:	d004      	beq.n	8002caa <HAL_ADC_PollForConversion+0x1e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a77      	ldr	r2, [pc, #476]	@ (8002e84 <HAL_ADC_PollForConversion+0x1f8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_PollForConversion+0x22>
 8002caa:	4b77      	ldr	r3, [pc, #476]	@ (8002e88 <HAL_ADC_PollForConversion+0x1fc>)
 8002cac:	e000      	b.n	8002cb0 <HAL_ADC_PollForConversion+0x24>
 8002cae:	4b77      	ldr	r3, [pc, #476]	@ (8002e8c <HAL_ADC_PollForConversion+0x200>)
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fc59 	bl	8002568 <LL_ADC_GetMultimode>
 8002cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d102      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002cc0:	2308      	movs	r3, #8
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	e037      	b.n	8002d36 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d002      	beq.n	8002cd8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b09      	cmp	r3, #9
 8002cd6:	d111      	bne.n	8002cfc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0c1      	b.n	8002e7a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002cfa:	e01c      	b.n	8002d36 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d04:	d004      	beq.n	8002d10 <HAL_ADC_PollForConversion+0x84>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002e84 <HAL_ADC_PollForConversion+0x1f8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_PollForConversion+0x88>
 8002d10:	4b5d      	ldr	r3, [pc, #372]	@ (8002e88 <HAL_ADC_PollForConversion+0x1fc>)
 8002d12:	e000      	b.n	8002d16 <HAL_ADC_PollForConversion+0x8a>
 8002d14:	4b5d      	ldr	r3, [pc, #372]	@ (8002e8c <HAL_ADC_PollForConversion+0x200>)
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fc34 	bl	8002584 <LL_ADC_GetMultiDMATransfer>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d26:	f043 0220 	orr.w	r2, r3, #32
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0a3      	b.n	8002e7a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002d32:	2304      	movs	r3, #4
 8002d34:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d36:	f7ff fa89 	bl	800224c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d3c:	e021      	b.n	8002d82 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d01d      	beq.n	8002d82 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d46:	f7ff fa81 	bl	800224c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <HAL_ADC_PollForConversion+0xd0>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d112      	bne.n	8002d82 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	4013      	ands	r3, r2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10b      	bne.n	8002d82 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d6e:	f043 0204 	orr.w	r2, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e07b      	b.n	8002e7a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0d6      	beq.n	8002d3e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fb53 	bl	800244c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d01c      	beq.n	8002de6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	7f5b      	ldrb	r3, [r3, #29]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d118      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d111      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dde:	f043 0201 	orr.w	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a26      	ldr	r2, [pc, #152]	@ (8002e84 <HAL_ADC_PollForConversion+0x1f8>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_ADC_PollForConversion+0x178>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a26      	ldr	r2, [pc, #152]	@ (8002e90 <HAL_ADC_PollForConversion+0x204>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d002      	beq.n	8002e00 <HAL_ADC_PollForConversion+0x174>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	e003      	b.n	8002e08 <HAL_ADC_PollForConversion+0x17c>
 8002e00:	4b24      	ldr	r3, [pc, #144]	@ (8002e94 <HAL_ADC_PollForConversion+0x208>)
 8002e02:	e001      	b.n	8002e08 <HAL_ADC_PollForConversion+0x17c>
 8002e04:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d008      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d005      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d002      	beq.n	8002e22 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2b09      	cmp	r3, #9
 8002e20:	d104      	bne.n	8002e2c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	e014      	b.n	8002e56 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a14      	ldr	r2, [pc, #80]	@ (8002e84 <HAL_ADC_PollForConversion+0x1f8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d009      	beq.n	8002e4a <HAL_ADC_PollForConversion+0x1be>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a15      	ldr	r2, [pc, #84]	@ (8002e90 <HAL_ADC_PollForConversion+0x204>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d002      	beq.n	8002e46 <HAL_ADC_PollForConversion+0x1ba>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	e003      	b.n	8002e4e <HAL_ADC_PollForConversion+0x1c2>
 8002e46:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_ADC_PollForConversion+0x208>)
 8002e48:	e001      	b.n	8002e4e <HAL_ADC_PollForConversion+0x1c2>
 8002e4a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002e4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d104      	bne.n	8002e66 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2208      	movs	r2, #8
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e008      	b.n	8002e78 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	220c      	movs	r2, #12
 8002e76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	50000100 	.word	0x50000100
 8002e88:	50000300 	.word	0x50000300
 8002e8c:	50000700 	.word	0x50000700
 8002e90:	50000500 	.word	0x50000500
 8002e94:	50000400 	.word	0x50000400

08002e98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0b6      	sub	sp, #216	@ 0xd8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x24>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	f000 bc13 	b.w	80036fe <HAL_ADC_ConfigChannel+0x84a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff fc0b 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002eea:	4603      	mov	r3, r0
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f040 83f3 	bne.w	80036d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6859      	ldr	r1, [r3, #4]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	f7ff fab7 	bl	8002472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff fbf9 	bl	8002700 <LL_ADC_REG_IsConversionOngoing>
 8002f0e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fc05 	bl	8002726 <LL_ADC_INJ_IsConversionOngoing>
 8002f1c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f040 81d9 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f040 81d4 	bne.w	80032dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f3c:	d10f      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6818      	ldr	r0, [r3, #0]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2200      	movs	r2, #0
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7ff fabe 	bl	80024ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fa65 	bl	8002426 <LL_ADC_SetSamplingTimeCommonConfig>
 8002f5c:	e00e      	b.n	8002f7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6819      	ldr	r1, [r3, #0]
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f7ff faad 	bl	80024ca <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fa55 	bl	8002426 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	08db      	lsrs	r3, r3, #3
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	d022      	beq.n	8002fe4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	6919      	ldr	r1, [r3, #16]
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002fae:	f7ff f9af 	bl	8002310 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6919      	ldr	r1, [r3, #16]
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	f7ff f9fb 	bl	80023ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d102      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x126>
 8002fd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd8:	e000      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x128>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f7ff fa07 	bl	80023f0 <LL_ADC_SetOffsetSaturation>
 8002fe2:	e17b      	b.n	80032dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2100      	movs	r1, #0
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff f9b4 	bl	8002358 <LL_ADC_GetOffsetChannel>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x15c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f9a9 	bl	8002358 <LL_ADC_GetOffsetChannel>
 8003006:	4603      	mov	r3, r0
 8003008:	0e9b      	lsrs	r3, r3, #26
 800300a:	f003 021f 	and.w	r2, r3, #31
 800300e:	e01e      	b.n	800304e <HAL_ADC_ConfigChannel+0x19a>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff f99e 	bl	8002358 <LL_ADC_GetOffsetChannel>
 800301c:	4603      	mov	r3, r0
 800301e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800302e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003032:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003036:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800303e:	2320      	movs	r3, #32
 8003040:	e004      	b.n	800304c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	2b00      	cmp	r3, #0
 8003058:	d105      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x1b2>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	0e9b      	lsrs	r3, r3, #26
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	e018      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800307a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800307e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003082:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e004      	b.n	8003098 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800308e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2100      	movs	r1, #0
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f96d 	bl	8002384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2101      	movs	r1, #1
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff f951 	bl	8002358 <LL_ADC_GetOffsetChannel>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x222>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7ff f946 	bl	8002358 <LL_ADC_GetOffsetChannel>
 80030cc:	4603      	mov	r3, r0
 80030ce:	0e9b      	lsrs	r3, r3, #26
 80030d0:	f003 021f 	and.w	r2, r3, #31
 80030d4:	e01e      	b.n	8003114 <HAL_ADC_ConfigChannel+0x260>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2101      	movs	r1, #1
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f93b 	bl	8002358 <LL_ADC_GetOffsetChannel>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030ec:	fa93 f3a3 	rbit	r3, r3
 80030f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e004      	b.n	8003112 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003108:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800310c:	fab3 f383 	clz	r3, r3
 8003110:	b2db      	uxtb	r3, r3
 8003112:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d105      	bne.n	800312c <HAL_ADC_ConfigChannel+0x278>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	f003 031f 	and.w	r3, r3, #31
 800312a:	e018      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003138:	fa93 f3a3 	rbit	r3, r3
 800313c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003140:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e004      	b.n	800315e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003154:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003158:	fab3 f383 	clz	r3, r3
 800315c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800315e:	429a      	cmp	r2, r3
 8003160:	d106      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2200      	movs	r2, #0
 8003168:	2101      	movs	r1, #1
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff f90a 	bl	8002384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f8ee 	bl	8002358 <LL_ADC_GetOffsetChannel>
 800317c:	4603      	mov	r3, r0
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_ADC_ConfigChannel+0x2e8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2102      	movs	r1, #2
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f8e3 	bl	8002358 <LL_ADC_GetOffsetChannel>
 8003192:	4603      	mov	r3, r0
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 021f 	and.w	r2, r3, #31
 800319a:	e01e      	b.n	80031da <HAL_ADC_ConfigChannel+0x326>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2102      	movs	r1, #2
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7ff f8d8 	bl	8002358 <LL_ADC_GetOffsetChannel>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80031ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80031c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80031ca:	2320      	movs	r3, #32
 80031cc:	e004      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80031ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031d2:	fab3 f383 	clz	r3, r3
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x33e>
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	0e9b      	lsrs	r3, r3, #26
 80031ec:	f003 031f 	and.w	r3, r3, #31
 80031f0:	e016      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003206:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800320a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003212:	2320      	movs	r3, #32
 8003214:	e004      	b.n	8003220 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003216:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003220:	429a      	cmp	r2, r3
 8003222:	d106      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2200      	movs	r2, #0
 800322a:	2102      	movs	r1, #2
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff f8a9 	bl	8002384 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2103      	movs	r1, #3
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f88d 	bl	8002358 <LL_ADC_GetOffsetChannel>
 800323e:	4603      	mov	r3, r0
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10a      	bne.n	800325e <HAL_ADC_ConfigChannel+0x3aa>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2103      	movs	r1, #3
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff f882 	bl	8002358 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	0e9b      	lsrs	r3, r3, #26
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	e017      	b.n	800328e <HAL_ADC_ConfigChannel+0x3da>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2103      	movs	r1, #3
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff f877 	bl	8002358 <LL_ADC_GetOffsetChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003276:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003278:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800327a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003280:	2320      	movs	r3, #32
 8003282:	e003      	b.n	800328c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x3f2>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0e9b      	lsrs	r3, r3, #26
 80032a0:	f003 031f 	and.w	r3, r3, #31
 80032a4:	e011      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032ae:	fa93 f3a3 	rbit	r3, r3
 80032b2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80032b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80032b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80032be:	2320      	movs	r3, #32
 80032c0:	e003      	b.n	80032ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80032c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032c4:	fab3 f383 	clz	r3, r3
 80032c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d106      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2103      	movs	r1, #3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f854 	bl	8002384 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff f9d3 	bl	800268c <LL_ADC_IsEnabled>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 813d 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7ff f910 	bl	8002520 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4aa2      	ldr	r2, [pc, #648]	@ (8003590 <HAL_ADC_ConfigChannel+0x6dc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	f040 812e 	bne.w	8003568 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10b      	bne.n	8003334 <HAL_ADC_ConfigChannel+0x480>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	3301      	adds	r3, #1
 8003324:	f003 031f 	and.w	r3, r3, #31
 8003328:	2b09      	cmp	r3, #9
 800332a:	bf94      	ite	ls
 800332c:	2301      	movls	r3, #1
 800332e:	2300      	movhi	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e019      	b.n	8003368 <HAL_ADC_ConfigChannel+0x4b4>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003344:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003346:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	3301      	adds	r3, #1
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	2b09      	cmp	r3, #9
 8003360:	bf94      	ite	ls
 8003362:	2301      	movls	r3, #1
 8003364:	2300      	movhi	r3, #0
 8003366:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003368:	2b00      	cmp	r3, #0
 800336a:	d079      	beq.n	8003460 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x4d4>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0e9b      	lsrs	r3, r3, #26
 800337e:	3301      	adds	r3, #1
 8003380:	069b      	lsls	r3, r3, #26
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003386:	e015      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x500>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003398:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800339a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80033a0:	2320      	movs	r3, #32
 80033a2:	e003      	b.n	80033ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80033a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d109      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x520>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	3301      	adds	r3, #1
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2101      	movs	r1, #1
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	e017      	b.n	8003404 <HAL_ADC_ConfigChannel+0x550>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033dc:	fa93 f3a3 	rbit	r3, r3
 80033e0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033ec:	2320      	movs	r3, #32
 80033ee:	e003      	b.n	80033f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	3301      	adds	r3, #1
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2101      	movs	r1, #1
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	ea42 0103 	orr.w	r1, r2, r3
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <HAL_ADC_ConfigChannel+0x576>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4613      	mov	r3, r2
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	4413      	add	r3, r2
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	e018      	b.n	800345c <HAL_ADC_ConfigChannel+0x5a8>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800343c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	3301      	adds	r3, #1
 8003450:	f003 021f 	and.w	r2, r3, #31
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800345c:	430b      	orrs	r3, r1
 800345e:	e07e      	b.n	800355e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003468:	2b00      	cmp	r3, #0
 800346a:	d107      	bne.n	800347c <HAL_ADC_ConfigChannel+0x5c8>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	0e9b      	lsrs	r3, r3, #26
 8003472:	3301      	adds	r3, #1
 8003474:	069b      	lsls	r3, r3, #26
 8003476:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800347a:	e015      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x5f4>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003484:	fa93 f3a3 	rbit	r3, r3
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800348a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800348e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003494:	2320      	movs	r3, #32
 8003496:	e003      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	069b      	lsls	r3, r3, #26
 80034a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x614>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	3301      	adds	r3, #1
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2101      	movs	r1, #1
 80034c2:	fa01 f303 	lsl.w	r3, r1, r3
 80034c6:	e017      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x644>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	fa93 f3a3 	rbit	r3, r3
 80034d4:	61fb      	str	r3, [r7, #28]
  return result;
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034e0:	2320      	movs	r3, #32
 80034e2:	e003      	b.n	80034ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	fab3 f383 	clz	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	3301      	adds	r3, #1
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	ea42 0103 	orr.w	r1, r2, r3
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10d      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x670>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	0e9b      	lsrs	r3, r3, #26
 800350e:	3301      	adds	r3, #1
 8003510:	f003 021f 	and.w	r2, r3, #31
 8003514:	4613      	mov	r3, r2
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4413      	add	r3, r2
 800351a:	3b1e      	subs	r3, #30
 800351c:	051b      	lsls	r3, r3, #20
 800351e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003522:	e01b      	b.n	800355c <HAL_ADC_ConfigChannel+0x6a8>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	fa93 f3a3 	rbit	r3, r3
 8003530:	613b      	str	r3, [r7, #16]
  return result;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800353c:	2320      	movs	r3, #32
 800353e:	e003      	b.n	8003548 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f003 021f 	and.w	r2, r3, #31
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	3b1e      	subs	r3, #30
 8003556:	051b      	lsls	r3, r3, #20
 8003558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800355c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003562:	4619      	mov	r1, r3
 8003564:	f7fe ffb1 	bl	80024ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_ADC_ConfigChannel+0x6e0>)
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80be 	beq.w	80036f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800357e:	d004      	beq.n	800358a <HAL_ADC_ConfigChannel+0x6d6>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a04      	ldr	r2, [pc, #16]	@ (8003598 <HAL_ADC_ConfigChannel+0x6e4>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x6ec>
 800358a:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_ADC_ConfigChannel+0x6e8>)
 800358c:	e009      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x6ee>
 800358e:	bf00      	nop
 8003590:	407f0000 	.word	0x407f0000
 8003594:	80080000 	.word	0x80080000
 8003598:	50000100 	.word	0x50000100
 800359c:	50000300 	.word	0x50000300
 80035a0:	4b59      	ldr	r3, [pc, #356]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fea6 	bl	80022f4 <LL_ADC_GetCommonPathInternalCh>
 80035a8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a56      	ldr	r2, [pc, #344]	@ (800370c <HAL_ADC_ConfigChannel+0x858>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_ConfigChannel+0x70c>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a55      	ldr	r2, [pc, #340]	@ (8003710 <HAL_ADC_ConfigChannel+0x85c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d13a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d134      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035d4:	d005      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x72e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a4e      	ldr	r2, [pc, #312]	@ (8003714 <HAL_ADC_ConfigChannel+0x860>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	f040 8085 	bne.w	80036ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ea:	d004      	beq.n	80035f6 <HAL_ADC_ConfigChannel+0x742>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a49      	ldr	r2, [pc, #292]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x746>
 80035f6:	4a49      	ldr	r2, [pc, #292]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 80035f8:	e000      	b.n	80035fc <HAL_ADC_ConfigChannel+0x748>
 80035fa:	4a43      	ldr	r2, [pc, #268]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80035fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003600:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fe61 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800360c:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HAL_ADC_ConfigChannel+0x86c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	099b      	lsrs	r3, r3, #6
 8003612:	4a44      	ldr	r2, [pc, #272]	@ (8003724 <HAL_ADC_ConfigChannel+0x870>)
 8003614:	fba2 2303 	umull	r2, r3, r2, r3
 8003618:	099b      	lsrs	r3, r3, #6
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	4613      	mov	r3, r2
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003626:	e002      	b.n	800362e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003634:	e05a      	b.n	80036ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3b      	ldr	r2, [pc, #236]	@ (8003728 <HAL_ADC_ConfigChannel+0x874>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003640:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d11f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a31      	ldr	r2, [pc, #196]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d104      	bne.n	8003660 <HAL_ADC_ConfigChannel+0x7ac>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a34      	ldr	r2, [pc, #208]	@ (800372c <HAL_ADC_ConfigChannel+0x878>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d047      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003668:	d004      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x7c0>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a2a      	ldr	r2, [pc, #168]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d101      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x7c4>
 8003674:	4a29      	ldr	r2, [pc, #164]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 8003676:	e000      	b.n	800367a <HAL_ADC_ConfigChannel+0x7c6>
 8003678:	4a23      	ldr	r2, [pc, #140]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 800367a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800367e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003682:	4619      	mov	r1, r3
 8003684:	4610      	mov	r0, r2
 8003686:	f7fe fe22 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800368a:	e031      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_ADC_ConfigChannel+0x87c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12d      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d127      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d022      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b4:	d004      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x80c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_ADC_ConfigChannel+0x864>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d101      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x810>
 80036c0:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_ADC_ConfigChannel+0x868>)
 80036c2:	e000      	b.n	80036c6 <HAL_ADC_ConfigChannel+0x812>
 80036c4:	4a10      	ldr	r2, [pc, #64]	@ (8003708 <HAL_ADC_ConfigChannel+0x854>)
 80036c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80036ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f7fe fdfc 	bl	80022ce <LL_ADC_SetCommonPathInternalCh>
 80036d6:	e00c      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036dc:	f043 0220 	orr.w	r2, r3, #32
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80036ea:	e002      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036ec:	bf00      	nop
 80036ee:	e000      	b.n	80036f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036fe:	4618      	mov	r0, r3
 8003700:	37d8      	adds	r7, #216	@ 0xd8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	50000700 	.word	0x50000700
 800370c:	c3210000 	.word	0xc3210000
 8003710:	90c00010 	.word	0x90c00010
 8003714:	50000600 	.word	0x50000600
 8003718:	50000100 	.word	0x50000100
 800371c:	50000300 	.word	0x50000300
 8003720:	20000014 	.word	0x20000014
 8003724:	053e2d63 	.word	0x053e2d63
 8003728:	c7520000 	.word	0xc7520000
 800372c:	50000500 	.word	0x50000500
 8003730:	cb840000 	.word	0xcb840000

08003734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800373c:	2300      	movs	r3, #0
 800373e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f7fe ffa1 	bl	800268c <LL_ADC_IsEnabled>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d176      	bne.n	800383e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <ADC_Enable+0x114>)
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003762:	f043 0210 	orr.w	r2, r3, #16
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800376e:	f043 0201 	orr.w	r2, r3, #1
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e062      	b.n	8003840 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f7fe ff5c 	bl	800263c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800378c:	d004      	beq.n	8003798 <ADC_Enable+0x64>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a2e      	ldr	r2, [pc, #184]	@ (800384c <ADC_Enable+0x118>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d101      	bne.n	800379c <ADC_Enable+0x68>
 8003798:	4b2d      	ldr	r3, [pc, #180]	@ (8003850 <ADC_Enable+0x11c>)
 800379a:	e000      	b.n	800379e <ADC_Enable+0x6a>
 800379c:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <ADC_Enable+0x120>)
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fda8 	bl	80022f4 <LL_ADC_GetCommonPathInternalCh>
 80037a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80037a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003858 <ADC_Enable+0x124>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	4a29      	ldr	r2, [pc, #164]	@ (800385c <ADC_Enable+0x128>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037c8:	e002      	b.n	80037d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f9      	bne.n	80037ca <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037d6:	f7fe fd39 	bl	800224c <HAL_GetTick>
 80037da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037dc:	e028      	b.n	8003830 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fe ff52 	bl	800268c <LL_ADC_IsEnabled>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7fe ff22 	bl	800263c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037f8:	f7fe fd28 	bl	800224c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d914      	bls.n	8003830 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	d00d      	beq.n	8003830 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e007      	b.n	8003840 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b01      	cmp	r3, #1
 800383c:	d1cf      	bne.n	80037de <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	8000003f 	.word	0x8000003f
 800384c:	50000100 	.word	0x50000100
 8003850:	50000300 	.word	0x50000300
 8003854:	50000700 	.word	0x50000700
 8003858:	20000014 	.word	0x20000014
 800385c:	053e2d63 	.word	0x053e2d63

08003860 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe ff20 	bl	80026b2 <LL_ADC_IsDisableOngoing>
 8003872:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe ff07 	bl	800268c <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d047      	beq.n	8003914 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d144      	bne.n	8003914 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030d 	and.w	r3, r3, #13
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe fee1 	bl	8002664 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2203      	movs	r2, #3
 80038a8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038aa:	f7fe fccf 	bl	800224c <HAL_GetTick>
 80038ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038b0:	e029      	b.n	8003906 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038b6:	f043 0210 	orr.w	r2, r3, #16
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c2:	f043 0201 	orr.w	r2, r3, #1
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e023      	b.n	8003916 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038ce:	f7fe fcbd 	bl	800224c <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d914      	bls.n	8003906 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00d      	beq.n	8003906 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ee:	f043 0210 	orr.w	r2, r3, #16
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e007      	b.n	8003916 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1dc      	bne.n	80038ce <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <LL_ADC_IsEnabled>:
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b01      	cmp	r3, #1
 8003930:	d101      	bne.n	8003936 <LL_ADC_IsEnabled+0x18>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <LL_ADC_IsEnabled+0x1a>
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <LL_ADC_StartCalibration>:
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003956:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800395a:	683a      	ldr	r2, [r7, #0]
 800395c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003960:	4313      	orrs	r3, r2
 8003962:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	609a      	str	r2, [r3, #8]
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <LL_ADC_IsCalibrationOnGoing>:
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003986:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800398a:	d101      	bne.n	8003990 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <LL_ADC_REG_IsConversionOngoing>:
{
 800399e:	b480      	push	{r7}
 80039a0:	b083      	sub	sp, #12
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0304 	and.w	r3, r3, #4
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d101      	bne.n	80039b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d101      	bne.n	80039e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80039dc:	2302      	movs	r3, #2
 80039de:	e04d      	b.n	8003a7c <HAL_ADCEx_Calibration_Start+0xb8>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff39 	bl	8003860 <ADC_Disable>
 80039ee:	4603      	mov	r3, r0
 80039f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d136      	bne.n	8003a66 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a00:	f023 0302 	bic.w	r3, r3, #2
 8003a04:	f043 0202 	orr.w	r2, r3, #2
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7ff ff96 	bl	8003944 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a18:	e014      	b.n	8003a44 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d90d      	bls.n	8003a44 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a2c:	f023 0312 	bic.w	r3, r3, #18
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e01b      	b.n	8003a7c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff94 	bl	8003976 <LL_ADC_IsCalibrationOnGoing>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1e2      	bne.n	8003a1a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	f023 0303 	bic.w	r3, r3, #3
 8003a5c:	f043 0201 	orr.w	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a64:	e005      	b.n	8003a72 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	f043 0210 	orr.w	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	0004de01 	.word	0x0004de01

08003a88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b0a1      	sub	sp, #132	@ 0x84
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d101      	bne.n	8003aa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e0e7      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003abe:	d102      	bne.n	8003ac6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ac0:	4b6f      	ldr	r3, [pc, #444]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	e009      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6e      	ldr	r2, [pc, #440]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d102      	bne.n	8003ad6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ad0:	4b6d      	ldr	r3, [pc, #436]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	e001      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae4:	f043 0220 	orr.w	r2, r3, #32
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0be      	b.n	8003c76 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff ff4f 	bl	800399e <LL_ADC_REG_IsConversionOngoing>
 8003b00:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7ff ff49 	bl	800399e <LL_ADC_REG_IsConversionOngoing>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 80a0 	bne.w	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 809c 	bne.w	8003c54 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b24:	d004      	beq.n	8003b30 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a55      	ldr	r2, [pc, #340]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d101      	bne.n	8003b34 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b30:	4b56      	ldr	r3, [pc, #344]	@ (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b32:	e000      	b.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b34:	4b56      	ldr	r3, [pc, #344]	@ (8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003b36:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d04b      	beq.n	8003bd8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	6859      	ldr	r1, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b52:	035b      	lsls	r3, r3, #13
 8003b54:	430b      	orrs	r3, r1
 8003b56:	431a      	orrs	r2, r3
 8003b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b64:	d004      	beq.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a45      	ldr	r2, [pc, #276]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d10f      	bne.n	8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b70:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b74:	f7ff fed3 	bl	800391e <LL_ADC_IsEnabled>
 8003b78:	4604      	mov	r4, r0
 8003b7a:	4841      	ldr	r0, [pc, #260]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b7c:	f7ff fecf 	bl	800391e <LL_ADC_IsEnabled>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4323      	orrs	r3, r4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	e012      	b.n	8003bb6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b90:	483c      	ldr	r0, [pc, #240]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b92:	f7ff fec4 	bl	800391e <LL_ADC_IsEnabled>
 8003b96:	4604      	mov	r4, r0
 8003b98:	483b      	ldr	r0, [pc, #236]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b9a:	f7ff fec0 	bl	800391e <LL_ADC_IsEnabled>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	431c      	orrs	r4, r3
 8003ba2:	483c      	ldr	r0, [pc, #240]	@ (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ba4:	f7ff febb 	bl	800391e <LL_ADC_IsEnabled>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	4323      	orrs	r3, r4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d056      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bc2:	f023 030f 	bic.w	r3, r3, #15
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	6811      	ldr	r1, [r2, #0]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	6892      	ldr	r2, [r2, #8]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bd6:	e047      	b.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003be0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003be2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bec:	d004      	beq.n	8003bf8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a23      	ldr	r2, [pc, #140]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10f      	bne.n	8003c18 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003bf8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bfc:	f7ff fe8f 	bl	800391e <LL_ADC_IsEnabled>
 8003c00:	4604      	mov	r4, r0
 8003c02:	481f      	ldr	r0, [pc, #124]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c04:	f7ff fe8b 	bl	800391e <LL_ADC_IsEnabled>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4323      	orrs	r3, r4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	bf0c      	ite	eq
 8003c10:	2301      	moveq	r3, #1
 8003c12:	2300      	movne	r3, #0
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	e012      	b.n	8003c3e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c18:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c1a:	f7ff fe80 	bl	800391e <LL_ADC_IsEnabled>
 8003c1e:	4604      	mov	r4, r0
 8003c20:	4819      	ldr	r0, [pc, #100]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c22:	f7ff fe7c 	bl	800391e <LL_ADC_IsEnabled>
 8003c26:	4603      	mov	r3, r0
 8003c28:	431c      	orrs	r4, r3
 8003c2a:	481a      	ldr	r0, [pc, #104]	@ (8003c94 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c2c:	f7ff fe77 	bl	800391e <LL_ADC_IsEnabled>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4323      	orrs	r3, r4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d012      	beq.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c42:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c4a:	f023 030f 	bic.w	r3, r3, #15
 8003c4e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c50:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c52:	e009      	b.n	8003c68 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c66:	e000      	b.n	8003c6a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c72:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3784      	adds	r7, #132	@ 0x84
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd90      	pop	{r4, r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	50000100 	.word	0x50000100
 8003c84:	50000400 	.word	0x50000400
 8003c88:	50000500 	.word	0x50000500
 8003c8c:	50000300 	.word	0x50000300
 8003c90:	50000700 	.word	0x50000700
 8003c94:	50000600 	.word	0x50000600

08003c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cca:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <__NVIC_SetPriorityGrouping+0x44>)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	60d3      	str	r3, [r2, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce4:	4b04      	ldr	r3, [pc, #16]	@ (8003cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	f003 0307 	and.w	r3, r3, #7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db0b      	blt.n	8003d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4907      	ldr	r1, [pc, #28]	@ (8003d34 <__NVIC_EnableIRQ+0x38>)
 8003d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8003d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	e000e100 	.word	0xe000e100

08003d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	6039      	str	r1, [r7, #0]
 8003d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	db0a      	blt.n	8003d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	b2da      	uxtb	r2, r3
 8003d50:	490c      	ldr	r1, [pc, #48]	@ (8003d84 <__NVIC_SetPriority+0x4c>)
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	0112      	lsls	r2, r2, #4
 8003d58:	b2d2      	uxtb	r2, r2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d60:	e00a      	b.n	8003d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	b2da      	uxtb	r2, r3
 8003d66:	4908      	ldr	r1, [pc, #32]	@ (8003d88 <__NVIC_SetPriority+0x50>)
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	3b04      	subs	r3, #4
 8003d70:	0112      	lsls	r2, r2, #4
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	440b      	add	r3, r1
 8003d76:	761a      	strb	r2, [r3, #24]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	e000e100 	.word	0xe000e100
 8003d88:	e000ed00 	.word	0xe000ed00

08003d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b089      	sub	sp, #36	@ 0x24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	f1c3 0307 	rsb	r3, r3, #7
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	bf28      	it	cs
 8003daa:	2304      	movcs	r3, #4
 8003dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3304      	adds	r3, #4
 8003db2:	2b06      	cmp	r3, #6
 8003db4:	d902      	bls.n	8003dbc <NVIC_EncodePriority+0x30>
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3b03      	subs	r3, #3
 8003dba:	e000      	b.n	8003dbe <NVIC_EncodePriority+0x32>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dca:	43da      	mvns	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	401a      	ands	r2, r3
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	fa01 f303 	lsl.w	r3, r1, r3
 8003dde:	43d9      	mvns	r1, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003de4:	4313      	orrs	r3, r2
         );
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	@ 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e04:	d301      	bcc.n	8003e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00f      	b.n	8003e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003e34 <SysTick_Config+0x40>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e12:	210f      	movs	r1, #15
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295
 8003e18:	f7ff ff8e 	bl	8003d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e1c:	4b05      	ldr	r3, [pc, #20]	@ (8003e34 <SysTick_Config+0x40>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e22:	4b04      	ldr	r3, [pc, #16]	@ (8003e34 <SysTick_Config+0x40>)
 8003e24:	2207      	movs	r2, #7
 8003e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	e000e010 	.word	0xe000e010

08003e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff29 	bl	8003c98 <__NVIC_SetPriorityGrouping>
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	4603      	mov	r3, r0
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e5c:	f7ff ff40 	bl	8003ce0 <__NVIC_GetPriorityGrouping>
 8003e60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6978      	ldr	r0, [r7, #20]
 8003e68:	f7ff ff90 	bl	8003d8c <NVIC_EncodePriority>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ff5f 	bl	8003d38 <__NVIC_SetPriority>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b082      	sub	sp, #8
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	4603      	mov	r3, r0
 8003e8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff33 	bl	8003cfc <__NVIC_EnableIRQ>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7ff ffa4 	bl	8003df4 <SysTick_Config>
 8003eac:	4603      	mov	r3, r0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e08d      	b.n	8003fe6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_DMA_Init+0x138>)
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d80f      	bhi.n	8003ef6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b45      	ldr	r3, [pc, #276]	@ (8003ff4 <HAL_DMA_Init+0x13c>)
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a45      	ldr	r2, [pc, #276]	@ (8003ff8 <HAL_DMA_Init+0x140>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	009a      	lsls	r2, r3, #2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a42      	ldr	r2, [pc, #264]	@ (8003ffc <HAL_DMA_Init+0x144>)
 8003ef2:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ef4:	e00e      	b.n	8003f14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b40      	ldr	r3, [pc, #256]	@ (8004000 <HAL_DMA_Init+0x148>)
 8003efe:	4413      	add	r3, r2
 8003f00:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff8 <HAL_DMA_Init+0x140>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	009a      	lsls	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a3c      	ldr	r2, [pc, #240]	@ (8004004 <HAL_DMA_Init+0x14c>)
 8003f12:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f972 	bl	8004250 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f74:	d102      	bne.n	8003f7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f84:	b2d2      	uxtb	r2, r2
 8003f86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <HAL_DMA_Init+0x104>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d80c      	bhi.n	8003fbc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f992 	bl	80042cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	e008      	b.n	8003fce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020407 	.word	0x40020407
 8003ff4:	bffdfff8 	.word	0xbffdfff8
 8003ff8:	cccccccd 	.word	0xcccccccd
 8003ffc:	40020000 	.word	0x40020000
 8004000:	bffdfbf8 	.word	0xbffdfbf8
 8004004:	40020400 	.word	0x40020400

08004008 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d00d      	beq.n	800403c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	e047      	b.n	80040cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 020e 	bic.w	r2, r2, #14
 800404a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0201 	bic.w	r2, r2, #1
 800405a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800406a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	f003 021f 	and.w	r2, r3, #31
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004078:	2101      	movs	r1, #1
 800407a:	fa01 f202 	lsl.w	r2, r1, r2
 800407e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004088:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00c      	beq.n	80040ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800409c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80040aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
    }
  }
  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f003 031f 	and.w	r3, r3, #31
 80040f6:	2204      	movs	r2, #4
 80040f8:	409a      	lsls	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d026      	beq.n	8004150 <HAL_DMA_IRQHandler+0x7a>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d021      	beq.n	8004150 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0204 	bic.w	r2, r2, #4
 8004128:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f003 021f 	and.w	r2, r3, #31
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	2104      	movs	r1, #4
 8004138:	fa01 f202 	lsl.w	r2, r1, r2
 800413c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004142:	2b00      	cmp	r3, #0
 8004144:	d071      	beq.n	800422a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800414e:	e06c      	b.n	800422a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	2202      	movs	r2, #2
 800415a:	409a      	lsls	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4013      	ands	r3, r2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d02e      	beq.n	80041c2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d029      	beq.n	80041c2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0320 	and.w	r3, r3, #32
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10b      	bne.n	8004194 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 020a 	bic.w	r2, r2, #10
 800418a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004198:	f003 021f 	and.w	r2, r3, #31
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	2102      	movs	r1, #2
 80041a2:	fa01 f202 	lsl.w	r2, r1, r2
 80041a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d038      	beq.n	800422a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80041c0:	e033      	b.n	800422a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2208      	movs	r2, #8
 80041cc:	409a      	lsls	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d02a      	beq.n	800422c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d025      	beq.n	800422c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 020e 	bic.w	r2, r2, #14
 80041ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	f003 021f 	and.w	r2, r3, #31
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f202 	lsl.w	r2, r1, r2
 8004202:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800422a:	bf00      	nop
 800422c:	bf00      	nop
}
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004242:	b2db      	uxtb	r3, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	461a      	mov	r2, r3
 800425e:	4b16      	ldr	r3, [pc, #88]	@ (80042b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004260:	429a      	cmp	r2, r3
 8004262:	d802      	bhi.n	800426a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004264:	4b15      	ldr	r3, [pc, #84]	@ (80042bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004266:	617b      	str	r3, [r7, #20]
 8004268:	e001      	b.n	800426e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800426a:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800426c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3b08      	subs	r3, #8
 800427a:	4a12      	ldr	r2, [pc, #72]	@ (80042c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800427c:	fba2 2303 	umull	r2, r3, r2, r3
 8004280:	091b      	lsrs	r3, r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004288:	089b      	lsrs	r3, r3, #2
 800428a:	009a      	lsls	r2, r3, #2
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	461a      	mov	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a0b      	ldr	r2, [pc, #44]	@ (80042c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800429a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 031f 	and.w	r3, r3, #31
 80042a2:	2201      	movs	r2, #1
 80042a4:	409a      	lsls	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80042aa:	bf00      	nop
 80042ac:	371c      	adds	r7, #28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40020407 	.word	0x40020407
 80042bc:	40020800 	.word	0x40020800
 80042c0:	40020820 	.word	0x40020820
 80042c4:	cccccccd 	.word	0xcccccccd
 80042c8:	40020880 	.word	0x40020880

080042cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80042e0:	4413      	add	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a08      	ldr	r2, [pc, #32]	@ (8004310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042ee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	2201      	movs	r2, #1
 80042fa:	409a      	lsls	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004300:	bf00      	nop
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr
 800430c:	1000823f 	.word	0x1000823f
 8004310:	40020940 	.word	0x40020940

08004314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800431e:	2300      	movs	r3, #0
 8004320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004322:	e15a      	b.n	80045da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	2101      	movs	r1, #1
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 814c 	beq.w	80045d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 0303 	and.w	r3, r3, #3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d005      	beq.n	8004354 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004350:	2b02      	cmp	r3, #2
 8004352:	d130      	bne.n	80043b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	2203      	movs	r2, #3
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43db      	mvns	r3, r3
 8004366:	693a      	ldr	r2, [r7, #16]
 8004368:	4013      	ands	r3, r2
 800436a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	693a      	ldr	r2, [r7, #16]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800438a:	2201      	movs	r2, #1
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	43db      	mvns	r3, r3
 8004394:	693a      	ldr	r2, [r7, #16]
 8004396:	4013      	ands	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 0201 	and.w	r2, r3, #1
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0303 	and.w	r3, r3, #3
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d017      	beq.n	80043f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	005b      	lsls	r3, r3, #1
 80043cc:	2203      	movs	r2, #3
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	4013      	ands	r3, r2
 80043d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d123      	bne.n	8004446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	08da      	lsrs	r2, r3, #3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	3208      	adds	r2, #8
 8004406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	220f      	movs	r2, #15
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4013      	ands	r3, r2
 8004420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	08da      	lsrs	r2, r3, #3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3208      	adds	r2, #8
 8004440:	6939      	ldr	r1, [r7, #16]
 8004442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f003 0203 	and.w	r2, r3, #3
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	693a      	ldr	r2, [r7, #16]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80a6 	beq.w	80045d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004488:	4b5b      	ldr	r3, [pc, #364]	@ (80045f8 <HAL_GPIO_Init+0x2e4>)
 800448a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800448c:	4a5a      	ldr	r2, [pc, #360]	@ (80045f8 <HAL_GPIO_Init+0x2e4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6613      	str	r3, [r2, #96]	@ 0x60
 8004494:	4b58      	ldr	r3, [pc, #352]	@ (80045f8 <HAL_GPIO_Init+0x2e4>)
 8004496:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044a0:	4a56      	ldr	r2, [pc, #344]	@ (80045fc <HAL_GPIO_Init+0x2e8>)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	220f      	movs	r2, #15
 80044b8:	fa02 f303 	lsl.w	r3, r2, r3
 80044bc:	43db      	mvns	r3, r3
 80044be:	693a      	ldr	r2, [r7, #16]
 80044c0:	4013      	ands	r3, r2
 80044c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80044ca:	d01f      	beq.n	800450c <HAL_GPIO_Init+0x1f8>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a4c      	ldr	r2, [pc, #304]	@ (8004600 <HAL_GPIO_Init+0x2ec>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d019      	beq.n	8004508 <HAL_GPIO_Init+0x1f4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a4b      	ldr	r2, [pc, #300]	@ (8004604 <HAL_GPIO_Init+0x2f0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_GPIO_Init+0x1f0>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a4a      	ldr	r2, [pc, #296]	@ (8004608 <HAL_GPIO_Init+0x2f4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00d      	beq.n	8004500 <HAL_GPIO_Init+0x1ec>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a49      	ldr	r2, [pc, #292]	@ (800460c <HAL_GPIO_Init+0x2f8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <HAL_GPIO_Init+0x1e8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a48      	ldr	r2, [pc, #288]	@ (8004610 <HAL_GPIO_Init+0x2fc>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d101      	bne.n	80044f8 <HAL_GPIO_Init+0x1e4>
 80044f4:	2305      	movs	r3, #5
 80044f6:	e00a      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 80044f8:	2306      	movs	r3, #6
 80044fa:	e008      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 80044fc:	2304      	movs	r3, #4
 80044fe:	e006      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 8004500:	2303      	movs	r3, #3
 8004502:	e004      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 8004504:	2302      	movs	r3, #2
 8004506:	e002      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <HAL_GPIO_Init+0x1fa>
 800450c:	2300      	movs	r3, #0
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	f002 0203 	and.w	r2, r2, #3
 8004514:	0092      	lsls	r2, r2, #2
 8004516:	4093      	lsls	r3, r2
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800451e:	4937      	ldr	r1, [pc, #220]	@ (80045fc <HAL_GPIO_Init+0x2e8>)
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	089b      	lsrs	r3, r3, #2
 8004524:	3302      	adds	r3, #2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800452c:	4b39      	ldr	r3, [pc, #228]	@ (8004614 <HAL_GPIO_Init+0x300>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	43db      	mvns	r3, r3
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	4013      	ands	r3, r2
 800453a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004550:	4a30      	ldr	r2, [pc, #192]	@ (8004614 <HAL_GPIO_Init+0x300>)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004556:	4b2f      	ldr	r3, [pc, #188]	@ (8004614 <HAL_GPIO_Init+0x300>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	43db      	mvns	r3, r3
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4013      	ands	r3, r2
 8004564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800457a:	4a26      	ldr	r2, [pc, #152]	@ (8004614 <HAL_GPIO_Init+0x300>)
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004580:	4b24      	ldr	r3, [pc, #144]	@ (8004614 <HAL_GPIO_Init+0x300>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004614 <HAL_GPIO_Init+0x300>)
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80045aa:	4b1a      	ldr	r3, [pc, #104]	@ (8004614 <HAL_GPIO_Init+0x300>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	43db      	mvns	r3, r3
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	4013      	ands	r3, r2
 80045b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045ce:	4a11      	ldr	r2, [pc, #68]	@ (8004614 <HAL_GPIO_Init+0x300>)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	3301      	adds	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f47f ae9d 	bne.w	8004324 <HAL_GPIO_Init+0x10>
  }
}
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40010000 	.word	0x40010000
 8004600:	48000400 	.word	0x48000400
 8004604:	48000800 	.word	0x48000800
 8004608:	48000c00 	.word	0x48000c00
 800460c:	48001000 	.word	0x48001000
 8004610:	48001400 	.word	0x48001400
 8004614:	40010400 	.word	0x40010400

08004618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	807b      	strh	r3, [r7, #2]
 8004624:	4613      	mov	r3, r2
 8004626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004628:	787b      	ldrb	r3, [r7, #1]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800462e:	887a      	ldrh	r2, [r7, #2]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004634:	e002      	b.n	800463c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004636:	887a      	ldrh	r2, [r7, #2]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004652:	4b08      	ldr	r3, [pc, #32]	@ (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004654:	695a      	ldr	r2, [r3, #20]
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800465e:	4a05      	ldr	r2, [pc, #20]	@ (8004674 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004660:	88fb      	ldrh	r3, [r7, #6]
 8004662:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004664:	88fb      	ldrh	r3, [r7, #6]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f806 	bl	8004678 <HAL_GPIO_EXTI_Callback>
  }
}
 800466c:	bf00      	nop
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40010400 	.word	0x40010400

08004678 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b082      	sub	sp, #8
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e08d      	b.n	80047bc <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d106      	bne.n	80046ba <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7fc fd77 	bl	80011a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2224      	movs	r2, #36	@ 0x24
 80046be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 0201 	bic.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d107      	bne.n	8004708 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004704:	609a      	str	r2, [r3, #8]
 8004706:	e006      	b.n	8004716 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004714:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d108      	bne.n	8004730 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	e007      	b.n	8004740 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800473e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6812      	ldr	r2, [r2, #0]
 800474a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004752:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004762:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691a      	ldr	r2, [r3, #16]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69d9      	ldr	r1, [r3, #28]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b088      	sub	sp, #32
 80047c8:	af02      	add	r7, sp, #8
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	461a      	mov	r2, r3
 80047d0:	460b      	mov	r3, r1
 80047d2:	817b      	strh	r3, [r7, #10]
 80047d4:	4613      	mov	r3, r2
 80047d6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d17c      	bne.n	80048de <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047f2:	d101      	bne.n	80047f8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 80047f4:	2302      	movs	r3, #2
 80047f6:	e073      	b.n	80048e0 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_I2C_Master_Transmit_IT+0x42>
 8004802:	2302      	movs	r3, #2
 8004804:	e06c      	b.n	80048e0 <HAL_I2C_Master_Transmit_IT+0x11c>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	@ 0x21
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2210      	movs	r2, #16
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	893a      	ldrh	r2, [r7, #8]
 800482e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <HAL_I2C_Master_Transmit_IT+0x124>)
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <HAL_I2C_Master_Transmit_IT+0x128>)
 800483a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2bff      	cmp	r3, #255	@ 0xff
 8004844:	d906      	bls.n	8004854 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	22ff      	movs	r2, #255	@ 0xff
 800484a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800484c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004850:	617b      	str	r3, [r7, #20]
 8004852:	e007      	b.n	8004864 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800485e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004862:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d024      	beq.n	80048b6 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	781a      	ldrb	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004894:	3b01      	subs	r3, #1
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	3301      	adds	r3, #1
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	8979      	ldrh	r1, [r7, #10]
 80048a8:	4b11      	ldr	r3, [pc, #68]	@ (80048f0 <HAL_I2C_Master_Transmit_IT+0x12c>)
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f001 faa2 	bl	8005df8 <I2C_TransferConfig>
 80048b4:	e009      	b.n	80048ca <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	8979      	ldrh	r1, [r7, #10]
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <HAL_I2C_Master_Transmit_IT+0x12c>)
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f001 fa97 	bl	8005df8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048d2:	2101      	movs	r1, #1
 80048d4:	68f8      	ldr	r0, [r7, #12]
 80048d6:	f001 fac1 	bl	8005e5c <I2C_Enable_IRQ>

    return HAL_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	e000      	b.n	80048e0 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	ffff0000 	.word	0xffff0000
 80048ec:	080049f9 	.word	0x080049f9
 80048f0:	80002000 	.word	0x80002000

080048f4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	d005      	beq.n	8004920 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	68f9      	ldr	r1, [r7, #12]
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
  }
}
 8004920:	bf00      	nop
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004978:	b480      	push	{r7}
 800497a:	b083      	sub	sp, #12
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af02      	add	r7, sp, #8
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <I2C_Master_ISR_IT+0x1e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e113      	b.n	8004c3e <I2C_Master_ISR_IT+0x246>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d012      	beq.n	8004a4e <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00d      	beq.n	8004a4e <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2210      	movs	r2, #16
 8004a38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a3e:	f043 0204 	orr.w	r2, r3, #4
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f001 f993 	bl	8005d72 <I2C_Flush_TXDR>
 8004a4c:	e0e4      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f003 0304 	and.w	r3, r3, #4
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d022      	beq.n	8004a9e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01d      	beq.n	8004a9e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f023 0304 	bic.w	r3, r3, #4
 8004a68:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a9c:	e0bc      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d128      	bne.n	8004afa <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d023      	beq.n	8004afa <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d01e      	beq.n	8004afa <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 80a8 	beq.w	8004c18 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	781a      	ldrb	r2, [r3, #0]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004af8:	e08e      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d05c      	beq.n	8004bbe <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d057      	beq.n	8004bbe <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d040      	beq.n	8004b9a <I2C_Master_ISR_IT+0x1a2>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d13c      	bne.n	8004b9a <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2bff      	cmp	r3, #255	@ 0xff
 8004b36:	d90e      	bls.n	8004b56 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	22ff      	movs	r2, #255	@ 0xff
 8004b3c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b42:	b2da      	uxtb	r2, r3
 8004b44:	8a79      	ldrh	r1, [r7, #18]
 8004b46:	2300      	movs	r3, #0
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f001 f952 	bl	8005df8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b54:	e032      	b.n	8004bbc <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b68:	d00b      	beq.n	8004b82 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6e:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004b74:	8a79      	ldrh	r1, [r7, #18]
 8004b76:	2000      	movs	r0, #0
 8004b78:	9000      	str	r0, [sp, #0]
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f001 f93c 	bl	8005df8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b80:	e01c      	b.n	8004bbc <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	8a79      	ldrh	r1, [r7, #18]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	9300      	str	r3, [sp, #0]
 8004b8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f001 f930 	bl	8005df8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b98:	e010      	b.n	8004bbc <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ba4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ba8:	d003      	beq.n	8004bb2 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fcb1 	bl	8005512 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bb0:	e032      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004bb2:	2140      	movs	r1, #64	@ 0x40
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 ffc5 	bl	8005b44 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004bba:	e02d      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
 8004bbc:	e02c      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d027      	beq.n	8004c18 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d022      	beq.n	8004c18 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d119      	bne.n	8004c10 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bea:	d015      	beq.n	8004c18 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bf4:	d108      	bne.n	8004c08 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c04:	605a      	str	r2, [r3, #4]
 8004c06:	e007      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f000 fc82 	bl	8005512 <I2C_ITMasterSeqCplt>
 8004c0e:	e003      	b.n	8004c18 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004c10:	2140      	movs	r1, #64	@ 0x40
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 ff96 	bl	8005b44 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d008      	beq.n	8004c34 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8004c2c:	6979      	ldr	r1, [r7, #20]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 fd08 	bl	8005644 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b086      	sub	sp, #24
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <I2C_Slave_ISR_IT+0x24>
 8004c66:	2302      	movs	r3, #2
 8004c68:	e0e2      	b.n	8004e30 <I2C_Slave_ISR_IT+0x1ea>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f003 0320 	and.w	r3, r3, #32
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004c86:	6939      	ldr	r1, [r7, #16]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fda3 	bl	80057d4 <I2C_ITSlaveCplt>
 8004c8e:	e0ca      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f003 0310 	and.w	r3, r3, #16
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d04b      	beq.n	8004d32 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d046      	beq.n	8004d32 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d128      	bne.n	8004d00 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b28      	cmp	r3, #40	@ 0x28
 8004cb8:	d108      	bne.n	8004ccc <I2C_Slave_ISR_IT+0x86>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc0:	d104      	bne.n	8004ccc <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004cc2:	6939      	ldr	r1, [r7, #16]
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 fee9 	bl	8005a9c <I2C_ITListenCplt>
 8004cca:	e031      	b.n	8004d30 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b29      	cmp	r3, #41	@ 0x29
 8004cd6:	d10e      	bne.n	8004cf6 <I2C_Slave_ISR_IT+0xb0>
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cde:	d00a      	beq.n	8004cf6 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2210      	movs	r2, #16
 8004ce6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f001 f842 	bl	8005d72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 fc4c 	bl	800558c <I2C_ITSlaveSeqCplt>
 8004cf4:	e01c      	b.n	8004d30 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2210      	movs	r2, #16
 8004cfc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004cfe:	e08f      	b.n	8004e20 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2210      	movs	r2, #16
 8004d06:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0c:	f043 0204 	orr.w	r2, r3, #4
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <I2C_Slave_ISR_IT+0xdc>
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d20:	d17e      	bne.n	8004e20 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	4619      	mov	r1, r3
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 ff0b 	bl	8005b44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004d2e:	e077      	b.n	8004e20 <I2C_Slave_ISR_IT+0x1da>
 8004d30:	e076      	b.n	8004e20 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d02f      	beq.n	8004d9c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d02a      	beq.n	8004d9c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d018      	beq.n	8004d82 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d14b      	bne.n	8004e24 <I2C_Slave_ISR_IT+0x1de>
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004d92:	d047      	beq.n	8004e24 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 fbf9 	bl	800558c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004d9a:	e043      	b.n	8004e24 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d009      	beq.n	8004dba <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d004      	beq.n	8004dba <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004db0:	6939      	ldr	r1, [r7, #16]
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fb29 	bl	800540a <I2C_ITAddrCplt>
 8004db8:	e035      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d030      	beq.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02b      	beq.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d018      	beq.n	8004e0a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ddc:	781a      	ldrb	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004e08:	e00d      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e10:	d002      	beq.n	8004e18 <I2C_Slave_ISR_IT+0x1d2>
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 fbb7 	bl	800558c <I2C_ITSlaveSeqCplt>
 8004e1e:	e002      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8004e20:	bf00      	nop
 8004e22:	e000      	b.n	8004e26 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8004e24:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <I2C_Master_ISR_DMA+0x1a>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e0d9      	b.n	8005006 <I2C_Master_ISR_DMA+0x1ce>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f003 0310 	and.w	r3, r3, #16
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d016      	beq.n	8004e92 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d011      	beq.n	8004e92 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2210      	movs	r2, #16
 8004e74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f043 0204 	orr.w	r2, r3, #4
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004e82:	2120      	movs	r1, #32
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 ffe9 	bl	8005e5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 ff71 	bl	8005d72 <I2C_Flush_TXDR>
 8004e90:	e0b4      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d071      	beq.n	8004f80 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d06c      	beq.n	8004f80 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004eb4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d04e      	beq.n	8004f5e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ecc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2bff      	cmp	r3, #255	@ 0xff
 8004ed6:	d906      	bls.n	8004ee6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	22ff      	movs	r2, #255	@ 0xff
 8004edc:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004ede:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	e010      	b.n	8004f08 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ef8:	d003      	beq.n	8004f02 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e002      	b.n	8004f08 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004f02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f06:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	8a79      	ldrh	r1, [r7, #18]
 8004f10:	2300      	movs	r3, #0
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 ff6e 	bl	8005df8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b22      	cmp	r3, #34	@ 0x22
 8004f38:	d108      	bne.n	8004f4c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f48:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f4a:	e057      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f5a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f5c:	e04e      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004f6c:	d003      	beq.n	8004f76 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004f6e:	68f8      	ldr	r0, [r7, #12]
 8004f70:	f000 facf 	bl	8005512 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004f74:	e042      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f76:	2140      	movs	r1, #64	@ 0x40
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fde3 	bl	8005b44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004f7e:	e03d      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d028      	beq.n	8004fdc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d023      	beq.n	8004fdc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fac:	d025      	beq.n	8004ffa <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fb6:	d108      	bne.n	8004fca <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004fc8:	e017      	b.n	8004ffa <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 faa1 	bl	8005512 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004fd0:	e013      	b.n	8004ffa <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004fd2:	2140      	movs	r1, #64	@ 0x40
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 fdb5 	bl	8005b44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004fda:	e00e      	b.n	8004ffa <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	f003 0320 	and.w	r3, r3, #32
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fb26 	bl	8005644 <I2C_ITMasterCplt>
 8004ff8:	e000      	b.n	8004ffc <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004ffa:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af02      	add	r7, sp, #8
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800501c:	4b8d      	ldr	r3, [pc, #564]	@ (8005254 <I2C_Mem_ISR_DMA+0x244>)
 800501e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <I2C_Mem_ISR_DMA+0x1e>
 800502a:	2302      	movs	r3, #2
 800502c:	e10e      	b.n	800524c <I2C_Mem_ISR_DMA+0x23c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	2b00      	cmp	r3, #0
 800503e:	d016      	beq.n	800506e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005046:	2b00      	cmp	r3, #0
 8005048:	d011      	beq.n	800506e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2210      	movs	r2, #16
 8005050:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005056:	f043 0204 	orr.w	r2, r3, #4
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800505e:	2120      	movs	r1, #32
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 fefb 	bl	8005e5c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 fe83 	bl	8005d72 <I2C_Flush_TXDR>
 800506c:	e0e9      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00e      	beq.n	8005096 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f04f 32ff 	mov.w	r2, #4294967295
 8005092:	651a      	str	r2, [r3, #80]	@ 0x50
 8005094:	e0d5      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05f      	beq.n	8005160 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d05a      	beq.n	8005160 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80050aa:	2101      	movs	r1, #1
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 ff59 	bl	8005f64 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80050b2:	2110      	movs	r1, #16
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 fed1 	bl	8005e5c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050be:	b29b      	uxth	r3, r3
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d048      	beq.n	8005156 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	2bff      	cmp	r3, #255	@ 0xff
 80050cc:	d910      	bls.n	80050f0 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	22ff      	movs	r2, #255	@ 0xff
 80050d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050d8:	b299      	uxth	r1, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	2300      	movs	r3, #0
 80050e2:	9300      	str	r3, [sp, #0]
 80050e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fe85 	bl	8005df8 <I2C_TransferConfig>
 80050ee:	e011      	b.n	8005114 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050fe:	b299      	uxth	r1, r3
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005104:	b2da      	uxtb	r2, r3
 8005106:	2300      	movs	r3, #0
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 fe72 	bl	8005df8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29a      	uxth	r2, r3
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b22      	cmp	r3, #34	@ 0x22
 8005130:	d108      	bne.n	8005144 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005140:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005142:	e07e      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005152:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005154:	e075      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005156:	2140      	movs	r1, #64	@ 0x40
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fcf3 	bl	8005b44 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800515e:	e070      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005166:	2b00      	cmp	r3, #0
 8005168:	d05d      	beq.n	8005226 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005170:	2b00      	cmp	r3, #0
 8005172:	d058      	beq.n	8005226 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005174:	2101      	movs	r1, #1
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f000 fef4 	bl	8005f64 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800517c:	2110      	movs	r1, #16
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 fe6c 	bl	8005e5c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b22      	cmp	r3, #34	@ 0x22
 800518e:	d101      	bne.n	8005194 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005190:	4b31      	ldr	r3, [pc, #196]	@ (8005258 <I2C_Mem_ISR_DMA+0x248>)
 8005192:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2bff      	cmp	r3, #255	@ 0xff
 800519c:	d910      	bls.n	80051c0 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	22ff      	movs	r2, #255	@ 0xff
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a8:	b299      	uxth	r1, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fe1d 	bl	8005df8 <I2C_TransferConfig>
 80051be:	e011      	b.n	80051e4 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ce:	b299      	uxth	r1, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f000 fe0a 	bl	8005df8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b22      	cmp	r3, #34	@ 0x22
 8005200:	d108      	bne.n	8005214 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005210:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005212:	e016      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005222:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005224:	e00d      	b.n	8005242 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f003 0320 	and.w	r3, r3, #32
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fa01 	bl	8005644 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	80002000 	.word	0x80002000
 8005258:	80002400 	.word	0x80002400

0800525c <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800526c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <I2C_Slave_ISR_DMA+0x24>
 800527c:	2302      	movs	r3, #2
 800527e:	e0c0      	b.n	8005402 <I2C_Slave_ISR_DMA+0x1a6>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0320 	and.w	r3, r3, #32
 800528e:	2b00      	cmp	r3, #0
 8005290:	d009      	beq.n	80052a6 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005298:	2b00      	cmp	r3, #0
 800529a:	d004      	beq.n	80052a6 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fa98 	bl	80057d4 <I2C_ITSlaveCplt>
 80052a4:	e0a8      	b.n	80053f8 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 8095 	beq.w	80053dc <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	f000 808f 	beq.w	80053dc <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d07d      	beq.n	80053ce <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80052f0:	2301      	movs	r3, #1
 80052f2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8005312:	2301      	movs	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	2b01      	cmp	r3, #1
 800531a:	d128      	bne.n	800536e <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b28      	cmp	r3, #40	@ 0x28
 8005326:	d108      	bne.n	800533a <I2C_Slave_ISR_DMA+0xde>
 8005328:	69bb      	ldr	r3, [r7, #24]
 800532a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800532e:	d104      	bne.n	800533a <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005330:	68b9      	ldr	r1, [r7, #8]
 8005332:	68f8      	ldr	r0, [r7, #12]
 8005334:	f000 fbb2 	bl	8005a9c <I2C_ITListenCplt>
 8005338:	e048      	b.n	80053cc <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b29      	cmp	r3, #41	@ 0x29
 8005344:	d10e      	bne.n	8005364 <I2C_Slave_ISR_DMA+0x108>
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800534c:	d00a      	beq.n	8005364 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2210      	movs	r2, #16
 8005354:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fd0b 	bl	8005d72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f915 	bl	800558c <I2C_ITSlaveSeqCplt>
 8005362:	e033      	b.n	80053cc <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2210      	movs	r2, #16
 800536a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800536c:	e034      	b.n	80053d8 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2210      	movs	r2, #16
 8005374:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800537a:	f043 0204 	orr.w	r2, r3, #4
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005388:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d003      	beq.n	8005398 <I2C_Slave_ISR_DMA+0x13c>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005396:	d11f      	bne.n	80053d8 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005398:	7dfb      	ldrb	r3, [r7, #23]
 800539a:	2b21      	cmp	r3, #33	@ 0x21
 800539c:	d002      	beq.n	80053a4 <I2C_Slave_ISR_DMA+0x148>
 800539e:	7dfb      	ldrb	r3, [r7, #23]
 80053a0:	2b29      	cmp	r3, #41	@ 0x29
 80053a2:	d103      	bne.n	80053ac <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2221      	movs	r2, #33	@ 0x21
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80053aa:	e008      	b.n	80053be <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053ac:	7dfb      	ldrb	r3, [r7, #23]
 80053ae:	2b22      	cmp	r3, #34	@ 0x22
 80053b0:	d002      	beq.n	80053b8 <I2C_Slave_ISR_DMA+0x15c>
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
 80053b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b6:	d102      	bne.n	80053be <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2222      	movs	r2, #34	@ 0x22
 80053bc:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c2:	4619      	mov	r1, r3
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f000 fbbd 	bl	8005b44 <I2C_ITError>
      if (treatdmanack == 1U)
 80053ca:	e005      	b.n	80053d8 <I2C_Slave_ISR_DMA+0x17c>
 80053cc:	e004      	b.n	80053d8 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2210      	movs	r2, #16
 80053d4:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053d6:	e00f      	b.n	80053f8 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80053d8:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80053da:	e00d      	b.n	80053f8 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d008      	beq.n	80053f8 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 f809 	bl	800540a <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b084      	sub	sp, #16
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541a:	b2db      	uxtb	r3, r3
 800541c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005420:	2b28      	cmp	r3, #40	@ 0x28
 8005422:	d16a      	bne.n	80054fa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	0c1b      	lsrs	r3, r3, #16
 800542c:	b2db      	uxtb	r3, r3
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	0c1b      	lsrs	r3, r3, #16
 800543c:	b29b      	uxth	r3, r3
 800543e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005442:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005450:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	b29b      	uxth	r3, r3
 800545a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800545e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b02      	cmp	r3, #2
 8005466:	d138      	bne.n	80054da <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005468:	897b      	ldrh	r3, [r7, #10]
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	b29a      	uxth	r2, r3
 800546e:	89bb      	ldrh	r3, [r7, #12]
 8005470:	4053      	eors	r3, r2
 8005472:	b29b      	uxth	r3, r3
 8005474:	f003 0306 	and.w	r3, r3, #6
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11c      	bne.n	80054b6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800547c:	897b      	ldrh	r3, [r7, #10]
 800547e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800548e:	2b02      	cmp	r3, #2
 8005490:	d13b      	bne.n	800550a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054a8:	89ba      	ldrh	r2, [r7, #12]
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff fa62 	bl	8004978 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054b4:	e029      	b.n	800550a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80054b6:	893b      	ldrh	r3, [r7, #8]
 80054b8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fd50 	bl	8005f64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054cc:	89ba      	ldrh	r2, [r7, #12]
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fa50 	bl	8004978 <HAL_I2C_AddrCallback>
}
 80054d8:	e017      	b.n	800550a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fd40 	bl	8005f64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054ec:	89ba      	ldrh	r2, [r7, #12]
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff fa40 	bl	8004978 <HAL_I2C_AddrCallback>
}
 80054f8:	e007      	b.n	800550a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2208      	movs	r2, #8
 8005500:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800550a:	bf00      	nop
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b21      	cmp	r3, #33	@ 0x21
 800552c:	d115      	bne.n	800555a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2211      	movs	r2, #17
 800553a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005542:	2101      	movs	r1, #1
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fd0d 	bl	8005f64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff f9e8 	bl	8004928 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005558:	e014      	b.n	8005584 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2212      	movs	r2, #18
 8005566:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800556e:	2102      	movs	r1, #2
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fcf7 	bl	8005f64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f7ff f9dc 	bl	800493c <HAL_I2C_MasterRxCpltCallback>
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e00c      	b.n	80055da <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b29      	cmp	r3, #41	@ 0x29
 80055e4:	d112      	bne.n	800560c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2228      	movs	r2, #40	@ 0x28
 80055ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2221      	movs	r2, #33	@ 0x21
 80055f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055f4:	2101      	movs	r1, #1
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fcb4 	bl	8005f64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7ff f9a3 	bl	8004950 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800560a:	e017      	b.n	800563c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b2a      	cmp	r3, #42	@ 0x2a
 8005616:	d111      	bne.n	800563c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2228      	movs	r2, #40	@ 0x28
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2222      	movs	r2, #34	@ 0x22
 8005624:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005626:	2102      	movs	r1, #2
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 fc9b 	bl	8005f64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f7ff f994 	bl	8004964 <HAL_I2C_SlaveRxCpltCallback>
}
 800563c:	bf00      	nop
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b086      	sub	sp, #24
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2220      	movs	r2, #32
 8005658:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b21      	cmp	r3, #33	@ 0x21
 8005664:	d107      	bne.n	8005676 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005666:	2101      	movs	r1, #1
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fc7b 	bl	8005f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2211      	movs	r2, #17
 8005672:	631a      	str	r2, [r3, #48]	@ 0x30
 8005674:	e00c      	b.n	8005690 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b22      	cmp	r3, #34	@ 0x22
 8005680:	d106      	bne.n	8005690 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005682:	2102      	movs	r1, #2
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fc6d 	bl	8005f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2212      	movs	r2, #18
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6859      	ldr	r1, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	4b4c      	ldr	r3, [pc, #304]	@ (80057cc <I2C_ITMasterCplt+0x188>)
 800569c:	400b      	ands	r3, r1
 800569e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a49      	ldr	r2, [pc, #292]	@ (80057d0 <I2C_ITMasterCplt+0x18c>)
 80056aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2210      	movs	r2, #16
 80056bc:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b60      	cmp	r3, #96	@ 0x60
 80056d4:	d10a      	bne.n	80056ec <I2C_ITMasterCplt+0xa8>
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0304 	and.w	r3, r3, #4
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80056ea:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fb40 	bl	8005d72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b60      	cmp	r3, #96	@ 0x60
 8005702:	d002      	beq.n	800570a <I2C_ITMasterCplt+0xc6>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d006      	beq.n	8005718 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fa17 	bl	8005b44 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005716:	e054      	b.n	80057c2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b21      	cmp	r3, #33	@ 0x21
 8005722:	d124      	bne.n	800576e <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005738:	b2db      	uxtb	r3, r3
 800573a:	2b40      	cmp	r3, #64	@ 0x40
 800573c:	d10b      	bne.n	8005756 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f92a 	bl	80049a8 <HAL_I2C_MemTxCpltCallback>
}
 8005754:	e035      	b.n	80057c2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f7ff f8de 	bl	8004928 <HAL_I2C_MasterTxCpltCallback>
}
 800576c:	e029      	b.n	80057c2 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b22      	cmp	r3, #34	@ 0x22
 8005778:	d123      	bne.n	80057c2 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b40      	cmp	r3, #64	@ 0x40
 8005792:	d10b      	bne.n	80057ac <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f7ff f909 	bl	80049bc <HAL_I2C_MemRxCpltCallback>
}
 80057aa:	e00a      	b.n	80057c2 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f7ff f8bd 	bl	800493c <HAL_I2C_MasterRxCpltCallback>
}
 80057c2:	bf00      	nop
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	fe00e800 	.word	0xfe00e800
 80057d0:	ffff0000 	.word	0xffff0000

080057d4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ee:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2220      	movs	r2, #32
 80057fe:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005800:	7afb      	ldrb	r3, [r7, #11]
 8005802:	2b21      	cmp	r3, #33	@ 0x21
 8005804:	d002      	beq.n	800580c <I2C_ITSlaveCplt+0x38>
 8005806:	7afb      	ldrb	r3, [r7, #11]
 8005808:	2b29      	cmp	r3, #41	@ 0x29
 800580a:	d108      	bne.n	800581e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800580c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fba7 	bl	8005f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2221      	movs	r2, #33	@ 0x21
 800581a:	631a      	str	r2, [r3, #48]	@ 0x30
 800581c:	e019      	b.n	8005852 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800581e:	7afb      	ldrb	r3, [r7, #11]
 8005820:	2b22      	cmp	r3, #34	@ 0x22
 8005822:	d002      	beq.n	800582a <I2C_ITSlaveCplt+0x56>
 8005824:	7afb      	ldrb	r3, [r7, #11]
 8005826:	2b2a      	cmp	r3, #42	@ 0x2a
 8005828:	d108      	bne.n	800583c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800582a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb98 	bl	8005f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2222      	movs	r2, #34	@ 0x22
 8005838:	631a      	str	r2, [r3, #48]	@ 0x30
 800583a:	e00a      	b.n	8005852 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	2b28      	cmp	r3, #40	@ 0x28
 8005840:	d107      	bne.n	8005852 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005842:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb8c 	bl	8005f64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005860:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	6859      	ldr	r1, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	4b89      	ldr	r3, [pc, #548]	@ (8005a94 <I2C_ITSlaveCplt+0x2c0>)
 800586e:	400b      	ands	r3, r1
 8005870:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fa7d 	bl	8005d72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d013      	beq.n	80058aa <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005890:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01f      	beq.n	80058da <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058a8:	e017      	b.n	80058da <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f003 0304 	and.w	r3, r3, #4
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d020      	beq.n	8005926 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	f023 0304 	bic.w	r3, r3, #4
 80058ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	b2d2      	uxtb	r2, r2
 80058f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00c      	beq.n	8005926 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b00      	cmp	r3, #0
 8005944:	d049      	beq.n	80059da <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800594c:	2b00      	cmp	r3, #0
 800594e:	d044      	beq.n	80059da <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d128      	bne.n	80059ac <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b28      	cmp	r3, #40	@ 0x28
 8005964:	d108      	bne.n	8005978 <I2C_ITSlaveCplt+0x1a4>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800596c:	d104      	bne.n	8005978 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800596e:	6979      	ldr	r1, [r7, #20]
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f893 	bl	8005a9c <I2C_ITListenCplt>
 8005976:	e030      	b.n	80059da <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b29      	cmp	r3, #41	@ 0x29
 8005982:	d10e      	bne.n	80059a2 <I2C_ITSlaveCplt+0x1ce>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800598a:	d00a      	beq.n	80059a2 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2210      	movs	r2, #16
 8005992:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f9ec 	bl	8005d72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7ff fdf6 	bl	800558c <I2C_ITSlaveSeqCplt>
 80059a0:	e01b      	b.n	80059da <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2210      	movs	r2, #16
 80059a8:	61da      	str	r2, [r3, #28]
 80059aa:	e016      	b.n	80059da <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2210      	movs	r2, #16
 80059b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b8:	f043 0204 	orr.w	r2, r3, #4
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <I2C_ITSlaveCplt+0x1fa>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059cc:	d105      	bne.n	80059da <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059d2:	4619      	mov	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f8b5 	bl	8005b44 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d010      	beq.n	8005a12 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f4:	4619      	mov	r1, r3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f8a4 	bl	8005b44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	2b28      	cmp	r3, #40	@ 0x28
 8005a06:	d141      	bne.n	8005a8c <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a08:	6979      	ldr	r1, [r7, #20]
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f846 	bl	8005a9c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a10:	e03c      	b.n	8005a8c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a1a:	d014      	beq.n	8005a46 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fdb5 	bl	800558c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <I2C_ITSlaveCplt+0x2c4>)
 8005a26:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7fe ffa8 	bl	8004994 <HAL_I2C_ListenCpltCallback>
}
 8005a44:	e022      	b.n	8005a8c <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b22      	cmp	r3, #34	@ 0x22
 8005a50:	d10e      	bne.n	8005a70 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fe ff7b 	bl	8004964 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a6e:	e00d      	b.n	8005a8c <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2220      	movs	r2, #32
 8005a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fe ff62 	bl	8004950 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a8c:	bf00      	nop
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	fe00e800 	.word	0xfe00e800
 8005a98:	ffff0000 	.word	0xffff0000

08005a9c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a25      	ldr	r2, [pc, #148]	@ (8005b40 <I2C_ITListenCplt+0xa4>)
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d022      	beq.n	8005b18 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	1c5a      	adds	r2, r3, #1
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005af6:	3b01      	subs	r3, #1
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	3b01      	subs	r3, #1
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b10:	f043 0204 	orr.w	r2, r3, #4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b18:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa21 	bl	8005f64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2210      	movs	r2, #16
 8005b28:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fe ff2e 	bl	8004994 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	ffff0000 	.word	0xffff0000

08005b44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b54:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a6d      	ldr	r2, [pc, #436]	@ (8005d18 <I2C_ITError+0x1d4>)
 8005b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	2b28      	cmp	r3, #40	@ 0x28
 8005b7a:	d005      	beq.n	8005b88 <I2C_ITError+0x44>
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
 8005b7e:	2b29      	cmp	r3, #41	@ 0x29
 8005b80:	d002      	beq.n	8005b88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005b82:	7bfb      	ldrb	r3, [r7, #15]
 8005b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b86:	d10b      	bne.n	8005ba0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b88:	2103      	movs	r1, #3
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f9ea 	bl	8005f64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2228      	movs	r2, #40	@ 0x28
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a60      	ldr	r2, [pc, #384]	@ (8005d1c <I2C_ITError+0x1d8>)
 8005b9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005b9e:	e030      	b.n	8005c02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ba0:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 f9dd 	bl	8005f64 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8e1 	bl	8005d72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b60      	cmp	r3, #96	@ 0x60
 8005bba:	d01f      	beq.n	8005bfc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d114      	bne.n	8005bfc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d109      	bne.n	8005bf4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2210      	movs	r2, #16
 8005be6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bec:	f043 0204 	orr.w	r2, r3, #4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d039      	beq.n	8005c84 <I2C_ITError+0x140>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b11      	cmp	r3, #17
 8005c14:	d002      	beq.n	8005c1c <I2C_ITError+0xd8>
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b21      	cmp	r3, #33	@ 0x21
 8005c1a:	d133      	bne.n	8005c84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c2a:	d107      	bne.n	8005c3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe faf7 	bl	8004234 <HAL_DMA_GetState>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d017      	beq.n	8005c7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c50:	4a33      	ldr	r2, [pc, #204]	@ (8005d20 <I2C_ITError+0x1dc>)
 8005c52:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe f9d1 	bl	8004008 <HAL_DMA_Abort_IT>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d04d      	beq.n	8005d08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c76:	4610      	mov	r0, r2
 8005c78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c7a:	e045      	b.n	8005d08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f851 	bl	8005d24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c82:	e041      	b.n	8005d08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d039      	beq.n	8005d00 <I2C_ITError+0x1bc>
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	2b12      	cmp	r3, #18
 8005c90:	d002      	beq.n	8005c98 <I2C_ITError+0x154>
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	2b22      	cmp	r3, #34	@ 0x22
 8005c96:	d133      	bne.n	8005d00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ca6:	d107      	bne.n	8005cb8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005cb6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fab9 	bl	8004234 <HAL_DMA_GetState>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d017      	beq.n	8005cf8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ccc:	4a14      	ldr	r2, [pc, #80]	@ (8005d20 <I2C_ITError+0x1dc>)
 8005cce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe f993 	bl	8004008 <HAL_DMA_Abort_IT>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d011      	beq.n	8005d0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005cf2:	4610      	mov	r0, r2
 8005cf4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cf6:	e009      	b.n	8005d0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f813 	bl	8005d24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005cfe:	e005      	b.n	8005d0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f80f 	bl	8005d24 <I2C_TreatErrorCallback>
  }
}
 8005d06:	e002      	b.n	8005d0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d08:	bf00      	nop
 8005d0a:	e000      	b.n	8005d0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d0c:	bf00      	nop
}
 8005d0e:	bf00      	nop
 8005d10:	3710      	adds	r7, #16
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	ffff0000 	.word	0xffff0000
 8005d1c:	08004c47 	.word	0x08004c47
 8005d20:	08005dbb 	.word	0x08005dbb

08005d24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b60      	cmp	r3, #96	@ 0x60
 8005d36:	d10e      	bne.n	8005d56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fe fe48 	bl	80049e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d54:	e009      	b.n	8005d6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fe fe33 	bl	80049d0 <HAL_I2C_ErrorCallback>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	f003 0302 	and.w	r3, r3, #2
 8005d84:	2b02      	cmp	r3, #2
 8005d86:	d103      	bne.n	8005d90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d007      	beq.n	8005dae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	699a      	ldr	r2, [r3, #24]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	619a      	str	r2, [r3, #24]
  }
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dba:	b580      	push	{r7, lr}
 8005dbc:	b084      	sub	sp, #16
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d003      	beq.n	8005de8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de4:	2200      	movs	r2, #0
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ff9b 	bl	8005d24 <I2C_TreatErrorCallback>
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
	...

08005df8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b087      	sub	sp, #28
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	607b      	str	r3, [r7, #4]
 8005e02:	460b      	mov	r3, r1
 8005e04:	817b      	strh	r3, [r7, #10]
 8005e06:	4613      	mov	r3, r2
 8005e08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e0a:	897b      	ldrh	r3, [r7, #10]
 8005e0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e10:	7a7b      	ldrb	r3, [r7, #9]
 8005e12:	041b      	lsls	r3, r3, #16
 8005e14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e18:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e26:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	0d5b      	lsrs	r3, r3, #21
 8005e32:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005e36:	4b08      	ldr	r3, [pc, #32]	@ (8005e58 <I2C_TransferConfig+0x60>)
 8005e38:	430b      	orrs	r3, r1
 8005e3a:	43db      	mvns	r3, r3
 8005e3c:	ea02 0103 	and.w	r1, r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e4a:	bf00      	nop
 8005e4c:	371c      	adds	r7, #28
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	03ff63ff 	.word	0x03ff63ff

08005e5c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e70:	4a39      	ldr	r2, [pc, #228]	@ (8005f58 <I2C_Enable_IRQ+0xfc>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d032      	beq.n	8005edc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005e7a:	4a38      	ldr	r2, [pc, #224]	@ (8005f5c <I2C_Enable_IRQ+0x100>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d02d      	beq.n	8005edc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005e84:	4a36      	ldr	r2, [pc, #216]	@ (8005f60 <I2C_Enable_IRQ+0x104>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d028      	beq.n	8005edc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005e8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da03      	bge.n	8005e9a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005e98:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005e9a:	887b      	ldrh	r3, [r7, #2]
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d003      	beq.n	8005eac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005eaa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ebc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ebe:	887b      	ldrh	r3, [r7, #2]
 8005ec0:	2b10      	cmp	r3, #16
 8005ec2:	d103      	bne.n	8005ecc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005eca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005ecc:	887b      	ldrh	r3, [r7, #2]
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	d133      	bne.n	8005f3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f043 0320 	orr.w	r3, r3, #32
 8005ed8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005eda:	e02e      	b.n	8005f3a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	da03      	bge.n	8005eec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005eea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005eec:	887b      	ldrh	r3, [r7, #2]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005efc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005efe:	887b      	ldrh	r3, [r7, #2]
 8005f00:	f003 0302 	and.w	r3, r3, #2
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d003      	beq.n	8005f10 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005f0e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005f10:	887b      	ldrh	r3, [r7, #2]
 8005f12:	2b10      	cmp	r3, #16
 8005f14:	d103      	bne.n	8005f1e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005f1c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005f1e:	887b      	ldrh	r3, [r7, #2]
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d103      	bne.n	8005f2c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005f2a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005f2c:	887b      	ldrh	r3, [r7, #2]
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d103      	bne.n	8005f3a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f38:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6819      	ldr	r1, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3714      	adds	r7, #20
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	08004e39 	.word	0x08004e39
 8005f5c:	0800525d 	.word	0x0800525d
 8005f60:	08005011 	.word	0x08005011

08005f64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00f      	beq.n	8005f9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005f84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005f92:	2b28      	cmp	r3, #40	@ 0x28
 8005f94:	d003      	beq.n	8005f9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005f9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00f      	beq.n	8005fc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005fae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005fbc:	2b28      	cmp	r3, #40	@ 0x28
 8005fbe:	d003      	beq.n	8005fc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005fc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	da03      	bge.n	8005fd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005fd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	2b10      	cmp	r3, #16
 8005fdc:	d103      	bne.n	8005fe6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005fe6:	887b      	ldrh	r3, [r7, #2]
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	d103      	bne.n	8005ff4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f043 0320 	orr.w	r3, r3, #32
 8005ff2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005ff4:	887b      	ldrh	r3, [r7, #2]
 8005ff6:	2b40      	cmp	r3, #64	@ 0x40
 8005ff8:	d103      	bne.n	8006002 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006000:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6819      	ldr	r1, [r3, #0]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43da      	mvns	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	400a      	ands	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b20      	cmp	r3, #32
 8006034:	d138      	bne.n	80060a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006040:	2302      	movs	r3, #2
 8006042:	e032      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	@ 0x24
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0201 	bic.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006072:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6819      	ldr	r1, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	e000      	b.n	80060aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80060a8:	2302      	movs	r3, #2
  }
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d139      	bne.n	8006140 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80060d6:	2302      	movs	r3, #2
 80060d8:	e033      	b.n	8006142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2224      	movs	r2, #36	@ 0x24
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006108:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	021b      	lsls	r3, r3, #8
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f042 0201 	orr.w	r2, r2, #1
 800612a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800613c:	2300      	movs	r3, #0
 800613e:	e000      	b.n	8006142 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006140:	2302      	movs	r3, #2
  }
}
 8006142:	4618      	mov	r0, r3
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006154:	4b05      	ldr	r3, [pc, #20]	@ (800616c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a04      	ldr	r2, [pc, #16]	@ (800616c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800615a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800615e:	6093      	str	r3, [r2, #8]
}
 8006160:	bf00      	nop
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40007000 	.word	0x40007000

08006170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006176:	4b2c      	ldr	r3, [pc, #176]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b04      	cmp	r3, #4
 8006180:	d102      	bne.n	8006188 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006182:	4b2a      	ldr	r3, [pc, #168]	@ (800622c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	e047      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006188:	4b27      	ldr	r3, [pc, #156]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b08      	cmp	r3, #8
 8006192:	d102      	bne.n	800619a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006194:	4b26      	ldr	r3, [pc, #152]	@ (8006230 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006196:	613b      	str	r3, [r7, #16]
 8006198:	e03e      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800619a:	4b23      	ldr	r3, [pc, #140]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d136      	bne.n	8006214 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80061a6:	4b20      	ldr	r3, [pc, #128]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80061b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	091b      	lsrs	r3, r3, #4
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	3301      	adds	r3, #1
 80061bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d10c      	bne.n	80061de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_RCC_GetSysClockFreq+0xc0>)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	4a16      	ldr	r2, [pc, #88]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061ce:	68d2      	ldr	r2, [r2, #12]
 80061d0:	0a12      	lsrs	r2, r2, #8
 80061d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061d6:	fb02 f303 	mul.w	r3, r2, r3
 80061da:	617b      	str	r3, [r7, #20]
      break;
 80061dc:	e00c      	b.n	80061f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80061de:	4a13      	ldr	r2, [pc, #76]	@ (800622c <HAL_RCC_GetSysClockFreq+0xbc>)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	4a10      	ldr	r2, [pc, #64]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061e8:	68d2      	ldr	r2, [r2, #12]
 80061ea:	0a12      	lsrs	r2, r2, #8
 80061ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	617b      	str	r3, [r7, #20]
      break;
 80061f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80061f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006228 <HAL_RCC_GetSysClockFreq+0xb8>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	0e5b      	lsrs	r3, r3, #25
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	3301      	adds	r3, #1
 8006204:	005b      	lsls	r3, r3, #1
 8006206:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e001      	b.n	8006218 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006218:	693b      	ldr	r3, [r7, #16]
}
 800621a:	4618      	mov	r0, r3
 800621c:	371c      	adds	r7, #28
 800621e:	46bd      	mov	sp, r7
 8006220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006224:	4770      	bx	lr
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000
 800622c:	00f42400 	.word	0x00f42400
 8006230:	016e3600 	.word	0x016e3600

08006234 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <HAL_RCC_GetHCLKFreq+0x14>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr
 8006246:	bf00      	nop
 8006248:	20000014 	.word	0x20000014

0800624c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006250:	f7ff fff0 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006254:	4602      	mov	r2, r0
 8006256:	4b06      	ldr	r3, [pc, #24]	@ (8006270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4904      	ldr	r1, [pc, #16]	@ (8006274 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006262:	5ccb      	ldrb	r3, [r1, r3]
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800626c:	4618      	mov	r0, r3
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40021000 	.word	0x40021000
 8006274:	0800930c 	.word	0x0800930c

08006278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800627c:	f7ff ffda 	bl	8006234 <HAL_RCC_GetHCLKFreq>
 8006280:	4602      	mov	r2, r0
 8006282:	4b06      	ldr	r3, [pc, #24]	@ (800629c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	0adb      	lsrs	r3, r3, #11
 8006288:	f003 0307 	and.w	r3, r3, #7
 800628c:	4904      	ldr	r1, [pc, #16]	@ (80062a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800628e:	5ccb      	ldrb	r3, [r1, r3]
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40021000 	.word	0x40021000
 80062a0:	0800930c 	.word	0x0800930c

080062a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062ac:	2300      	movs	r3, #0
 80062ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062b0:	2300      	movs	r3, #0
 80062b2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 8098 	beq.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062c2:	2300      	movs	r3, #0
 80062c4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062c6:	4b43      	ldr	r3, [pc, #268]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10d      	bne.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062d2:	4b40      	ldr	r3, [pc, #256]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062d6:	4a3f      	ldr	r2, [pc, #252]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80062de:	4b3d      	ldr	r3, [pc, #244]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062e6:	60bb      	str	r3, [r7, #8]
 80062e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062ea:	2301      	movs	r3, #1
 80062ec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ee:	4b3a      	ldr	r3, [pc, #232]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a39      	ldr	r2, [pc, #228]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80062f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80062fa:	f7fb ffa7 	bl	800224c <HAL_GetTick>
 80062fe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006300:	e009      	b.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fb ffa3 	bl	800224c <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d902      	bls.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	74fb      	strb	r3, [r7, #19]
        break;
 8006314:	e005      	b.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006316:	4b30      	ldr	r3, [pc, #192]	@ (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d0ef      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006322:	7cfb      	ldrb	r3, [r7, #19]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d159      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006328:	4b2a      	ldr	r3, [pc, #168]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800632e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006332:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01e      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	429a      	cmp	r2, r3
 8006342:	d019      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006344:	4b23      	ldr	r3, [pc, #140]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800634a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800634e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006350:	4b20      	ldr	r3, [pc, #128]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006352:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006356:	4a1f      	ldr	r2, [pc, #124]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800635c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006360:	4b1c      	ldr	r3, [pc, #112]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006366:	4a1b      	ldr	r2, [pc, #108]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006368:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006370:	4a18      	ldr	r2, [pc, #96]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d016      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006382:	f7fb ff63 	bl	800224c <HAL_GetTick>
 8006386:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006388:	e00b      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638a:	f7fb ff5f 	bl	800224c <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006398:	4293      	cmp	r3, r2
 800639a:	d902      	bls.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800639c:	2303      	movs	r3, #3
 800639e:	74fb      	strb	r3, [r7, #19]
            break;
 80063a0:	e006      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80063a2:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0ec      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80063b0:	7cfb      	ldrb	r3, [r7, #19]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10b      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063b6:	4b07      	ldr	r3, [pc, #28]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c4:	4903      	ldr	r1, [pc, #12]	@ (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80063c6:	4313      	orrs	r3, r2
 80063c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80063cc:	e008      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80063ce:	7cfb      	ldrb	r3, [r7, #19]
 80063d0:	74bb      	strb	r3, [r7, #18]
 80063d2:	e005      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063e0:	7c7b      	ldrb	r3, [r7, #17]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d105      	bne.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063e6:	4ba7      	ldr	r3, [pc, #668]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ea:	4aa6      	ldr	r2, [pc, #664]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80063f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00a      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80063fe:	4ba1      	ldr	r3, [pc, #644]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006404:	f023 0203 	bic.w	r2, r3, #3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	499d      	ldr	r1, [pc, #628]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800640e:	4313      	orrs	r3, r2
 8006410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00a      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006420:	4b98      	ldr	r3, [pc, #608]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006426:	f023 020c 	bic.w	r2, r3, #12
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	4995      	ldr	r1, [pc, #596]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006430:	4313      	orrs	r3, r2
 8006432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d00a      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006442:	4b90      	ldr	r3, [pc, #576]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	498c      	ldr	r1, [pc, #560]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006452:	4313      	orrs	r3, r2
 8006454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0308 	and.w	r3, r3, #8
 8006460:	2b00      	cmp	r3, #0
 8006462:	d00a      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006464:	4b87      	ldr	r3, [pc, #540]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800646a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	4984      	ldr	r1, [pc, #528]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006474:	4313      	orrs	r3, r2
 8006476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 0310 	and.w	r3, r3, #16
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00a      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006486:	4b7f      	ldr	r3, [pc, #508]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800648c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	497b      	ldr	r1, [pc, #492]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006496:	4313      	orrs	r3, r2
 8006498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064a8:	4b76      	ldr	r3, [pc, #472]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	4973      	ldr	r1, [pc, #460]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80064ca:	4b6e      	ldr	r3, [pc, #440]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	496a      	ldr	r1, [pc, #424]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064da:	4313      	orrs	r3, r2
 80064dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80064ec:	4b65      	ldr	r3, [pc, #404]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4962      	ldr	r1, [pc, #392]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800650e:	4b5d      	ldr	r3, [pc, #372]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	4959      	ldr	r1, [pc, #356]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800651e:	4313      	orrs	r3, r2
 8006520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006530:	4b54      	ldr	r3, [pc, #336]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006536:	f023 0203 	bic.w	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800653e:	4951      	ldr	r1, [pc, #324]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006540:	4313      	orrs	r3, r2
 8006542:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006552:	4b4c      	ldr	r3, [pc, #304]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006558:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	4948      	ldr	r1, [pc, #288]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006562:	4313      	orrs	r3, r2
 8006564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006570:	2b00      	cmp	r3, #0
 8006572:	d015      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006574:	4b43      	ldr	r3, [pc, #268]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800657a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006582:	4940      	ldr	r1, [pc, #256]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006584:	4313      	orrs	r3, r2
 8006586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006592:	d105      	bne.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006594:	4b3b      	ldr	r3, [pc, #236]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	4a3a      	ldr	r2, [pc, #232]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800659e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d015      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065ac:	4b35      	ldr	r3, [pc, #212]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ba:	4932      	ldr	r1, [pc, #200]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065bc:	4313      	orrs	r3, r2
 80065be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ca:	d105      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065cc:	4b2d      	ldr	r3, [pc, #180]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d015      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80065e4:	4b27      	ldr	r3, [pc, #156]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f2:	4924      	ldr	r1, [pc, #144]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006602:	d105      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006604:	4b1f      	ldr	r3, [pc, #124]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	4a1e      	ldr	r2, [pc, #120]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800660a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800660e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d015      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800661c:	4b19      	ldr	r3, [pc, #100]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800661e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006622:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	4916      	ldr	r1, [pc, #88]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006636:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800663a:	d105      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800663c:	4b11      	ldr	r3, [pc, #68]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	4a10      	ldr	r2, [pc, #64]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006646:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d019      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006654:	4b0b      	ldr	r3, [pc, #44]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006662:	4908      	ldr	r1, [pc, #32]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006672:	d109      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006674:	4b03      	ldr	r3, [pc, #12]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	4a02      	ldr	r2, [pc, #8]	@ (8006684 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800667a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800667e:	60d3      	str	r3, [r2, #12]
 8006680:	e002      	b.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006682:	bf00      	nop
 8006684:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d015      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006694:	4b29      	ldr	r3, [pc, #164]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066a2:	4926      	ldr	r1, [pc, #152]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066b2:	d105      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066b4:	4b21      	ldr	r3, [pc, #132]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	4a20      	ldr	r2, [pc, #128]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066be:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d015      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80066cc:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066da:	4918      	ldr	r1, [pc, #96]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066dc:	4313      	orrs	r3, r2
 80066de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ea:	d105      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066ec:	4b13      	ldr	r3, [pc, #76]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a12      	ldr	r2, [pc, #72]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80066f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d015      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006704:	4b0d      	ldr	r3, [pc, #52]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006706:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800670a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006712:	490a      	ldr	r1, [pc, #40]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006714:	4313      	orrs	r3, r2
 8006716:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800671e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006722:	d105      	bne.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006726:	68db      	ldr	r3, [r3, #12]
 8006728:	4a04      	ldr	r2, [pc, #16]	@ (800673c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800672a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800672e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006730:	7cbb      	ldrb	r3, [r7, #18]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3718      	adds	r7, #24
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	40021000 	.word	0x40021000

08006740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d101      	bne.n	8006752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e049      	b.n	80067e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d106      	bne.n	800676c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7fb fb60 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2202      	movs	r2, #2
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3304      	adds	r3, #4
 800677c:	4619      	mov	r1, r3
 800677e:	4610      	mov	r0, r2
 8006780:	f000 ffdc 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b082      	sub	sp, #8
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e049      	b.n	8006894 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006806:	b2db      	uxtb	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d106      	bne.n	800681a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f841 	bl	800689c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3304      	adds	r3, #4
 800682a:	4619      	mov	r1, r3
 800682c:	4610      	mov	r0, r2
 800682e:	f000 ff85 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d109      	bne.n	80068d4 <HAL_TIM_PWM_Start+0x24>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	bf14      	ite	ne
 80068cc:	2301      	movne	r3, #1
 80068ce:	2300      	moveq	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	e03c      	b.n	800694e <HAL_TIM_PWM_Start+0x9e>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d109      	bne.n	80068ee <HAL_TIM_PWM_Start+0x3e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	e02f      	b.n	800694e <HAL_TIM_PWM_Start+0x9e>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d109      	bne.n	8006908 <HAL_TIM_PWM_Start+0x58>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	bf14      	ite	ne
 8006900:	2301      	movne	r3, #1
 8006902:	2300      	moveq	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	e022      	b.n	800694e <HAL_TIM_PWM_Start+0x9e>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	2b0c      	cmp	r3, #12
 800690c:	d109      	bne.n	8006922 <HAL_TIM_PWM_Start+0x72>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b01      	cmp	r3, #1
 8006918:	bf14      	ite	ne
 800691a:	2301      	movne	r3, #1
 800691c:	2300      	moveq	r3, #0
 800691e:	b2db      	uxtb	r3, r3
 8006920:	e015      	b.n	800694e <HAL_TIM_PWM_Start+0x9e>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b10      	cmp	r3, #16
 8006926:	d109      	bne.n	800693c <HAL_TIM_PWM_Start+0x8c>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b01      	cmp	r3, #1
 8006932:	bf14      	ite	ne
 8006934:	2301      	movne	r3, #1
 8006936:	2300      	moveq	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	e008      	b.n	800694e <HAL_TIM_PWM_Start+0x9e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e0a6      	b.n	8006aa4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d104      	bne.n	8006966 <HAL_TIM_PWM_Start+0xb6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006964:	e023      	b.n	80069ae <HAL_TIM_PWM_Start+0xfe>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b04      	cmp	r3, #4
 800696a:	d104      	bne.n	8006976 <HAL_TIM_PWM_Start+0xc6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2202      	movs	r2, #2
 8006970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006974:	e01b      	b.n	80069ae <HAL_TIM_PWM_Start+0xfe>
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	2b08      	cmp	r3, #8
 800697a:	d104      	bne.n	8006986 <HAL_TIM_PWM_Start+0xd6>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2202      	movs	r2, #2
 8006980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006984:	e013      	b.n	80069ae <HAL_TIM_PWM_Start+0xfe>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	2b0c      	cmp	r3, #12
 800698a:	d104      	bne.n	8006996 <HAL_TIM_PWM_Start+0xe6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2202      	movs	r2, #2
 8006990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006994:	e00b      	b.n	80069ae <HAL_TIM_PWM_Start+0xfe>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b10      	cmp	r3, #16
 800699a:	d104      	bne.n	80069a6 <HAL_TIM_PWM_Start+0xf6>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069a4:	e003      	b.n	80069ae <HAL_TIM_PWM_Start+0xfe>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2202      	movs	r2, #2
 80069aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	2201      	movs	r2, #1
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	4618      	mov	r0, r3
 80069b8:	f001 fc64 	bl	8008284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a3a      	ldr	r2, [pc, #232]	@ (8006aac <HAL_TIM_PWM_Start+0x1fc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d018      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x148>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a39      	ldr	r2, [pc, #228]	@ (8006ab0 <HAL_TIM_PWM_Start+0x200>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d013      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x148>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a37      	ldr	r2, [pc, #220]	@ (8006ab4 <HAL_TIM_PWM_Start+0x204>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00e      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x148>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a36      	ldr	r2, [pc, #216]	@ (8006ab8 <HAL_TIM_PWM_Start+0x208>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d009      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x148>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a34      	ldr	r2, [pc, #208]	@ (8006abc <HAL_TIM_PWM_Start+0x20c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_PWM_Start+0x148>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a33      	ldr	r2, [pc, #204]	@ (8006ac0 <HAL_TIM_PWM_Start+0x210>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d101      	bne.n	80069fc <HAL_TIM_PWM_Start+0x14c>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <HAL_TIM_PWM_Start+0x14e>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a25      	ldr	r2, [pc, #148]	@ (8006aac <HAL_TIM_PWM_Start+0x1fc>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d022      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a24:	d01d      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a26      	ldr	r2, [pc, #152]	@ (8006ac4 <HAL_TIM_PWM_Start+0x214>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d018      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a24      	ldr	r2, [pc, #144]	@ (8006ac8 <HAL_TIM_PWM_Start+0x218>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a23      	ldr	r2, [pc, #140]	@ (8006acc <HAL_TIM_PWM_Start+0x21c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a19      	ldr	r2, [pc, #100]	@ (8006ab0 <HAL_TIM_PWM_Start+0x200>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a18      	ldr	r2, [pc, #96]	@ (8006ab4 <HAL_TIM_PWM_Start+0x204>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIM_PWM_Start+0x1b2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a18      	ldr	r2, [pc, #96]	@ (8006ac0 <HAL_TIM_PWM_Start+0x210>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d115      	bne.n	8006a8e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	4b19      	ldr	r3, [pc, #100]	@ (8006ad0 <HAL_TIM_PWM_Start+0x220>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b06      	cmp	r3, #6
 8006a72:	d015      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x1f0>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a7a:	d011      	beq.n	8006aa0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a8c:	e008      	b.n	8006aa0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
 8006a9e:	e000      	b.n	8006aa2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	40012c00 	.word	0x40012c00
 8006ab0:	40013400 	.word	0x40013400
 8006ab4:	40014000 	.word	0x40014000
 8006ab8:	40014400 	.word	0x40014400
 8006abc:	40014800 	.word	0x40014800
 8006ac0:	40015000 	.word	0x40015000
 8006ac4:	40000400 	.word	0x40000400
 8006ac8:	40000800 	.word	0x40000800
 8006acc:	40000c00 	.word	0x40000c00
 8006ad0:	00010007 	.word	0x00010007

08006ad4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e049      	b.n	8006b7a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f841 	bl	8006b82 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f000 fe12 	bl	800773c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d104      	bne.n	8006bb6 <HAL_TIM_IC_Start_IT+0x1e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	e023      	b.n	8006bfe <HAL_TIM_IC_Start_IT+0x66>
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	2b04      	cmp	r3, #4
 8006bba:	d104      	bne.n	8006bc6 <HAL_TIM_IC_Start_IT+0x2e>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	e01b      	b.n	8006bfe <HAL_TIM_IC_Start_IT+0x66>
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b08      	cmp	r3, #8
 8006bca:	d104      	bne.n	8006bd6 <HAL_TIM_IC_Start_IT+0x3e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	e013      	b.n	8006bfe <HAL_TIM_IC_Start_IT+0x66>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b0c      	cmp	r3, #12
 8006bda:	d104      	bne.n	8006be6 <HAL_TIM_IC_Start_IT+0x4e>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	e00b      	b.n	8006bfe <HAL_TIM_IC_Start_IT+0x66>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b10      	cmp	r3, #16
 8006bea:	d104      	bne.n	8006bf6 <HAL_TIM_IC_Start_IT+0x5e>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	e003      	b.n	8006bfe <HAL_TIM_IC_Start_IT+0x66>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d104      	bne.n	8006c10 <HAL_TIM_IC_Start_IT+0x78>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	e013      	b.n	8006c38 <HAL_TIM_IC_Start_IT+0xa0>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b04      	cmp	r3, #4
 8006c14:	d104      	bne.n	8006c20 <HAL_TIM_IC_Start_IT+0x88>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e00b      	b.n	8006c38 <HAL_TIM_IC_Start_IT+0xa0>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d104      	bne.n	8006c30 <HAL_TIM_IC_Start_IT+0x98>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	e003      	b.n	8006c38 <HAL_TIM_IC_Start_IT+0xa0>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d102      	bne.n	8006c46 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c40:	7b7b      	ldrb	r3, [r7, #13]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d001      	beq.n	8006c4a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e0e2      	b.n	8006e10 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_IC_Start_IT+0xc2>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c58:	e023      	b.n	8006ca2 <HAL_TIM_IC_Start_IT+0x10a>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b04      	cmp	r3, #4
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_IC_Start_IT+0xd2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c68:	e01b      	b.n	8006ca2 <HAL_TIM_IC_Start_IT+0x10a>
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d104      	bne.n	8006c7a <HAL_TIM_IC_Start_IT+0xe2>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c78:	e013      	b.n	8006ca2 <HAL_TIM_IC_Start_IT+0x10a>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	2b0c      	cmp	r3, #12
 8006c7e:	d104      	bne.n	8006c8a <HAL_TIM_IC_Start_IT+0xf2>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c88:	e00b      	b.n	8006ca2 <HAL_TIM_IC_Start_IT+0x10a>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b10      	cmp	r3, #16
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_IC_Start_IT+0x102>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c98:	e003      	b.n	8006ca2 <HAL_TIM_IC_Start_IT+0x10a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_IC_Start_IT+0x11a>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cb0:	e013      	b.n	8006cda <HAL_TIM_IC_Start_IT+0x142>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_IC_Start_IT+0x12a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cc0:	e00b      	b.n	8006cda <HAL_TIM_IC_Start_IT+0x142>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d104      	bne.n	8006cd2 <HAL_TIM_IC_Start_IT+0x13a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cd0:	e003      	b.n	8006cda <HAL_TIM_IC_Start_IT+0x142>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2202      	movs	r2, #2
 8006cd6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d841      	bhi.n	8006d64 <HAL_TIM_IC_Start_IT+0x1cc>
 8006ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8006ce8 <HAL_TIM_IC_Start_IT+0x150>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006d1d 	.word	0x08006d1d
 8006cec:	08006d65 	.word	0x08006d65
 8006cf0:	08006d65 	.word	0x08006d65
 8006cf4:	08006d65 	.word	0x08006d65
 8006cf8:	08006d2f 	.word	0x08006d2f
 8006cfc:	08006d65 	.word	0x08006d65
 8006d00:	08006d65 	.word	0x08006d65
 8006d04:	08006d65 	.word	0x08006d65
 8006d08:	08006d41 	.word	0x08006d41
 8006d0c:	08006d65 	.word	0x08006d65
 8006d10:	08006d65 	.word	0x08006d65
 8006d14:	08006d65 	.word	0x08006d65
 8006d18:	08006d53 	.word	0x08006d53
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68da      	ldr	r2, [r3, #12]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0202 	orr.w	r2, r2, #2
 8006d2a:	60da      	str	r2, [r3, #12]
      break;
 8006d2c:	e01d      	b.n	8006d6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0204 	orr.w	r2, r2, #4
 8006d3c:	60da      	str	r2, [r3, #12]
      break;
 8006d3e:	e014      	b.n	8006d6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0208 	orr.w	r2, r2, #8
 8006d4e:	60da      	str	r2, [r3, #12]
      break;
 8006d50:	e00b      	b.n	8006d6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0210 	orr.w	r2, r2, #16
 8006d60:	60da      	str	r2, [r3, #12]
      break;
 8006d62:	e002      	b.n	8006d6a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	73fb      	strb	r3, [r7, #15]
      break;
 8006d68:	bf00      	nop
  }

  if (status == HAL_OK)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d14e      	bne.n	8006e0e <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	2201      	movs	r2, #1
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f001 fa83 	bl	8008284 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a25      	ldr	r2, [pc, #148]	@ (8006e18 <HAL_TIM_IC_Start_IT+0x280>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d022      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d90:	d01d      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a21      	ldr	r2, [pc, #132]	@ (8006e1c <HAL_TIM_IC_Start_IT+0x284>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d018      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e20 <HAL_TIM_IC_Start_IT+0x288>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d013      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e24 <HAL_TIM_IC_Start_IT+0x28c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00e      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1c      	ldr	r2, [pc, #112]	@ (8006e28 <HAL_TIM_IC_Start_IT+0x290>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d009      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8006e2c <HAL_TIM_IC_Start_IT+0x294>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d004      	beq.n	8006dce <HAL_TIM_IC_Start_IT+0x236>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a19      	ldr	r2, [pc, #100]	@ (8006e30 <HAL_TIM_IC_Start_IT+0x298>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d115      	bne.n	8006dfa <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	689a      	ldr	r2, [r3, #8]
 8006dd4:	4b17      	ldr	r3, [pc, #92]	@ (8006e34 <HAL_TIM_IC_Start_IT+0x29c>)
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2b06      	cmp	r3, #6
 8006dde:	d015      	beq.n	8006e0c <HAL_TIM_IC_Start_IT+0x274>
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006de6:	d011      	beq.n	8006e0c <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	e008      	b.n	8006e0c <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
 8006e0a:	e000      	b.n	8006e0e <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e0c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00
 8006e28:	40013400 	.word	0x40013400
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40015000 	.word	0x40015000
 8006e34:	00010007 	.word	0x00010007

08006e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	691b      	ldr	r3, [r3, #16]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 0302 	and.w	r3, r3, #2
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d020      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01b      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0202 	mvn.w	r2, #2
 8006e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2201      	movs	r2, #1
 8006e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	f003 0303 	and.w	r3, r3, #3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fa f8a0 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8006e88:	e005      	b.n	8006e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fc38 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fc3f 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0304 	and.w	r3, r3, #4
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d020      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 0304 	and.w	r3, r3, #4
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01b      	beq.n	8006ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0204 	mvn.w	r2, #4
 8006eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fa f87a 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8006ed4:	e005      	b.n	8006ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc12 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fc19 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d020      	beq.n	8006f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f003 0308 	and.w	r3, r3, #8
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01b      	beq.n	8006f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f06f 0208 	mvn.w	r2, #8
 8006f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	69db      	ldr	r3, [r3, #28]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7fa f854 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8006f20:	e005      	b.n	8006f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fbec 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fbf3 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0310 	and.w	r3, r3, #16
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d020      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01b      	beq.n	8006f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0210 	mvn.w	r2, #16
 8006f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2208      	movs	r2, #8
 8006f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69db      	ldr	r3, [r3, #28]
 8006f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d003      	beq.n	8006f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fa f82e 	bl	8000fc8 <HAL_TIM_IC_CaptureCallback>
 8006f6c:	e005      	b.n	8006f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 fbc6 	bl	8007700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 fbcd 	bl	8007714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00c      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0201 	mvn.w	r2, #1
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fba4 	bl	80076ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00c      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d007      	beq.n	8006fd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006fca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f001 fab3 	bl	8008538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00c      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 faab 	bl	800854c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00c      	beq.n	800701a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d007      	beq.n	800701a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb87 	bl	8007728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	f003 0320 	and.w	r3, r3, #32
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00c      	beq.n	800703e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f06f 0220 	mvn.w	r2, #32
 8007036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 fa73 	bl	8008524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d00c      	beq.n	8007062 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800705a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fa7f 	bl	8008560 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00c      	beq.n	8007086 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800707e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 fa77 	bl	8008574 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d007      	beq.n	80070aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80070a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f001 fa6f 	bl	8008588 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d00c      	beq.n	80070ce <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d007      	beq.n	80070ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80070c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fa67 	bl	800859c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070ce:	bf00      	nop
 80070d0:	3710      	adds	r7, #16
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b086      	sub	sp, #24
 80070da:	af00      	add	r7, sp, #0
 80070dc:	60f8      	str	r0, [r7, #12]
 80070de:	60b9      	str	r1, [r7, #8]
 80070e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d101      	bne.n	80070f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80070f0:	2302      	movs	r3, #2
 80070f2:	e088      	b.n	8007206 <HAL_TIM_IC_ConfigChannel+0x130>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d11b      	bne.n	800713a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007112:	f000 fef1 	bl	8007ef8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	699a      	ldr	r2, [r3, #24]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 020c 	bic.w	r2, r2, #12
 8007124:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6999      	ldr	r1, [r3, #24]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]
 8007138:	e060      	b.n	80071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b04      	cmp	r3, #4
 800713e:	d11c      	bne.n	800717a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007150:	f000 ff75 	bl	800803e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007162:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6999      	ldr	r1, [r3, #24]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	021a      	lsls	r2, r3, #8
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	430a      	orrs	r2, r1
 8007176:	619a      	str	r2, [r3, #24]
 8007178:	e040      	b.n	80071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b08      	cmp	r3, #8
 800717e:	d11b      	bne.n	80071b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007190:	f000 ffc2 	bl	8008118 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69da      	ldr	r2, [r3, #28]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 020c 	bic.w	r2, r2, #12
 80071a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69d9      	ldr	r1, [r3, #28]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	430a      	orrs	r2, r1
 80071b4:	61da      	str	r2, [r3, #28]
 80071b6:	e021      	b.n	80071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d11c      	bne.n	80071f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80071ce:	f000 ffdf 	bl	8008190 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80071e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69d9      	ldr	r1, [r3, #28]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	021a      	lsls	r2, r3, #8
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	430a      	orrs	r2, r1
 80071f4:	61da      	str	r2, [r3, #28]
 80071f6:	e001      	b.n	80071fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007226:	2b01      	cmp	r3, #1
 8007228:	d101      	bne.n	800722e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800722a:	2302      	movs	r3, #2
 800722c:	e0ff      	b.n	800742e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b14      	cmp	r3, #20
 800723a:	f200 80f0 	bhi.w	800741e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800723e:	a201      	add	r2, pc, #4	@ (adr r2, 8007244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007299 	.word	0x08007299
 8007248:	0800741f 	.word	0x0800741f
 800724c:	0800741f 	.word	0x0800741f
 8007250:	0800741f 	.word	0x0800741f
 8007254:	080072d9 	.word	0x080072d9
 8007258:	0800741f 	.word	0x0800741f
 800725c:	0800741f 	.word	0x0800741f
 8007260:	0800741f 	.word	0x0800741f
 8007264:	0800731b 	.word	0x0800731b
 8007268:	0800741f 	.word	0x0800741f
 800726c:	0800741f 	.word	0x0800741f
 8007270:	0800741f 	.word	0x0800741f
 8007274:	0800735b 	.word	0x0800735b
 8007278:	0800741f 	.word	0x0800741f
 800727c:	0800741f 	.word	0x0800741f
 8007280:	0800741f 	.word	0x0800741f
 8007284:	0800739d 	.word	0x0800739d
 8007288:	0800741f 	.word	0x0800741f
 800728c:	0800741f 	.word	0x0800741f
 8007290:	0800741f 	.word	0x0800741f
 8007294:	080073dd 	.word	0x080073dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fb00 	bl	80078a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f042 0208 	orr.w	r2, r2, #8
 80072b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0204 	bic.w	r2, r2, #4
 80072c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6999      	ldr	r1, [r3, #24]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	430a      	orrs	r2, r1
 80072d4:	619a      	str	r2, [r3, #24]
      break;
 80072d6:	e0a5      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68b9      	ldr	r1, [r7, #8]
 80072de:	4618      	mov	r0, r3
 80072e0:	f000 fb7a 	bl	80079d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	6999      	ldr	r1, [r3, #24]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	021a      	lsls	r2, r3, #8
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	619a      	str	r2, [r3, #24]
      break;
 8007318:	e084      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fbed 	bl	8007b00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f042 0208 	orr.w	r2, r2, #8
 8007334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0204 	bic.w	r2, r2, #4
 8007344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69d9      	ldr	r1, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	430a      	orrs	r2, r1
 8007356:	61da      	str	r2, [r3, #28]
      break;
 8007358:	e064      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68b9      	ldr	r1, [r7, #8]
 8007360:	4618      	mov	r0, r3
 8007362:	f000 fc5f 	bl	8007c24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69da      	ldr	r2, [r3, #28]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	69d9      	ldr	r1, [r3, #28]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	021a      	lsls	r2, r3, #8
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	61da      	str	r2, [r3, #28]
      break;
 800739a:	e043      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fcd2 	bl	8007d4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f042 0208 	orr.w	r2, r2, #8
 80073b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 0204 	bic.w	r2, r2, #4
 80073c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691a      	ldr	r2, [r3, #16]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80073da:	e023      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68b9      	ldr	r1, [r7, #8]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fd1c 	bl	8007e20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007406:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	021a      	lsls	r2, r3, #8
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800741c:	e002      	b.n	8007424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	75fb      	strb	r3, [r7, #23]
      break;
 8007422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800742c:	7dfb      	ldrb	r3, [r7, #23]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop

08007438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d101      	bne.n	8007454 <HAL_TIM_ConfigClockSource+0x1c>
 8007450:	2302      	movs	r3, #2
 8007452:	e0f6      	b.n	8007642 <HAL_TIM_ConfigClockSource+0x20a>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800747e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68ba      	ldr	r2, [r7, #8]
 8007486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a6f      	ldr	r2, [pc, #444]	@ (800764c <HAL_TIM_ConfigClockSource+0x214>)
 800748e:	4293      	cmp	r3, r2
 8007490:	f000 80c1 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 8007494:	4a6d      	ldr	r2, [pc, #436]	@ (800764c <HAL_TIM_ConfigClockSource+0x214>)
 8007496:	4293      	cmp	r3, r2
 8007498:	f200 80c6 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 800749c:	4a6c      	ldr	r2, [pc, #432]	@ (8007650 <HAL_TIM_ConfigClockSource+0x218>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	f000 80b9 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074a4:	4a6a      	ldr	r2, [pc, #424]	@ (8007650 <HAL_TIM_ConfigClockSource+0x218>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	f200 80be 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ac:	4a69      	ldr	r2, [pc, #420]	@ (8007654 <HAL_TIM_ConfigClockSource+0x21c>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	f000 80b1 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074b4:	4a67      	ldr	r2, [pc, #412]	@ (8007654 <HAL_TIM_ConfigClockSource+0x21c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	f200 80b6 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074bc:	4a66      	ldr	r2, [pc, #408]	@ (8007658 <HAL_TIM_ConfigClockSource+0x220>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	f000 80a9 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074c4:	4a64      	ldr	r2, [pc, #400]	@ (8007658 <HAL_TIM_ConfigClockSource+0x220>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	f200 80ae 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074cc:	4a63      	ldr	r2, [pc, #396]	@ (800765c <HAL_TIM_ConfigClockSource+0x224>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	f000 80a1 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074d4:	4a61      	ldr	r2, [pc, #388]	@ (800765c <HAL_TIM_ConfigClockSource+0x224>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	f200 80a6 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074dc:	4a60      	ldr	r2, [pc, #384]	@ (8007660 <HAL_TIM_ConfigClockSource+0x228>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	f000 8099 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074e4:	4a5e      	ldr	r2, [pc, #376]	@ (8007660 <HAL_TIM_ConfigClockSource+0x228>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	f200 809e 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074f0:	f000 8091 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 80074f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80074f8:	f200 8096 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 80074fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007500:	f000 8089 	beq.w	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 8007504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007508:	f200 808e 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 800750c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007510:	d03e      	beq.n	8007590 <HAL_TIM_ConfigClockSource+0x158>
 8007512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007516:	f200 8087 	bhi.w	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 800751a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800751e:	f000 8086 	beq.w	800762e <HAL_TIM_ConfigClockSource+0x1f6>
 8007522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007526:	d87f      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007528:	2b70      	cmp	r3, #112	@ 0x70
 800752a:	d01a      	beq.n	8007562 <HAL_TIM_ConfigClockSource+0x12a>
 800752c:	2b70      	cmp	r3, #112	@ 0x70
 800752e:	d87b      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007530:	2b60      	cmp	r3, #96	@ 0x60
 8007532:	d050      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0x19e>
 8007534:	2b60      	cmp	r3, #96	@ 0x60
 8007536:	d877      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007538:	2b50      	cmp	r3, #80	@ 0x50
 800753a:	d03c      	beq.n	80075b6 <HAL_TIM_ConfigClockSource+0x17e>
 800753c:	2b50      	cmp	r3, #80	@ 0x50
 800753e:	d873      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007540:	2b40      	cmp	r3, #64	@ 0x40
 8007542:	d058      	beq.n	80075f6 <HAL_TIM_ConfigClockSource+0x1be>
 8007544:	2b40      	cmp	r3, #64	@ 0x40
 8007546:	d86f      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007548:	2b30      	cmp	r3, #48	@ 0x30
 800754a:	d064      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 800754c:	2b30      	cmp	r3, #48	@ 0x30
 800754e:	d86b      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007550:	2b20      	cmp	r3, #32
 8007552:	d060      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 8007554:	2b20      	cmp	r3, #32
 8007556:	d867      	bhi.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d05c      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 800755c:	2b10      	cmp	r3, #16
 800755e:	d05a      	beq.n	8007616 <HAL_TIM_ConfigClockSource+0x1de>
 8007560:	e062      	b.n	8007628 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007572:	f000 fe67 	bl	8008244 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	609a      	str	r2, [r3, #8]
      break;
 800758e:	e04f      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80075a0:	f000 fe50 	bl	8008244 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075b2:	609a      	str	r2, [r3, #8]
      break;
 80075b4:	e03c      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c2:	461a      	mov	r2, r3
 80075c4:	f000 fd0c 	bl	8007fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2150      	movs	r1, #80	@ 0x50
 80075ce:	4618      	mov	r0, r3
 80075d0:	f000 fe1b 	bl	800820a <TIM_ITRx_SetConfig>
      break;
 80075d4:	e02c      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075e2:	461a      	mov	r2, r3
 80075e4:	f000 fd68 	bl	80080b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2160      	movs	r1, #96	@ 0x60
 80075ee:	4618      	mov	r0, r3
 80075f0:	f000 fe0b 	bl	800820a <TIM_ITRx_SetConfig>
      break;
 80075f4:	e01c      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007602:	461a      	mov	r2, r3
 8007604:	f000 fcec 	bl	8007fe0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2140      	movs	r1, #64	@ 0x40
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fdfb 	bl	800820a <TIM_ITRx_SetConfig>
      break;
 8007614:	e00c      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4619      	mov	r1, r3
 8007620:	4610      	mov	r0, r2
 8007622:	f000 fdf2 	bl	800820a <TIM_ITRx_SetConfig>
      break;
 8007626:	e003      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
      break;
 800762c:	e000      	b.n	8007630 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800762e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	00100070 	.word	0x00100070
 8007650:	00100060 	.word	0x00100060
 8007654:	00100050 	.word	0x00100050
 8007658:	00100040 	.word	0x00100040
 800765c:	00100030 	.word	0x00100030
 8007660:	00100020 	.word	0x00100020

08007664 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b0c      	cmp	r3, #12
 8007676:	d831      	bhi.n	80076dc <HAL_TIM_ReadCapturedValue+0x78>
 8007678:	a201      	add	r2, pc, #4	@ (adr r2, 8007680 <HAL_TIM_ReadCapturedValue+0x1c>)
 800767a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767e:	bf00      	nop
 8007680:	080076b5 	.word	0x080076b5
 8007684:	080076dd 	.word	0x080076dd
 8007688:	080076dd 	.word	0x080076dd
 800768c:	080076dd 	.word	0x080076dd
 8007690:	080076bf 	.word	0x080076bf
 8007694:	080076dd 	.word	0x080076dd
 8007698:	080076dd 	.word	0x080076dd
 800769c:	080076dd 	.word	0x080076dd
 80076a0:	080076c9 	.word	0x080076c9
 80076a4:	080076dd 	.word	0x080076dd
 80076a8:	080076dd 	.word	0x080076dd
 80076ac:	080076dd 	.word	0x080076dd
 80076b0:	080076d3 	.word	0x080076d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ba:	60fb      	str	r3, [r7, #12]

      break;
 80076bc:	e00f      	b.n	80076de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c4:	60fb      	str	r3, [r7, #12]

      break;
 80076c6:	e00a      	b.n	80076de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ce:	60fb      	str	r3, [r7, #12]

      break;
 80076d0:	e005      	b.n	80076de <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d8:	60fb      	str	r3, [r7, #12]

      break;
 80076da:	e000      	b.n	80076de <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80076dc:	bf00      	nop
  }

  return tmpreg;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800773c:	b480      	push	{r7}
 800773e:	b085      	sub	sp, #20
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a4c      	ldr	r2, [pc, #304]	@ (8007880 <TIM_Base_SetConfig+0x144>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d017      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800775a:	d013      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a49      	ldr	r2, [pc, #292]	@ (8007884 <TIM_Base_SetConfig+0x148>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00f      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	4a48      	ldr	r2, [pc, #288]	@ (8007888 <TIM_Base_SetConfig+0x14c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d00b      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a47      	ldr	r2, [pc, #284]	@ (800788c <TIM_Base_SetConfig+0x150>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d007      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a46      	ldr	r2, [pc, #280]	@ (8007890 <TIM_Base_SetConfig+0x154>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d003      	beq.n	8007784 <TIM_Base_SetConfig+0x48>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a45      	ldr	r2, [pc, #276]	@ (8007894 <TIM_Base_SetConfig+0x158>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d108      	bne.n	8007796 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800778a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	4313      	orrs	r3, r2
 8007794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a39      	ldr	r2, [pc, #228]	@ (8007880 <TIM_Base_SetConfig+0x144>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d023      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077a4:	d01f      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a36      	ldr	r2, [pc, #216]	@ (8007884 <TIM_Base_SetConfig+0x148>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d01b      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a35      	ldr	r2, [pc, #212]	@ (8007888 <TIM_Base_SetConfig+0x14c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d017      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a34      	ldr	r2, [pc, #208]	@ (800788c <TIM_Base_SetConfig+0x150>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a33      	ldr	r2, [pc, #204]	@ (8007890 <TIM_Base_SetConfig+0x154>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d00f      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a33      	ldr	r2, [pc, #204]	@ (8007898 <TIM_Base_SetConfig+0x15c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d00b      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a32      	ldr	r2, [pc, #200]	@ (800789c <TIM_Base_SetConfig+0x160>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d007      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a31      	ldr	r2, [pc, #196]	@ (80078a0 <TIM_Base_SetConfig+0x164>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_Base_SetConfig+0xaa>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a2c      	ldr	r2, [pc, #176]	@ (8007894 <TIM_Base_SetConfig+0x158>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d108      	bne.n	80077f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a18      	ldr	r2, [pc, #96]	@ (8007880 <TIM_Base_SetConfig+0x144>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d013      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1a      	ldr	r2, [pc, #104]	@ (8007890 <TIM_Base_SetConfig+0x154>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d00f      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a1a      	ldr	r2, [pc, #104]	@ (8007898 <TIM_Base_SetConfig+0x15c>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00b      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a19      	ldr	r2, [pc, #100]	@ (800789c <TIM_Base_SetConfig+0x160>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a18      	ldr	r2, [pc, #96]	@ (80078a0 <TIM_Base_SetConfig+0x164>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_Base_SetConfig+0x110>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a13      	ldr	r2, [pc, #76]	@ (8007894 <TIM_Base_SetConfig+0x158>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d103      	bne.n	8007854 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	691a      	ldr	r2, [r3, #16]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b01      	cmp	r3, #1
 8007864:	d105      	bne.n	8007872 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f023 0201 	bic.w	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	611a      	str	r2, [r3, #16]
  }
}
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40012c00 	.word	0x40012c00
 8007884:	40000400 	.word	0x40000400
 8007888:	40000800 	.word	0x40000800
 800788c:	40000c00 	.word	0x40000c00
 8007890:	40013400 	.word	0x40013400
 8007894:	40015000 	.word	0x40015000
 8007898:	40014000 	.word	0x40014000
 800789c:	40014400 	.word	0x40014400
 80078a0:	40014800 	.word	0x40014800

080078a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	f023 0201 	bic.w	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0303 	bic.w	r3, r3, #3
 80078de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f023 0302 	bic.w	r3, r3, #2
 80078f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a30      	ldr	r2, [pc, #192]	@ (80079c0 <TIM_OC1_SetConfig+0x11c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d013      	beq.n	800792c <TIM_OC1_SetConfig+0x88>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a2f      	ldr	r2, [pc, #188]	@ (80079c4 <TIM_OC1_SetConfig+0x120>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00f      	beq.n	800792c <TIM_OC1_SetConfig+0x88>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a2e      	ldr	r2, [pc, #184]	@ (80079c8 <TIM_OC1_SetConfig+0x124>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00b      	beq.n	800792c <TIM_OC1_SetConfig+0x88>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a2d      	ldr	r2, [pc, #180]	@ (80079cc <TIM_OC1_SetConfig+0x128>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d007      	beq.n	800792c <TIM_OC1_SetConfig+0x88>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a2c      	ldr	r2, [pc, #176]	@ (80079d0 <TIM_OC1_SetConfig+0x12c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d003      	beq.n	800792c <TIM_OC1_SetConfig+0x88>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a2b      	ldr	r2, [pc, #172]	@ (80079d4 <TIM_OC1_SetConfig+0x130>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d10c      	bne.n	8007946 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f023 0308 	bic.w	r3, r3, #8
 8007932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	f023 0304 	bic.w	r3, r3, #4
 8007944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <TIM_OC1_SetConfig+0x11c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d013      	beq.n	8007976 <TIM_OC1_SetConfig+0xd2>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1c      	ldr	r2, [pc, #112]	@ (80079c4 <TIM_OC1_SetConfig+0x120>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00f      	beq.n	8007976 <TIM_OC1_SetConfig+0xd2>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1b      	ldr	r2, [pc, #108]	@ (80079c8 <TIM_OC1_SetConfig+0x124>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d00b      	beq.n	8007976 <TIM_OC1_SetConfig+0xd2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1a      	ldr	r2, [pc, #104]	@ (80079cc <TIM_OC1_SetConfig+0x128>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d007      	beq.n	8007976 <TIM_OC1_SetConfig+0xd2>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	@ (80079d0 <TIM_OC1_SetConfig+0x12c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d003      	beq.n	8007976 <TIM_OC1_SetConfig+0xd2>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <TIM_OC1_SetConfig+0x130>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d111      	bne.n	800799a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800797c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	693a      	ldr	r2, [r7, #16]
 800798c:	4313      	orrs	r3, r2
 800798e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	4313      	orrs	r3, r2
 8007998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	621a      	str	r2, [r3, #32]
}
 80079b4:	bf00      	nop
 80079b6:	371c      	adds	r7, #28
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	40012c00 	.word	0x40012c00
 80079c4:	40013400 	.word	0x40013400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	40015000 	.word	0x40015000

080079d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f023 0210 	bic.w	r2, r3, #16
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0320 	bic.w	r3, r3, #32
 8007a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a2c      	ldr	r2, [pc, #176]	@ (8007ae8 <TIM_OC2_SetConfig+0x110>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d007      	beq.n	8007a4c <TIM_OC2_SetConfig+0x74>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007aec <TIM_OC2_SetConfig+0x114>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_OC2_SetConfig+0x74>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a2a      	ldr	r2, [pc, #168]	@ (8007af0 <TIM_OC2_SetConfig+0x118>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d10d      	bne.n	8007a68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	011b      	lsls	r3, r3, #4
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <TIM_OC2_SetConfig+0x110>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d013      	beq.n	8007a98 <TIM_OC2_SetConfig+0xc0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <TIM_OC2_SetConfig+0x114>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00f      	beq.n	8007a98 <TIM_OC2_SetConfig+0xc0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007af4 <TIM_OC2_SetConfig+0x11c>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d00b      	beq.n	8007a98 <TIM_OC2_SetConfig+0xc0>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a1d      	ldr	r2, [pc, #116]	@ (8007af8 <TIM_OC2_SetConfig+0x120>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d007      	beq.n	8007a98 <TIM_OC2_SetConfig+0xc0>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8007afc <TIM_OC2_SetConfig+0x124>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d003      	beq.n	8007a98 <TIM_OC2_SetConfig+0xc0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a17      	ldr	r2, [pc, #92]	@ (8007af0 <TIM_OC2_SetConfig+0x118>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d113      	bne.n	8007ac0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007aa6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	699b      	ldr	r3, [r3, #24]
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685a      	ldr	r2, [r3, #4]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	621a      	str	r2, [r3, #32]
}
 8007ada:	bf00      	nop
 8007adc:	371c      	adds	r7, #28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	40012c00 	.word	0x40012c00
 8007aec:	40013400 	.word	0x40013400
 8007af0:	40015000 	.word	0x40015000
 8007af4:	40014000 	.word	0x40014000
 8007af8:	40014400 	.word	0x40014400
 8007afc:	40014800 	.word	0x40014800

08007b00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a1b      	ldr	r3, [r3, #32]
 8007b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a1b      	ldr	r3, [r3, #32]
 8007b14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0303 	bic.w	r3, r3, #3
 8007b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a2b      	ldr	r2, [pc, #172]	@ (8007c0c <TIM_OC3_SetConfig+0x10c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d007      	beq.n	8007b72 <TIM_OC3_SetConfig+0x72>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a2a      	ldr	r2, [pc, #168]	@ (8007c10 <TIM_OC3_SetConfig+0x110>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d003      	beq.n	8007b72 <TIM_OC3_SetConfig+0x72>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a29      	ldr	r2, [pc, #164]	@ (8007c14 <TIM_OC3_SetConfig+0x114>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d10d      	bne.n	8007b8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	021b      	lsls	r3, r3, #8
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a1e      	ldr	r2, [pc, #120]	@ (8007c0c <TIM_OC3_SetConfig+0x10c>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d013      	beq.n	8007bbe <TIM_OC3_SetConfig+0xbe>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a1d      	ldr	r2, [pc, #116]	@ (8007c10 <TIM_OC3_SetConfig+0x110>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d00f      	beq.n	8007bbe <TIM_OC3_SetConfig+0xbe>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c18 <TIM_OC3_SetConfig+0x118>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d00b      	beq.n	8007bbe <TIM_OC3_SetConfig+0xbe>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8007c1c <TIM_OC3_SetConfig+0x11c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d007      	beq.n	8007bbe <TIM_OC3_SetConfig+0xbe>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <TIM_OC3_SetConfig+0x120>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d003      	beq.n	8007bbe <TIM_OC3_SetConfig+0xbe>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a16      	ldr	r2, [pc, #88]	@ (8007c14 <TIM_OC3_SetConfig+0x114>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d113      	bne.n	8007be6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	695b      	ldr	r3, [r3, #20]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	693a      	ldr	r2, [r7, #16]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	685a      	ldr	r2, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40012c00 	.word	0x40012c00
 8007c10:	40013400 	.word	0x40013400
 8007c14:	40015000 	.word	0x40015000
 8007c18:	40014000 	.word	0x40014000
 8007c1c:	40014400 	.word	0x40014400
 8007c20:	40014800 	.word	0x40014800

08007c24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b087      	sub	sp, #28
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	021b      	lsls	r3, r3, #8
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	031b      	lsls	r3, r3, #12
 8007c7a:	697a      	ldr	r2, [r7, #20]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4a2c      	ldr	r2, [pc, #176]	@ (8007d34 <TIM_OC4_SetConfig+0x110>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d007      	beq.n	8007c98 <TIM_OC4_SetConfig+0x74>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007d38 <TIM_OC4_SetConfig+0x114>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d003      	beq.n	8007c98 <TIM_OC4_SetConfig+0x74>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a2a      	ldr	r2, [pc, #168]	@ (8007d3c <TIM_OC4_SetConfig+0x118>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d10d      	bne.n	8007cb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	68db      	ldr	r3, [r3, #12]
 8007ca4:	031b      	lsls	r3, r3, #12
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a1f      	ldr	r2, [pc, #124]	@ (8007d34 <TIM_OC4_SetConfig+0x110>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d013      	beq.n	8007ce4 <TIM_OC4_SetConfig+0xc0>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8007d38 <TIM_OC4_SetConfig+0x114>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00f      	beq.n	8007ce4 <TIM_OC4_SetConfig+0xc0>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d40 <TIM_OC4_SetConfig+0x11c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d00b      	beq.n	8007ce4 <TIM_OC4_SetConfig+0xc0>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a1d      	ldr	r2, [pc, #116]	@ (8007d44 <TIM_OC4_SetConfig+0x120>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d007      	beq.n	8007ce4 <TIM_OC4_SetConfig+0xc0>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a1c      	ldr	r2, [pc, #112]	@ (8007d48 <TIM_OC4_SetConfig+0x124>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC4_SetConfig+0xc0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a17      	ldr	r2, [pc, #92]	@ (8007d3c <TIM_OC4_SetConfig+0x118>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d113      	bne.n	8007d0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007cf2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	019b      	lsls	r3, r3, #6
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	019b      	lsls	r3, r3, #6
 8007d06:	693a      	ldr	r2, [r7, #16]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	685a      	ldr	r2, [r3, #4]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	697a      	ldr	r2, [r7, #20]
 8007d24:	621a      	str	r2, [r3, #32]
}
 8007d26:	bf00      	nop
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	40013400 	.word	0x40013400
 8007d3c:	40015000 	.word	0x40015000
 8007d40:	40014000 	.word	0x40014000
 8007d44:	40014400 	.word	0x40014400
 8007d48:	40014800 	.word	0x40014800

08007d4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a1b      	ldr	r3, [r3, #32]
 8007d60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007d90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	041b      	lsls	r3, r3, #16
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a19      	ldr	r2, [pc, #100]	@ (8007e08 <TIM_OC5_SetConfig+0xbc>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <TIM_OC5_SetConfig+0x82>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a18      	ldr	r2, [pc, #96]	@ (8007e0c <TIM_OC5_SetConfig+0xc0>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00f      	beq.n	8007dce <TIM_OC5_SetConfig+0x82>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a17      	ldr	r2, [pc, #92]	@ (8007e10 <TIM_OC5_SetConfig+0xc4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00b      	beq.n	8007dce <TIM_OC5_SetConfig+0x82>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a16      	ldr	r2, [pc, #88]	@ (8007e14 <TIM_OC5_SetConfig+0xc8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d007      	beq.n	8007dce <TIM_OC5_SetConfig+0x82>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a15      	ldr	r2, [pc, #84]	@ (8007e18 <TIM_OC5_SetConfig+0xcc>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d003      	beq.n	8007dce <TIM_OC5_SetConfig+0x82>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a14      	ldr	r2, [pc, #80]	@ (8007e1c <TIM_OC5_SetConfig+0xd0>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d109      	bne.n	8007de2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685a      	ldr	r2, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	621a      	str	r2, [r3, #32]
}
 8007dfc:	bf00      	nop
 8007dfe:	371c      	adds	r7, #28
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	40012c00 	.word	0x40012c00
 8007e0c:	40013400 	.word	0x40013400
 8007e10:	40014000 	.word	0x40014000
 8007e14:	40014400 	.word	0x40014400
 8007e18:	40014800 	.word	0x40014800
 8007e1c:	40015000 	.word	0x40015000

08007e20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b087      	sub	sp, #28
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a1b      	ldr	r3, [r3, #32]
 8007e34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	021b      	lsls	r3, r3, #8
 8007e5a:	68fa      	ldr	r2, [r7, #12]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007e66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	051b      	lsls	r3, r3, #20
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ee0 <TIM_OC6_SetConfig+0xc0>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d013      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x84>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a19      	ldr	r2, [pc, #100]	@ (8007ee4 <TIM_OC6_SetConfig+0xc4>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d00f      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x84>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	4a18      	ldr	r2, [pc, #96]	@ (8007ee8 <TIM_OC6_SetConfig+0xc8>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x84>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	4a17      	ldr	r2, [pc, #92]	@ (8007eec <TIM_OC6_SetConfig+0xcc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d007      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x84>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	4a16      	ldr	r2, [pc, #88]	@ (8007ef0 <TIM_OC6_SetConfig+0xd0>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d003      	beq.n	8007ea4 <TIM_OC6_SetConfig+0x84>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	@ (8007ef4 <TIM_OC6_SetConfig+0xd4>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d109      	bne.n	8007eb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	695b      	ldr	r3, [r3, #20]
 8007eb0:	029b      	lsls	r3, r3, #10
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	621a      	str	r2, [r3, #32]
}
 8007ed2:	bf00      	nop
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	40012c00 	.word	0x40012c00
 8007ee4:	40013400 	.word	0x40013400
 8007ee8:	40014000 	.word	0x40014000
 8007eec:	40014400 	.word	0x40014400
 8007ef0:	40014800 	.word	0x40014800
 8007ef4:	40015000 	.word	0x40015000

08007ef8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	f023 0201 	bic.w	r2, r3, #1
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	4a28      	ldr	r2, [pc, #160]	@ (8007fc4 <TIM_TI1_SetConfig+0xcc>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01b      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f2c:	d017      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a25      	ldr	r2, [pc, #148]	@ (8007fc8 <TIM_TI1_SetConfig+0xd0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4a24      	ldr	r2, [pc, #144]	@ (8007fcc <TIM_TI1_SetConfig+0xd4>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	4a23      	ldr	r2, [pc, #140]	@ (8007fd0 <TIM_TI1_SetConfig+0xd8>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a22      	ldr	r2, [pc, #136]	@ (8007fd4 <TIM_TI1_SetConfig+0xdc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	4a21      	ldr	r2, [pc, #132]	@ (8007fd8 <TIM_TI1_SetConfig+0xe0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_TI1_SetConfig+0x66>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4a20      	ldr	r2, [pc, #128]	@ (8007fdc <TIM_TI1_SetConfig+0xe4>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d101      	bne.n	8007f62 <TIM_TI1_SetConfig+0x6a>
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e000      	b.n	8007f64 <TIM_TI1_SetConfig+0x6c>
 8007f62:	2300      	movs	r3, #0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d008      	beq.n	8007f7a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e003      	b.n	8007f82 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f043 0301 	orr.w	r3, r3, #1
 8007f80:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	011b      	lsls	r3, r3, #4
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f023 030a 	bic.w	r3, r3, #10
 8007f9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f003 030a 	and.w	r3, r3, #10
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	621a      	str	r2, [r3, #32]
}
 8007fb6:	bf00      	nop
 8007fb8:	371c      	adds	r7, #28
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
 8007fc2:	bf00      	nop
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40000400 	.word	0x40000400
 8007fcc:	40000800 	.word	0x40000800
 8007fd0:	40000c00 	.word	0x40000c00
 8007fd4:	40013400 	.word	0x40013400
 8007fd8:	40014000 	.word	0x40014000
 8007fdc:	40015000 	.word	0x40015000

08007fe0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b087      	sub	sp, #28
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a1b      	ldr	r3, [r3, #32]
 8007ff0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	f023 0201 	bic.w	r2, r3, #1
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800800a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	011b      	lsls	r3, r3, #4
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f023 030a 	bic.w	r3, r3, #10
 800801c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	4313      	orrs	r3, r2
 8008024:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	693a      	ldr	r2, [r7, #16]
 800802a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	621a      	str	r2, [r3, #32]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr

0800803e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800803e:	b480      	push	{r7}
 8008040:	b087      	sub	sp, #28
 8008042:	af00      	add	r7, sp, #0
 8008044:	60f8      	str	r0, [r7, #12]
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	607a      	str	r2, [r7, #4]
 800804a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	f023 0210 	bic.w	r2, r3, #16
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	699b      	ldr	r3, [r3, #24]
 8008062:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800806a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800807c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	031b      	lsls	r3, r3, #12
 8008082:	b29b      	uxth	r3, r3
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008090:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800809a:	697a      	ldr	r2, [r7, #20]
 800809c:	4313      	orrs	r3, r2
 800809e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	621a      	str	r2, [r3, #32]
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b087      	sub	sp, #28
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	f023 0210 	bic.w	r2, r3, #16
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80080e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	031b      	lsls	r3, r3, #12
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80080f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	621a      	str	r2, [r3, #32]
}
 800810c:	bf00      	nop
 800810e:	371c      	adds	r7, #28
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	69db      	ldr	r3, [r3, #28]
 800813c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008154:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	011b      	lsls	r3, r3, #4
 800815a:	b2db      	uxtb	r3, r3
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008168:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	021b      	lsls	r3, r3, #8
 800816e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4313      	orrs	r3, r2
 8008176:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	697a      	ldr	r2, [r7, #20]
 8008182:	621a      	str	r2, [r3, #32]
}
 8008184:	bf00      	nop
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	021b      	lsls	r3, r3, #8
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80081ce:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	031b      	lsls	r3, r3, #12
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	4313      	orrs	r3, r2
 80081da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80081e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	031b      	lsls	r3, r3, #12
 80081e8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	693a      	ldr	r2, [r7, #16]
 80081f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	621a      	str	r2, [r3, #32]
}
 80081fe:	bf00      	nop
 8008200:	371c      	adds	r7, #28
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	f043 0307 	orr.w	r3, r3, #7
 8008230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	609a      	str	r2, [r3, #8]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800825e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	021a      	lsls	r2, r3, #8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	431a      	orrs	r2, r3
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	4313      	orrs	r3, r2
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	4313      	orrs	r3, r2
 8008270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	609a      	str	r2, [r3, #8]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 031f 	and.w	r3, r3, #31
 8008296:	2201      	movs	r2, #1
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6a1a      	ldr	r2, [r3, #32]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	43db      	mvns	r3, r3
 80082a6:	401a      	ands	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1a      	ldr	r2, [r3, #32]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f003 031f 	and.w	r3, r3, #31
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	fa01 f303 	lsl.w	r3, r1, r3
 80082bc:	431a      	orrs	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	621a      	str	r2, [r3, #32]
}
 80082c2:	bf00      	nop
 80082c4:	371c      	adds	r7, #28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
	...

080082d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d101      	bne.n	80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e4:	2302      	movs	r3, #2
 80082e6:	e074      	b.n	80083d2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2202      	movs	r2, #2
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a34      	ldr	r2, [pc, #208]	@ (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d009      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a33      	ldr	r2, [pc, #204]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d004      	beq.n	8008326 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a31      	ldr	r2, [pc, #196]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d108      	bne.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800832c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	4313      	orrs	r3, r2
 8008336:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800833e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008342:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	4313      	orrs	r3, r2
 800834c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a21      	ldr	r2, [pc, #132]	@ (80083e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d022      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008368:	d01d      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a1f      	ldr	r2, [pc, #124]	@ (80083ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d018      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a1d      	ldr	r2, [pc, #116]	@ (80083f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d013      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a1c      	ldr	r2, [pc, #112]	@ (80083f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00e      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a15      	ldr	r2, [pc, #84]	@ (80083e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d009      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	@ (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d004      	beq.n	80083a6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a11      	ldr	r2, [pc, #68]	@ (80083e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d10c      	bne.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68ba      	ldr	r2, [r7, #8]
 80083be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	40012c00 	.word	0x40012c00
 80083e4:	40013400 	.word	0x40013400
 80083e8:	40015000 	.word	0x40015000
 80083ec:	40000400 	.word	0x40000400
 80083f0:	40000800 	.word	0x40000800
 80083f4:	40000c00 	.word	0x40000c00
 80083f8:	40014000 	.word	0x40014000

080083fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008410:	2b01      	cmp	r3, #1
 8008412:	d101      	bne.n	8008418 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008414:	2302      	movs	r3, #2
 8008416:	e078      	b.n	800850a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	689b      	ldr	r3, [r3, #8]
 8008438:	4313      	orrs	r3, r2
 800843a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	4313      	orrs	r3, r2
 8008480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	041b      	lsls	r3, r3, #16
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	69db      	ldr	r3, [r3, #28]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008518 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d009      	beq.n	80084be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a1b      	ldr	r2, [pc, #108]	@ (800851c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d004      	beq.n	80084be <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a19      	ldr	r2, [pc, #100]	@ (8008520 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d11c      	bne.n	80084f8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	051b      	lsls	r3, r3, #20
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6a1b      	ldr	r3, [r3, #32]
 80084d8:	4313      	orrs	r3, r2
 80084da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084e6:	4313      	orrs	r3, r2
 80084e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	4313      	orrs	r3, r2
 80084f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
 8008516:	bf00      	nop
 8008518:	40012c00 	.word	0x40012c00
 800851c:	40013400 	.word	0x40013400
 8008520:	40015000 	.word	0x40015000

08008524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800854c:	b480      	push	{r7}
 800854e:	b083      	sub	sp, #12
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008554:	bf00      	nop
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008568:	bf00      	nop
 800856a:	370c      	adds	r7, #12
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e042      	b.n	8008648 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d106      	bne.n	80085da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f7f9 fd53 	bl	8002080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2224      	movs	r2, #36	@ 0x24
 80085de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f022 0201 	bic.w	r2, r2, #1
 80085f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d002      	beq.n	8008600 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fb24 	bl	8008c48 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f825 	bl	8008650 <UART_SetConfig>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d101      	bne.n	8008610 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e01b      	b.n	8008648 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800861e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	689a      	ldr	r2, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800862e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681a      	ldr	r2, [r3, #0]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f042 0201 	orr.w	r2, r2, #1
 800863e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fba3 	bl	8008d8c <UART_CheckIdleState>
 8008646:	4603      	mov	r3, r0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008654:	b08c      	sub	sp, #48	@ 0x30
 8008656:	af00      	add	r7, sp, #0
 8008658:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800865a:	2300      	movs	r3, #0
 800865c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	431a      	orrs	r2, r3
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	431a      	orrs	r2, r3
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	69db      	ldr	r3, [r3, #28]
 8008674:	4313      	orrs	r3, r2
 8008676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	4baa      	ldr	r3, [pc, #680]	@ (8008928 <UART_SetConfig+0x2d8>)
 8008680:	4013      	ands	r3, r2
 8008682:	697a      	ldr	r2, [r7, #20]
 8008684:	6812      	ldr	r2, [r2, #0]
 8008686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008688:	430b      	orrs	r3, r1
 800868a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	430a      	orrs	r2, r1
 80086a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a9f      	ldr	r2, [pc, #636]	@ (800892c <UART_SetConfig+0x2dc>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d004      	beq.n	80086bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086b8:	4313      	orrs	r3, r2
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80086c6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	6812      	ldr	r2, [r2, #0]
 80086ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086d0:	430b      	orrs	r3, r1
 80086d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086da:	f023 010f 	bic.w	r1, r3, #15
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	430a      	orrs	r2, r1
 80086e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a90      	ldr	r2, [pc, #576]	@ (8008930 <UART_SetConfig+0x2e0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d125      	bne.n	8008740 <UART_SetConfig+0xf0>
 80086f4:	4b8f      	ldr	r3, [pc, #572]	@ (8008934 <UART_SetConfig+0x2e4>)
 80086f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d81a      	bhi.n	8008738 <UART_SetConfig+0xe8>
 8008702:	a201      	add	r2, pc, #4	@ (adr r2, 8008708 <UART_SetConfig+0xb8>)
 8008704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008708:	08008719 	.word	0x08008719
 800870c:	08008729 	.word	0x08008729
 8008710:	08008721 	.word	0x08008721
 8008714:	08008731 	.word	0x08008731
 8008718:	2301      	movs	r3, #1
 800871a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800871e:	e116      	b.n	800894e <UART_SetConfig+0x2fe>
 8008720:	2302      	movs	r3, #2
 8008722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008726:	e112      	b.n	800894e <UART_SetConfig+0x2fe>
 8008728:	2304      	movs	r3, #4
 800872a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800872e:	e10e      	b.n	800894e <UART_SetConfig+0x2fe>
 8008730:	2308      	movs	r3, #8
 8008732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008736:	e10a      	b.n	800894e <UART_SetConfig+0x2fe>
 8008738:	2310      	movs	r3, #16
 800873a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800873e:	e106      	b.n	800894e <UART_SetConfig+0x2fe>
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a7c      	ldr	r2, [pc, #496]	@ (8008938 <UART_SetConfig+0x2e8>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d138      	bne.n	80087bc <UART_SetConfig+0x16c>
 800874a:	4b7a      	ldr	r3, [pc, #488]	@ (8008934 <UART_SetConfig+0x2e4>)
 800874c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008750:	f003 030c 	and.w	r3, r3, #12
 8008754:	2b0c      	cmp	r3, #12
 8008756:	d82d      	bhi.n	80087b4 <UART_SetConfig+0x164>
 8008758:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <UART_SetConfig+0x110>)
 800875a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800875e:	bf00      	nop
 8008760:	08008795 	.word	0x08008795
 8008764:	080087b5 	.word	0x080087b5
 8008768:	080087b5 	.word	0x080087b5
 800876c:	080087b5 	.word	0x080087b5
 8008770:	080087a5 	.word	0x080087a5
 8008774:	080087b5 	.word	0x080087b5
 8008778:	080087b5 	.word	0x080087b5
 800877c:	080087b5 	.word	0x080087b5
 8008780:	0800879d 	.word	0x0800879d
 8008784:	080087b5 	.word	0x080087b5
 8008788:	080087b5 	.word	0x080087b5
 800878c:	080087b5 	.word	0x080087b5
 8008790:	080087ad 	.word	0x080087ad
 8008794:	2300      	movs	r3, #0
 8008796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800879a:	e0d8      	b.n	800894e <UART_SetConfig+0x2fe>
 800879c:	2302      	movs	r3, #2
 800879e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087a2:	e0d4      	b.n	800894e <UART_SetConfig+0x2fe>
 80087a4:	2304      	movs	r3, #4
 80087a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087aa:	e0d0      	b.n	800894e <UART_SetConfig+0x2fe>
 80087ac:	2308      	movs	r3, #8
 80087ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087b2:	e0cc      	b.n	800894e <UART_SetConfig+0x2fe>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087ba:	e0c8      	b.n	800894e <UART_SetConfig+0x2fe>
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a5e      	ldr	r2, [pc, #376]	@ (800893c <UART_SetConfig+0x2ec>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d125      	bne.n	8008812 <UART_SetConfig+0x1c2>
 80087c6:	4b5b      	ldr	r3, [pc, #364]	@ (8008934 <UART_SetConfig+0x2e4>)
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80087d0:	2b30      	cmp	r3, #48	@ 0x30
 80087d2:	d016      	beq.n	8008802 <UART_SetConfig+0x1b2>
 80087d4:	2b30      	cmp	r3, #48	@ 0x30
 80087d6:	d818      	bhi.n	800880a <UART_SetConfig+0x1ba>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	d00a      	beq.n	80087f2 <UART_SetConfig+0x1a2>
 80087dc:	2b20      	cmp	r3, #32
 80087de:	d814      	bhi.n	800880a <UART_SetConfig+0x1ba>
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <UART_SetConfig+0x19a>
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d008      	beq.n	80087fa <UART_SetConfig+0x1aa>
 80087e8:	e00f      	b.n	800880a <UART_SetConfig+0x1ba>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f0:	e0ad      	b.n	800894e <UART_SetConfig+0x2fe>
 80087f2:	2302      	movs	r3, #2
 80087f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80087f8:	e0a9      	b.n	800894e <UART_SetConfig+0x2fe>
 80087fa:	2304      	movs	r3, #4
 80087fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008800:	e0a5      	b.n	800894e <UART_SetConfig+0x2fe>
 8008802:	2308      	movs	r3, #8
 8008804:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008808:	e0a1      	b.n	800894e <UART_SetConfig+0x2fe>
 800880a:	2310      	movs	r3, #16
 800880c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008810:	e09d      	b.n	800894e <UART_SetConfig+0x2fe>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a4a      	ldr	r2, [pc, #296]	@ (8008940 <UART_SetConfig+0x2f0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d125      	bne.n	8008868 <UART_SetConfig+0x218>
 800881c:	4b45      	ldr	r3, [pc, #276]	@ (8008934 <UART_SetConfig+0x2e4>)
 800881e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008822:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008826:	2bc0      	cmp	r3, #192	@ 0xc0
 8008828:	d016      	beq.n	8008858 <UART_SetConfig+0x208>
 800882a:	2bc0      	cmp	r3, #192	@ 0xc0
 800882c:	d818      	bhi.n	8008860 <UART_SetConfig+0x210>
 800882e:	2b80      	cmp	r3, #128	@ 0x80
 8008830:	d00a      	beq.n	8008848 <UART_SetConfig+0x1f8>
 8008832:	2b80      	cmp	r3, #128	@ 0x80
 8008834:	d814      	bhi.n	8008860 <UART_SetConfig+0x210>
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <UART_SetConfig+0x1f0>
 800883a:	2b40      	cmp	r3, #64	@ 0x40
 800883c:	d008      	beq.n	8008850 <UART_SetConfig+0x200>
 800883e:	e00f      	b.n	8008860 <UART_SetConfig+0x210>
 8008840:	2300      	movs	r3, #0
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008846:	e082      	b.n	800894e <UART_SetConfig+0x2fe>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800884e:	e07e      	b.n	800894e <UART_SetConfig+0x2fe>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008856:	e07a      	b.n	800894e <UART_SetConfig+0x2fe>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800885e:	e076      	b.n	800894e <UART_SetConfig+0x2fe>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008866:	e072      	b.n	800894e <UART_SetConfig+0x2fe>
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a35      	ldr	r2, [pc, #212]	@ (8008944 <UART_SetConfig+0x2f4>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d12a      	bne.n	80088c8 <UART_SetConfig+0x278>
 8008872:	4b30      	ldr	r3, [pc, #192]	@ (8008934 <UART_SetConfig+0x2e4>)
 8008874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800887c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008880:	d01a      	beq.n	80088b8 <UART_SetConfig+0x268>
 8008882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008886:	d81b      	bhi.n	80088c0 <UART_SetConfig+0x270>
 8008888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800888c:	d00c      	beq.n	80088a8 <UART_SetConfig+0x258>
 800888e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008892:	d815      	bhi.n	80088c0 <UART_SetConfig+0x270>
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <UART_SetConfig+0x250>
 8008898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800889c:	d008      	beq.n	80088b0 <UART_SetConfig+0x260>
 800889e:	e00f      	b.n	80088c0 <UART_SetConfig+0x270>
 80088a0:	2300      	movs	r3, #0
 80088a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088a6:	e052      	b.n	800894e <UART_SetConfig+0x2fe>
 80088a8:	2302      	movs	r3, #2
 80088aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088ae:	e04e      	b.n	800894e <UART_SetConfig+0x2fe>
 80088b0:	2304      	movs	r3, #4
 80088b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088b6:	e04a      	b.n	800894e <UART_SetConfig+0x2fe>
 80088b8:	2308      	movs	r3, #8
 80088ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088be:	e046      	b.n	800894e <UART_SetConfig+0x2fe>
 80088c0:	2310      	movs	r3, #16
 80088c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80088c6:	e042      	b.n	800894e <UART_SetConfig+0x2fe>
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a17      	ldr	r2, [pc, #92]	@ (800892c <UART_SetConfig+0x2dc>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d13a      	bne.n	8008948 <UART_SetConfig+0x2f8>
 80088d2:	4b18      	ldr	r3, [pc, #96]	@ (8008934 <UART_SetConfig+0x2e4>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80088dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e0:	d01a      	beq.n	8008918 <UART_SetConfig+0x2c8>
 80088e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80088e6:	d81b      	bhi.n	8008920 <UART_SetConfig+0x2d0>
 80088e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088ec:	d00c      	beq.n	8008908 <UART_SetConfig+0x2b8>
 80088ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f2:	d815      	bhi.n	8008920 <UART_SetConfig+0x2d0>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d003      	beq.n	8008900 <UART_SetConfig+0x2b0>
 80088f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80088fc:	d008      	beq.n	8008910 <UART_SetConfig+0x2c0>
 80088fe:	e00f      	b.n	8008920 <UART_SetConfig+0x2d0>
 8008900:	2300      	movs	r3, #0
 8008902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008906:	e022      	b.n	800894e <UART_SetConfig+0x2fe>
 8008908:	2302      	movs	r3, #2
 800890a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800890e:	e01e      	b.n	800894e <UART_SetConfig+0x2fe>
 8008910:	2304      	movs	r3, #4
 8008912:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008916:	e01a      	b.n	800894e <UART_SetConfig+0x2fe>
 8008918:	2308      	movs	r3, #8
 800891a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800891e:	e016      	b.n	800894e <UART_SetConfig+0x2fe>
 8008920:	2310      	movs	r3, #16
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008926:	e012      	b.n	800894e <UART_SetConfig+0x2fe>
 8008928:	cfff69f3 	.word	0xcfff69f3
 800892c:	40008000 	.word	0x40008000
 8008930:	40013800 	.word	0x40013800
 8008934:	40021000 	.word	0x40021000
 8008938:	40004400 	.word	0x40004400
 800893c:	40004800 	.word	0x40004800
 8008940:	40004c00 	.word	0x40004c00
 8008944:	40005000 	.word	0x40005000
 8008948:	2310      	movs	r3, #16
 800894a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4aae      	ldr	r2, [pc, #696]	@ (8008c0c <UART_SetConfig+0x5bc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	f040 8097 	bne.w	8008a88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800895a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800895e:	2b08      	cmp	r3, #8
 8008960:	d823      	bhi.n	80089aa <UART_SetConfig+0x35a>
 8008962:	a201      	add	r2, pc, #4	@ (adr r2, 8008968 <UART_SetConfig+0x318>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	0800898d 	.word	0x0800898d
 800896c:	080089ab 	.word	0x080089ab
 8008970:	08008995 	.word	0x08008995
 8008974:	080089ab 	.word	0x080089ab
 8008978:	0800899b 	.word	0x0800899b
 800897c:	080089ab 	.word	0x080089ab
 8008980:	080089ab 	.word	0x080089ab
 8008984:	080089ab 	.word	0x080089ab
 8008988:	080089a3 	.word	0x080089a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800898c:	f7fd fc5e 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8008990:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008992:	e010      	b.n	80089b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008994:	4b9e      	ldr	r3, [pc, #632]	@ (8008c10 <UART_SetConfig+0x5c0>)
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008998:	e00d      	b.n	80089b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800899a:	f7fd fbe9 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 800899e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80089a0:	e009      	b.n	80089b6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80089a8:	e005      	b.n	80089b6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80089aa:	2300      	movs	r3, #0
 80089ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80089b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8130 	beq.w	8008c1e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089c2:	4a94      	ldr	r2, [pc, #592]	@ (8008c14 <UART_SetConfig+0x5c4>)
 80089c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089c8:	461a      	mov	r2, r3
 80089ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	685a      	ldr	r2, [r3, #4]
 80089d6:	4613      	mov	r3, r2
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	4413      	add	r3, r2
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d305      	bcc.n	80089ee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d903      	bls.n	80089f6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80089f4:	e113      	b.n	8008c1e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f8:	2200      	movs	r2, #0
 80089fa:	60bb      	str	r3, [r7, #8]
 80089fc:	60fa      	str	r2, [r7, #12]
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a02:	4a84      	ldr	r2, [pc, #528]	@ (8008c14 <UART_SetConfig+0x5c4>)
 8008a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a18:	f7f7 fbfe 	bl	8000218 <__aeabi_uldivmod>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4610      	mov	r0, r2
 8008a22:	4619      	mov	r1, r3
 8008a24:	f04f 0200 	mov.w	r2, #0
 8008a28:	f04f 0300 	mov.w	r3, #0
 8008a2c:	020b      	lsls	r3, r1, #8
 8008a2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008a32:	0202      	lsls	r2, r0, #8
 8008a34:	6979      	ldr	r1, [r7, #20]
 8008a36:	6849      	ldr	r1, [r1, #4]
 8008a38:	0849      	lsrs	r1, r1, #1
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	4605      	mov	r5, r0
 8008a40:	eb12 0804 	adds.w	r8, r2, r4
 8008a44:	eb43 0905 	adc.w	r9, r3, r5
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	469a      	mov	sl, r3
 8008a50:	4693      	mov	fp, r2
 8008a52:	4652      	mov	r2, sl
 8008a54:	465b      	mov	r3, fp
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	f7f7 fbdd 	bl	8000218 <__aeabi_uldivmod>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	460b      	mov	r3, r1
 8008a62:	4613      	mov	r3, r2
 8008a64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a66:	6a3b      	ldr	r3, [r7, #32]
 8008a68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a6c:	d308      	bcc.n	8008a80 <UART_SetConfig+0x430>
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a74:	d204      	bcs.n	8008a80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	60da      	str	r2, [r3, #12]
 8008a7e:	e0ce      	b.n	8008c1e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008a86:	e0ca      	b.n	8008c1e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a90:	d166      	bne.n	8008b60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008a92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008a96:	2b08      	cmp	r3, #8
 8008a98:	d827      	bhi.n	8008aea <UART_SetConfig+0x49a>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <UART_SetConfig+0x450>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008ac5 	.word	0x08008ac5
 8008aa4:	08008acd 	.word	0x08008acd
 8008aa8:	08008ad5 	.word	0x08008ad5
 8008aac:	08008aeb 	.word	0x08008aeb
 8008ab0:	08008adb 	.word	0x08008adb
 8008ab4:	08008aeb 	.word	0x08008aeb
 8008ab8:	08008aeb 	.word	0x08008aeb
 8008abc:	08008aeb 	.word	0x08008aeb
 8008ac0:	08008ae3 	.word	0x08008ae3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac4:	f7fd fbc2 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8008ac8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008aca:	e014      	b.n	8008af6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008acc:	f7fd fbd4 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 8008ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ad2:	e010      	b.n	8008af6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad4:	4b4e      	ldr	r3, [pc, #312]	@ (8008c10 <UART_SetConfig+0x5c0>)
 8008ad6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ad8:	e00d      	b.n	8008af6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ada:	f7fd fb49 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8008ade:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ae0:	e009      	b.n	8008af6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ae2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ae8:	e005      	b.n	8008af6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008af4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	f000 8090 	beq.w	8008c1e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	4a44      	ldr	r2, [pc, #272]	@ (8008c14 <UART_SetConfig+0x5c4>)
 8008b04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b10:	005a      	lsls	r2, r3, #1
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	441a      	add	r2, r3
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b24:	6a3b      	ldr	r3, [r7, #32]
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	d916      	bls.n	8008b58 <UART_SetConfig+0x508>
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b30:	d212      	bcs.n	8008b58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	f023 030f 	bic.w	r3, r3, #15
 8008b3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	085b      	lsrs	r3, r3, #1
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	b29a      	uxth	r2, r3
 8008b48:	8bfb      	ldrh	r3, [r7, #30]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	8bfa      	ldrh	r2, [r7, #30]
 8008b54:	60da      	str	r2, [r3, #12]
 8008b56:	e062      	b.n	8008c1e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008b5e:	e05e      	b.n	8008c1e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d828      	bhi.n	8008bba <UART_SetConfig+0x56a>
 8008b68:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <UART_SetConfig+0x520>)
 8008b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6e:	bf00      	nop
 8008b70:	08008b95 	.word	0x08008b95
 8008b74:	08008b9d 	.word	0x08008b9d
 8008b78:	08008ba5 	.word	0x08008ba5
 8008b7c:	08008bbb 	.word	0x08008bbb
 8008b80:	08008bab 	.word	0x08008bab
 8008b84:	08008bbb 	.word	0x08008bbb
 8008b88:	08008bbb 	.word	0x08008bbb
 8008b8c:	08008bbb 	.word	0x08008bbb
 8008b90:	08008bb3 	.word	0x08008bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b94:	f7fd fb5a 	bl	800624c <HAL_RCC_GetPCLK1Freq>
 8008b98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008b9a:	e014      	b.n	8008bc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b9c:	f7fd fb6c 	bl	8006278 <HAL_RCC_GetPCLK2Freq>
 8008ba0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008ba2:	e010      	b.n	8008bc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8008c10 <UART_SetConfig+0x5c0>)
 8008ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008ba8:	e00d      	b.n	8008bc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008baa:	f7fd fae1 	bl	8006170 <HAL_RCC_GetSysClockFreq>
 8008bae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008bb0:	e009      	b.n	8008bc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008bb8:	e005      	b.n	8008bc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008bc4:	bf00      	nop
    }

    if (pclk != 0U)
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d028      	beq.n	8008c1e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd0:	4a10      	ldr	r2, [pc, #64]	@ (8008c14 <UART_SetConfig+0x5c4>)
 8008bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	fbb3 f2f2 	udiv	r2, r3, r2
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	085b      	lsrs	r3, r3, #1
 8008be4:	441a      	add	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	685b      	ldr	r3, [r3, #4]
 8008bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008bf0:	6a3b      	ldr	r3, [r7, #32]
 8008bf2:	2b0f      	cmp	r3, #15
 8008bf4:	d910      	bls.n	8008c18 <UART_SetConfig+0x5c8>
 8008bf6:	6a3b      	ldr	r3, [r7, #32]
 8008bf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bfc:	d20c      	bcs.n	8008c18 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008bfe:	6a3b      	ldr	r3, [r7, #32]
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	60da      	str	r2, [r3, #12]
 8008c08:	e009      	b.n	8008c1e <UART_SetConfig+0x5ce>
 8008c0a:	bf00      	nop
 8008c0c:	40008000 	.word	0x40008000
 8008c10:	00f42400 	.word	0x00f42400
 8008c14:	08009314 	.word	0x08009314
      }
      else
      {
        ret = HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2200      	movs	r2, #0
 8008c32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	2200      	movs	r2, #0
 8008c38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008c3a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3730      	adds	r7, #48	@ 0x30
 8008c42:	46bd      	mov	sp, r7
 8008c44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	f003 0301 	and.w	r3, r3, #1
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d00a      	beq.n	8008c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	430a      	orrs	r2, r1
 8008c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00a      	beq.n	8008cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00a      	beq.n	8008cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d00a      	beq.n	8008cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cfe:	f003 0320 	and.w	r3, r3, #32
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d00a      	beq.n	8008d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d01a      	beq.n	8008d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	430a      	orrs	r2, r1
 8008d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d46:	d10a      	bne.n	8008d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d00a      	beq.n	8008d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	430a      	orrs	r2, r1
 8008d7e:	605a      	str	r2, [r3, #4]
  }
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b098      	sub	sp, #96	@ 0x60
 8008d90:	af02      	add	r7, sp, #8
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d9c:	f7f9 fa56 	bl	800224c <HAL_GetTick>
 8008da0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0308 	and.w	r3, r3, #8
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	d12f      	bne.n	8008e10 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008db0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008db8:	2200      	movs	r2, #0
 8008dba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f88e 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d022      	beq.n	8008e10 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd2:	e853 3f00 	ldrex	r3, [r3]
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008dde:	653b      	str	r3, [r7, #80]	@ 0x50
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	461a      	mov	r2, r3
 8008de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008de8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008dee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008df0:	e841 2300 	strex	r3, r2, [r1]
 8008df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1e6      	bne.n	8008dca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2220      	movs	r2, #32
 8008e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0c:	2303      	movs	r3, #3
 8008e0e:	e063      	b.n	8008ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0304 	and.w	r3, r3, #4
 8008e1a:	2b04      	cmp	r3, #4
 8008e1c:	d149      	bne.n	8008eb2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e26:	2200      	movs	r2, #0
 8008e28:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 f857 	bl	8008ee0 <UART_WaitOnFlagUntilTimeout>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d03c      	beq.n	8008eb2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	623b      	str	r3, [r7, #32]
   return(result);
 8008e46:	6a3b      	ldr	r3, [r7, #32]
 8008e48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e58:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	3308      	adds	r3, #8
 8008e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	e853 3f00 	ldrex	r3, [r3]
 8008e78:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f023 0301 	bic.w	r3, r3, #1
 8008e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	3308      	adds	r3, #8
 8008e88:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e8a:	61fa      	str	r2, [r7, #28]
 8008e8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8e:	69b9      	ldr	r1, [r7, #24]
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	e841 2300 	strex	r3, r2, [r1]
 8008e96:	617b      	str	r3, [r7, #20]
   return(result);
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1e5      	bne.n	8008e6a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e012      	b.n	8008ed8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3758      	adds	r7, #88	@ 0x58
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	603b      	str	r3, [r7, #0]
 8008eec:	4613      	mov	r3, r2
 8008eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ef0:	e04f      	b.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ef8:	d04b      	beq.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008efa:	f7f9 f9a7 	bl	800224c <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	69ba      	ldr	r2, [r7, #24]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d302      	bcc.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e04e      	b.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0304 	and.w	r3, r3, #4
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d037      	beq.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b80      	cmp	r3, #128	@ 0x80
 8008f26:	d034      	beq.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b40      	cmp	r3, #64	@ 0x40
 8008f2c:	d031      	beq.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b08      	cmp	r3, #8
 8008f3a:	d110      	bne.n	8008f5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2208      	movs	r2, #8
 8008f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f838 	bl	8008fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2200      	movs	r2, #0
 8008f56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e029      	b.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f6c:	d111      	bne.n	8008f92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f000 f81e 	bl	8008fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2220      	movs	r2, #32
 8008f82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e00f      	b.n	8008fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	69da      	ldr	r2, [r3, #28]
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	4013      	ands	r3, r2
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	bf0c      	ite	eq
 8008fa2:	2301      	moveq	r3, #1
 8008fa4:	2300      	movne	r3, #0
 8008fa6:	b2db      	uxtb	r3, r3
 8008fa8:	461a      	mov	r2, r3
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d0a0      	beq.n	8008ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fba:	b480      	push	{r7}
 8008fbc:	b095      	sub	sp, #84	@ 0x54
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fca:	e853 3f00 	ldrex	r3, [r3]
 8008fce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fe8:	e841 2300 	strex	r3, r2, [r1]
 8008fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1e6      	bne.n	8008fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	3308      	adds	r3, #8
 8008ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	e853 3f00 	ldrex	r3, [r3]
 8009002:	61fb      	str	r3, [r7, #28]
   return(result);
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800900a:	f023 0301 	bic.w	r3, r3, #1
 800900e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009018:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800901a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800901e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009020:	e841 2300 	strex	r3, r2, [r1]
 8009024:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009028:	2b00      	cmp	r3, #0
 800902a:	d1e3      	bne.n	8008ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009030:	2b01      	cmp	r3, #1
 8009032:	d118      	bne.n	8009066 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	60bb      	str	r3, [r7, #8]
   return(result);
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f023 0310 	bic.w	r3, r3, #16
 8009048:	647b      	str	r3, [r7, #68]	@ 0x44
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009052:	61bb      	str	r3, [r7, #24]
 8009054:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009056:	6979      	ldr	r1, [r7, #20]
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	e841 2300 	strex	r3, r2, [r1]
 800905e:	613b      	str	r3, [r7, #16]
   return(result);
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d1e6      	bne.n	8009034 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2220      	movs	r2, #32
 800906a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800907a:	bf00      	nop
 800907c:	3754      	adds	r7, #84	@ 0x54
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009086:	b480      	push	{r7}
 8009088:	b085      	sub	sp, #20
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009094:	2b01      	cmp	r3, #1
 8009096:	d101      	bne.n	800909c <HAL_UARTEx_DisableFifoMode+0x16>
 8009098:	2302      	movs	r3, #2
 800909a:	e027      	b.n	80090ec <HAL_UARTEx_DisableFifoMode+0x66>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2201      	movs	r2, #1
 80090a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2224      	movs	r2, #36	@ 0x24
 80090a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80090ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	68fa      	ldr	r2, [r7, #12]
 80090d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2220      	movs	r2, #32
 80090de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3714      	adds	r7, #20
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009108:	2b01      	cmp	r3, #1
 800910a:	d101      	bne.n	8009110 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800910c:	2302      	movs	r3, #2
 800910e:	e02d      	b.n	800916c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2224      	movs	r2, #36	@ 0x24
 800911c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	430a      	orrs	r2, r1
 800914a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f84f 	bl	80091f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3710      	adds	r7, #16
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009188:	2302      	movs	r3, #2
 800918a:	e02d      	b.n	80091e8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2224      	movs	r2, #36	@ 0x24
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f022 0201 	bic.w	r2, r2, #1
 80091b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	430a      	orrs	r2, r1
 80091c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f811 	bl	80091f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2220      	movs	r2, #32
 80091da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d108      	bne.n	8009212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009210:	e031      	b.n	8009276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009212:	2308      	movs	r3, #8
 8009214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009216:	2308      	movs	r3, #8
 8009218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	0e5b      	lsrs	r3, r3, #25
 8009222:	b2db      	uxtb	r3, r3
 8009224:	f003 0307 	and.w	r3, r3, #7
 8009228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	0f5b      	lsrs	r3, r3, #29
 8009232:	b2db      	uxtb	r3, r3
 8009234:	f003 0307 	and.w	r3, r3, #7
 8009238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800923a:	7bbb      	ldrb	r3, [r7, #14]
 800923c:	7b3a      	ldrb	r2, [r7, #12]
 800923e:	4911      	ldr	r1, [pc, #68]	@ (8009284 <UARTEx_SetNbDataToProcess+0x94>)
 8009240:	5c8a      	ldrb	r2, [r1, r2]
 8009242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009246:	7b3a      	ldrb	r2, [r7, #12]
 8009248:	490f      	ldr	r1, [pc, #60]	@ (8009288 <UARTEx_SetNbDataToProcess+0x98>)
 800924a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800924c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009250:	b29a      	uxth	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	7b7a      	ldrb	r2, [r7, #13]
 800925c:	4909      	ldr	r1, [pc, #36]	@ (8009284 <UARTEx_SetNbDataToProcess+0x94>)
 800925e:	5c8a      	ldrb	r2, [r1, r2]
 8009260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009264:	7b7a      	ldrb	r2, [r7, #13]
 8009266:	4908      	ldr	r1, [pc, #32]	@ (8009288 <UARTEx_SetNbDataToProcess+0x98>)
 8009268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800926a:	fb93 f3f2 	sdiv	r3, r3, r2
 800926e:	b29a      	uxth	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009276:	bf00      	nop
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	0800932c 	.word	0x0800932c
 8009288:	08009334 	.word	0x08009334

0800928c <memset>:
 800928c:	4402      	add	r2, r0
 800928e:	4603      	mov	r3, r0
 8009290:	4293      	cmp	r3, r2
 8009292:	d100      	bne.n	8009296 <memset+0xa>
 8009294:	4770      	bx	lr
 8009296:	f803 1b01 	strb.w	r1, [r3], #1
 800929a:	e7f9      	b.n	8009290 <memset+0x4>

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	@ (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	@ (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	@ (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	@ (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 f818 	bl	80092e4 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	08009344 	.word	0x08009344
 80092d8:	08009344 	.word	0x08009344
 80092dc:	08009344 	.word	0x08009344
 80092e0:	08009348 	.word	0x08009348

080092e4 <_init>:
 80092e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092e6:	bf00      	nop
 80092e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ea:	bc08      	pop	{r3}
 80092ec:	469e      	mov	lr, r3
 80092ee:	4770      	bx	lr

080092f0 <_fini>:
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	bf00      	nop
 80092f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f6:	bc08      	pop	{r3}
 80092f8:	469e      	mov	lr, r3
 80092fa:	4770      	bx	lr
