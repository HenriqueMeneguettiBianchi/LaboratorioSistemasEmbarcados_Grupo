
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007ae0  08007ae0  00008ae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b34  08007b34  00009020  2**0
                  CONTENTS
  4 .ARM          00000008  08007b34  08007b34  00008b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b3c  08007b3c  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b3c  08007b3c  00008b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b40  08007b40  00008b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08007b44  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000708  20000020  08007b64  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08007b64  00009728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2a2  00000000  00000000  00009050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8a  00000000  00000000  000272f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001938  00000000  00000000  0002b280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001394  00000000  00000000  0002cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029d32  00000000  00000000  0002df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d3a  00000000  00000000  00057c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011255e  00000000  00000000  000799b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bf16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b3c  00000000  00000000  0018bf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00192a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007ac8 	.word	0x08007ac8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08007ac8 	.word	0x08007ac8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_uldivmod>:
 8000590:	b953      	cbnz	r3, 80005a8 <__aeabi_uldivmod+0x18>
 8000592:	b94a      	cbnz	r2, 80005a8 <__aeabi_uldivmod+0x18>
 8000594:	2900      	cmp	r1, #0
 8000596:	bf08      	it	eq
 8000598:	2800      	cmpeq	r0, #0
 800059a:	bf1c      	itt	ne
 800059c:	f04f 31ff 	movne.w	r1, #4294967295
 80005a0:	f04f 30ff 	movne.w	r0, #4294967295
 80005a4:	f000 b96a 	b.w	800087c <__aeabi_idiv0>
 80005a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005b0:	f000 f806 	bl	80005c0 <__udivmoddi4>
 80005b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005bc:	b004      	add	sp, #16
 80005be:	4770      	bx	lr

080005c0 <__udivmoddi4>:
 80005c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005c4:	9d08      	ldr	r5, [sp, #32]
 80005c6:	460c      	mov	r4, r1
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d14e      	bne.n	800066a <__udivmoddi4+0xaa>
 80005cc:	4694      	mov	ip, r2
 80005ce:	458c      	cmp	ip, r1
 80005d0:	4686      	mov	lr, r0
 80005d2:	fab2 f282 	clz	r2, r2
 80005d6:	d962      	bls.n	800069e <__udivmoddi4+0xde>
 80005d8:	b14a      	cbz	r2, 80005ee <__udivmoddi4+0x2e>
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	4091      	lsls	r1, r2
 80005e0:	fa20 f303 	lsr.w	r3, r0, r3
 80005e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e8:	4319      	orrs	r1, r3
 80005ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80005ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f2:	fa1f f68c 	uxth.w	r6, ip
 80005f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80005fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80005fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000602:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000606:	fb04 f106 	mul.w	r1, r4, r6
 800060a:	4299      	cmp	r1, r3
 800060c:	d90a      	bls.n	8000624 <__udivmoddi4+0x64>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f104 30ff 	add.w	r0, r4, #4294967295
 8000616:	f080 8112 	bcs.w	800083e <__udivmoddi4+0x27e>
 800061a:	4299      	cmp	r1, r3
 800061c:	f240 810f 	bls.w	800083e <__udivmoddi4+0x27e>
 8000620:	3c02      	subs	r4, #2
 8000622:	4463      	add	r3, ip
 8000624:	1a59      	subs	r1, r3, r1
 8000626:	fa1f f38e 	uxth.w	r3, lr
 800062a:	fbb1 f0f7 	udiv	r0, r1, r7
 800062e:	fb07 1110 	mls	r1, r7, r0, r1
 8000632:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000636:	fb00 f606 	mul.w	r6, r0, r6
 800063a:	429e      	cmp	r6, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x94>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 31ff 	add.w	r1, r0, #4294967295
 8000646:	f080 80fc 	bcs.w	8000842 <__udivmoddi4+0x282>
 800064a:	429e      	cmp	r6, r3
 800064c:	f240 80f9 	bls.w	8000842 <__udivmoddi4+0x282>
 8000650:	4463      	add	r3, ip
 8000652:	3802      	subs	r0, #2
 8000654:	1b9b      	subs	r3, r3, r6
 8000656:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800065a:	2100      	movs	r1, #0
 800065c:	b11d      	cbz	r5, 8000666 <__udivmoddi4+0xa6>
 800065e:	40d3      	lsrs	r3, r2
 8000660:	2200      	movs	r2, #0
 8000662:	e9c5 3200 	strd	r3, r2, [r5]
 8000666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800066a:	428b      	cmp	r3, r1
 800066c:	d905      	bls.n	800067a <__udivmoddi4+0xba>
 800066e:	b10d      	cbz	r5, 8000674 <__udivmoddi4+0xb4>
 8000670:	e9c5 0100 	strd	r0, r1, [r5]
 8000674:	2100      	movs	r1, #0
 8000676:	4608      	mov	r0, r1
 8000678:	e7f5      	b.n	8000666 <__udivmoddi4+0xa6>
 800067a:	fab3 f183 	clz	r1, r3
 800067e:	2900      	cmp	r1, #0
 8000680:	d146      	bne.n	8000710 <__udivmoddi4+0x150>
 8000682:	42a3      	cmp	r3, r4
 8000684:	d302      	bcc.n	800068c <__udivmoddi4+0xcc>
 8000686:	4290      	cmp	r0, r2
 8000688:	f0c0 80f0 	bcc.w	800086c <__udivmoddi4+0x2ac>
 800068c:	1a86      	subs	r6, r0, r2
 800068e:	eb64 0303 	sbc.w	r3, r4, r3
 8000692:	2001      	movs	r0, #1
 8000694:	2d00      	cmp	r5, #0
 8000696:	d0e6      	beq.n	8000666 <__udivmoddi4+0xa6>
 8000698:	e9c5 6300 	strd	r6, r3, [r5]
 800069c:	e7e3      	b.n	8000666 <__udivmoddi4+0xa6>
 800069e:	2a00      	cmp	r2, #0
 80006a0:	f040 8090 	bne.w	80007c4 <__udivmoddi4+0x204>
 80006a4:	eba1 040c 	sub.w	r4, r1, ip
 80006a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006ac:	fa1f f78c 	uxth.w	r7, ip
 80006b0:	2101      	movs	r1, #1
 80006b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80006b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80006ba:	fb08 4416 	mls	r4, r8, r6, r4
 80006be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006c2:	fb07 f006 	mul.w	r0, r7, r6
 80006c6:	4298      	cmp	r0, r3
 80006c8:	d908      	bls.n	80006dc <__udivmoddi4+0x11c>
 80006ca:	eb1c 0303 	adds.w	r3, ip, r3
 80006ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80006d2:	d202      	bcs.n	80006da <__udivmoddi4+0x11a>
 80006d4:	4298      	cmp	r0, r3
 80006d6:	f200 80cd 	bhi.w	8000874 <__udivmoddi4+0x2b4>
 80006da:	4626      	mov	r6, r4
 80006dc:	1a1c      	subs	r4, r3, r0
 80006de:	fa1f f38e 	uxth.w	r3, lr
 80006e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80006e6:	fb08 4410 	mls	r4, r8, r0, r4
 80006ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80006ee:	fb00 f707 	mul.w	r7, r0, r7
 80006f2:	429f      	cmp	r7, r3
 80006f4:	d908      	bls.n	8000708 <__udivmoddi4+0x148>
 80006f6:	eb1c 0303 	adds.w	r3, ip, r3
 80006fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80006fe:	d202      	bcs.n	8000706 <__udivmoddi4+0x146>
 8000700:	429f      	cmp	r7, r3
 8000702:	f200 80b0 	bhi.w	8000866 <__udivmoddi4+0x2a6>
 8000706:	4620      	mov	r0, r4
 8000708:	1bdb      	subs	r3, r3, r7
 800070a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800070e:	e7a5      	b.n	800065c <__udivmoddi4+0x9c>
 8000710:	f1c1 0620 	rsb	r6, r1, #32
 8000714:	408b      	lsls	r3, r1
 8000716:	fa22 f706 	lsr.w	r7, r2, r6
 800071a:	431f      	orrs	r7, r3
 800071c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000720:	fa04 f301 	lsl.w	r3, r4, r1
 8000724:	ea43 030c 	orr.w	r3, r3, ip
 8000728:	40f4      	lsrs	r4, r6
 800072a:	fa00 f801 	lsl.w	r8, r0, r1
 800072e:	0c38      	lsrs	r0, r7, #16
 8000730:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000734:	fbb4 fef0 	udiv	lr, r4, r0
 8000738:	fa1f fc87 	uxth.w	ip, r7
 800073c:	fb00 441e 	mls	r4, r0, lr, r4
 8000740:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000744:	fb0e f90c 	mul.w	r9, lr, ip
 8000748:	45a1      	cmp	r9, r4
 800074a:	fa02 f201 	lsl.w	r2, r2, r1
 800074e:	d90a      	bls.n	8000766 <__udivmoddi4+0x1a6>
 8000750:	193c      	adds	r4, r7, r4
 8000752:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000756:	f080 8084 	bcs.w	8000862 <__udivmoddi4+0x2a2>
 800075a:	45a1      	cmp	r9, r4
 800075c:	f240 8081 	bls.w	8000862 <__udivmoddi4+0x2a2>
 8000760:	f1ae 0e02 	sub.w	lr, lr, #2
 8000764:	443c      	add	r4, r7
 8000766:	eba4 0409 	sub.w	r4, r4, r9
 800076a:	fa1f f983 	uxth.w	r9, r3
 800076e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000772:	fb00 4413 	mls	r4, r0, r3, r4
 8000776:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800077a:	fb03 fc0c 	mul.w	ip, r3, ip
 800077e:	45a4      	cmp	ip, r4
 8000780:	d907      	bls.n	8000792 <__udivmoddi4+0x1d2>
 8000782:	193c      	adds	r4, r7, r4
 8000784:	f103 30ff 	add.w	r0, r3, #4294967295
 8000788:	d267      	bcs.n	800085a <__udivmoddi4+0x29a>
 800078a:	45a4      	cmp	ip, r4
 800078c:	d965      	bls.n	800085a <__udivmoddi4+0x29a>
 800078e:	3b02      	subs	r3, #2
 8000790:	443c      	add	r4, r7
 8000792:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000796:	fba0 9302 	umull	r9, r3, r0, r2
 800079a:	eba4 040c 	sub.w	r4, r4, ip
 800079e:	429c      	cmp	r4, r3
 80007a0:	46ce      	mov	lr, r9
 80007a2:	469c      	mov	ip, r3
 80007a4:	d351      	bcc.n	800084a <__udivmoddi4+0x28a>
 80007a6:	d04e      	beq.n	8000846 <__udivmoddi4+0x286>
 80007a8:	b155      	cbz	r5, 80007c0 <__udivmoddi4+0x200>
 80007aa:	ebb8 030e 	subs.w	r3, r8, lr
 80007ae:	eb64 040c 	sbc.w	r4, r4, ip
 80007b2:	fa04 f606 	lsl.w	r6, r4, r6
 80007b6:	40cb      	lsrs	r3, r1
 80007b8:	431e      	orrs	r6, r3
 80007ba:	40cc      	lsrs	r4, r1
 80007bc:	e9c5 6400 	strd	r6, r4, [r5]
 80007c0:	2100      	movs	r1, #0
 80007c2:	e750      	b.n	8000666 <__udivmoddi4+0xa6>
 80007c4:	f1c2 0320 	rsb	r3, r2, #32
 80007c8:	fa20 f103 	lsr.w	r1, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	fa24 f303 	lsr.w	r3, r4, r3
 80007d4:	4094      	lsls	r4, r2
 80007d6:	430c      	orrs	r4, r1
 80007d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80007e0:	fa1f f78c 	uxth.w	r7, ip
 80007e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007e8:	fb08 3110 	mls	r1, r8, r0, r3
 80007ec:	0c23      	lsrs	r3, r4, #16
 80007ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f2:	fb00 f107 	mul.w	r1, r0, r7
 80007f6:	4299      	cmp	r1, r3
 80007f8:	d908      	bls.n	800080c <__udivmoddi4+0x24c>
 80007fa:	eb1c 0303 	adds.w	r3, ip, r3
 80007fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000802:	d22c      	bcs.n	800085e <__udivmoddi4+0x29e>
 8000804:	4299      	cmp	r1, r3
 8000806:	d92a      	bls.n	800085e <__udivmoddi4+0x29e>
 8000808:	3802      	subs	r0, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a5b      	subs	r3, r3, r1
 800080e:	b2a4      	uxth	r4, r4
 8000810:	fbb3 f1f8 	udiv	r1, r3, r8
 8000814:	fb08 3311 	mls	r3, r8, r1, r3
 8000818:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800081c:	fb01 f307 	mul.w	r3, r1, r7
 8000820:	42a3      	cmp	r3, r4
 8000822:	d908      	bls.n	8000836 <__udivmoddi4+0x276>
 8000824:	eb1c 0404 	adds.w	r4, ip, r4
 8000828:	f101 36ff 	add.w	r6, r1, #4294967295
 800082c:	d213      	bcs.n	8000856 <__udivmoddi4+0x296>
 800082e:	42a3      	cmp	r3, r4
 8000830:	d911      	bls.n	8000856 <__udivmoddi4+0x296>
 8000832:	3902      	subs	r1, #2
 8000834:	4464      	add	r4, ip
 8000836:	1ae4      	subs	r4, r4, r3
 8000838:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800083c:	e739      	b.n	80006b2 <__udivmoddi4+0xf2>
 800083e:	4604      	mov	r4, r0
 8000840:	e6f0      	b.n	8000624 <__udivmoddi4+0x64>
 8000842:	4608      	mov	r0, r1
 8000844:	e706      	b.n	8000654 <__udivmoddi4+0x94>
 8000846:	45c8      	cmp	r8, r9
 8000848:	d2ae      	bcs.n	80007a8 <__udivmoddi4+0x1e8>
 800084a:	ebb9 0e02 	subs.w	lr, r9, r2
 800084e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000852:	3801      	subs	r0, #1
 8000854:	e7a8      	b.n	80007a8 <__udivmoddi4+0x1e8>
 8000856:	4631      	mov	r1, r6
 8000858:	e7ed      	b.n	8000836 <__udivmoddi4+0x276>
 800085a:	4603      	mov	r3, r0
 800085c:	e799      	b.n	8000792 <__udivmoddi4+0x1d2>
 800085e:	4630      	mov	r0, r6
 8000860:	e7d4      	b.n	800080c <__udivmoddi4+0x24c>
 8000862:	46d6      	mov	lr, sl
 8000864:	e77f      	b.n	8000766 <__udivmoddi4+0x1a6>
 8000866:	4463      	add	r3, ip
 8000868:	3802      	subs	r0, #2
 800086a:	e74d      	b.n	8000708 <__udivmoddi4+0x148>
 800086c:	4606      	mov	r6, r0
 800086e:	4623      	mov	r3, r4
 8000870:	4608      	mov	r0, r1
 8000872:	e70f      	b.n	8000694 <__udivmoddi4+0xd4>
 8000874:	3e02      	subs	r6, #2
 8000876:	4463      	add	r3, ip
 8000878:	e730      	b.n	80006dc <__udivmoddi4+0x11c>
 800087a:	bf00      	nop

0800087c <__aeabi_idiv0>:
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop

08000880 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08c      	sub	sp, #48	@ 0x30
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	2220      	movs	r2, #32
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f007 f8e9 	bl	8007a70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089e:	4b38      	ldr	r3, [pc, #224]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008a0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008a6:	4b36      	ldr	r3, [pc, #216]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ae:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b4:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008c8:	2204      	movs	r2, #4
 80008ca:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80008d8:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008da:	2201      	movs	r2, #1
 80008dc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008de:	4b28      	ldr	r3, [pc, #160]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ec:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_ADC1_Init+0x100>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000900:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_ADC1_Init+0x100>)
 8000902:	2201      	movs	r2, #1
 8000904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000908:	4b1d      	ldr	r3, [pc, #116]	@ (8000980 <MX_ADC1_Init+0x100>)
 800090a:	220c      	movs	r2, #12
 800090c:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800090e:	4b1c      	ldr	r3, [pc, #112]	@ (8000980 <MX_ADC1_Init+0x100>)
 8000910:	2280      	movs	r2, #128	@ 0x80
 8000912:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000914:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_ADC1_Init+0x100>)
 8000916:	2200      	movs	r2, #0
 8000918:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800091a:	4b19      	ldr	r3, [pc, #100]	@ (8000980 <MX_ADC1_Init+0x100>)
 800091c:	2201      	movs	r2, #1
 800091e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000920:	4817      	ldr	r0, [pc, #92]	@ (8000980 <MX_ADC1_Init+0x100>)
 8000922:	f002 f8f3 	bl	8002b0c <HAL_ADC_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800092c:	f001 f88f 	bl	8001a4e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000938:	4619      	mov	r1, r3
 800093a:	4811      	ldr	r0, [pc, #68]	@ (8000980 <MX_ADC1_Init+0x100>)
 800093c:	f002 ff08 	bl	8003750 <HAL_ADCEx_MultiModeConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000946:	f001 f882 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800094a:	4b0e      	ldr	r3, [pc, #56]	@ (8000984 <MX_ADC1_Init+0x104>)
 800094c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800094e:	2306      	movs	r3, #6
 8000950:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000956:	237f      	movs	r3, #127	@ 0x7f
 8000958:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800095a:	2304      	movs	r3, #4
 800095c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	@ (8000980 <MX_ADC1_Init+0x100>)
 8000968:	f002 fa8c 	bl	8002e84 <HAL_ADC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 8000972:	f001 f86c 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3730      	adds	r7, #48	@ 0x30
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	2000003c 	.word	0x2000003c
 8000984:	04300002 	.word	0x04300002

08000988 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098e:	463b      	mov	r3, r7
 8000990:	2220      	movs	r2, #32
 8000992:	2100      	movs	r1, #0
 8000994:	4618      	mov	r0, r3
 8000996:	f007 f86b 	bl	8007a70 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800099a:	4b31      	ldr	r3, [pc, #196]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 800099c:	4a31      	ldr	r2, [pc, #196]	@ (8000a64 <MX_ADC2_Init+0xdc>)
 800099e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80009a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80009a8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009ba:	4b29      	ldr	r3, [pc, #164]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c0:	4b27      	ldr	r3, [pc, #156]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009c2:	2204      	movs	r2, #4
 80009c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009c6:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80009cc:	4b24      	ldr	r3, [pc, #144]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80009d2:	4b23      	ldr	r3, [pc, #140]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009d8:	4b21      	ldr	r3, [pc, #132]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80009ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80009fa:	4b19      	ldr	r3, [pc, #100]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a04:	220c      	movs	r2, #12
 8000a06:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a0a:	2280      	movs	r2, #128	@ 0x80
 8000a0c:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a1a:	4811      	ldr	r0, [pc, #68]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a1c:	f002 f876 	bl	8002b0c <HAL_ADC_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 8000a26:	f001 f812 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_ADC2_Init+0xe0>)
 8000a2c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a36:	237f      	movs	r3, #127	@ 0x7f
 8000a38:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a42:	463b      	mov	r3, r7
 8000a44:	4619      	mov	r1, r3
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <MX_ADC2_Init+0xd8>)
 8000a48:	f002 fa1c 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 8000a52:	f000 fffc 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200000a8 	.word	0x200000a8
 8000a64:	50000100 	.word	0x50000100
 8000a68:	0c900008 	.word	0x0c900008

08000a6c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2220      	movs	r2, #32
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f006 fff3 	bl	8007a70 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a8a:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000a8c:	4a37      	ldr	r2, [pc, #220]	@ (8000b6c <MX_ADC3_Init+0x100>)
 8000a8e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000a90:	4b35      	ldr	r3, [pc, #212]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000a92:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000a96:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a98:	4b33      	ldr	r3, [pc, #204]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000aa4:	4b30      	ldr	r3, [pc, #192]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ab0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ab2:	2204      	movs	r2, #4
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000ab6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000abc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000abe:	2201      	movs	r2, #1
 8000ac0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ac8:	4b27      	ldr	r3, [pc, #156]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad6:	4b24      	ldr	r3, [pc, #144]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000aea:	4b1f      	ldr	r3, [pc, #124]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000af4:	220c      	movs	r2, #12
 8000af6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000b04:	4b18      	ldr	r3, [pc, #96]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b0a:	4817      	ldr	r0, [pc, #92]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000b0c:	f001 fffe 	bl	8002b0c <HAL_ADC_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000b16:	f000 ff9a 	bl	8001a4e <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4810      	ldr	r0, [pc, #64]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000b26:	f002 fe13 	bl	8003750 <HAL_ADCEx_MultiModeConfigChannel>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000b30:	f000 ff8d 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <MX_ADC3_Init+0x104>)
 8000b36:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b40:	237f      	movs	r3, #127	@ 0x7f
 8000b42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b44:	2304      	movs	r3, #4
 8000b46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	@ (8000b68 <MX_ADC3_Init+0xfc>)
 8000b52:	f002 f997 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 8000b5c:	f000 ff77 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3730      	adds	r7, #48	@ 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000114 	.word	0x20000114
 8000b6c:	50000400 	.word	0x50000400
 8000b70:	14f00020 	.word	0x14f00020

08000b74 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f006 ff75 	bl	8007a70 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000b86:	4b31      	ldr	r3, [pc, #196]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000b88:	4a31      	ldr	r2, [pc, #196]	@ (8000c50 <MX_ADC4_Init+0xdc>)
 8000b8a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000b8e:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000b92:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000b94:	4b2d      	ldr	r3, [pc, #180]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ba6:	4b29      	ldr	r3, [pc, #164]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bac:	4b27      	ldr	r3, [pc, #156]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bae:	2204      	movs	r2, #4
 8000bb0:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000bb2:	4b26      	ldr	r3, [pc, #152]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000bc4:	4b21      	ldr	r3, [pc, #132]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000bee:	4b17      	ldr	r3, [pc, #92]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bf0:	220c      	movs	r2, #12
 8000bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000bf4:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bf6:	2280      	movs	r2, #128	@ 0x80
 8000bf8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000bfa:	4b14      	ldr	r3, [pc, #80]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000c06:	4811      	ldr	r0, [pc, #68]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000c08:	f001 ff80 	bl	8002b0c <HAL_ADC_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 8000c12:	f000 ff1c 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <MX_ADC4_Init+0xe0>)
 8000c18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c22:	237f      	movs	r3, #127	@ 0x7f
 8000c24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c26:	2304      	movs	r3, #4
 8000c28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000c2e:	463b      	mov	r3, r7
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <MX_ADC4_Init+0xd8>)
 8000c34:	f002 f926 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 8000c3e:	f000 ff06 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	3720      	adds	r7, #32
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000180 	.word	0x20000180
 8000c50:	50000500 	.word	0x50000500
 8000c54:	14f00020 	.word	0x14f00020

08000c58 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2220      	movs	r2, #32
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f006 ff03 	bl	8007a70 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8000c6a:	4b31      	ldr	r3, [pc, #196]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c6c:	4a31      	ldr	r2, [pc, #196]	@ (8000d34 <MX_ADC5_Init+0xdc>)
 8000c6e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c72:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8000c76:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000c78:	4b2d      	ldr	r3, [pc, #180]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8000c84:	4b2a      	ldr	r3, [pc, #168]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c92:	2204      	movs	r2, #4
 8000c94:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000cca:	4b19      	ldr	r3, [pc, #100]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000cd2:	4b17      	ldr	r3, [pc, #92]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000cd8:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000cde:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000ce4:	4b12      	ldr	r3, [pc, #72]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000cea:	4811      	ldr	r0, [pc, #68]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000cec:	f001 ff0e 	bl	8002b0c <HAL_ADC_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 8000cf6:	f000 feaa 	bl	8001a4e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <MX_ADC5_Init+0xe0>)
 8000cfc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cfe:	2306      	movs	r3, #6
 8000d00:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d06:	237f      	movs	r3, #127	@ 0x7f
 8000d08:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8000d12:	463b      	mov	r3, r7
 8000d14:	4619      	mov	r1, r3
 8000d16:	4806      	ldr	r0, [pc, #24]	@ (8000d30 <MX_ADC5_Init+0xd8>)
 8000d18:	f002 f8b4 	bl	8002e84 <HAL_ADC_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 8000d22:	f000 fe94 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200001ec 	.word	0x200001ec
 8000d34:	50000600 	.word	0x50000600
 8000d38:	08600004 	.word	0x08600004

08000d3c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0a6      	sub	sp, #152	@ 0x98
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	2254      	movs	r2, #84	@ 0x54
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f006 fe87 	bl	8007a70 <memset>
  if(adcHandle->Instance==ADC1)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d6a:	d16c      	bne.n	8000e46 <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d72:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d76:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f004 f90d 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d88:	f000 fe61 	bl	8001a4e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d8c:	4ba0      	ldr	r3, [pc, #640]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4a9f      	ldr	r2, [pc, #636]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000d94:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d96:	4b9e      	ldr	r3, [pc, #632]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d10b      	bne.n	8000db6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da2:	4a9c      	ldr	r2, [pc, #624]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000daa:	4b9a      	ldr	r3, [pc, #616]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b97      	ldr	r3, [pc, #604]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dba:	4a96      	ldr	r2, [pc, #600]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dc2:	4b94      	ldr	r3, [pc, #592]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000de4:	4619      	mov	r1, r3
 8000de6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dea:	f002 ffd3 	bl	8003d94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel6;
 8000dee:	4b8a      	ldr	r3, [pc, #552]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000df0:	4a8a      	ldr	r2, [pc, #552]	@ (800101c <HAL_ADC_MspInit+0x2e0>)
 8000df2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000df4:	4b88      	ldr	r3, [pc, #544]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000df6:	2205      	movs	r2, #5
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b87      	ldr	r3, [pc, #540]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b85      	ldr	r3, [pc, #532]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b84      	ldr	r3, [pc, #528]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e08:	2280      	movs	r2, #128	@ 0x80
 8000e0a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e0c:	4b82      	ldr	r3, [pc, #520]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e14:	4b80      	ldr	r3, [pc, #512]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e1a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e1e:	2220      	movs	r2, #32
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e22:	4b7d      	ldr	r3, [pc, #500]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e28:	487b      	ldr	r0, [pc, #492]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e2a:	f002 fea9 	bl	8003b80 <HAL_DMA_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000e34:	f000 fe0b 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a77      	ldr	r2, [pc, #476]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e3e:	4a76      	ldr	r2, [pc, #472]	@ (8001018 <HAL_ADC_MspInit+0x2dc>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000e44:	e1e0      	b.n	8001208 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a75      	ldr	r2, [pc, #468]	@ (8001020 <HAL_ADC_MspInit+0x2e4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d16c      	bne.n	8000f2a <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000e50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e54:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000e56:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e5a:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e60:	4618      	mov	r0, r3
 8000e62:	f004 f89b 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000e6c:	f000 fdef 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e70:	4b67      	ldr	r3, [pc, #412]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	4a66      	ldr	r2, [pc, #408]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000e78:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e7a:	4b65      	ldr	r3, [pc, #404]	@ (8001010 <HAL_ADC_MspInit+0x2d4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d10b      	bne.n	8000e9a <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e82:	4b64      	ldr	r3, [pc, #400]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e86:	4a63      	ldr	r2, [pc, #396]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000e88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8e:	4b61      	ldr	r3, [pc, #388]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000eb2:	2340      	movs	r3, #64	@ 0x40
 8000eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ece:	f002 ff61 	bl	8003d94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel7;
 8000ed2:	4b54      	ldr	r3, [pc, #336]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000ed4:	4a54      	ldr	r2, [pc, #336]	@ (8001028 <HAL_ADC_MspInit+0x2ec>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000ed8:	4b52      	ldr	r3, [pc, #328]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000eda:	2224      	movs	r2, #36	@ 0x24
 8000edc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ede:	4b51      	ldr	r3, [pc, #324]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b4e      	ldr	r3, [pc, #312]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000eec:	2280      	movs	r2, #128	@ 0x80
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef0:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000efe:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000f00:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000f02:	2220      	movs	r2, #32
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000f06:	4b47      	ldr	r3, [pc, #284]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000f0c:	4845      	ldr	r0, [pc, #276]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000f0e:	f002 fe37 	bl	8003b80 <HAL_DMA_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000f18:	f000 fd99 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a41      	ldr	r2, [pc, #260]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000f20:	655a      	str	r2, [r3, #84]	@ 0x54
 8000f22:	4a40      	ldr	r2, [pc, #256]	@ (8001024 <HAL_ADC_MspInit+0x2e8>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000f28:	e16e      	b.n	8001208 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a3f      	ldr	r2, [pc, #252]	@ (800102c <HAL_ADC_MspInit+0x2f0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	f040 8085 	bne.w	8001040 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000f3c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000f40:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f46:	4618      	mov	r0, r3
 8000f48:	f004 f828 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000f52:	f000 fd7c 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000f56:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <HAL_ADC_MspInit+0x2f4>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	4a34      	ldr	r2, [pc, #208]	@ (8001030 <HAL_ADC_MspInit+0x2f4>)
 8000f5e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000f60:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <HAL_ADC_MspInit+0x2f4>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d10b      	bne.n	8000f80 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000f68:	4b2a      	ldr	r3, [pc, #168]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6c:	4a29      	ldr	r2, [pc, #164]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f74:	4b27      	ldr	r3, [pc, #156]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f84:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f86:	f043 0302 	orr.w	r3, r3, #2
 8000f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8c:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_ADC_MspInit+0x2d8>)
 8000f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000f98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4820      	ldr	r0, [pc, #128]	@ (8001034 <HAL_ADC_MspInit+0x2f8>)
 8000fb4:	f002 feee 	bl	8003d94 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fba:	4a20      	ldr	r2, [pc, #128]	@ (800103c <HAL_ADC_MspInit+0x300>)
 8000fbc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fc0:	2225      	movs	r2, #37	@ 0x25
 8000fc2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fca:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fd2:	2280      	movs	r2, #128	@ 0x80
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fdc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fde:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000fe6:	4b14      	ldr	r3, [pc, #80]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fe8:	2220      	movs	r2, #32
 8000fea:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000ff2:	4811      	ldr	r0, [pc, #68]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8000ff4:	f002 fdc4 	bl	8003b80 <HAL_DMA_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000ffe:	f000 fd26 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 8001006:	655a      	str	r2, [r3, #84]	@ 0x54
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_ADC_MspInit+0x2fc>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800100e:	e0fb      	b.n	8001208 <HAL_ADC_MspInit+0x4cc>
 8001010:	20000438 	.word	0x20000438
 8001014:	40021000 	.word	0x40021000
 8001018:	20000258 	.word	0x20000258
 800101c:	4002006c 	.word	0x4002006c
 8001020:	50000100 	.word	0x50000100
 8001024:	200002b8 	.word	0x200002b8
 8001028:	40020080 	.word	0x40020080
 800102c:	50000400 	.word	0x50000400
 8001030:	2000043c 	.word	0x2000043c
 8001034:	48000400 	.word	0x48000400
 8001038:	20000318 	.word	0x20000318
 800103c:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a72      	ldr	r2, [pc, #456]	@ (8001210 <HAL_ADC_MspInit+0x4d4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d16c      	bne.n	8001124 <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800104a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001050:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001054:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001056:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800105a:	4618      	mov	r0, r3
 800105c:	f003 ff9e 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8001066:	f000 fcf2 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800106a:	4b6a      	ldr	r3, [pc, #424]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	3301      	adds	r3, #1
 8001070:	4a68      	ldr	r2, [pc, #416]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 8001072:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001074:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d10b      	bne.n	8001094 <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800107c:	4b66      	ldr	r3, [pc, #408]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001080:	4a65      	ldr	r2, [pc, #404]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001086:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001088:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001094:	4b60      	ldr	r3, [pc, #384]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001098:	4a5f      	ldr	r2, [pc, #380]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 80010a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 80010ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010b4:	2303      	movs	r3, #3
 80010b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 80010c0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80010c4:	4619      	mov	r1, r3
 80010c6:	4855      	ldr	r0, [pc, #340]	@ (800121c <HAL_ADC_MspInit+0x4e0>)
 80010c8:	f002 fe64 	bl	8003d94 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 80010cc:	4b54      	ldr	r3, [pc, #336]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010ce:	4a55      	ldr	r2, [pc, #340]	@ (8001224 <HAL_ADC_MspInit+0x4e8>)
 80010d0:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 80010d2:	4b53      	ldr	r3, [pc, #332]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010d4:	2226      	movs	r2, #38	@ 0x26
 80010d6:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d8:	4b51      	ldr	r3, [pc, #324]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010de:	4b50      	ldr	r3, [pc, #320]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 80010e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010e6:	2280      	movs	r2, #128	@ 0x80
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f0:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f8:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80010fa:	4b49      	ldr	r3, [pc, #292]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 80010fc:	2220      	movs	r2, #32
 80010fe:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001100:	4b47      	ldr	r3, [pc, #284]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 8001102:	2200      	movs	r2, #0
 8001104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001106:	4846      	ldr	r0, [pc, #280]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 8001108:	f002 fd3a 	bl	8003b80 <HAL_DMA_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8001112:	f000 fc9c 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a41      	ldr	r2, [pc, #260]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 800111a:	655a      	str	r2, [r3, #84]	@ 0x54
 800111c:	4a40      	ldr	r2, [pc, #256]	@ (8001220 <HAL_ADC_MspInit+0x4e4>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001122:	e071      	b.n	8001208 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a3f      	ldr	r2, [pc, #252]	@ (8001228 <HAL_ADC_MspInit+0x4ec>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d16c      	bne.n	8001208 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800112e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001132:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001134:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001138:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800113a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800113e:	4618      	mov	r0, r3
 8001140:	f003 ff2c 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <HAL_ADC_MspInit+0x412>
      Error_Handler();
 800114a:	f000 fc80 	bl	8001a4e <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800114e:	4b31      	ldr	r3, [pc, #196]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	3301      	adds	r3, #1
 8001154:	4a2f      	ldr	r2, [pc, #188]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 8001156:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001158:	4b2e      	ldr	r3, [pc, #184]	@ (8001214 <HAL_ADC_MspInit+0x4d8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d10b      	bne.n	8001178 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001160:	4b2d      	ldr	r3, [pc, #180]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a2c      	ldr	r2, [pc, #176]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001178:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800117a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117c:	4a26      	ldr	r2, [pc, #152]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001184:	4b24      	ldr	r3, [pc, #144]	@ (8001218 <HAL_ADC_MspInit+0x4dc>)
 8001186:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8001190:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80011a8:	4619      	mov	r1, r3
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ae:	f002 fdf1 	bl	8003d94 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 80011b2:	4b1e      	ldr	r3, [pc, #120]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011b4:	4a1e      	ldr	r2, [pc, #120]	@ (8001230 <HAL_ADC_MspInit+0x4f4>)
 80011b6:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 80011b8:	4b1c      	ldr	r3, [pc, #112]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011ba:	2227      	movs	r2, #39	@ 0x27
 80011bc:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011be:	4b1b      	ldr	r3, [pc, #108]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c4:	4b19      	ldr	r3, [pc, #100]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 80011ca:	4b18      	ldr	r3, [pc, #96]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011d0:	4b16      	ldr	r3, [pc, #88]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011d6:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011de:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011e2:	2220      	movs	r2, #32
 80011e4:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 80011ee:	f002 fcc7 	bl	8003b80 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 80011f8:	f000 fc29 	bl	8001a4e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 8001200:	655a      	str	r2, [r3, #84]	@ 0x54
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <HAL_ADC_MspInit+0x4f0>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001208:	bf00      	nop
 800120a:	3798      	adds	r7, #152	@ 0x98
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	50000500 	.word	0x50000500
 8001214:	2000043c 	.word	0x2000043c
 8001218:	40021000 	.word	0x40021000
 800121c:	48000400 	.word	0x48000400
 8001220:	20000378 	.word	0x20000378
 8001224:	40020044 	.word	0x40020044
 8001228:	50000600 	.word	0x50000600
 800122c:	200003d8 	.word	0x200003d8
 8001230:	40020058 	.word	0x40020058

08001234 <initializeButtons>:
//                     for input mode.                   //
// Input params:       None                              //
// Output params:      None                              //
// ***************************************************** //
void initializeButtons()
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
    buttonState.ucUp = RELEASED;
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <initializeButtons+0x34>)
 800123a:	2230      	movs	r2, #48	@ 0x30
 800123c:	705a      	strb	r2, [r3, #1]
    buttonState.ucDown = RELEASED;
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <initializeButtons+0x34>)
 8001240:	2230      	movs	r2, #48	@ 0x30
 8001242:	709a      	strb	r2, [r3, #2]
    buttonState.ucRight = RELEASED;
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <initializeButtons+0x34>)
 8001246:	2230      	movs	r2, #48	@ 0x30
 8001248:	711a      	strb	r2, [r3, #4]
    buttonState.ucLeft = RELEASED;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <initializeButtons+0x34>)
 800124c:	2230      	movs	r2, #48	@ 0x30
 800124e:	70da      	strb	r2, [r3, #3]
    buttonState.ucEnter = RELEASED;
 8001250:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <initializeButtons+0x34>)
 8001252:	2230      	movs	r2, #48	@ 0x30
 8001254:	715a      	strb	r2, [r3, #5]
    buttonState.ucCurrentState = RELEASED;
 8001256:	4b04      	ldr	r3, [pc, #16]	@ (8001268 <initializeButtons+0x34>)
 8001258:	2230      	movs	r2, #48	@ 0x30
 800125a:	701a      	strb	r2, [r3, #0]
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000574 	.word	0x20000574

0800126c <getButtonStatus>:
// Input params:       buttonType: the button position   //
// Output params:      An int indicating if the button   //
//                     was pressed (1) or not (0).       //
// ***************************************************** //
int getButtonStatus(tButtonType buttonType)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    // Variable to store the button press status
    int pressStatus = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]

    switch (buttonType)
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	3b01      	subs	r3, #1
 800127e:	2b04      	cmp	r3, #4
 8001280:	d831      	bhi.n	80012e6 <getButtonStatus+0x7a>
 8001282:	a201      	add	r2, pc, #4	@ (adr r2, 8001288 <getButtonStatus+0x1c>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	0800129d 	.word	0x0800129d
 800128c:	080012ab 	.word	0x080012ab
 8001290:	080012b9 	.word	0x080012b9
 8001294:	080012c9 	.word	0x080012c9
 8001298:	080012d9 	.word	0x080012d9
    {
        case (up):
            pressStatus = HAL_GPIO_ReadPin(BT_Cima_GPIO_Port, BT_Cima_Pin);
 800129c:	2140      	movs	r1, #64	@ 0x40
 800129e:	4817      	ldr	r0, [pc, #92]	@ (80012fc <getButtonStatus+0x90>)
 80012a0:	f002 fefa 	bl	8004098 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	60fb      	str	r3, [r7, #12]
            break;
 80012a8:	e01d      	b.n	80012e6 <getButtonStatus+0x7a>
        case (down):
            pressStatus = HAL_GPIO_ReadPin(BT_Baixo_GPIO_Port, BT_Baixo_Pin);
 80012aa:	2180      	movs	r1, #128	@ 0x80
 80012ac:	4814      	ldr	r0, [pc, #80]	@ (8001300 <getButtonStatus+0x94>)
 80012ae:	f002 fef3 	bl	8004098 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	60fb      	str	r3, [r7, #12]
            break;
 80012b6:	e016      	b.n	80012e6 <getButtonStatus+0x7a>
        case (left):
            pressStatus = HAL_GPIO_ReadPin(BT_Esq_GPIO_Port, BT_Esq_Pin);
 80012b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012bc:	4810      	ldr	r0, [pc, #64]	@ (8001300 <getButtonStatus+0x94>)
 80012be:	f002 feeb 	bl	8004098 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	60fb      	str	r3, [r7, #12]
            break;
 80012c6:	e00e      	b.n	80012e6 <getButtonStatus+0x7a>
        case (right):
            pressStatus = HAL_GPIO_ReadPin(BT_Dir_GPIO_Port, BT_Dir_Pin);
 80012c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012cc:	480c      	ldr	r0, [pc, #48]	@ (8001300 <getButtonStatus+0x94>)
 80012ce:	f002 fee3 	bl	8004098 <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	60fb      	str	r3, [r7, #12]
            break;
 80012d6:	e006      	b.n	80012e6 <getButtonStatus+0x7a>
        case (enter):
            pressStatus = HAL_GPIO_ReadPin(BT_Enter_GPIO_Port, BT_Enter_Pin);
 80012d8:	2120      	movs	r1, #32
 80012da:	4809      	ldr	r0, [pc, #36]	@ (8001300 <getButtonStatus+0x94>)
 80012dc:	f002 fedc 	bl	8004098 <HAL_GPIO_ReadPin>
 80012e0:	4603      	mov	r3, r0
 80012e2:	60fb      	str	r3, [r7, #12]
            break;
 80012e4:	bf00      	nop
    }

    // Return 1 if the button is pressed, otherwise return 0
    return (pressStatus == 0x00000000) ? 0 : 1;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	48000400 	.word	0x48000400
 8001300:	48000800 	.word	0x48000800

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_DMA_Init+0x44>)
 800130c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800130e:	4a0e      	ldr	r2, [pc, #56]	@ (8001348 <MX_DMA_Init+0x44>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6493      	str	r3, [r2, #72]	@ 0x48
 8001316:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_DMA_Init+0x44>)
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	f003 0304 	and.w	r3, r3, #4
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_DMA_Init+0x44>)
 8001324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001326:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <MX_DMA_Init+0x44>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6493      	str	r3, [r2, #72]	@ 0x48
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_DMA_Init+0x44>)
 8001330:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40021000 	.word	0x40021000

0800134c <processarCaptura>:
void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
}

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0) {
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <processarCaptura+0xb4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10a      	bne.n	8001376 <processarCaptura+0x2a>
        valorCaptura1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001360:	2100      	movs	r1, #0
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f004 fd96 	bl	8005e94 <HAL_TIM_ReadCapturedValue>
 8001368:	4603      	mov	r3, r0
 800136a:	4a26      	ldr	r2, [pc, #152]	@ (8001404 <processarCaptura+0xb8>)
 800136c:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <processarCaptura+0xb4>)
 8001370:	2201      	movs	r2, #1
 8001372:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8001374:	e040      	b.n	80013f8 <processarCaptura+0xac>
        valorCaptura2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001376:	2100      	movs	r1, #0
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f004 fd8b 	bl	8005e94 <HAL_TIM_ReadCapturedValue>
 800137e:	4603      	mov	r3, r0
 8001380:	4a21      	ldr	r2, [pc, #132]	@ (8001408 <processarCaptura+0xbc>)
 8001382:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 >= valorCaptura1) ? (valorCaptura2 - valorCaptura1) : (CONTADOR_MAX - valorCaptura1 + valorCaptura2);
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <processarCaptura+0xbc>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4b1e      	ldr	r3, [pc, #120]	@ (8001404 <processarCaptura+0xb8>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	429a      	cmp	r2, r3
 800138e:	d305      	bcc.n	800139c <processarCaptura+0x50>
 8001390:	4b1d      	ldr	r3, [pc, #116]	@ (8001408 <processarCaptura+0xbc>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <processarCaptura+0xb8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	e007      	b.n	80013ac <processarCaptura+0x60>
 800139c:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <processarCaptura+0xbc>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b18      	ldr	r3, [pc, #96]	@ (8001404 <processarCaptura+0xb8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	f503 4343 	add.w	r3, r3, #49920	@ 0xc300
 80013aa:	3350      	adds	r3, #80	@ 0x50
 80013ac:	4a17      	ldr	r2, [pc, #92]	@ (800140c <processarCaptura+0xc0>)
 80013ae:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <processarCaptura+0xc4>)
 80013b2:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 80013b4:	4b15      	ldr	r3, [pc, #84]	@ (800140c <processarCaptura+0xc0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80013c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	ed93 7a00 	vldr	s14, [r3]
 80013d4:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80013d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013dc:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80013e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2200      	movs	r2, #0
 80013f0:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 80013f2:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <processarCaptura+0xb4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	2000044c 	.word	0x2000044c
 8001404:	20000440 	.word	0x20000440
 8001408:	20000444 	.word	0x20000444
 800140c:	20000448 	.word	0x20000448
 8001410:	47c35000 	.word	0x47c35000

08001414 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d105      	bne.n	8001430 <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001424:	4a0a      	ldr	r2, [pc, #40]	@ (8001450 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001426:	490b      	ldr	r1, [pc, #44]	@ (8001454 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff8f 	bl	800134c <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
    }
}
 800142e:	e008      	b.n	8001442 <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d104      	bne.n	8001442 <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 8001438:	4a08      	ldr	r2, [pc, #32]	@ (800145c <HAL_TIM_IC_CaptureCallback+0x48>)
 800143a:	4909      	ldr	r1, [pc, #36]	@ (8001460 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff85 	bl	800134c <processarCaptura>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	200005f8 	.word	0x200005f8
 8001450:	20000458 	.word	0x20000458
 8001454:	20000450 	.word	0x20000450
 8001458:	20000644 	.word	0x20000644
 800145c:	2000045c 	.word	0x2000045c
 8001460:	20000454 	.word	0x20000454

08001464 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> S_TIM8_CH1
*/
void MX_GPIO_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	@ 0x28
 8001468:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	605a      	str	r2, [r3, #4]
 8001474:	609a      	str	r2, [r3, #8]
 8001476:	60da      	str	r2, [r3, #12]
 8001478:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b4a      	ldr	r3, [pc, #296]	@ (80015a4 <MX_GPIO_Init+0x140>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800147e:	4a49      	ldr	r2, [pc, #292]	@ (80015a4 <MX_GPIO_Init+0x140>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001486:	4b47      	ldr	r3, [pc, #284]	@ (80015a4 <MX_GPIO_Init+0x140>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001492:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <MX_GPIO_Init+0x140>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001496:	4a43      	ldr	r2, [pc, #268]	@ (80015a4 <MX_GPIO_Init+0x140>)
 8001498:	f043 0320 	orr.w	r3, r3, #32
 800149c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800149e:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014a2:	f003 0320 	and.w	r3, r3, #32
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b3e      	ldr	r3, [pc, #248]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ae:	4a3d      	ldr	r2, [pc, #244]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b6:	4b3b      	ldr	r3, [pc, #236]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c2:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c6:	4a37      	ldr	r2, [pc, #220]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014ce:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <MX_GPIO_Init+0x140>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LedBlue_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 80014e0:	4831      	ldr	r0, [pc, #196]	@ (80015a8 <MX_GPIO_Init+0x144>)
 80014e2:	f002 fdf1 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LedRed_Pin|LedGreen_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 80014ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014f0:	f002 fdea 	bl	80040c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|BT_Enter_Pin|BT_Baixo_Pin|BT_Esq_Pin
 80014f4:	f242 33a0 	movw	r3, #9120	@ 0x23a0
 80014f8:	617b      	str	r3, [r7, #20]
                          |BT_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4828      	ldr	r0, [pc, #160]	@ (80015ac <MX_GPIO_Init+0x148>)
 800150c:	f002 fc42 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LedBlue_Pin|Motot_Dir_IN2_Pin;
 8001510:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	4619      	mov	r1, r3
 8001528:	481f      	ldr	r0, [pc, #124]	@ (80015a8 <MX_GPIO_Init+0x144>)
 800152a:	f002 fc33 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LedRed_Pin|LedGreen_Pin;
 800152e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800154a:	f002 fc23 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Buzzer_PWM_Pin;
 800154e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001560:	2302      	movs	r3, #2
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Buzzer_PWM_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800156e:	f002 fc11 	bl	8003d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BT_Cima_Pin;
 8001572:	2340      	movs	r3, #64	@ 0x40
 8001574:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BT_Cima_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	4619      	mov	r1, r3
 8001586:	4808      	ldr	r0, [pc, #32]	@ (80015a8 <MX_GPIO_Init+0x144>)
 8001588:	f002 fc04 	bl	8003d94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	2028      	movs	r0, #40	@ 0x28
 8001592:	f002 fac0 	bl	8003b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001596:	2028      	movs	r0, #40	@ 0x28
 8001598:	f002 fad7 	bl	8003b4a <HAL_NVIC_EnableIRQ>

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	@ 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000400 	.word	0x48000400
 80015ac:	48000800 	.word	0x48000800

080015b0 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_tx;
DMA_HandleTypeDef hdma_i2c2_rx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <MX_I2C2_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015bc:	4a1b      	ldr	r2, [pc, #108]	@ (800162c <MX_I2C2_Init+0x7c>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015c0:	4b18      	ldr	r3, [pc, #96]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015c6:	4b17      	ldr	r3, [pc, #92]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015cc:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015d2:	4b14      	ldr	r3, [pc, #80]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015de:	4b11      	ldr	r3, [pc, #68]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ea:	480e      	ldr	r0, [pc, #56]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015ec:	f002 fda7 	bl	800413e <HAL_I2C_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015f6:	f000 fa2a 	bl	8001a4e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fa:	2100      	movs	r1, #0
 80015fc:	4809      	ldr	r0, [pc, #36]	@ (8001624 <MX_I2C2_Init+0x74>)
 80015fe:	f002 fe53 	bl	80042a8 <HAL_I2CEx_ConfigAnalogFilter>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fa21 	bl	8001a4e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800160c:	2100      	movs	r1, #0
 800160e:	4805      	ldr	r0, [pc, #20]	@ (8001624 <MX_I2C2_Init+0x74>)
 8001610:	f002 fe95 	bl	800433e <HAL_I2CEx_ConfigDigitalFilter>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800161a:	f000 fa18 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000460 	.word	0x20000460
 8001628:	40005800 	.word	0x40005800
 800162c:	30a0a7fb 	.word	0x30a0a7fb

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0a0      	sub	sp, #128	@ 0x80
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	2254      	movs	r2, #84	@ 0x54
 800164e:	2100      	movs	r1, #0
 8001650:	4618      	mov	r0, r3
 8001652:	f006 fa0d 	bl	8007a70 <memset>
  if(i2cHandle->Instance==I2C2)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_I2C_MspInit+0x198>)
 800165c:	4293      	cmp	r3, r2
 800165e:	f040 80ae 	bne.w	80017be <HAL_I2C_MspInit+0x18e>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001666:	2300      	movs	r3, #0
 8001668:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f107 0318 	add.w	r3, r7, #24
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fc94 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800167a:	f000 f9e8 	bl	8001a4e <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167e:	4b53      	ldr	r3, [pc, #332]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001682:	4a52      	ldr	r2, [pc, #328]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800168a:	4b50      	ldr	r3, [pc, #320]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b4d      	ldr	r3, [pc, #308]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169a:	4a4c      	ldr	r2, [pc, #304]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 80016ae:	2310      	movs	r3, #16
 80016b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b2:	2312      	movs	r3, #18
 80016b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016be:	2304      	movs	r3, #4
 80016c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016c6:	4619      	mov	r1, r3
 80016c8:	4841      	ldr	r0, [pc, #260]	@ (80017d0 <HAL_I2C_MspInit+0x1a0>)
 80016ca:	f002 fb63 	bl	8003d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 80016ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d4:	2312      	movs	r3, #18
 80016d6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e0:	2304      	movs	r3, #4
 80016e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 80016e4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016e8:	4619      	mov	r1, r3
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016ee:	f002 fb51 	bl	8003d94 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016f2:	4b36      	ldr	r3, [pc, #216]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 80016f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f6:	4a35      	ldr	r2, [pc, #212]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 80016f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <HAL_I2C_MspInit+0x19c>)
 8001700:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 DMA Init */
    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel1;
 800170a:	4b32      	ldr	r3, [pc, #200]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 800170c:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_I2C_MspInit+0x1a8>)
 800170e:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Request = DMA_REQUEST_I2C2_TX;
 8001710:	4b30      	ldr	r3, [pc, #192]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001712:	2213      	movs	r2, #19
 8001714:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001716:	4b2f      	ldr	r3, [pc, #188]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001718:	2210      	movs	r2, #16
 800171a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001722:	4b2c      	ldr	r3, [pc, #176]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001724:	2280      	movs	r2, #128	@ 0x80
 8001726:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 800172a:	2200      	movs	r2, #0
 800172c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172e:	4b29      	ldr	r3, [pc, #164]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001730:	2200      	movs	r2, #0
 8001732:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800173a:	4b26      	ldr	r3, [pc, #152]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001740:	4824      	ldr	r0, [pc, #144]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001742:	f002 fa1d 	bl	8003b80 <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_I2C_MspInit+0x120>
    {
      Error_Handler();
 800174c:	f000 f97f 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a20      	ldr	r2, [pc, #128]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001754:	639a      	str	r2, [r3, #56]	@ 0x38
 8001756:	4a1f      	ldr	r2, [pc, #124]	@ (80017d4 <HAL_I2C_MspInit+0x1a4>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel2;
 800175c:	4b1f      	ldr	r3, [pc, #124]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 800175e:	4a20      	ldr	r2, [pc, #128]	@ (80017e0 <HAL_I2C_MspInit+0x1b0>)
 8001760:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Request = DMA_REQUEST_I2C2_RX;
 8001762:	4b1e      	ldr	r3, [pc, #120]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001764:	2212      	movs	r2, #18
 8001766:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001768:	4b1c      	ldr	r3, [pc, #112]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800176e:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001770:	2200      	movs	r2, #0
 8001772:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001774:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001776:	2280      	movs	r2, #128	@ 0x80
 8001778:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800177a:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 800177c:	2200      	movs	r2, #0
 800177e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001780:	4b16      	ldr	r3, [pc, #88]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178c:	4b13      	ldr	r3, [pc, #76]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001792:	4812      	ldr	r0, [pc, #72]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 8001794:	f002 f9f4 	bl	8003b80 <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_I2C_MspInit+0x172>
    {
      Error_Handler();
 800179e:	f000 f956 	bl	8001a4e <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 80017a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017a8:	4a0c      	ldr	r2, [pc, #48]	@ (80017dc <HAL_I2C_MspInit+0x1ac>)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2021      	movs	r0, #33	@ 0x21
 80017b4:	f002 f9af 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80017b8:	2021      	movs	r0, #33	@ 0x21
 80017ba:	f002 f9c6 	bl	8003b4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3780      	adds	r7, #128	@ 0x80
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40005800 	.word	0x40005800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	48000800 	.word	0x48000800
 80017d4:	200004b4 	.word	0x200004b4
 80017d8:	40020008 	.word	0x40020008
 80017dc:	20000514 	.word	0x20000514
 80017e0:	4002001c 	.word	0x4002001c

080017e4 <setLedState>:
// Input params:         ledNumber: specifies the LED    //
//                       ledState: 1 to turn on, 0 to turn off //
// Output params:        None                            //
// **************************************************** //
void setLedState(tLedType ledNumber, int ledState)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
    if (ledState == 1)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d104      	bne.n	8001800 <setLedState+0x1c>
    {
        activateLed(ledNumber);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 f80d 	bl	8001818 <activateLed>
    }
    else if (ledState == 0)
    {
        deactivateLed(ledNumber);
    }
}
 80017fe:	e006      	b.n	800180e <setLedState+0x2a>
    else if (ledState == 0)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d103      	bne.n	800180e <setLedState+0x2a>
        deactivateLed(ledNumber);
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f835 	bl	8001878 <deactivateLed>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <activateLed>:
// Description:          Turns on the specified LED      //
// Input params:         ledNumber: specifies the LED    //
// Output params:        None                            //
// **************************************************** //
void activateLed(tLedType ledNumber)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
    // Write 1 on the pin of the ODR register that turns the LED on
    switch (ledNumber)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d018      	beq.n	800185a <activateLed+0x42>
 8001828:	2b03      	cmp	r3, #3
 800182a:	dc1d      	bgt.n	8001868 <activateLed+0x50>
 800182c:	2b01      	cmp	r3, #1
 800182e:	d002      	beq.n	8001836 <activateLed+0x1e>
 8001830:	2b02      	cmp	r3, #2
 8001832:	d009      	beq.n	8001848 <activateLed+0x30>
            break;
        case blue:
        	LedBlue_GPIO_Port->ODR |= LedBlue_Pin;
            break;
    }
}
 8001834:	e018      	b.n	8001868 <activateLed+0x50>
        	LedRed_GPIO_Port->ODR |= LedRed_Pin;
 8001836:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001840:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001844:	6153      	str	r3, [r2, #20]
            break;
 8001846:	e00f      	b.n	8001868 <activateLed+0x50>
        	LedGreen_GPIO_Port->ODR |= LedGreen_Pin;
 8001848:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001852:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001856:	6153      	str	r3, [r2, #20]
            break;
 8001858:	e006      	b.n	8001868 <activateLed+0x50>
        	LedBlue_GPIO_Port->ODR |= LedBlue_Pin;
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <activateLed+0x5c>)
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	4a05      	ldr	r2, [pc, #20]	@ (8001874 <activateLed+0x5c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6153      	str	r3, [r2, #20]
            break;
 8001866:	bf00      	nop
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	48000400 	.word	0x48000400

08001878 <deactivateLed>:
// Description:          Turns off the specified LED     //
// Input params:         ledNumber: specifies the LED    //
// Output params:        None                            //
// **************************************************** //
void deactivateLed(tLedType ledNumber)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
    // Write 0 on the pin of the ODR register to turn the LED off
    switch (ledNumber)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d018      	beq.n	80018ba <deactivateLed+0x42>
 8001888:	2b03      	cmp	r3, #3
 800188a:	dc1d      	bgt.n	80018c8 <deactivateLed+0x50>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d002      	beq.n	8001896 <deactivateLed+0x1e>
 8001890:	2b02      	cmp	r3, #2
 8001892:	d009      	beq.n	80018a8 <deactivateLed+0x30>
            break;
        case blue:
            LedBlue_GPIO_Port->ODR &= ~(LedBlue_Pin);
            break;
    }
}
 8001894:	e018      	b.n	80018c8 <deactivateLed+0x50>
            LedRed_GPIO_Port->ODR &= ~(LedRed_Pin);
 8001896:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80018a4:	6153      	str	r3, [r2, #20]
            break;
 80018a6:	e00f      	b.n	80018c8 <deactivateLed+0x50>
            LedGreen_GPIO_Port->ODR &= ~(LedGreen_Pin);
 80018a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80018b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80018b6:	6153      	str	r3, [r2, #20]
            break;
 80018b8:	e006      	b.n	80018c8 <deactivateLed+0x50>
            LedBlue_GPIO_Port->ODR &= ~(LedBlue_Pin);
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <deactivateLed+0x5c>)
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	4a05      	ldr	r2, [pc, #20]	@ (80018d4 <deactivateLed+0x5c>)
 80018c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80018c4:	6153      	str	r3, [r2, #20]
            break;
 80018c6:	bf00      	nop
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	48000400 	.word	0x48000400

080018d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018dc:	f000 fead 	bl	800263a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e0:	f000 f86a 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e4:	f7ff fdbe 	bl	8001464 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e8:	f7ff fd0c 	bl	8001304 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80018ec:	f000 fdda 	bl	80024a4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 80018f0:	f000 fba4 	bl	800203c <MX_TIM1_Init>
  MX_I2C2_Init();
 80018f4:	f7ff fe5c 	bl	80015b0 <MX_I2C2_Init>
  MX_ADC3_Init();
 80018f8:	f7ff f8b8 	bl	8000a6c <MX_ADC3_Init>
  MX_ADC1_Init();
 80018fc:	f7fe ffc0 	bl	8000880 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001900:	f7ff f842 	bl	8000988 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001904:	f7ff f936 	bl	8000b74 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001908:	f7ff f9a6 	bl	8000c58 <MX_ADC5_Init>
  MX_TIM16_Init();
 800190c:	f000 fc52 	bl	80021b4 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001910:	f000 fc9c 	bl	800224c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  // init buttons
  initializeButtons();
 8001914:	f7ff fc8e 	bl	8001234 <initializeButtons>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Controla o PID para ajustar os motores
        vLineSensorPIDControl(velocidadeRodaEsquerda, velocidadeRodaDireita);
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <main+0xd4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fddf 	bl	80004e0 <__aeabi_f2d>
 8001922:	4604      	mov	r4, r0
 8001924:	460d      	mov	r5, r1
 8001926:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <main+0xd8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7fe fdd8 	bl	80004e0 <__aeabi_f2d>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b11 	vmov	d1, r2, r3
 8001938:	ec45 4b10 	vmov	d0, r4, r5
 800193c:	f000 f94e 	bl	8001bdc <vLineSensorPIDControl>

        // Adiciona um pequeno atraso se necessário
        HAL_Delay(10);
 8001940:	200a      	movs	r0, #10
 8001942:	f000 feeb 	bl	800271c <HAL_Delay>
      TIM1->CCR2 = 100;
 8001946:	4b1b      	ldr	r3, [pc, #108]	@ (80019b4 <main+0xdc>)
 8001948:	2264      	movs	r2, #100	@ 0x64
 800194a:	639a      	str	r2, [r3, #56]	@ 0x38
	  setLedState(1, 1);
 800194c:	2101      	movs	r1, #1
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff ff48 	bl	80017e4 <setLedState>
	  HAL_Delay(1000);
 8001954:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001958:	f000 fee0 	bl	800271c <HAL_Delay>
	  setLedState(2, 1);
 800195c:	2101      	movs	r1, #1
 800195e:	2002      	movs	r0, #2
 8001960:	f7ff ff40 	bl	80017e4 <setLedState>
	  HAL_Delay(1000);
 8001964:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001968:	f000 fed8 	bl	800271c <HAL_Delay>
	  setLedState(2, 0);
 800196c:	2100      	movs	r1, #0
 800196e:	2002      	movs	r0, #2
 8001970:	f7ff ff38 	bl	80017e4 <setLedState>
	  HAL_Delay(1000);
 8001974:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001978:	f000 fed0 	bl	800271c <HAL_Delay>
	  setLedState(1, 0);
 800197c:	2100      	movs	r1, #0
 800197e:	2001      	movs	r0, #1
 8001980:	f7ff ff30 	bl	80017e4 <setLedState>
	  HAL_Delay(1000);
 8001984:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001988:	f000 fec8 	bl	800271c <HAL_Delay>
	  if (getButtonStatus(5))
 800198c:	2005      	movs	r0, #5
 800198e:	f7ff fc6d 	bl	800126c <getButtonStatus>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <main+0xc8>
	  {
		  setLedState(3, 1);
 8001998:	2101      	movs	r1, #1
 800199a:	2003      	movs	r0, #3
 800199c:	f7ff ff22 	bl	80017e4 <setLedState>
	  }
	  setLedState(3,0);
 80019a0:	2100      	movs	r1, #0
 80019a2:	2003      	movs	r0, #3
 80019a4:	f7ff ff1e 	bl	80017e4 <setLedState>
    {
 80019a8:	e7b6      	b.n	8001918 <main+0x40>
 80019aa:	bf00      	nop
 80019ac:	20000458 	.word	0x20000458
 80019b0:	2000045c 	.word	0x2000045c
 80019b4:	40012c00 	.word	0x40012c00

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b094      	sub	sp, #80	@ 0x50
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	2238      	movs	r2, #56	@ 0x38
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f006 f852 	bl	8007a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80019da:	2000      	movs	r0, #0
 80019dc:	f002 fcfc 	bl	80043d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019e0:	2302      	movs	r3, #2
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019ea:	2340      	movs	r3, #64	@ 0x40
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ee:	2302      	movs	r3, #2
 80019f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80019f6:	2304      	movs	r3, #4
 80019f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80019fa:	2355      	movs	r3, #85	@ 0x55
 80019fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fe:	2302      	movs	r3, #2
 8001a00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a02:	2302      	movs	r3, #2
 8001a04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a06:	2302      	movs	r3, #2
 8001a08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0a:	f107 0318 	add.w	r3, r7, #24
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fd96 	bl	8004540 <HAL_RCC_OscConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001a1a:	f000 f818 	bl	8001a4e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1e:	230f      	movs	r3, #15
 8001a20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a22:	2303      	movs	r3, #3
 8001a24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	2104      	movs	r1, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f003 f894 	bl	8004b64 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a42:	f000 f804 	bl	8001a4e <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	@ 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a52:	b672      	cpsid	i
}
 8001a54:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a56:	bf00      	nop
 8001a58:	e7fd      	b.n	8001a56 <Error_Handler+0x8>
	...

08001a5c <vSetRodasDC>:
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
}

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a66:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 8001a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a6e:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8001ab0 <vSetRodasDC+0x54>
 8001a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a76:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <vSetRodasDC+0x58>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a80:	ee17 2a90 	vmov	r2, s15
 8001a84:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 8001a86:	edd7 7a00 	vldr	s15, [r7]
 8001a8a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ab0 <vSetRodasDC+0x54>
 8001a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <vSetRodasDC+0x58>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a9c:	ee17 2a90 	vmov	r2, s15
 8001aa0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	447a0000 	.word	0x447a0000
 8001ab4:	2000057c 	.word	0x2000057c

08001ab8 <fLineSensorCalculatePosition>:
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
}

// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 8001ab8:	b4b0      	push	{r4, r5, r7}
 8001aba:	b091      	sub	sp, #68	@ 0x44
 8001abc:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 8001abe:	4b40      	ldr	r3, [pc, #256]	@ (8001bc0 <fLineSensorCalculatePosition+0x108>)
 8001ac0:	f107 0418 	add.w	r4, r7, #24
 8001ac4:	461d      	mov	r5, r3
 8001ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aca:	682b      	ldr	r3, [r5, #0]
 8001acc:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 8001ada:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc4 <fLineSensorCalculatePosition+0x10c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <fLineSensorCalculatePosition+0x110>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <fLineSensorCalculatePosition+0x114>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <fLineSensorCalculatePosition+0x118>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <fLineSensorCalculatePosition+0x11c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 8001af8:	2300      	movs	r3, #0
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afc:	e042      	b.n	8001b84 <fLineSensorCalculatePosition+0xcc>
        if (sensorValues[i] >= 300 && sensorValues[i] <= 500) {
 8001afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3340      	adds	r3, #64	@ 0x40
 8001b04:	443b      	add	r3, r7
 8001b06:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b0a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001b0e:	d336      	bcc.n	8001b7e <fLineSensorCalculatePosition+0xc6>
 8001b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3340      	adds	r3, #64	@ 0x40
 8001b16:	443b      	add	r3, r7
 8001b18:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001b20:	d82d      	bhi.n	8001b7e <fLineSensorCalculatePosition+0xc6>
            float weight = 1.0f / (sensorValues[i] - 300 + 1);
 8001b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	3340      	adds	r3, #64	@ 0x40
 8001b28:	443b      	add	r3, r7
 8001b2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001b2e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b42:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 8001b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	3340      	adds	r3, #64	@ 0x40
 8001b4c:	443b      	add	r3, r7
 8001b4e:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b5a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b62:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b6a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8001b6e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001b72:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b80:	3301      	adds	r3, #1
 8001b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b86:	2b04      	cmp	r3, #4
 8001b88:	ddb9      	ble.n	8001afe <fLineSensorCalculatePosition+0x46>
        }
    }

    if (totalWeight == 0) {
 8001b8a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001b8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b96:	d101      	bne.n	8001b9c <fLineSensorCalculatePosition+0xe4>
        return 99; // Nenhum sensor detectou a linha
 8001b98:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd8 <fLineSensorCalculatePosition+0x120>)
 8001b9a:	e008      	b.n	8001bae <fLineSensorCalculatePosition+0xf6>
    }

    float posicao = totalWeightedPosition / totalWeight;
 8001b9c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001ba0:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ba4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return posicao;
 8001bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb6:	3744      	adds	r7, #68	@ 0x44
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bcb0      	pop	{r4, r5, r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	08007ae0 	.word	0x08007ae0
 8001bc4:	20000580 	.word	0x20000580
 8001bc8:	20000584 	.word	0x20000584
 8001bcc:	20000588 	.word	0x20000588
 8001bd0:	2000058c 	.word	0x2000058c
 8001bd4:	20000590 	.word	0x20000590
 8001bd8:	42c60000 	.word	0x42c60000

08001bdc <vLineSensorPIDControl>:

void vLineSensorPIDControl(float left_encoder_speed, float right_encoder_speed) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001be6:	edc7 0a00 	vstr	s1, [r7]
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 8001bea:	f000 fd8b 	bl	8002704 <HAL_GetTick>
 8001bee:	60f8      	str	r0, [r7, #12]
    delta_time = (current_time - previous_time) / 1000.0f;
 8001bf0:	4bb3      	ldr	r3, [pc, #716]	@ (8001ec0 <vLineSensorPIDControl+0x2e4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c00:	eddf 6ab0 	vldr	s13, [pc, #704]	@ 8001ec4 <vLineSensorPIDControl+0x2e8>
 8001c04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c08:	4baf      	ldr	r3, [pc, #700]	@ (8001ec8 <vLineSensorPIDControl+0x2ec>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8001c0e:	4bae      	ldr	r3, [pc, #696]	@ (8001ec8 <vLineSensorPIDControl+0x2ec>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d802      	bhi.n	8001c24 <vLineSensorPIDControl+0x48>
        delta_time = 0.01f; // Evita divisão por zero
 8001c1e:	4baa      	ldr	r3, [pc, #680]	@ (8001ec8 <vLineSensorPIDControl+0x2ec>)
 8001c20:	4aaa      	ldr	r2, [pc, #680]	@ (8001ecc <vLineSensorPIDControl+0x2f0>)
 8001c22:	601a      	str	r2, [r3, #0]
    }

    float position = fLineSensorCalculatePosition();
 8001c24:	f7ff ff48 	bl	8001ab8 <fLineSensorCalculatePosition>
 8001c28:	ed87 0a02 	vstr	s0, [r7, #8]

    // Se nenhum sensor detectar a linha
    if (position == 99) {
 8001c2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c30:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8001ed0 <vLineSensorPIDControl+0x2f4>
 8001c34:	eef4 7a47 	vcmp.f32	s15, s14
 8001c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3c:	d106      	bne.n	8001c4c <vLineSensorPIDControl+0x70>
        vSetRodasDC(0, 0);
 8001c3e:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8001ed4 <vLineSensorPIDControl+0x2f8>
 8001c42:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8001ed4 <vLineSensorPIDControl+0x2f8>
 8001c46:	f7ff ff09 	bl	8001a5c <vSetRodasDC>
        return;
 8001c4a:	e136      	b.n	8001eba <vLineSensorPIDControl+0x2de>
    }

    // Calcula o erro (posição desejada é 0)
    error = 0 - position;
 8001c4c:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001ed4 <vLineSensorPIDControl+0x2f8>
 8001c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c58:	4b9f      	ldr	r3, [pc, #636]	@ (8001ed8 <vLineSensorPIDControl+0x2fc>)
 8001c5a:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 8001c5e:	4b9e      	ldr	r3, [pc, #632]	@ (8001ed8 <vLineSensorPIDControl+0x2fc>)
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b98      	ldr	r3, [pc, #608]	@ (8001ec8 <vLineSensorPIDControl+0x2ec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8001edc <vLineSensorPIDControl+0x300>)
 8001c70:	edd3 7a00 	vldr	s15, [r3]
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	4b98      	ldr	r3, [pc, #608]	@ (8001edc <vLineSensorPIDControl+0x300>)
 8001c7a:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 8001c7e:	4b96      	ldr	r3, [pc, #600]	@ (8001ed8 <vLineSensorPIDControl+0x2fc>)
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	4b96      	ldr	r3, [pc, #600]	@ (8001ee0 <vLineSensorPIDControl+0x304>)
 8001c86:	edd3 7a00 	vldr	s15, [r3]
 8001c8a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c8e:	4b8e      	ldr	r3, [pc, #568]	@ (8001ec8 <vLineSensorPIDControl+0x2ec>)
 8001c90:	ed93 7a00 	vldr	s14, [r3]
 8001c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c98:	4b92      	ldr	r3, [pc, #584]	@ (8001ee4 <vLineSensorPIDControl+0x308>)
 8001c9a:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 8001c9e:	4b92      	ldr	r3, [pc, #584]	@ (8001ee8 <vLineSensorPIDControl+0x30c>)
 8001ca0:	ed93 7a00 	vldr	s14, [r3]
 8001ca4:	4b8c      	ldr	r3, [pc, #560]	@ (8001ed8 <vLineSensorPIDControl+0x2fc>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cae:	4b8f      	ldr	r3, [pc, #572]	@ (8001eec <vLineSensorPIDControl+0x310>)
 8001cb0:	edd3 6a00 	vldr	s13, [r3]
 8001cb4:	4b89      	ldr	r3, [pc, #548]	@ (8001edc <vLineSensorPIDControl+0x300>)
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8001ef0 <vLineSensorPIDControl+0x314>)
 8001cc4:	edd3 6a00 	vldr	s13, [r3]
 8001cc8:	4b86      	ldr	r3, [pc, #536]	@ (8001ee4 <vLineSensorPIDControl+0x308>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd6:	eef1 7a67 	vneg.f32	s15, s15
 8001cda:	4b86      	ldr	r3, [pc, #536]	@ (8001ef4 <vLineSensorPIDControl+0x318>)
 8001cdc:	edc3 7a00 	vstr	s15, [r3]

    // Limita a saída do controlador para evitar saturação
    if (control_output > max_duty_cycle) control_output = max_duty_cycle;
 8001ce0:	4b84      	ldr	r3, [pc, #528]	@ (8001ef4 <vLineSensorPIDControl+0x318>)
 8001ce2:	ed93 7a00 	vldr	s14, [r3]
 8001ce6:	4b84      	ldr	r3, [pc, #528]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001ce8:	edd3 7a00 	vldr	s15, [r3]
 8001cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	dd03      	ble.n	8001cfe <vLineSensorPIDControl+0x122>
 8001cf6:	4b80      	ldr	r3, [pc, #512]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8001ef4 <vLineSensorPIDControl+0x318>)
 8001cfc:	6013      	str	r3, [r2, #0]
    if (control_output < -max_duty_cycle) control_output = -max_duty_cycle;
 8001cfe:	4b7e      	ldr	r3, [pc, #504]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eeb1 7a67 	vneg.f32	s14, s15
 8001d08:	4b7a      	ldr	r3, [pc, #488]	@ (8001ef4 <vLineSensorPIDControl+0x318>)
 8001d0a:	edd3 7a00 	vldr	s15, [r3]
 8001d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	dd07      	ble.n	8001d28 <vLineSensorPIDControl+0x14c>
 8001d18:	4b77      	ldr	r3, [pc, #476]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	eef1 7a67 	vneg.f32	s15, s15
 8001d22:	4b74      	ldr	r3, [pc, #464]	@ (8001ef4 <vLineSensorPIDControl+0x318>)
 8001d24:	edc3 7a00 	vstr	s15, [r3]

    previous_error = error;
 8001d28:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <vLineSensorPIDControl+0x2fc>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a6c      	ldr	r2, [pc, #432]	@ (8001ee0 <vLineSensorPIDControl+0x304>)
 8001d2e:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8001d30:	4a63      	ldr	r2, [pc, #396]	@ (8001ec0 <vLineSensorPIDControl+0x2e4>)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6013      	str	r3, [r2, #0]

    // Ajusta velocidades dos motores com base nos sensores
    float left_speed = left_encoder_speed;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	617b      	str	r3, [r7, #20]
    float right_speed = right_encoder_speed;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	613b      	str	r3, [r7, #16]

    // Ajuste de velocidade para os sensores
    if (lineSensor4Value >= 380 && lineSensor4Value <= 550) {
 8001d3e:	4b6f      	ldr	r3, [pc, #444]	@ (8001efc <vLineSensorPIDControl+0x320>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8001d46:	d31d      	bcc.n	8001d84 <vLineSensorPIDControl+0x1a8>
 8001d48:	4b6c      	ldr	r3, [pc, #432]	@ (8001efc <vLineSensorPIDControl+0x320>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f240 2226 	movw	r2, #550	@ 0x226
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d817      	bhi.n	8001d84 <vLineSensorPIDControl+0x1a8>
        left_speed += left_speed * 0.05f; // Incremento de 5% na roda esquerda
 8001d54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d58:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001f00 <vLineSensorPIDControl+0x324>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d68:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed -= right_speed * 0.05f; // Decremento de 5% na roda direita
 8001d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d70:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001f00 <vLineSensorPIDControl+0x324>
 8001d74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d78:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    if (lineSensor5Value >= 380 && lineSensor5Value <= 550) {
 8001d84:	4b5f      	ldr	r3, [pc, #380]	@ (8001f04 <vLineSensorPIDControl+0x328>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8001d8c:	d31d      	bcc.n	8001dca <vLineSensorPIDControl+0x1ee>
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <vLineSensorPIDControl+0x328>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f240 2226 	movw	r2, #550	@ 0x226
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d817      	bhi.n	8001dca <vLineSensorPIDControl+0x1ee>
        left_speed += left_speed * 0.15f; // Incremento de 10% na roda esquerda
 8001d9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9e:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001f08 <vLineSensorPIDControl+0x32c>
 8001da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da6:	ed97 7a05 	vldr	s14, [r7, #20]
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	edc7 7a05 	vstr	s15, [r7, #20]
        right_speed -= right_speed * 0.15f; // Decremento de 10% na roda direita
 8001db2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001db6:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8001f08 <vLineSensorPIDControl+0x32c>
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dc6:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    if (lineSensor2Value >= 380 && lineSensor2Value <= 500) {
 8001dca:	4b50      	ldr	r3, [pc, #320]	@ (8001f0c <vLineSensorPIDControl+0x330>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8001dd2:	d31c      	bcc.n	8001e0e <vLineSensorPIDControl+0x232>
 8001dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8001f0c <vLineSensorPIDControl+0x330>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001ddc:	d817      	bhi.n	8001e0e <vLineSensorPIDControl+0x232>
        right_speed += right_speed * 0.05f; // Incremento de 5% na roda direita
 8001dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001de2:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001f00 <vLineSensorPIDControl+0x324>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	ed97 7a04 	vldr	s14, [r7, #16]
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	edc7 7a04 	vstr	s15, [r7, #16]
        left_speed -= left_speed * 0.05f; // Decremento de 5% na roda esquerda
 8001df6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dfa:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001f00 <vLineSensorPIDControl+0x324>
 8001dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    if (lineSensor1Value >= 380 && lineSensor1Value <= 500) {
 8001e0e:	4b40      	ldr	r3, [pc, #256]	@ (8001f10 <vLineSensorPIDControl+0x334>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f5b3 7fbe 	cmp.w	r3, #380	@ 0x17c
 8001e16:	d31c      	bcc.n	8001e52 <vLineSensorPIDControl+0x276>
 8001e18:	4b3d      	ldr	r3, [pc, #244]	@ (8001f10 <vLineSensorPIDControl+0x334>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001e20:	d817      	bhi.n	8001e52 <vLineSensorPIDControl+0x276>
        right_speed += right_speed * 0.15f; // Incremento de 10% na roda direita
 8001e22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e26:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001f08 <vLineSensorPIDControl+0x32c>
 8001e2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e36:	edc7 7a04 	vstr	s15, [r7, #16]
        left_speed -= left_speed * 0.15f; // Decremento de 10% na roda esquerda
 8001e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e3e:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8001f08 <vLineSensorPIDControl+0x32c>
 8001e42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4e:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // Garante que as velocidades estão entre 0 e max_duty_cycle
    if (left_speed > max_duty_cycle) left_speed = max_duty_cycle;
 8001e52:	4b29      	ldr	r3, [pc, #164]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	dd02      	ble.n	8001e6c <vLineSensorPIDControl+0x290>
 8001e66:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	617b      	str	r3, [r7, #20]
    if (left_speed < 0.0f) left_speed = 0.0f;
 8001e6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e78:	d502      	bpl.n	8001e80 <vLineSensorPIDControl+0x2a4>
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
    if (right_speed > max_duty_cycle) right_speed = max_duty_cycle;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	dd02      	ble.n	8001e9a <vLineSensorPIDControl+0x2be>
 8001e94:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <vLineSensorPIDControl+0x31c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]
    if (right_speed < 0.0f) right_speed = 0.0f;
 8001e9a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea6:	d502      	bpl.n	8001eae <vLineSensorPIDControl+0x2d2>
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]

    // Ajusta as velocidades dos motores
    vSetRodasDC(left_speed, right_speed);
 8001eae:	edd7 0a04 	vldr	s1, [r7, #16]
 8001eb2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001eb6:	f7ff fdd1 	bl	8001a5c <vSetRodasDC>
}
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200005a8 	.word	0x200005a8
 8001ec4:	447a0000 	.word	0x447a0000
 8001ec8:	2000000c 	.word	0x2000000c
 8001ecc:	3c23d70a 	.word	0x3c23d70a
 8001ed0:	42c60000 	.word	0x42c60000
 8001ed4:	00000000 	.word	0x00000000
 8001ed8:	20000594 	.word	0x20000594
 8001edc:	2000059c 	.word	0x2000059c
 8001ee0:	20000598 	.word	0x20000598
 8001ee4:	200005a0 	.word	0x200005a0
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000008 	.word	0x20000008
 8001ef4:	200005a4 	.word	0x200005a4
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	2000058c 	.word	0x2000058c
 8001f00:	3d4ccccd 	.word	0x3d4ccccd
 8001f04:	20000590 	.word	0x20000590
 8001f08:	3e19999a 	.word	0x3e19999a
 8001f0c:	20000584 	.word	0x20000584
 8001f10:	20000580 	.word	0x20000580

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4a08      	ldr	r2, [pc, #32]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3e:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <HAL_MspInit+0x44>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f4a:	f002 fae9 	bl	8004520 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40021000 	.word	0x40021000

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <NMI_Handler+0x4>

08001f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <MemManage_Handler+0x4>

08001f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb2:	f000 fb95 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc0:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001fc2:	f003 fb52 	bl	800566a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001fc6:	4803      	ldr	r0, [pc, #12]	@ (8001fd4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001fc8:	f003 fb4f 	bl	800566a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200005ac 	.word	0x200005ac
 8001fd4:	200005f8 	.word	0x200005f8

08001fd8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fdc:	4803      	ldr	r0, [pc, #12]	@ (8001fec <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001fde:	f003 fb44 	bl	800566a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001fe2:	4803      	ldr	r0, [pc, #12]	@ (8001ff0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001fe4:	f003 fb41 	bl	800566a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200005ac 	.word	0x200005ac
 8001ff0:	20000644 	.word	0x20000644

08001ff4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <I2C2_EV_IRQHandler+0x10>)
 8001ffa:	f002 f93b 	bl	8004274 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000460 	.word	0x20000460

08002008 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800200c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002010:	f002 f872 	bl	80040f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b09c      	sub	sp, #112	@ 0x70
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	2234      	movs	r2, #52	@ 0x34
 8002074:	2100      	movs	r1, #0
 8002076:	4618      	mov	r0, r3
 8002078:	f005 fcfa 	bl	8007a70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800207c:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <MX_TIM1_Init+0x170>)
 800207e:	4a4c      	ldr	r2, [pc, #304]	@ (80021b0 <MX_TIM1_Init+0x174>)
 8002080:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8002082:	4b4a      	ldr	r3, [pc, #296]	@ (80021ac <MX_TIM1_Init+0x170>)
 8002084:	22a9      	movs	r2, #169	@ 0xa9
 8002086:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b48      	ldr	r3, [pc, #288]	@ (80021ac <MX_TIM1_Init+0x170>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800208e:	4b47      	ldr	r3, [pc, #284]	@ (80021ac <MX_TIM1_Init+0x170>)
 8002090:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002094:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b45      	ldr	r3, [pc, #276]	@ (80021ac <MX_TIM1_Init+0x170>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800209c:	4b43      	ldr	r3, [pc, #268]	@ (80021ac <MX_TIM1_Init+0x170>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <MX_TIM1_Init+0x170>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020a8:	4840      	ldr	r0, [pc, #256]	@ (80021ac <MX_TIM1_Init+0x170>)
 80020aa:	f003 f9c5 	bl	8005438 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80020b4:	f7ff fccb 	bl	8001a4e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80020c2:	4619      	mov	r1, r3
 80020c4:	4839      	ldr	r0, [pc, #228]	@ (80021ac <MX_TIM1_Init+0x170>)
 80020c6:	f003 fdcf 	bl	8005c68 <HAL_TIM_ConfigClockSource>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80020d0:	f7ff fcbd 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020d4:	4835      	ldr	r0, [pc, #212]	@ (80021ac <MX_TIM1_Init+0x170>)
 80020d6:	f003 fa06 	bl	80054e6 <HAL_TIM_PWM_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80020e0:	f7ff fcb5 	bl	8001a4e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e4:	2300      	movs	r3, #0
 80020e6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020f4:	4619      	mov	r1, r3
 80020f6:	482d      	ldr	r0, [pc, #180]	@ (80021ac <MX_TIM1_Init+0x170>)
 80020f8:	f004 fcdc 	bl	8006ab4 <HAL_TIMEx_MasterConfigSynchronization>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002102:	f7ff fca4 	bl	8001a4e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002106:	2360      	movs	r3, #96	@ 0x60
 8002108:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800210e:	2300      	movs	r3, #0
 8002110:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002112:	2300      	movs	r3, #0
 8002114:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002116:	2300      	movs	r3, #0
 8002118:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002122:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	4820      	ldr	r0, [pc, #128]	@ (80021ac <MX_TIM1_Init+0x170>)
 800212c:	f003 fc88 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002136:	f7ff fc8a 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800213a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800213e:	2204      	movs	r2, #4
 8002140:	4619      	mov	r1, r3
 8002142:	481a      	ldr	r0, [pc, #104]	@ (80021ac <MX_TIM1_Init+0x170>)
 8002144:	f003 fc7c 	bl	8005a40 <HAL_TIM_PWM_ConfigChannel>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800214e:	f7ff fc7e 	bl	8001a4e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800215a:	2300      	movs	r3, #0
 800215c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800216a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002178:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002182:	2300      	movs	r3, #0
 8002184:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	4619      	mov	r1, r3
 800218e:	4807      	ldr	r0, [pc, #28]	@ (80021ac <MX_TIM1_Init+0x170>)
 8002190:	f004 fd26 	bl	8006be0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800219a:	f7ff fc58 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800219e:	4803      	ldr	r0, [pc, #12]	@ (80021ac <MX_TIM1_Init+0x170>)
 80021a0:	f000 f948 	bl	8002434 <HAL_TIM_MspPostInit>

}
 80021a4:	bf00      	nop
 80021a6:	3770      	adds	r7, #112	@ 0x70
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	200005ac 	.word	0x200005ac
 80021b0:	40012c00 	.word	0x40012c00

080021b4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 80021ba:	463b      	mov	r3, r7
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]
 80021c4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021c8:	4a1f      	ldr	r2, [pc, #124]	@ (8002248 <MX_TIM16_Init+0x94>)
 80021ca:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1700-1;
 80021cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021ce:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80021d2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50000;
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021dc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80021e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e2:	4b18      	ldr	r3, [pc, #96]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021e8:	4b16      	ldr	r3, [pc, #88]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b15      	ldr	r3, [pc, #84]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021f4:	4813      	ldr	r0, [pc, #76]	@ (8002244 <MX_TIM16_Init+0x90>)
 80021f6:	f003 f91f 	bl	8005438 <HAL_TIM_Base_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM16_Init+0x50>
  {
    Error_Handler();
 8002200:	f7ff fc25 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8002204:	480f      	ldr	r0, [pc, #60]	@ (8002244 <MX_TIM16_Init+0x90>)
 8002206:	f003 f9cf 	bl	80055a8 <HAL_TIM_IC_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8002210:	f7ff fc1d 	bl	8001a4e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002218:	2301      	movs	r3, #1
 800221a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800221c:	2300      	movs	r3, #0
 800221e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	4619      	mov	r1, r3
 800222a:	4806      	ldr	r0, [pc, #24]	@ (8002244 <MX_TIM16_Init+0x90>)
 800222c:	f003 fb6c 	bl	8005908 <HAL_TIM_IC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM16_Init+0x86>
  {
    Error_Handler();
 8002236:	f7ff fc0a 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200005f8 	.word	0x200005f8
 8002248:	40014400 	.word	0x40014400

0800224c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8002252:	463b      	mov	r3, r7
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	605a      	str	r2, [r3, #4]
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <MX_TIM17_Init+0x90>)
 8002260:	4a1f      	ldr	r2, [pc, #124]	@ (80022e0 <MX_TIM17_Init+0x94>)
 8002262:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1700-1;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_TIM17_Init+0x90>)
 8002266:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800226a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226c:	4b1b      	ldr	r3, [pc, #108]	@ (80022dc <MX_TIM17_Init+0x90>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 50000;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM17_Init+0x90>)
 8002274:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002278:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800227a:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <MX_TIM17_Init+0x90>)
 800227c:	2200      	movs	r2, #0
 800227e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_TIM17_Init+0x90>)
 8002282:	2200      	movs	r2, #0
 8002284:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_TIM17_Init+0x90>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800228c:	4813      	ldr	r0, [pc, #76]	@ (80022dc <MX_TIM17_Init+0x90>)
 800228e:	f003 f8d3 	bl	8005438 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM17_Init+0x50>
  {
    Error_Handler();
 8002298:	f7ff fbd9 	bl	8001a4e <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 800229c:	480f      	ldr	r0, [pc, #60]	@ (80022dc <MX_TIM17_Init+0x90>)
 800229e:	f003 f983 	bl	80055a8 <HAL_TIM_IC_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80022a8:	f7ff fbd1 	bl	8001a4e <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022ac:	2300      	movs	r3, #0
 80022ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022b0:	2301      	movs	r3, #1
 80022b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022b4:	2300      	movs	r3, #0
 80022b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	2200      	movs	r2, #0
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	@ (80022dc <MX_TIM17_Init+0x90>)
 80022c4:	f003 fb20 	bl	8005908 <HAL_TIM_IC_ConfigChannel>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM17_Init+0x86>
  {
    Error_Handler();
 80022ce:	f7ff fbbe 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000644 	.word	0x20000644
 80022e0:	40014800 	.word	0x40014800

080022e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a47      	ldr	r2, [pc, #284]	@ (8002420 <HAL_TIM_Base_MspInit+0x13c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11c      	bne.n	8002340 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800230a:	4a46      	ldr	r2, [pc, #280]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 800230c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002310:	6613      	str	r3, [r2, #96]	@ 0x60
 8002312:	4b44      	ldr	r3, [pc, #272]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002314:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002316:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	69bb      	ldr	r3, [r7, #24]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2019      	movs	r0, #25
 8002324:	f001 fbf7 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002328:	2019      	movs	r0, #25
 800232a:	f001 fc0e 	bl	8003b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800232e:	2200      	movs	r2, #0
 8002330:	2100      	movs	r1, #0
 8002332:	201a      	movs	r0, #26
 8002334:	f001 fbef 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002338:	201a      	movs	r0, #26
 800233a:	f001 fc06 	bl	8003b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800233e:	e06a      	b.n	8002416 <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM16)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a38      	ldr	r2, [pc, #224]	@ (8002428 <HAL_TIM_Base_MspInit+0x144>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d130      	bne.n	80023ac <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800234a:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 800234c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800234e:	4a35      	ldr	r2, [pc, #212]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002350:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002354:	6613      	str	r3, [r2, #96]	@ 0x60
 8002356:	4b33      	ldr	r3, [pc, #204]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	4b30      	ldr	r3, [pc, #192]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002366:	4a2f      	ldr	r2, [pc, #188]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236e:	4b2d      	ldr	r3, [pc, #180]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	613b      	str	r3, [r7, #16]
 8002378:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 800237a:	2310      	movs	r3, #16
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800238a:	2301      	movs	r3, #1
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 800238e:	f107 031c 	add.w	r3, r7, #28
 8002392:	4619      	mov	r1, r3
 8002394:	4825      	ldr	r0, [pc, #148]	@ (800242c <HAL_TIM_Base_MspInit+0x148>)
 8002396:	f001 fcfd 	bl	8003d94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2019      	movs	r0, #25
 80023a0:	f001 fbb9 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80023a4:	2019      	movs	r0, #25
 80023a6:	f001 fbd0 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 80023aa:	e034      	b.n	8002416 <HAL_TIM_Base_MspInit+0x132>
  else if(tim_baseHandle->Instance==TIM17)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002430 <HAL_TIM_Base_MspInit+0x14c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d12f      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x132>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80023b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c2:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ce:	4b15      	ldr	r3, [pc, #84]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d2:	4a14      	ldr	r2, [pc, #80]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_TIM_Base_MspInit+0x140>)
 80023dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 80023e6:	2320      	movs	r3, #32
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f2:	2300      	movs	r3, #0
 80023f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80023f6:	230a      	movs	r3, #10
 80023f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 80023fa:	f107 031c 	add.w	r3, r7, #28
 80023fe:	4619      	mov	r1, r3
 8002400:	480a      	ldr	r0, [pc, #40]	@ (800242c <HAL_TIM_Base_MspInit+0x148>)
 8002402:	f001 fcc7 	bl	8003d94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	201a      	movs	r0, #26
 800240c:	f001 fb83 	bl	8003b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002410:	201a      	movs	r0, #26
 8002412:	f001 fb9a 	bl	8003b4a <HAL_NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3730      	adds	r7, #48	@ 0x30
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40012c00 	.word	0x40012c00
 8002424:	40021000 	.word	0x40021000
 8002428:	40014400 	.word	0x40014400
 800242c:	48000400 	.word	0x48000400
 8002430:	40014800 	.word	0x40014800

08002434 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	609a      	str	r2, [r3, #8]
 8002448:	60da      	str	r2, [r3, #12]
 800244a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a11      	ldr	r2, [pc, #68]	@ (8002498 <HAL_TIM_MspPostInit+0x64>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d11b      	bne.n	800248e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	4b11      	ldr	r3, [pc, #68]	@ (800249c <HAL_TIM_MspPostInit+0x68>)
 8002458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245a:	4a10      	ldr	r2, [pc, #64]	@ (800249c <HAL_TIM_MspPostInit+0x68>)
 800245c:	f043 0304 	orr.w	r3, r3, #4
 8002460:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002462:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <HAL_TIM_MspPostInit+0x68>)
 8002464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 800246e:	2303      	movs	r3, #3
 8002470:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002476:	2300      	movs	r3, #0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800247e:	2302      	movs	r3, #2
 8002480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4619      	mov	r1, r3
 8002488:	4805      	ldr	r0, [pc, #20]	@ (80024a0 <HAL_TIM_MspPostInit+0x6c>)
 800248a:	f001 fc83 	bl	8003d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	40012c00 	.word	0x40012c00
 800249c:	40021000 	.word	0x40021000
 80024a0:	48000800 	.word	0x48000800

080024a4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80024a8:	4b21      	ldr	r3, [pc, #132]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024aa:	4a22      	ldr	r2, [pc, #136]	@ (8002534 <MX_LPUART1_UART_Init+0x90>)
 80024ac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024b4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80024bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024ca:	220c      	movs	r2, #12
 80024cc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ce:	4b18      	ldr	r3, [pc, #96]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024d4:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024e0:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024e6:	4812      	ldr	r0, [pc, #72]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024e8:	f004 fc54 	bl	8006d94 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80024f2:	f7ff faac 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f6:	2100      	movs	r1, #0
 80024f8:	480d      	ldr	r0, [pc, #52]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 80024fa:	f005 f9ef 	bl	80078dc <HAL_UARTEx_SetTxFifoThreshold>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002504:	f7ff faa3 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002508:	2100      	movs	r1, #0
 800250a:	4809      	ldr	r0, [pc, #36]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 800250c:	f005 fa24 	bl	8007958 <HAL_UARTEx_SetRxFifoThreshold>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002516:	f7ff fa9a 	bl	8001a4e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800251a:	4805      	ldr	r0, [pc, #20]	@ (8002530 <MX_LPUART1_UART_Init+0x8c>)
 800251c:	f005 f9a5 	bl	800786a <HAL_UARTEx_DisableFifoMode>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002526:	f7ff fa92 	bl	8001a4e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	20000690 	.word	0x20000690
 8002534:	40008000 	.word	0x40008000

08002538 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b09e      	sub	sp, #120	@ 0x78
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002540:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002550:	f107 0310 	add.w	r3, r7, #16
 8002554:	2254      	movs	r2, #84	@ 0x54
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f005 fa89 	bl	8007a70 <memset>
  if(uartHandle->Instance==LPUART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1f      	ldr	r2, [pc, #124]	@ (80025e0 <HAL_UART_MspInit+0xa8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d136      	bne.n	80025d6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002568:	2320      	movs	r3, #32
 800256a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800256c:	2300      	movs	r3, #0
 800256e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002570:	f107 0310 	add.w	r3, r7, #16
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fd11 	bl	8004f9c <HAL_RCCEx_PeriphCLKConfig>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002580:	f7ff fa65 	bl	8001a4e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002584:	4b17      	ldr	r3, [pc, #92]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	4a16      	ldr	r2, [pc, #88]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	4a10      	ldr	r2, [pc, #64]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_UART_MspInit+0xac>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80025b4:	230c      	movs	r3, #12
 80025b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80025c4:	230c      	movs	r3, #12
 80025c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025cc:	4619      	mov	r1, r3
 80025ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d2:	f001 fbdf 	bl	8003d94 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80025d6:	bf00      	nop
 80025d8:	3778      	adds	r7, #120	@ 0x78
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40008000 	.word	0x40008000
 80025e4:	40021000 	.word	0x40021000

080025e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e8:	480d      	ldr	r0, [pc, #52]	@ (8002620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff fd14 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	@ (8002628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	@ (8002634 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f005 fa33 	bl	8007a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261a:	f7ff f95d 	bl	80018d8 <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   r0, =_estack
 8002620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 800262c:	08007b44 	.word	0x08007b44
  ldr r2, =_sbss
 8002630:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8002634:	20000728 	.word	0x20000728

08002638 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_2_IRQHandler>

0800263a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f001 fa5b 	bl	8003b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264a:	2000      	movs	r0, #0
 800264c:	f000 f80e 	bl	800266c <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	e001      	b.n	8002660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800265c:	f7ff fc5a 	bl	8001f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002660:	79fb      	ldrb	r3, [r7, #7]

}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <HAL_InitTick+0x68>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d022      	beq.n	80026c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_InitTick+0x6c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_InitTick+0x68>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f001 fa66 	bl	8003b66 <HAL_SYSTICK_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	d809      	bhi.n	80026ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a6:	2200      	movs	r2, #0
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	f04f 30ff 	mov.w	r0, #4294967295
 80026ae:	f001 fa32 	bl	8003b16 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_InitTick+0x70>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e007      	b.n	80026ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e004      	b.n	80026ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e001      	b.n	80026ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000001c 	.word	0x2000001c
 80026d8:	20000014 	.word	0x20000014
 80026dc:	20000018 	.word	0x20000018

080026e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_IncTick+0x1c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_IncTick+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_IncTick+0x1c>)
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20000724 	.word	0x20000724
 8002700:	2000001c 	.word	0x2000001c

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000724 	.word	0x20000724

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d004      	beq.n	8002740 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_Delay+0x40>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002740:	bf00      	nop
 8002742:	f7ff ffdf 	bl	8002704 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d8f7      	bhi.n	8002742 <HAL_Delay+0x26>
  {
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000001c 	.word	0x2000001c

08002760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3360      	adds	r3, #96	@ 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_ADC_SetOffset+0x44>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	03fff000 	.word	0x03fff000

08002810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3360      	adds	r3, #96	@ 0x60
 800281e:	461a      	mov	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	@ 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002872:	b480      	push	{r7}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3360      	adds	r3, #96	@ 0x60
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3360      	adds	r3, #96	@ 0x60
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3330      	adds	r3, #48	@ 0x30
 8002914:	461a      	mov	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	4413      	add	r3, r2
 8002922:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	f003 031f 	and.w	r3, r3, #31
 800292e:	211f      	movs	r1, #31
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	401a      	ands	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	f003 011f 	and.w	r1, r3, #31
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	fa01 f303 	lsl.w	r3, r1, r3
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	3314      	adds	r3, #20
 800296c:	461a      	mov	r2, r3
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	0e5b      	lsrs	r3, r3, #25
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	4413      	add	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	0d1b      	lsrs	r3, r3, #20
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2107      	movs	r1, #7
 800298a:	fa01 f303 	lsl.w	r3, r1, r3
 800298e:	43db      	mvns	r3, r3
 8002990:	401a      	ands	r2, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0d1b      	lsrs	r3, r3, #20
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	431a      	orrs	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029cc:	43db      	mvns	r3, r3
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f003 0318 	and.w	r3, r3, #24
 80029d6:	4908      	ldr	r1, [pc, #32]	@ (80029f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80029d8:	40d9      	lsrs	r1, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	400b      	ands	r3, r1
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	0007ffff 	.word	0x0007ffff

080029fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6093      	str	r3, [r2, #8]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a34:	d101      	bne.n	8002a3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a84:	d101      	bne.n	8002a8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <LL_ADC_IsEnabled+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_ADC_IsEnabled+0x1a>
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b083      	sub	sp, #12
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d101      	bne.n	8002ad6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d101      	bne.n	8002afc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002af8:	2301      	movs	r3, #1
 8002afa:	e000      	b.n	8002afe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e1a9      	b.n	8002e7a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe f901 	bl	8000d3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff67 	bl	8002a20 <LL_ADC_IsDeepPowerDownEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d004      	beq.n	8002b62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff4d 	bl	80029fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff82 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d115      	bne.n	8002b9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7ff ff66 	bl	8002a48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b7c:	4b9c      	ldr	r3, [pc, #624]	@ (8002df0 <HAL_ADC_Init+0x2e4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	4a9c      	ldr	r2, [pc, #624]	@ (8002df4 <HAL_ADC_Init+0x2e8>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b90:	e002      	b.n	8002b98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f9      	bne.n	8002b92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff ff64 	bl	8002a70 <LL_ADC_IsInternalRegulatorEnabled>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10d      	bne.n	8002bca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb2:	f043 0210 	orr.w	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bbe:	f043 0201 	orr.w	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff ff75 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002bd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 8142 	bne.w	8002e68 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 813e 	bne.w	8002e68 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bf4:	f043 0202 	orr.w	r2, r3, #2
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff49 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d141      	bne.n	8002c90 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c14:	d004      	beq.n	8002c20 <HAL_ADC_Init+0x114>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a77      	ldr	r2, [pc, #476]	@ (8002df8 <HAL_ADC_Init+0x2ec>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d10f      	bne.n	8002c40 <HAL_ADC_Init+0x134>
 8002c20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002c24:	f7ff ff38 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c28:	4604      	mov	r4, r0
 8002c2a:	4873      	ldr	r0, [pc, #460]	@ (8002df8 <HAL_ADC_Init+0x2ec>)
 8002c2c:	f7ff ff34 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c30:	4603      	mov	r3, r0
 8002c32:	4323      	orrs	r3, r4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e012      	b.n	8002c66 <HAL_ADC_Init+0x15a>
 8002c40:	486e      	ldr	r0, [pc, #440]	@ (8002dfc <HAL_ADC_Init+0x2f0>)
 8002c42:	f7ff ff29 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c46:	4604      	mov	r4, r0
 8002c48:	486d      	ldr	r0, [pc, #436]	@ (8002e00 <HAL_ADC_Init+0x2f4>)
 8002c4a:	f7ff ff25 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	431c      	orrs	r4, r3
 8002c52:	486c      	ldr	r0, [pc, #432]	@ (8002e04 <HAL_ADC_Init+0x2f8>)
 8002c54:	f7ff ff20 	bl	8002a98 <LL_ADC_IsEnabled>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4323      	orrs	r3, r4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c72:	d004      	beq.n	8002c7e <HAL_ADC_Init+0x172>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a5f      	ldr	r2, [pc, #380]	@ (8002df8 <HAL_ADC_Init+0x2ec>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d101      	bne.n	8002c82 <HAL_ADC_Init+0x176>
 8002c7e:	4a62      	ldr	r2, [pc, #392]	@ (8002e08 <HAL_ADC_Init+0x2fc>)
 8002c80:	e000      	b.n	8002c84 <HAL_ADC_Init+0x178>
 8002c82:	4a62      	ldr	r2, [pc, #392]	@ (8002e0c <HAL_ADC_Init+0x300>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7ff fd68 	bl	8002760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7f5b      	ldrb	r3, [r3, #29]
 8002c94:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c9a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002ca0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002ca6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cae:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	045b      	lsls	r3, r3, #17
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68da      	ldr	r2, [r3, #12]
 8002cee:	4b48      	ldr	r3, [pc, #288]	@ (8002e10 <HAL_ADC_Init+0x304>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6812      	ldr	r2, [r2, #0]
 8002cf6:	69b9      	ldr	r1, [r7, #24]
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fee4 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8002d1c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d17f      	bne.n	8002e24 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d17c      	bne.n	8002e24 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d2e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d36:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002d46:	f023 0302 	bic.w	r3, r3, #2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	691b      	ldr	r3, [r3, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d017      	beq.n	8002d8c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002d6a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002d74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	6911      	ldr	r1, [r2, #16]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6812      	ldr	r2, [r2, #0]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002d8a:	e013      	b.n	8002db4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002d9a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002db0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d12a      	bne.n	8002e14 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002dda:	4311      	orrs	r1, r2
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002de0:	430a      	orrs	r2, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f042 0201 	orr.w	r2, r2, #1
 8002dec:	611a      	str	r2, [r3, #16]
 8002dee:	e019      	b.n	8002e24 <HAL_ADC_Init+0x318>
 8002df0:	20000014 	.word	0x20000014
 8002df4:	053e2d63 	.word	0x053e2d63
 8002df8:	50000100 	.word	0x50000100
 8002dfc:	50000400 	.word	0x50000400
 8002e00:	50000500 	.word	0x50000500
 8002e04:	50000600 	.word	0x50000600
 8002e08:	50000300 	.word	0x50000300
 8002e0c:	50000700 	.word	0x50000700
 8002e10:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	691a      	ldr	r2, [r3, #16]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d10c      	bne.n	8002e46 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	f023 010f 	bic.w	r1, r3, #15
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	1e5a      	subs	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e44:	e007      	b.n	8002e56 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 020f 	bic.w	r2, r2, #15
 8002e54:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	f023 0303 	bic.w	r3, r3, #3
 8002e5e:	f043 0201 	orr.w	r2, r3, #1
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e66:	e007      	b.n	8002e78 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e78:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3724      	adds	r7, #36	@ 0x24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd90      	pop	{r4, r7, pc}
 8002e82:	bf00      	nop

08002e84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b0b6      	sub	sp, #216	@ 0xd8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x24>
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	f000 bc13 	b.w	80036ce <HAL_ADC_ConfigChannel+0x84a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff fe02 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f040 83f3 	bne.w	80036a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7ff fd18 	bl	8002904 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff fdf0 	bl	8002abe <LL_ADC_REG_IsConversionOngoing>
 8002ede:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fdfc 	bl	8002ae4 <LL_ADC_INJ_IsConversionOngoing>
 8002eec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ef0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 81d9 	bne.w	80032ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002efa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f040 81d4 	bne.w	80032ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f0c:	d10f      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2200      	movs	r2, #0
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f7ff fd1f 	bl	800295c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fcd9 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>
 8002f2c:	e00e      	b.n	8002f4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6819      	ldr	r1, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f7ff fd0e 	bl	800295c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7ff fcc9 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	08db      	lsrs	r3, r3, #3
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691b      	ldr	r3, [r3, #16]
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	d022      	beq.n	8002fb4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6818      	ldr	r0, [r3, #0]
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f7e:	f7ff fc23 	bl	80027c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6919      	ldr	r1, [r3, #16]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	f7ff fc6f 	bl	8002872 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x126>
 8002fa4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_ConfigChannel+0x128>
 8002faa:	2300      	movs	r3, #0
 8002fac:	461a      	mov	r2, r3
 8002fae:	f7ff fc7b 	bl	80028a8 <LL_ADC_SetOffsetSaturation>
 8002fb2:	e17b      	b.n	80032ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2100      	movs	r1, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fc28 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x15c>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff fc1d 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	f003 021f 	and.w	r2, r3, #31
 8002fde:	e01e      	b.n	800301e <HAL_ADC_ConfigChannel+0x19a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fc12 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ffe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003002:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003006:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800300e:	2320      	movs	r3, #32
 8003010:	e004      	b.n	800301c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003012:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003026:	2b00      	cmp	r3, #0
 8003028:	d105      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x1b2>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	0e9b      	lsrs	r3, r3, #26
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	e018      	b.n	8003068 <HAL_ADC_ConfigChannel+0x1e4>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800304a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800304e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800305a:	2320      	movs	r3, #32
 800305c:	e004      	b.n	8003068 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800305e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003062:	fab3 f383 	clz	r3, r3
 8003066:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003068:	429a      	cmp	r2, r3
 800306a:	d106      	bne.n	800307a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2200      	movs	r2, #0
 8003072:	2100      	movs	r1, #0
 8003074:	4618      	mov	r0, r3
 8003076:	f7ff fbe1 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fbc5 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003086:	4603      	mov	r3, r0
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x222>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f7ff fbba 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800309c:	4603      	mov	r3, r0
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	e01e      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x260>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff fbaf 	bl	8002810 <LL_ADC_GetOffsetChannel>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030bc:	fa93 f3a3 	rbit	r3, r3
 80030c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80030c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80030cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d101      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80030d4:	2320      	movs	r3, #32
 80030d6:	e004      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80030d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80030dc:	fab3 f383 	clz	r3, r3
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x278>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	e018      	b.n	800312e <HAL_ADC_ConfigChannel+0x2aa>
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003110:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003114:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003118:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e004      	b.n	800312e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003124:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800312e:	429a      	cmp	r2, r3
 8003130:	d106      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2200      	movs	r2, #0
 8003138:	2101      	movs	r1, #1
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff fb7e 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2102      	movs	r1, #2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fb62 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800314c:	4603      	mov	r3, r0
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10a      	bne.n	800316c <HAL_ADC_ConfigChannel+0x2e8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2102      	movs	r1, #2
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fb57 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	f003 021f 	and.w	r2, r3, #31
 800316a:	e01e      	b.n	80031aa <HAL_ADC_ConfigChannel+0x326>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2102      	movs	r1, #2
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fb4c 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003178:	4603      	mov	r3, r0
 800317a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800318a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800318e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003192:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800319a:	2320      	movs	r3, #32
 800319c:	e004      	b.n	80031a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800319e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031a2:	fab3 f383 	clz	r3, r3
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d105      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x33e>
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	e016      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x36c>
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80031d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80031da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80031e2:	2320      	movs	r3, #32
 80031e4:	e004      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80031e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d106      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2200      	movs	r2, #0
 80031fa:	2102      	movs	r1, #2
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fb1d 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2103      	movs	r1, #3
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fb01 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800320e:	4603      	mov	r3, r0
 8003210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x3aa>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2103      	movs	r1, #3
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff faf6 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003224:	4603      	mov	r3, r0
 8003226:	0e9b      	lsrs	r3, r3, #26
 8003228:	f003 021f 	and.w	r2, r3, #31
 800322c:	e017      	b.n	800325e <HAL_ADC_ConfigChannel+0x3da>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2103      	movs	r1, #3
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff faeb 	bl	8002810 <LL_ADC_GetOffsetChannel>
 800323a:	4603      	mov	r3, r0
 800323c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003240:	fa93 f3a3 	rbit	r3, r3
 8003244:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003246:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003248:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800324a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800324c:	2b00      	cmp	r3, #0
 800324e:	d101      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003250:	2320      	movs	r3, #32
 8003252:	e003      	b.n	800325c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003254:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003256:	fab3 f383 	clz	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003266:	2b00      	cmp	r3, #0
 8003268:	d105      	bne.n	8003276 <HAL_ADC_ConfigChannel+0x3f2>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	0e9b      	lsrs	r3, r3, #26
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	e011      	b.n	800329a <HAL_ADC_ConfigChannel+0x416>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003284:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003286:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800328e:	2320      	movs	r3, #32
 8003290:	e003      	b.n	800329a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800329a:	429a      	cmp	r2, r3
 800329c:	d106      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2103      	movs	r1, #3
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff fac8 	bl	800283c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff fbf1 	bl	8002a98 <LL_ADC_IsEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f040 813d 	bne.w	8003538 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f7ff fb72 	bl	80029b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4aa2      	ldr	r2, [pc, #648]	@ (8003560 <HAL_ADC_ConfigChannel+0x6dc>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f040 812e 	bne.w	8003538 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10b      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x480>
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	0e9b      	lsrs	r3, r3, #26
 80032f2:	3301      	adds	r3, #1
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	bf94      	ite	ls
 80032fc:	2301      	movls	r3, #1
 80032fe:	2300      	movhi	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e019      	b.n	8003338 <HAL_ADC_ConfigChannel+0x4b4>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003314:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003316:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800331c:	2320      	movs	r3, #32
 800331e:	e003      	b.n	8003328 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003320:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003322:	fab3 f383 	clz	r3, r3
 8003326:	b2db      	uxtb	r3, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	2b09      	cmp	r3, #9
 8003330:	bf94      	ite	ls
 8003332:	2301      	movls	r3, #1
 8003334:	2300      	movhi	r3, #0
 8003336:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003338:	2b00      	cmp	r3, #0
 800333a:	d079      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x4d4>
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	0e9b      	lsrs	r3, r3, #26
 800334e:	3301      	adds	r3, #1
 8003350:	069b      	lsls	r3, r3, #26
 8003352:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003356:	e015      	b.n	8003384 <HAL_ADC_ConfigChannel+0x500>
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003360:	fa93 f3a3 	rbit	r3, r3
 8003364:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003368:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800336a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003370:	2320      	movs	r3, #32
 8003372:	e003      	b.n	800337c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	3301      	adds	r3, #1
 800337e:	069b      	lsls	r3, r3, #26
 8003380:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338c:	2b00      	cmp	r3, #0
 800338e:	d109      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x520>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	0e9b      	lsrs	r3, r3, #26
 8003396:	3301      	adds	r3, #1
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	2101      	movs	r1, #1
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	e017      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x550>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80033b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80033b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e003      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80033c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	f003 031f 	and.w	r3, r3, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f303 	lsl.w	r3, r1, r3
 80033d4:	ea42 0103 	orr.w	r1, r2, r3
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x576>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	0e9b      	lsrs	r3, r3, #26
 80033ea:	3301      	adds	r3, #1
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4613      	mov	r3, r2
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	4413      	add	r3, r2
 80033f6:	051b      	lsls	r3, r3, #20
 80033f8:	e018      	b.n	800342c <HAL_ADC_ConfigChannel+0x5a8>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003402:	fa93 f3a3 	rbit	r3, r3
 8003406:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800340a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800340c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003412:	2320      	movs	r3, #32
 8003414:	e003      	b.n	800341e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f003 021f 	and.w	r2, r3, #31
 8003424:	4613      	mov	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	4413      	add	r3, r2
 800342a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342c:	430b      	orrs	r3, r1
 800342e:	e07e      	b.n	800352e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003438:	2b00      	cmp	r3, #0
 800343a:	d107      	bne.n	800344c <HAL_ADC_ConfigChannel+0x5c8>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	0e9b      	lsrs	r3, r3, #26
 8003442:	3301      	adds	r3, #1
 8003444:	069b      	lsls	r3, r3, #26
 8003446:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800344a:	e015      	b.n	8003478 <HAL_ADC_ConfigChannel+0x5f4>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800345a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800345e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003464:	2320      	movs	r3, #32
 8003466:	e003      	b.n	8003470 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	fab3 f383 	clz	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	3301      	adds	r3, #1
 8003472:	069b      	lsls	r3, r3, #26
 8003474:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003480:	2b00      	cmp	r3, #0
 8003482:	d109      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x614>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	0e9b      	lsrs	r3, r3, #26
 800348a:	3301      	adds	r3, #1
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	e017      	b.n	80034c8 <HAL_ADC_ConfigChannel+0x644>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	61fb      	str	r3, [r7, #28]
  return result;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2101      	movs	r1, #1
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	ea42 0103 	orr.w	r1, r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10d      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x670>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	0e9b      	lsrs	r3, r3, #26
 80034de:	3301      	adds	r3, #1
 80034e0:	f003 021f 	and.w	r2, r3, #31
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	3b1e      	subs	r3, #30
 80034ec:	051b      	lsls	r3, r3, #20
 80034ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034f2:	e01b      	b.n	800352c <HAL_ADC_ConfigChannel+0x6a8>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	613b      	str	r3, [r7, #16]
  return result;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e003      	b.n	8003518 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	fab3 f383 	clz	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3301      	adds	r3, #1
 800351a:	f003 021f 	and.w	r2, r3, #31
 800351e:	4613      	mov	r3, r2
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	4413      	add	r3, r2
 8003524:	3b1e      	subs	r3, #30
 8003526:	051b      	lsls	r3, r3, #20
 8003528:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800352c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003532:	4619      	mov	r1, r3
 8003534:	f7ff fa12 	bl	800295c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	4b09      	ldr	r3, [pc, #36]	@ (8003564 <HAL_ADC_ConfigChannel+0x6e0>)
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80be 	beq.w	80036c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800354e:	d004      	beq.n	800355a <HAL_ADC_ConfigChannel+0x6d6>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a04      	ldr	r2, [pc, #16]	@ (8003568 <HAL_ADC_ConfigChannel+0x6e4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10a      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x6ec>
 800355a:	4b04      	ldr	r3, [pc, #16]	@ (800356c <HAL_ADC_ConfigChannel+0x6e8>)
 800355c:	e009      	b.n	8003572 <HAL_ADC_ConfigChannel+0x6ee>
 800355e:	bf00      	nop
 8003560:	407f0000 	.word	0x407f0000
 8003564:	80080000 	.word	0x80080000
 8003568:	50000100 	.word	0x50000100
 800356c:	50000300 	.word	0x50000300
 8003570:	4b59      	ldr	r3, [pc, #356]	@ (80036d8 <HAL_ADC_ConfigChannel+0x854>)
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f91a 	bl	80027ac <LL_ADC_GetCommonPathInternalCh>
 8003578:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a56      	ldr	r2, [pc, #344]	@ (80036dc <HAL_ADC_ConfigChannel+0x858>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d004      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x70c>
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a55      	ldr	r2, [pc, #340]	@ (80036e0 <HAL_ADC_ConfigChannel+0x85c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d13a      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003594:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d134      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035a4:	d005      	beq.n	80035b2 <HAL_ADC_ConfigChannel+0x72e>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a4e      	ldr	r2, [pc, #312]	@ (80036e4 <HAL_ADC_ConfigChannel+0x860>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f040 8085 	bne.w	80036bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035ba:	d004      	beq.n	80035c6 <HAL_ADC_ConfigChannel+0x742>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a49      	ldr	r2, [pc, #292]	@ (80036e8 <HAL_ADC_ConfigChannel+0x864>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x746>
 80035c6:	4a49      	ldr	r2, [pc, #292]	@ (80036ec <HAL_ADC_ConfigChannel+0x868>)
 80035c8:	e000      	b.n	80035cc <HAL_ADC_ConfigChannel+0x748>
 80035ca:	4a43      	ldr	r2, [pc, #268]	@ (80036d8 <HAL_ADC_ConfigChannel+0x854>)
 80035cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80035d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f7ff f8d5 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035dc:	4b44      	ldr	r3, [pc, #272]	@ (80036f0 <HAL_ADC_ConfigChannel+0x86c>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	099b      	lsrs	r3, r3, #6
 80035e2:	4a44      	ldr	r2, [pc, #272]	@ (80036f4 <HAL_ADC_ConfigChannel+0x870>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035f6:	e002      	b.n	80035fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f9      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003604:	e05a      	b.n	80036bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a3b      	ldr	r2, [pc, #236]	@ (80036f8 <HAL_ADC_ConfigChannel+0x874>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d125      	bne.n	800365c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003610:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003614:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d11f      	bne.n	800365c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a31      	ldr	r2, [pc, #196]	@ (80036e8 <HAL_ADC_ConfigChannel+0x864>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d104      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x7ac>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a34      	ldr	r2, [pc, #208]	@ (80036fc <HAL_ADC_ConfigChannel+0x878>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d047      	beq.n	80036c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003638:	d004      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x7c0>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a2a      	ldr	r2, [pc, #168]	@ (80036e8 <HAL_ADC_ConfigChannel+0x864>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x7c4>
 8003644:	4a29      	ldr	r2, [pc, #164]	@ (80036ec <HAL_ADC_ConfigChannel+0x868>)
 8003646:	e000      	b.n	800364a <HAL_ADC_ConfigChannel+0x7c6>
 8003648:	4a23      	ldr	r2, [pc, #140]	@ (80036d8 <HAL_ADC_ConfigChannel+0x854>)
 800364a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800364e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003652:	4619      	mov	r1, r3
 8003654:	4610      	mov	r0, r2
 8003656:	f7ff f896 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800365a:	e031      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a27      	ldr	r2, [pc, #156]	@ (8003700 <HAL_ADC_ConfigChannel+0x87c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d12d      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003666:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d127      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <HAL_ADC_ConfigChannel+0x864>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d022      	beq.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003684:	d004      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x80c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <HAL_ADC_ConfigChannel+0x864>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x810>
 8003690:	4a16      	ldr	r2, [pc, #88]	@ (80036ec <HAL_ADC_ConfigChannel+0x868>)
 8003692:	e000      	b.n	8003696 <HAL_ADC_ConfigChannel+0x812>
 8003694:	4a10      	ldr	r2, [pc, #64]	@ (80036d8 <HAL_ADC_ConfigChannel+0x854>)
 8003696:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800369a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7ff f870 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
 80036a6:	e00c      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80036ba:	e002      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036bc:	bf00      	nop
 80036be:	e000      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80036ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	37d8      	adds	r7, #216	@ 0xd8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	50000700 	.word	0x50000700
 80036dc:	c3210000 	.word	0xc3210000
 80036e0:	90c00010 	.word	0x90c00010
 80036e4:	50000600 	.word	0x50000600
 80036e8:	50000100 	.word	0x50000100
 80036ec:	50000300 	.word	0x50000300
 80036f0:	20000014 	.word	0x20000014
 80036f4:	053e2d63 	.word	0x053e2d63
 80036f8:	c7520000 	.word	0xc7520000
 80036fc:	50000500 	.word	0x50000500
 8003700:	cb840000 	.word	0xcb840000

08003704 <LL_ADC_IsEnabled>:
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <LL_ADC_IsEnabled+0x18>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <LL_ADC_IsEnabled+0x1a>
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <LL_ADC_REG_IsConversionOngoing>:
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b04      	cmp	r3, #4
 800373c:	d101      	bne.n	8003742 <LL_ADC_REG_IsConversionOngoing+0x18>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b0a1      	sub	sp, #132	@ 0x84
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800376a:	2302      	movs	r3, #2
 800376c:	e0e7      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003776:	2300      	movs	r3, #0
 8003778:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800377a:	2300      	movs	r3, #0
 800377c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003786:	d102      	bne.n	800378e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003788:	4b6f      	ldr	r3, [pc, #444]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	e009      	b.n	80037a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6e      	ldr	r2, [pc, #440]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d102      	bne.n	800379e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003798:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	e001      	b.n	80037a2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800379e:	2300      	movs	r3, #0
 80037a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10b      	bne.n	80037c0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f043 0220 	orr.w	r2, r3, #32
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e0be      	b.n	800393e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff ffb1 	bl	800372a <LL_ADC_REG_IsConversionOngoing>
 80037c8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ffab 	bl	800372a <LL_ADC_REG_IsConversionOngoing>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 80a0 	bne.w	800391c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 809c 	bne.w	800391c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ec:	d004      	beq.n	80037f8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a55      	ldr	r2, [pc, #340]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80037f8:	4b56      	ldr	r3, [pc, #344]	@ (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80037fa:	e000      	b.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80037fc:	4b56      	ldr	r3, [pc, #344]	@ (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80037fe:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d04b      	beq.n	80038a0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800381a:	035b      	lsls	r3, r3, #13
 800381c:	430b      	orrs	r3, r1
 800381e:	431a      	orrs	r2, r3
 8003820:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003822:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800382c:	d004      	beq.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a45      	ldr	r2, [pc, #276]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10f      	bne.n	8003858 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003838:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800383c:	f7ff ff62 	bl	8003704 <LL_ADC_IsEnabled>
 8003840:	4604      	mov	r4, r0
 8003842:	4841      	ldr	r0, [pc, #260]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003844:	f7ff ff5e 	bl	8003704 <LL_ADC_IsEnabled>
 8003848:	4603      	mov	r3, r0
 800384a:	4323      	orrs	r3, r4
 800384c:	2b00      	cmp	r3, #0
 800384e:	bf0c      	ite	eq
 8003850:	2301      	moveq	r3, #1
 8003852:	2300      	movne	r3, #0
 8003854:	b2db      	uxtb	r3, r3
 8003856:	e012      	b.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003858:	483c      	ldr	r0, [pc, #240]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800385a:	f7ff ff53 	bl	8003704 <LL_ADC_IsEnabled>
 800385e:	4604      	mov	r4, r0
 8003860:	483b      	ldr	r0, [pc, #236]	@ (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003862:	f7ff ff4f 	bl	8003704 <LL_ADC_IsEnabled>
 8003866:	4603      	mov	r3, r0
 8003868:	431c      	orrs	r4, r3
 800386a:	483c      	ldr	r0, [pc, #240]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800386c:	f7ff ff4a 	bl	8003704 <LL_ADC_IsEnabled>
 8003870:	4603      	mov	r3, r0
 8003872:	4323      	orrs	r3, r4
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d056      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800388a:	f023 030f 	bic.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	6811      	ldr	r1, [r2, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	430a      	orrs	r2, r1
 8003898:	431a      	orrs	r2, r3
 800389a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800389c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800389e:	e047      	b.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80038aa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b4:	d004      	beq.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a23      	ldr	r2, [pc, #140]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d10f      	bne.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80038c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80038c4:	f7ff ff1e 	bl	8003704 <LL_ADC_IsEnabled>
 80038c8:	4604      	mov	r4, r0
 80038ca:	481f      	ldr	r0, [pc, #124]	@ (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80038cc:	f7ff ff1a 	bl	8003704 <LL_ADC_IsEnabled>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4323      	orrs	r3, r4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	e012      	b.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80038e0:	481a      	ldr	r0, [pc, #104]	@ (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80038e2:	f7ff ff0f 	bl	8003704 <LL_ADC_IsEnabled>
 80038e6:	4604      	mov	r4, r0
 80038e8:	4819      	ldr	r0, [pc, #100]	@ (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80038ea:	f7ff ff0b 	bl	8003704 <LL_ADC_IsEnabled>
 80038ee:	4603      	mov	r3, r0
 80038f0:	431c      	orrs	r4, r3
 80038f2:	481a      	ldr	r0, [pc, #104]	@ (800395c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80038f4:	f7ff ff06 	bl	8003704 <LL_ADC_IsEnabled>
 80038f8:	4603      	mov	r3, r0
 80038fa:	4323      	orrs	r3, r4
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d012      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800390a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003912:	f023 030f 	bic.w	r3, r3, #15
 8003916:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003918:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800391a:	e009      	b.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800392e:	e000      	b.n	8003932 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003930:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800393a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800393e:	4618      	mov	r0, r3
 8003940:	3784      	adds	r7, #132	@ 0x84
 8003942:	46bd      	mov	sp, r7
 8003944:	bd90      	pop	{r4, r7, pc}
 8003946:	bf00      	nop
 8003948:	50000100 	.word	0x50000100
 800394c:	50000400 	.word	0x50000400
 8003950:	50000500 	.word	0x50000500
 8003954:	50000300 	.word	0x50000300
 8003958:	50000700 	.word	0x50000700
 800395c:	50000600 	.word	0x50000600

08003960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800397c:	4013      	ands	r3, r2
 800397e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003988:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800398c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003992:	4a04      	ldr	r2, [pc, #16]	@ (80039a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	60d3      	str	r3, [r2, #12]
}
 8003998:	bf00      	nop
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039ac:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <__NVIC_GetPriorityGrouping+0x18>)
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	0a1b      	lsrs	r3, r3, #8
 80039b2:	f003 0307 	and.w	r3, r3, #7
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	db0b      	blt.n	80039ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	f003 021f 	and.w	r2, r3, #31
 80039dc:	4907      	ldr	r1, [pc, #28]	@ (80039fc <__NVIC_EnableIRQ+0x38>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	2001      	movs	r0, #1
 80039e6:	fa00 f202 	lsl.w	r2, r0, r2
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	e000e100 	.word	0xe000e100

08003a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	6039      	str	r1, [r7, #0]
 8003a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	db0a      	blt.n	8003a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	490c      	ldr	r1, [pc, #48]	@ (8003a4c <__NVIC_SetPriority+0x4c>)
 8003a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	b2d2      	uxtb	r2, r2
 8003a22:	440b      	add	r3, r1
 8003a24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a28:	e00a      	b.n	8003a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	b2da      	uxtb	r2, r3
 8003a2e:	4908      	ldr	r1, [pc, #32]	@ (8003a50 <__NVIC_SetPriority+0x50>)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	3b04      	subs	r3, #4
 8003a38:	0112      	lsls	r2, r2, #4
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	440b      	add	r3, r1
 8003a3e:	761a      	strb	r2, [r3, #24]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	e000e100 	.word	0xe000e100
 8003a50:	e000ed00 	.word	0xe000ed00

08003a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b089      	sub	sp, #36	@ 0x24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f1c3 0307 	rsb	r3, r3, #7
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	bf28      	it	cs
 8003a72:	2304      	movcs	r3, #4
 8003a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d902      	bls.n	8003a84 <NVIC_EncodePriority+0x30>
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	3b03      	subs	r3, #3
 8003a82:	e000      	b.n	8003a86 <NVIC_EncodePriority+0x32>
 8003a84:	2300      	movs	r3, #0
 8003a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	f04f 32ff 	mov.w	r2, #4294967295
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	401a      	ands	r2, r3
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa6:	43d9      	mvns	r1, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aac:	4313      	orrs	r3, r2
         );
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3724      	adds	r7, #36	@ 0x24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
	...

08003abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003acc:	d301      	bcc.n	8003ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e00f      	b.n	8003af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <SysTick_Config+0x40>)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ada:	210f      	movs	r1, #15
 8003adc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae0:	f7ff ff8e 	bl	8003a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae4:	4b05      	ldr	r3, [pc, #20]	@ (8003afc <SysTick_Config+0x40>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aea:	4b04      	ldr	r3, [pc, #16]	@ (8003afc <SysTick_Config+0x40>)
 8003aec:	2207      	movs	r2, #7
 8003aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	e000e010 	.word	0xe000e010

08003b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff ff29 	bl	8003960 <__NVIC_SetPriorityGrouping>
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b086      	sub	sp, #24
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
 8003b22:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b24:	f7ff ff40 	bl	80039a8 <__NVIC_GetPriorityGrouping>
 8003b28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff ff90 	bl	8003a54 <NVIC_EncodePriority>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7ff ff5f 	bl	8003a00 <__NVIC_SetPriority>
}
 8003b42:	bf00      	nop
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b082      	sub	sp, #8
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	4603      	mov	r3, r0
 8003b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff33 	bl	80039c4 <__NVIC_EnableIRQ>
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ffa4 	bl	8003abc <SysTick_Config>
 8003b74:	4603      	mov	r3, r0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3708      	adds	r7, #8
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e08d      	b.n	8003cae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	4b47      	ldr	r3, [pc, #284]	@ (8003cb8 <HAL_DMA_Init+0x138>)
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d80f      	bhi.n	8003bbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b45      	ldr	r3, [pc, #276]	@ (8003cbc <HAL_DMA_Init+0x13c>)
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4a45      	ldr	r2, [pc, #276]	@ (8003cc0 <HAL_DMA_Init+0x140>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	091b      	lsrs	r3, r3, #4
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a42      	ldr	r2, [pc, #264]	@ (8003cc4 <HAL_DMA_Init+0x144>)
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
 8003bbc:	e00e      	b.n	8003bdc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b40      	ldr	r3, [pc, #256]	@ (8003cc8 <HAL_DMA_Init+0x148>)
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a3d      	ldr	r2, [pc, #244]	@ (8003cc0 <HAL_DMA_Init+0x140>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	009a      	lsls	r2, r3, #2
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ccc <HAL_DMA_Init+0x14c>)
 8003bda:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f84e 	bl	8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c3c:	d102      	bne.n	8003c44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c58:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d010      	beq.n	8003c84 <HAL_DMA_Init+0x104>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d80c      	bhi.n	8003c84 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f86e 	bl	8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003c80:	605a      	str	r2, [r3, #4]
 8003c82:	e008      	b.n	8003c96 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40020407 	.word	0x40020407
 8003cbc:	bffdfff8 	.word	0xbffdfff8
 8003cc0:	cccccccd 	.word	0xcccccccd
 8003cc4:	40020000 	.word	0x40020000
 8003cc8:	bffdfbf8 	.word	0xbffdfbf8
 8003ccc:	40020400 	.word	0x40020400

08003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b16      	ldr	r3, [pc, #88]	@ (8003d38 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d802      	bhi.n	8003cea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ce4:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e001      	b.n	8003cee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003cea:	4b15      	ldr	r3, [pc, #84]	@ (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003cec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	3b08      	subs	r3, #8
 8003cfa:	4a12      	ldr	r2, [pc, #72]	@ (8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	009a      	lsls	r2, r3, #2
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	461a      	mov	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a0b      	ldr	r2, [pc, #44]	@ (8003d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	2201      	movs	r2, #1
 8003d24:	409a      	lsls	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d2a:	bf00      	nop
 8003d2c:	371c      	adds	r7, #28
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	40020407 	.word	0x40020407
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020820 	.word	0x40020820
 8003d44:	cccccccd 	.word	0xcccccccd
 8003d48:	40020880 	.word	0x40020880

08003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003d60:	4413      	add	r3, r2
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	461a      	mov	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a08      	ldr	r2, [pc, #32]	@ (8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d6e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	f003 031f 	and.w	r3, r3, #31
 8003d78:	2201      	movs	r2, #1
 8003d7a:	409a      	lsls	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	1000823f 	.word	0x1000823f
 8003d90:	40020940 	.word	0x40020940

08003d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003da2:	e15a      	b.n	800405a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2101      	movs	r1, #1
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 814c 	beq.w	8004054 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0303 	and.w	r3, r3, #3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d005      	beq.n	8003dd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d130      	bne.n	8003e36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	2203      	movs	r2, #3
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	43db      	mvns	r3, r3
 8003e14:	693a      	ldr	r2, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	091b      	lsrs	r3, r3, #4
 8003e20:	f003 0201 	and.w	r2, r3, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0303 	and.w	r3, r3, #3
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d017      	beq.n	8003e72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	2203      	movs	r2, #3
 8003e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e52:	43db      	mvns	r3, r3
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4013      	ands	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689a      	ldr	r2, [r3, #8]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	693a      	ldr	r2, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d123      	bne.n	8003ec6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	08da      	lsrs	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	3208      	adds	r2, #8
 8003e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	08da      	lsrs	r2, r3, #3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3208      	adds	r2, #8
 8003ec0:	6939      	ldr	r1, [r7, #16]
 8003ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	4013      	ands	r3, r2
 8003edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 0203 	and.w	r2, r3, #3
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	693a      	ldr	r2, [r7, #16]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80a6 	beq.w	8004054 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f08:	4b5b      	ldr	r3, [pc, #364]	@ (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	4a5a      	ldr	r2, [pc, #360]	@ (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f0e:	f043 0301 	orr.w	r3, r3, #1
 8003f12:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f14:	4b58      	ldr	r3, [pc, #352]	@ (8004078 <HAL_GPIO_Init+0x2e4>)
 8003f16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f20:	4a56      	ldr	r2, [pc, #344]	@ (800407c <HAL_GPIO_Init+0x2e8>)
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	089b      	lsrs	r3, r3, #2
 8003f26:	3302      	adds	r3, #2
 8003f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	220f      	movs	r2, #15
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4013      	ands	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f4a:	d01f      	beq.n	8003f8c <HAL_GPIO_Init+0x1f8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_GPIO_Init+0x2ec>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d019      	beq.n	8003f88 <HAL_GPIO_Init+0x1f4>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a4b      	ldr	r2, [pc, #300]	@ (8004084 <HAL_GPIO_Init+0x2f0>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d013      	beq.n	8003f84 <HAL_GPIO_Init+0x1f0>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a4a      	ldr	r2, [pc, #296]	@ (8004088 <HAL_GPIO_Init+0x2f4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1ec>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a49      	ldr	r2, [pc, #292]	@ (800408c <HAL_GPIO_Init+0x2f8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1e8>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a48      	ldr	r2, [pc, #288]	@ (8004090 <HAL_GPIO_Init+0x2fc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1e4>
 8003f74:	2305      	movs	r3, #5
 8003f76:	e00a      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f78:	2306      	movs	r3, #6
 8003f7a:	e008      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e006      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f80:	2303      	movs	r3, #3
 8003f82:	e004      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e002      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_GPIO_Init+0x1fa>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9e:	4937      	ldr	r1, [pc, #220]	@ (800407c <HAL_GPIO_Init+0x2e8>)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fac:	4b39      	ldr	r3, [pc, #228]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003fc8:	693a      	ldr	r2, [r7, #16]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fd0:	4a30      	ldr	r2, [pc, #192]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ffa:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004000:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	43db      	mvns	r3, r3
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4013      	ands	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d003      	beq.n	8004024 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004024:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800402a:	4b1a      	ldr	r3, [pc, #104]	@ (8004094 <HAL_GPIO_Init+0x300>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4013      	ands	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800404e:	4a11      	ldr	r2, [pc, #68]	@ (8004094 <HAL_GPIO_Init+0x300>)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	3301      	adds	r3, #1
 8004058:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	fa22 f303 	lsr.w	r3, r2, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	f47f ae9d 	bne.w	8003da4 <HAL_GPIO_Init+0x10>
  }
}
 800406a:	bf00      	nop
 800406c:	bf00      	nop
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	40021000 	.word	0x40021000
 800407c:	40010000 	.word	0x40010000
 8004080:	48000400 	.word	0x48000400
 8004084:	48000800 	.word	0x48000800
 8004088:	48000c00 	.word	0x48000c00
 800408c:	48001000 	.word	0x48001000
 8004090:	48001400 	.word	0x48001400
 8004094:	40010400 	.word	0x40010400

08004098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	460b      	mov	r3, r1
 80040a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	887b      	ldrh	r3, [r7, #2]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d002      	beq.n	80040b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e001      	b.n	80040ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	460b      	mov	r3, r1
 80040d2:	807b      	strh	r3, [r7, #2]
 80040d4:	4613      	mov	r3, r2
 80040d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040d8:	787b      	ldrb	r3, [r7, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040e4:	e002      	b.n	80040ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	4603      	mov	r3, r0
 8004100:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004102:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	88fb      	ldrh	r3, [r7, #6]
 8004108:	4013      	ands	r3, r2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d006      	beq.n	800411c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800410e:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004110:	88fb      	ldrh	r3, [r7, #6]
 8004112:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 f806 	bl	8004128 <HAL_GPIO_EXTI_Callback>
  }
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40010400 	.word	0x40010400

08004128 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b082      	sub	sp, #8
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e08d      	b.n	800426c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fd fa63 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2224      	movs	r2, #36	@ 0x24
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800418e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d107      	bne.n	80041b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041b4:	609a      	str	r2, [r3, #8]
 80041b6:	e006      	b.n	80041c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d108      	bne.n	80041e0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041dc:	605a      	str	r2, [r3, #4]
 80041de:	e007      	b.n	80041f0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685a      	ldr	r2, [r3, #4]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004202:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004212:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69d9      	ldr	r1, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1a      	ldr	r2, [r3, #32]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004298:	68ba      	ldr	r2, [r7, #8]
 800429a:	68f9      	ldr	r1, [r7, #12]
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	4798      	blx	r3
  }
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	d138      	bne.n	8004330 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e032      	b.n	8004332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2224      	movs	r2, #36	@ 0x24
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0201 	bic.w	r2, r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80042fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004330:	2302      	movs	r3, #2
  }
}
 8004332:	4618      	mov	r0, r3
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800433e:	b480      	push	{r7}
 8004340:	b085      	sub	sp, #20
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b20      	cmp	r3, #32
 8004352:	d139      	bne.n	80043c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800435e:	2302      	movs	r3, #2
 8004360:	e033      	b.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2224      	movs	r2, #36	@ 0x24
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f022 0201 	bic.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004390:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	021b      	lsls	r3, r3, #8
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	e000      	b.n	80043ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043c8:	2302      	movs	r3, #2
  }
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d141      	bne.n	800446a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80043e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80043ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043f2:	d131      	bne.n	8004458 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043f4:	4b47      	ldr	r3, [pc, #284]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043fa:	4a46      	ldr	r2, [pc, #280]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004400:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004404:	4b43      	ldr	r3, [pc, #268]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800440c:	4a41      	ldr	r2, [pc, #260]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800440e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004412:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004414:	4b40      	ldr	r3, [pc, #256]	@ (8004518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2232      	movs	r2, #50	@ 0x32
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	4a3f      	ldr	r2, [pc, #252]	@ (800451c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	0c9b      	lsrs	r3, r3, #18
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800442a:	e002      	b.n	8004432 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b01      	subs	r3, #1
 8004430:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004432:	4b38      	ldr	r3, [pc, #224]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800443a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800443e:	d102      	bne.n	8004446 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f2      	bne.n	800442c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004446:	4b33      	ldr	r3, [pc, #204]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800444e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004452:	d158      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e057      	b.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004458:	4b2e      	ldr	r3, [pc, #184]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800445a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800445e:	4a2d      	ldr	r2, [pc, #180]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004464:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004468:	e04d      	b.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004470:	d141      	bne.n	80044f6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004472:	4b28      	ldr	r3, [pc, #160]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447e:	d131      	bne.n	80044e4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004480:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004486:	4a23      	ldr	r2, [pc, #140]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800448c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004490:	4b20      	ldr	r3, [pc, #128]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004498:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800449a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800449e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80044a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2232      	movs	r2, #50	@ 0x32
 80044a6:	fb02 f303 	mul.w	r3, r2, r3
 80044aa:	4a1c      	ldr	r2, [pc, #112]	@ (800451c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80044ac:	fba2 2303 	umull	r2, r3, r2, r3
 80044b0:	0c9b      	lsrs	r3, r3, #18
 80044b2:	3301      	adds	r3, #1
 80044b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044b6:	e002      	b.n	80044be <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	3b01      	subs	r3, #1
 80044bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044be:	4b15      	ldr	r3, [pc, #84]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ca:	d102      	bne.n	80044d2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f2      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044de:	d112      	bne.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e011      	b.n	8004508 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80044e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80044f4:	e007      	b.n	8004506 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044f6:	4b07      	ldr	r3, [pc, #28]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80044fe:	4a05      	ldr	r2, [pc, #20]	@ (8004514 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004504:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40007000 	.word	0x40007000
 8004518:	20000014 	.word	0x20000014
 800451c:	431bde83 	.word	0x431bde83

08004520 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	4a04      	ldr	r2, [pc, #16]	@ (800453c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800452a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800452e:	6093      	str	r3, [r2, #8]
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40007000 	.word	0x40007000

08004540 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e2fe      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	2b00      	cmp	r3, #0
 800455c:	d075      	beq.n	800464a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800455e:	4b97      	ldr	r3, [pc, #604]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004568:	4b94      	ldr	r3, [pc, #592]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
 8004570:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d102      	bne.n	800457e <HAL_RCC_OscConfig+0x3e>
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d002      	beq.n	8004584 <HAL_RCC_OscConfig+0x44>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10b      	bne.n	800459c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004584:	4b8d      	ldr	r3, [pc, #564]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05b      	beq.n	8004648 <HAL_RCC_OscConfig+0x108>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d157      	bne.n	8004648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e2d9      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a4:	d106      	bne.n	80045b4 <HAL_RCC_OscConfig+0x74>
 80045a6:	4b85      	ldr	r3, [pc, #532]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a84      	ldr	r2, [pc, #528]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	e01d      	b.n	80045f0 <HAL_RCC_OscConfig+0xb0>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045bc:	d10c      	bne.n	80045d8 <HAL_RCC_OscConfig+0x98>
 80045be:	4b7f      	ldr	r3, [pc, #508]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a7e      	ldr	r2, [pc, #504]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	4b7c      	ldr	r3, [pc, #496]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a7b      	ldr	r2, [pc, #492]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	e00b      	b.n	80045f0 <HAL_RCC_OscConfig+0xb0>
 80045d8:	4b78      	ldr	r3, [pc, #480]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a77      	ldr	r2, [pc, #476]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045e2:	6013      	str	r3, [r2, #0]
 80045e4:	4b75      	ldr	r3, [pc, #468]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a74      	ldr	r2, [pc, #464]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80045ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d013      	beq.n	8004620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fe f884 	bl	8002704 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004600:	f7fe f880 	bl	8002704 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b64      	cmp	r3, #100	@ 0x64
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e29e      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004612:	4b6a      	ldr	r3, [pc, #424]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0xc0>
 800461e:	e014      	b.n	800464a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004620:	f7fe f870 	bl	8002704 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004628:	f7fe f86c 	bl	8002704 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b64      	cmp	r3, #100	@ 0x64
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e28a      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800463a:	4b60      	ldr	r3, [pc, #384]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0xe8>
 8004646:	e000      	b.n	800464a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d075      	beq.n	8004742 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004656:	4b59      	ldr	r3, [pc, #356]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 030c 	and.w	r3, r3, #12
 800465e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004660:	4b56      	ldr	r3, [pc, #344]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b0c      	cmp	r3, #12
 800466e:	d102      	bne.n	8004676 <HAL_RCC_OscConfig+0x136>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d002      	beq.n	800467c <HAL_RCC_OscConfig+0x13c>
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b04      	cmp	r3, #4
 800467a:	d11f      	bne.n	80046bc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467c:	4b4f      	ldr	r3, [pc, #316]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_RCC_OscConfig+0x154>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e25d      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004694:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	061b      	lsls	r3, r3, #24
 80046a2:	4946      	ldr	r1, [pc, #280]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046a8:	4b45      	ldr	r3, [pc, #276]	@ (80047c0 <HAL_RCC_OscConfig+0x280>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fd ffdd 	bl	800266c <HAL_InitTick>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d043      	beq.n	8004740 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e249      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d023      	beq.n	800470c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c4:	4b3d      	ldr	r3, [pc, #244]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3c      	ldr	r2, [pc, #240]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046d0:	f7fe f818 	bl	8002704 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046d8:	f7fe f814 	bl	8002704 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e232      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ea:	4b34      	ldr	r3, [pc, #208]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0f0      	beq.n	80046d8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046f6:	4b31      	ldr	r3, [pc, #196]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	061b      	lsls	r3, r3, #24
 8004704:	492d      	ldr	r1, [pc, #180]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004706:	4313      	orrs	r3, r2
 8004708:	604b      	str	r3, [r1, #4]
 800470a:	e01a      	b.n	8004742 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800470c:	4b2b      	ldr	r3, [pc, #172]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a2a      	ldr	r2, [pc, #168]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004712:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004718:	f7fd fff4 	bl	8002704 <HAL_GetTick>
 800471c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800471e:	e008      	b.n	8004732 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004720:	f7fd fff0 	bl	8002704 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d901      	bls.n	8004732 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e20e      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004732:	4b22      	ldr	r3, [pc, #136]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1f0      	bne.n	8004720 <HAL_RCC_OscConfig+0x1e0>
 800473e:	e000      	b.n	8004742 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004740:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d041      	beq.n	80047d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d01c      	beq.n	8004790 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004758:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475c:	4a17      	ldr	r2, [pc, #92]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004766:	f7fd ffcd 	bl	8002704 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476e:	f7fd ffc9 	bl	8002704 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1e7      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004780:	4b0e      	ldr	r3, [pc, #56]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0ef      	beq.n	800476e <HAL_RCC_OscConfig+0x22e>
 800478e:	e020      	b.n	80047d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004796:	4a09      	ldr	r2, [pc, #36]	@ (80047bc <HAL_RCC_OscConfig+0x27c>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd ffb0 	bl	8002704 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047a6:	e00d      	b.n	80047c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fd ffac 	bl	8002704 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d906      	bls.n	80047c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1ca      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047c4:	4b8c      	ldr	r3, [pc, #560]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80047c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1ea      	bne.n	80047a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80a6 	beq.w	800492c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e0:	2300      	movs	r3, #0
 80047e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047e4:	4b84      	ldr	r3, [pc, #528]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80047e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2b4>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x2b6>
 80047f4:	2300      	movs	r3, #0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00d      	beq.n	8004816 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fa:	4b7f      	ldr	r3, [pc, #508]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80047fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047fe:	4a7e      	ldr	r2, [pc, #504]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004804:	6593      	str	r3, [r2, #88]	@ 0x58
 8004806:	4b7c      	ldr	r3, [pc, #496]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800480a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004812:	2301      	movs	r3, #1
 8004814:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004816:	4b79      	ldr	r3, [pc, #484]	@ (80049fc <HAL_RCC_OscConfig+0x4bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481e:	2b00      	cmp	r3, #0
 8004820:	d118      	bne.n	8004854 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004822:	4b76      	ldr	r3, [pc, #472]	@ (80049fc <HAL_RCC_OscConfig+0x4bc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a75      	ldr	r2, [pc, #468]	@ (80049fc <HAL_RCC_OscConfig+0x4bc>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800482c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800482e:	f7fd ff69 	bl	8002704 <HAL_GetTick>
 8004832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004836:	f7fd ff65 	bl	8002704 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e183      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004848:	4b6c      	ldr	r3, [pc, #432]	@ (80049fc <HAL_RCC_OscConfig+0x4bc>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0f0      	beq.n	8004836 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d108      	bne.n	800486e <HAL_RCC_OscConfig+0x32e>
 800485c:	4b66      	ldr	r3, [pc, #408]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800485e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004862:	4a65      	ldr	r2, [pc, #404]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800486c:	e024      	b.n	80048b8 <HAL_RCC_OscConfig+0x378>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d110      	bne.n	8004898 <HAL_RCC_OscConfig+0x358>
 8004876:	4b60      	ldr	r3, [pc, #384]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800487c:	4a5e      	ldr	r2, [pc, #376]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004886:	4b5c      	ldr	r3, [pc, #368]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	4a5a      	ldr	r2, [pc, #360]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800488e:	f043 0301 	orr.w	r3, r3, #1
 8004892:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004896:	e00f      	b.n	80048b8 <HAL_RCC_OscConfig+0x378>
 8004898:	4b57      	ldr	r3, [pc, #348]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800489e:	4a56      	ldr	r2, [pc, #344]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	f023 0301 	bic.w	r3, r3, #1
 80048a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80048a8:	4b53      	ldr	r3, [pc, #332]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ae:	4a52      	ldr	r2, [pc, #328]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d016      	beq.n	80048ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c0:	f7fd ff20 	bl	8002704 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c6:	e00a      	b.n	80048de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048c8:	f7fd ff1c 	bl	8002704 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e138      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048de:	4b46      	ldr	r3, [pc, #280]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0ed      	beq.n	80048c8 <HAL_RCC_OscConfig+0x388>
 80048ec:	e015      	b.n	800491a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048ee:	f7fd ff09 	bl	8002704 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80048f4:	e00a      	b.n	800490c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd ff05 	bl	8002704 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d901      	bls.n	800490c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	e121      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800490c:	4b3a      	ldr	r3, [pc, #232]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800490e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ed      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004924:	4a34      	ldr	r2, [pc, #208]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d03c      	beq.n	80049b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d01c      	beq.n	800497a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004940:	4b2d      	ldr	r3, [pc, #180]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004942:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004946:	4a2c      	ldr	r2, [pc, #176]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004950:	f7fd fed8 	bl	8002704 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004958:	f7fd fed4 	bl	8002704 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0f2      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800496a:	4b23      	ldr	r3, [pc, #140]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ef      	beq.n	8004958 <HAL_RCC_OscConfig+0x418>
 8004978:	e01b      	b.n	80049b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800497a:	4b1f      	ldr	r3, [pc, #124]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 800497c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800498a:	f7fd febb 	bl	8002704 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004992:	f7fd feb7 	bl	8002704 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e0d5      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80049a4:	4b14      	ldr	r3, [pc, #80]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80049a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80c9 	beq.w	8004b4e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 030c 	and.w	r3, r3, #12
 80049c4:	2b0c      	cmp	r3, #12
 80049c6:	f000 8083 	beq.w	8004ad0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d15e      	bne.n	8004a90 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d2:	4b09      	ldr	r3, [pc, #36]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a08      	ldr	r2, [pc, #32]	@ (80049f8 <HAL_RCC_OscConfig+0x4b8>)
 80049d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049de:	f7fd fe91 	bl	8002704 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049e4:	e00c      	b.n	8004a00 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e6:	f7fd fe8d 	bl	8002704 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d905      	bls.n	8004a00 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e0ab      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
 80049f8:	40021000 	.word	0x40021000
 80049fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a00:	4b55      	ldr	r3, [pc, #340]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ec      	bne.n	80049e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a0c:	4b52      	ldr	r3, [pc, #328]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	4b52      	ldr	r3, [pc, #328]	@ (8004b5c <HAL_RCC_OscConfig+0x61c>)
 8004a12:	4013      	ands	r3, r2
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6a11      	ldr	r1, [r2, #32]
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0112      	lsls	r2, r2, #4
 8004a20:	4311      	orrs	r1, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004a26:	0212      	lsls	r2, r2, #8
 8004a28:	4311      	orrs	r1, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004a2e:	0852      	lsrs	r2, r2, #1
 8004a30:	3a01      	subs	r2, #1
 8004a32:	0552      	lsls	r2, r2, #21
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004a3a:	0852      	lsrs	r2, r2, #1
 8004a3c:	3a01      	subs	r2, #1
 8004a3e:	0652      	lsls	r2, r2, #25
 8004a40:	4311      	orrs	r1, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a46:	06d2      	lsls	r2, r2, #27
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	4943      	ldr	r1, [pc, #268]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a50:	4b41      	ldr	r3, [pc, #260]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a40      	ldr	r2, [pc, #256]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	4a3d      	ldr	r2, [pc, #244]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a66:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd fe4c 	bl	8002704 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd fe48 	bl	8002704 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e066      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a82:	4b35      	ldr	r3, [pc, #212]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x530>
 8004a8e:	e05e      	b.n	8004b4e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a90:	4b31      	ldr	r3, [pc, #196]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a30      	ldr	r2, [pc, #192]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fd fe32 	bl	8002704 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa4:	f7fd fe2e 	bl	8002704 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e04c      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab6:	4b28      	ldr	r3, [pc, #160]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ac2:	4b25      	ldr	r3, [pc, #148]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	4924      	ldr	r1, [pc, #144]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004ac8:	4b25      	ldr	r3, [pc, #148]	@ (8004b60 <HAL_RCC_OscConfig+0x620>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60cb      	str	r3, [r1, #12]
 8004ace:	e03e      	b.n	8004b4e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e039      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004adc:	4b1e      	ldr	r3, [pc, #120]	@ (8004b58 <HAL_RCC_OscConfig+0x618>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f003 0203 	and.w	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d12c      	bne.n	8004b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afa:	3b01      	subs	r3, #1
 8004afc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d123      	bne.n	8004b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b0c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11b      	bne.n	8004b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d113      	bne.n	8004b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2c:	085b      	lsrs	r3, r3, #1
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d109      	bne.n	8004b4a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	3b01      	subs	r3, #1
 8004b44:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40021000 	.word	0x40021000
 8004b5c:	019f800c 	.word	0x019f800c
 8004b60:	feeefffc 	.word	0xfeeefffc

08004b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e11e      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b7c:	4b91      	ldr	r3, [pc, #580]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 030f 	and.w	r3, r3, #15
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d910      	bls.n	8004bac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b8a:	4b8e      	ldr	r3, [pc, #568]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f023 020f 	bic.w	r2, r3, #15
 8004b92:	498c      	ldr	r1, [pc, #560]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b8a      	ldr	r3, [pc, #552]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e106      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d073      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d129      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bc0:	4b81      	ldr	r3, [pc, #516]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0f4      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004bd0:	f000 f99e 	bl	8004f10 <RCC_GetSysClockFreqFromPLLSource>
 8004bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	4a7c      	ldr	r2, [pc, #496]	@ (8004dcc <HAL_RCC_ClockConfig+0x268>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d93f      	bls.n	8004c5e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bde:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d033      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d12f      	bne.n	8004c5e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bfe:	4b72      	ldr	r3, [pc, #456]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c06:	4a70      	ldr	r2, [pc, #448]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004c0e:	2380      	movs	r3, #128	@ 0x80
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e024      	b.n	8004c5e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d109      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e0c6      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c2c:	4b66      	ldr	r3, [pc, #408]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e0be      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004c3c:	f000 f8ce 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4a61      	ldr	r2, [pc, #388]	@ (8004dcc <HAL_RCC_ClockConfig+0x268>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d909      	bls.n	8004c5e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004c4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c52:	4a5d      	ldr	r2, [pc, #372]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c58:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c5a:	2380      	movs	r3, #128	@ 0x80
 8004c5c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c5e:	4b5a      	ldr	r3, [pc, #360]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4957      	ldr	r1, [pc, #348]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c70:	f7fd fd48 	bl	8002704 <HAL_GetTick>
 8004c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c76:	e00a      	b.n	8004c8e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c78:	f7fd fd44 	bl	8002704 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e095      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8e:	4b4e      	ldr	r3, [pc, #312]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 020c 	and.w	r2, r3, #12
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d1eb      	bne.n	8004c78 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d023      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d005      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cb8:	4b43      	ldr	r3, [pc, #268]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a42      	ldr	r2, [pc, #264]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cc2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d007      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004cd0:	4b3d      	ldr	r3, [pc, #244]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004cd8:	4a3b      	ldr	r2, [pc, #236]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cda:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ce0:	4b39      	ldr	r3, [pc, #228]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4936      	ldr	r1, [pc, #216]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	608b      	str	r3, [r1, #8]
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b80      	cmp	r3, #128	@ 0x80
 8004cf8:	d105      	bne.n	8004d06 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004cfa:	4b33      	ldr	r3, [pc, #204]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d04:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d06:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d21d      	bcs.n	8004d50 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d14:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 020f 	bic.w	r2, r3, #15
 8004d1c:	4929      	ldr	r1, [pc, #164]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004d24:	f7fd fcee 	bl	8002704 <HAL_GetTick>
 8004d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2a:	e00a      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2c:	f7fd fcea 	bl	8002704 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e03b      	b.n	8004dba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCC_ClockConfig+0x260>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 030f 	and.w	r3, r3, #15
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d1ed      	bne.n	8004d2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d008      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4917      	ldr	r1, [pc, #92]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7a:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	490f      	ldr	r1, [pc, #60]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d8e:	f000 f825 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <HAL_RCC_ClockConfig+0x264>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	490c      	ldr	r1, [pc, #48]	@ (8004dd0 <HAL_RCC_ClockConfig+0x26c>)
 8004da0:	5ccb      	ldrb	r3, [r1, r3]
 8004da2:	f003 031f 	and.w	r3, r3, #31
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a0a      	ldr	r2, [pc, #40]	@ (8004dd4 <HAL_RCC_ClockConfig+0x270>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004dae:	4b0a      	ldr	r3, [pc, #40]	@ (8004dd8 <HAL_RCC_ClockConfig+0x274>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fd fc5a 	bl	800266c <HAL_InitTick>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40022000 	.word	0x40022000
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	04c4b400 	.word	0x04c4b400
 8004dd0:	08007af4 	.word	0x08007af4
 8004dd4:	20000014 	.word	0x20000014
 8004dd8:	20000018 	.word	0x20000018

08004ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004de2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 030c 	and.w	r3, r3, #12
 8004dea:	2b04      	cmp	r3, #4
 8004dec:	d102      	bne.n	8004df4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dee:	4b2a      	ldr	r3, [pc, #168]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e047      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004df4:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 030c 	and.w	r3, r3, #12
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d102      	bne.n	8004e06 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e00:	4b26      	ldr	r3, [pc, #152]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e02:	613b      	str	r3, [r7, #16]
 8004e04:	e03e      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004e06:	4b23      	ldr	r3, [pc, #140]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b0c      	cmp	r3, #12
 8004e10:	d136      	bne.n	8004e80 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e12:	4b20      	ldr	r3, [pc, #128]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f003 0303 	and.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	3301      	adds	r3, #1
 8004e28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d10c      	bne.n	8004e4a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e30:	4a1a      	ldr	r2, [pc, #104]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	4a16      	ldr	r2, [pc, #88]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e3a:	68d2      	ldr	r2, [r2, #12]
 8004e3c:	0a12      	lsrs	r2, r2, #8
 8004e3e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	617b      	str	r3, [r7, #20]
      break;
 8004e48:	e00c      	b.n	8004e64 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e4a:	4a13      	ldr	r2, [pc, #76]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	4a10      	ldr	r2, [pc, #64]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e54:	68d2      	ldr	r2, [r2, #12]
 8004e56:	0a12      	lsrs	r2, r2, #8
 8004e58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	617b      	str	r3, [r7, #20]
      break;
 8004e62:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e64:	4b0b      	ldr	r3, [pc, #44]	@ (8004e94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	0e5b      	lsrs	r3, r3, #25
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	3301      	adds	r3, #1
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	613b      	str	r3, [r7, #16]
 8004e7e:	e001      	b.n	8004e84 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004e84:	693b      	ldr	r3, [r7, #16]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000
 8004e98:	00f42400 	.word	0x00f42400
 8004e9c:	016e3600 	.word	0x016e3600

08004ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ea4:	4b03      	ldr	r3, [pc, #12]	@ (8004eb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20000014 	.word	0x20000014

08004eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ebc:	f7ff fff0 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	0a1b      	lsrs	r3, r3, #8
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	4904      	ldr	r1, [pc, #16]	@ (8004ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ece:	5ccb      	ldrb	r3, [r1, r3]
 8004ed0:	f003 031f 	and.w	r3, r3, #31
 8004ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000
 8004ee0:	08007b04 	.word	0x08007b04

08004ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ee8:	f7ff ffda 	bl	8004ea0 <HAL_RCC_GetHCLKFreq>
 8004eec:	4602      	mov	r2, r0
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	0adb      	lsrs	r3, r3, #11
 8004ef4:	f003 0307 	and.w	r3, r3, #7
 8004ef8:	4904      	ldr	r1, [pc, #16]	@ (8004f0c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004efa:	5ccb      	ldrb	r3, [r1, r3]
 8004efc:	f003 031f 	and.w	r3, r3, #31
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000
 8004f0c:	08007b04 	.word	0x08007b04

08004f10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f16:	4b1e      	ldr	r3, [pc, #120]	@ (8004f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0303 	and.w	r3, r3, #3
 8004f1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	@ (8004f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	091b      	lsrs	r3, r3, #4
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d10c      	bne.n	8004f4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f34:	4a17      	ldr	r2, [pc, #92]	@ (8004f94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	4a14      	ldr	r2, [pc, #80]	@ (8004f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f3e:	68d2      	ldr	r2, [r2, #12]
 8004f40:	0a12      	lsrs	r2, r2, #8
 8004f42:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f46:	fb02 f303 	mul.w	r3, r2, r3
 8004f4a:	617b      	str	r3, [r7, #20]
    break;
 8004f4c:	e00c      	b.n	8004f68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f4e:	4a12      	ldr	r2, [pc, #72]	@ (8004f98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	4a0e      	ldr	r2, [pc, #56]	@ (8004f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f58:	68d2      	ldr	r2, [r2, #12]
 8004f5a:	0a12      	lsrs	r2, r2, #8
 8004f5c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004f60:	fb02 f303 	mul.w	r3, r2, r3
 8004f64:	617b      	str	r3, [r7, #20]
    break;
 8004f66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f68:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	0e5b      	lsrs	r3, r3, #25
 8004f6e:	f003 0303 	and.w	r3, r3, #3
 8004f72:	3301      	adds	r3, #1
 8004f74:	005b      	lsls	r3, r3, #1
 8004f76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004f82:	687b      	ldr	r3, [r7, #4]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	371c      	adds	r7, #28
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	40021000 	.word	0x40021000
 8004f94:	016e3600 	.word	0x016e3600
 8004f98:	00f42400 	.word	0x00f42400

08004f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 8098 	beq.w	80050ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fbe:	4b43      	ldr	r3, [pc, #268]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10d      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fca:	4b40      	ldr	r3, [pc, #256]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fce:	4a3f      	ldr	r2, [pc, #252]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a39      	ldr	r2, [pc, #228]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ff2:	f7fd fb87 	bl	8002704 <HAL_GetTick>
 8004ff6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ff8:	e009      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffa:	f7fd fb83 	bl	8002704 <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b02      	cmp	r3, #2
 8005006:	d902      	bls.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	74fb      	strb	r3, [r7, #19]
        break;
 800500c:	e005      	b.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800500e:	4b30      	ldr	r3, [pc, #192]	@ (80050d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ef      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800501a:	7cfb      	ldrb	r3, [r7, #19]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d159      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005020:	4b2a      	ldr	r3, [pc, #168]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d01e      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	429a      	cmp	r2, r3
 800503a:	d019      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800503c:	4b23      	ldr	r3, [pc, #140]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005042:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005046:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005048:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800504e:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005054:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005058:	4b1c      	ldr	r3, [pc, #112]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800505e:	4a1b      	ldr	r2, [pc, #108]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005060:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005068:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d016      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507a:	f7fd fb43 	bl	8002704 <HAL_GetTick>
 800507e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005080:	e00b      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005082:	f7fd fb3f 	bl	8002704 <HAL_GetTick>
 8005086:	4602      	mov	r2, r0
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005090:	4293      	cmp	r3, r2
 8005092:	d902      	bls.n	800509a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	74fb      	strb	r3, [r7, #19]
            break;
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800509a:	4b0c      	ldr	r3, [pc, #48]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ec      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80050a8:	7cfb      	ldrb	r3, [r7, #19]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050ae:	4b07      	ldr	r3, [pc, #28]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050bc:	4903      	ldr	r1, [pc, #12]	@ (80050cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80050c4:	e008      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c6:	7cfb      	ldrb	r3, [r7, #19]
 80050c8:	74bb      	strb	r3, [r7, #18]
 80050ca:	e005      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	7cfb      	ldrb	r3, [r7, #19]
 80050d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d8:	7c7b      	ldrb	r3, [r7, #17]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d105      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050de:	4ba7      	ldr	r3, [pc, #668]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050e2:	4aa6      	ldr	r2, [pc, #664]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f6:	4ba1      	ldr	r3, [pc, #644]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050fc:	f023 0203 	bic.w	r2, r3, #3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	499d      	ldr	r1, [pc, #628]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005118:	4b98      	ldr	r3, [pc, #608]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511e:	f023 020c 	bic.w	r2, r3, #12
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4995      	ldr	r1, [pc, #596]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0304 	and.w	r3, r3, #4
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800513a:	4b90      	ldr	r3, [pc, #576]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005140:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	498c      	ldr	r1, [pc, #560]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800515c:	4b87      	ldr	r3, [pc, #540]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	4984      	ldr	r1, [pc, #528]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517e:	4b7f      	ldr	r3, [pc, #508]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	497b      	ldr	r1, [pc, #492]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d00a      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051a0:	4b76      	ldr	r3, [pc, #472]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	4973      	ldr	r1, [pc, #460]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051c2:	4b6e      	ldr	r3, [pc, #440]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	496a      	ldr	r1, [pc, #424]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051e4:	4b65      	ldr	r3, [pc, #404]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4962      	ldr	r1, [pc, #392]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005206:	4b5d      	ldr	r3, [pc, #372]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800520c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005214:	4959      	ldr	r1, [pc, #356]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005228:	4b54      	ldr	r3, [pc, #336]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800522a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800522e:	f023 0203 	bic.w	r2, r3, #3
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	4951      	ldr	r1, [pc, #324]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005238:	4313      	orrs	r3, r2
 800523a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800524a:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005250:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005258:	4948      	ldr	r1, [pc, #288]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d015      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800526c:	4b43      	ldr	r3, [pc, #268]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005272:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527a:	4940      	ldr	r1, [pc, #256]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005286:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800528a:	d105      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800528c:	4b3b      	ldr	r3, [pc, #236]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	4a3a      	ldr	r2, [pc, #232]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005292:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005296:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d015      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052a4:	4b35      	ldr	r3, [pc, #212]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b2:	4932      	ldr	r1, [pc, #200]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052c2:	d105      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052c4:	4b2d      	ldr	r3, [pc, #180]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	4a2c      	ldr	r2, [pc, #176]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80052dc:	4b27      	ldr	r3, [pc, #156]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ea:	4924      	ldr	r1, [pc, #144]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80052fa:	d105      	bne.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052fc:	4b1f      	ldr	r3, [pc, #124]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4a1e      	ldr	r2, [pc, #120]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005306:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d015      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005314:	4b19      	ldr	r3, [pc, #100]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005322:	4916      	ldr	r1, [pc, #88]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005332:	d105      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005334:	4b11      	ldr	r3, [pc, #68]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a10      	ldr	r2, [pc, #64]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d019      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800534c:	4b0b      	ldr	r3, [pc, #44]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800534e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4908      	ldr	r1, [pc, #32]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800535c:	4313      	orrs	r3, r2
 800535e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800536a:	d109      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800536c:	4b03      	ldr	r3, [pc, #12]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	4a02      	ldr	r2, [pc, #8]	@ (800537c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005376:	60d3      	str	r3, [r2, #12]
 8005378:	e002      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d015      	beq.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800538c:	4b29      	ldr	r3, [pc, #164]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005392:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800539a:	4926      	ldr	r1, [pc, #152]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053aa:	d105      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053ac:	4b21      	ldr	r3, [pc, #132]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a20      	ldr	r2, [pc, #128]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d015      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053ca:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d2:	4918      	ldr	r1, [pc, #96]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e2:	d105      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80053e4:	4b13      	ldr	r3, [pc, #76]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	4a12      	ldr	r2, [pc, #72]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80053fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80053fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005402:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540a:	490a      	ldr	r1, [pc, #40]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800540c:	4313      	orrs	r3, r2
 800540e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005416:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800541a:	d105      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a04      	ldr	r2, [pc, #16]	@ (8005434 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005426:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005428:	7cbb      	ldrb	r3, [r7, #18]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3718      	adds	r7, #24
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000

08005438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e049      	b.n	80054de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d106      	bne.n	8005464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fc ff40 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	4619      	mov	r1, r3
 8005476:	4610      	mov	r0, r2
 8005478:	f000 fd78 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e049      	b.n	800558c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d106      	bne.n	8005512 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f841 	bl	8005594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2202      	movs	r2, #2
 8005516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	3304      	adds	r3, #4
 8005522:	4619      	mov	r1, r3
 8005524:	4610      	mov	r0, r2
 8005526:	f000 fd21 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2201      	movs	r2, #1
 8005576:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800559c:	bf00      	nop
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e049      	b.n	800564e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d106      	bne.n	80055d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f841 	bl	8005656 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3304      	adds	r3, #4
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f000 fcc0 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01b      	beq.n	80056ce <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f06f 0202 	mvn.w	r2, #2
 800569e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	f003 0303 	and.w	r3, r3, #3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fb fead 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 80056ba:	e005      	b.n	80056c8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 fc37 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fc3e 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d020      	beq.n	800571a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01b      	beq.n	800571a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0204 	mvn.w	r2, #4
 80056ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fb fe87 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 8005706:	e005      	b.n	8005714 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fc11 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fc18 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d01b      	beq.n	8005766 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f06f 0208 	mvn.w	r2, #8
 8005736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2204      	movs	r2, #4
 800573c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	f003 0303 	and.w	r3, r3, #3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7fb fe61 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 8005752:	e005      	b.n	8005760 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fbeb 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fbf2 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	d020      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 0310 	and.w	r3, r3, #16
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01b      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f06f 0210 	mvn.w	r2, #16
 8005782:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2208      	movs	r2, #8
 8005788:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fb fe3b 	bl	8001414 <HAL_TIM_IC_CaptureCallback>
 800579e:	e005      	b.n	80057ac <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fbc5 	bl	8005f30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fbcc 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f06f 0201 	mvn.w	r2, #1
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fba3 	bl	8005f1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fa8c 	bl	8006d1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00c      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005814:	2b00      	cmp	r3, #0
 8005816:	d007      	beq.n	8005828 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f001 fa84 	bl	8006d30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00c      	beq.n	800584c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	d007      	beq.n	800584c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fb86 	bl	8005f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00c      	beq.n	8005870 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	d007      	beq.n	8005870 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f06f 0220 	mvn.w	r2, #32
 8005868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f001 fa4c 	bl	8006d08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00c      	beq.n	8005894 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d007      	beq.n	8005894 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800588c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f001 fa58 	bl	8006d44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00c      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d007      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80058b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f001 fa50 	bl	8006d58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f001 fa48 	bl	8006d6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00c      	beq.n	8005900 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d007      	beq.n	8005900 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80058f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f001 fa40 	bl	8006d80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005900:	bf00      	nop
 8005902:	3710      	adds	r7, #16
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}

08005908 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800591e:	2b01      	cmp	r3, #1
 8005920:	d101      	bne.n	8005926 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005922:	2302      	movs	r3, #2
 8005924:	e088      	b.n	8005a38 <HAL_TIM_IC_ConfigChannel+0x130>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2201      	movs	r2, #1
 800592a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005944:	f000 fef0 	bl	8006728 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 020c 	bic.w	r2, r2, #12
 8005956:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6999      	ldr	r1, [r3, #24]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	689a      	ldr	r2, [r3, #8]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	619a      	str	r2, [r3, #24]
 800596a:	e060      	b.n	8005a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b04      	cmp	r3, #4
 8005970:	d11c      	bne.n	80059ac <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005982:	f000 ff74 	bl	800686e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	699a      	ldr	r2, [r3, #24]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005994:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6999      	ldr	r1, [r3, #24]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	021a      	lsls	r2, r3, #8
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	430a      	orrs	r2, r1
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e040      	b.n	8005a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d11b      	bne.n	80059ea <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80059c2:	f000 ffc1 	bl	8006948 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 020c 	bic.w	r2, r2, #12
 80059d4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69d9      	ldr	r1, [r3, #28]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	61da      	str	r2, [r3, #28]
 80059e8:	e021      	b.n	8005a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b0c      	cmp	r3, #12
 80059ee:	d11c      	bne.n	8005a2a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a00:	f000 ffde 	bl	80069c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69da      	ldr	r2, [r3, #28]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a12:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	69d9      	ldr	r1, [r3, #28]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	021a      	lsls	r2, r3, #8
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	61da      	str	r2, [r3, #28]
 8005a28:	e001      	b.n	8005a2e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e0ff      	b.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b14      	cmp	r3, #20
 8005a6a:	f200 80f0 	bhi.w	8005c4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005a74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005ac9 	.word	0x08005ac9
 8005a78:	08005c4f 	.word	0x08005c4f
 8005a7c:	08005c4f 	.word	0x08005c4f
 8005a80:	08005c4f 	.word	0x08005c4f
 8005a84:	08005b09 	.word	0x08005b09
 8005a88:	08005c4f 	.word	0x08005c4f
 8005a8c:	08005c4f 	.word	0x08005c4f
 8005a90:	08005c4f 	.word	0x08005c4f
 8005a94:	08005b4b 	.word	0x08005b4b
 8005a98:	08005c4f 	.word	0x08005c4f
 8005a9c:	08005c4f 	.word	0x08005c4f
 8005aa0:	08005c4f 	.word	0x08005c4f
 8005aa4:	08005b8b 	.word	0x08005b8b
 8005aa8:	08005c4f 	.word	0x08005c4f
 8005aac:	08005c4f 	.word	0x08005c4f
 8005ab0:	08005c4f 	.word	0x08005c4f
 8005ab4:	08005bcd 	.word	0x08005bcd
 8005ab8:	08005c4f 	.word	0x08005c4f
 8005abc:	08005c4f 	.word	0x08005c4f
 8005ac0:	08005c4f 	.word	0x08005c4f
 8005ac4:	08005c0d 	.word	0x08005c0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fb00 	bl	80060d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0208 	orr.w	r2, r2, #8
 8005ae2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	699a      	ldr	r2, [r3, #24]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0204 	bic.w	r2, r2, #4
 8005af2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6999      	ldr	r1, [r3, #24]
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691a      	ldr	r2, [r3, #16]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	619a      	str	r2, [r3, #24]
      break;
 8005b06:	e0a5      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fb7a 	bl	8006208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	699a      	ldr	r2, [r3, #24]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6999      	ldr	r1, [r3, #24]
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	021a      	lsls	r2, r3, #8
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	619a      	str	r2, [r3, #24]
      break;
 8005b48:	e084      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68b9      	ldr	r1, [r7, #8]
 8005b50:	4618      	mov	r0, r3
 8005b52:	f000 fbed 	bl	8006330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0208 	orr.w	r2, r2, #8
 8005b64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	69da      	ldr	r2, [r3, #28]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 0204 	bic.w	r2, r2, #4
 8005b74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69d9      	ldr	r1, [r3, #28]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	61da      	str	r2, [r3, #28]
      break;
 8005b88:	e064      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fc5f 	bl	8006454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69d9      	ldr	r1, [r3, #28]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	021a      	lsls	r2, r3, #8
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	61da      	str	r2, [r3, #28]
      break;
 8005bca:	e043      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68b9      	ldr	r1, [r7, #8]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fcd2 	bl	800657c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0208 	orr.w	r2, r2, #8
 8005be6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f022 0204 	bic.w	r2, r2, #4
 8005bf6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	691a      	ldr	r2, [r3, #16]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c0a:	e023      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 fd1c 	bl	8006650 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c26:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c36:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c4c:	e002      	b.n	8005c54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	75fb      	strb	r3, [r7, #23]
      break;
 8005c52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop

08005c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c72:	2300      	movs	r3, #0
 8005c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIM_ConfigClockSource+0x1c>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e0f6      	b.n	8005e72 <HAL_TIM_ConfigClockSource+0x20a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005ca2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005ca6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x214>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	f000 80c1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cc4:	4a6d      	ldr	r2, [pc, #436]	@ (8005e7c <HAL_TIM_ConfigClockSource+0x214>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	f200 80c6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005ccc:	4a6c      	ldr	r2, [pc, #432]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x218>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 80b9 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cd4:	4a6a      	ldr	r2, [pc, #424]	@ (8005e80 <HAL_TIM_ConfigClockSource+0x218>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 80be 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cdc:	4a69      	ldr	r2, [pc, #420]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x21c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f000 80b1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005ce4:	4a67      	ldr	r2, [pc, #412]	@ (8005e84 <HAL_TIM_ConfigClockSource+0x21c>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f200 80b6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cec:	4a66      	ldr	r2, [pc, #408]	@ (8005e88 <HAL_TIM_ConfigClockSource+0x220>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f000 80a9 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005cf4:	4a64      	ldr	r2, [pc, #400]	@ (8005e88 <HAL_TIM_ConfigClockSource+0x220>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f200 80ae 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005cfc:	4a63      	ldr	r2, [pc, #396]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x224>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	f000 80a1 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d04:	4a61      	ldr	r2, [pc, #388]	@ (8005e8c <HAL_TIM_ConfigClockSource+0x224>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	f200 80a6 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d0c:	4a60      	ldr	r2, [pc, #384]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x228>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	f000 8099 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d14:	4a5e      	ldr	r2, [pc, #376]	@ (8005e90 <HAL_TIM_ConfigClockSource+0x228>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	f200 809e 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d1c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d20:	f000 8091 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d24:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005d28:	f200 8096 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d2c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d30:	f000 8089 	beq.w	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d38:	f200 808e 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d40:	d03e      	beq.n	8005dc0 <HAL_TIM_ConfigClockSource+0x158>
 8005d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d46:	f200 8087 	bhi.w	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d4e:	f000 8086 	beq.w	8005e5e <HAL_TIM_ConfigClockSource+0x1f6>
 8005d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d56:	d87f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d58:	2b70      	cmp	r3, #112	@ 0x70
 8005d5a:	d01a      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x12a>
 8005d5c:	2b70      	cmp	r3, #112	@ 0x70
 8005d5e:	d87b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d60:	2b60      	cmp	r3, #96	@ 0x60
 8005d62:	d050      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x19e>
 8005d64:	2b60      	cmp	r3, #96	@ 0x60
 8005d66:	d877      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d68:	2b50      	cmp	r3, #80	@ 0x50
 8005d6a:	d03c      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x17e>
 8005d6c:	2b50      	cmp	r3, #80	@ 0x50
 8005d6e:	d873      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d058      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1be>
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	d86f      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d78:	2b30      	cmp	r3, #48	@ 0x30
 8005d7a:	d064      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d7c:	2b30      	cmp	r3, #48	@ 0x30
 8005d7e:	d86b      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d80:	2b20      	cmp	r3, #32
 8005d82:	d060      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	d867      	bhi.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d05a      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0x1de>
 8005d90:	e062      	b.n	8005e58 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005da2:	f000 fe67 	bl	8006a74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005db4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	609a      	str	r2, [r3, #8]
      break;
 8005dbe:	e04f      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005dd0:	f000 fe50 	bl	8006a74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689a      	ldr	r2, [r3, #8]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de2:	609a      	str	r2, [r3, #8]
      break;
 8005de4:	e03c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fd0c 	bl	8006810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2150      	movs	r1, #80	@ 0x50
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fe1b 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8005e04:	e02c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 fd68 	bl	80068e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2160      	movs	r1, #96	@ 0x60
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fe0b 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8005e24:	e01c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e32:	461a      	mov	r2, r3
 8005e34:	f000 fcec 	bl	8006810 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2140      	movs	r1, #64	@ 0x40
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f000 fdfb 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8005e44:	e00c      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f000 fdf2 	bl	8006a3a <TIM_ITRx_SetConfig>
      break;
 8005e56:	e003      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5c:	e000      	b.n	8005e60 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005e5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	00100070 	.word	0x00100070
 8005e80:	00100060 	.word	0x00100060
 8005e84:	00100050 	.word	0x00100050
 8005e88:	00100040 	.word	0x00100040
 8005e8c:	00100030 	.word	0x00100030
 8005e90:	00100020 	.word	0x00100020

08005e94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b0c      	cmp	r3, #12
 8005ea6:	d831      	bhi.n	8005f0c <HAL_TIM_ReadCapturedValue+0x78>
 8005ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eae:	bf00      	nop
 8005eb0:	08005ee5 	.word	0x08005ee5
 8005eb4:	08005f0d 	.word	0x08005f0d
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005f0d 	.word	0x08005f0d
 8005ec0:	08005eef 	.word	0x08005eef
 8005ec4:	08005f0d 	.word	0x08005f0d
 8005ec8:	08005f0d 	.word	0x08005f0d
 8005ecc:	08005f0d 	.word	0x08005f0d
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f0d 	.word	0x08005f0d
 8005ed8:	08005f0d 	.word	0x08005f0d
 8005edc:	08005f0d 	.word	0x08005f0d
 8005ee0:	08005f03 	.word	0x08005f03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eea:	60fb      	str	r3, [r7, #12]

      break;
 8005eec:	e00f      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	60fb      	str	r3, [r7, #12]

      break;
 8005ef6:	e00a      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005efe:	60fb      	str	r3, [r7, #12]

      break;
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	60fb      	str	r3, [r7, #12]

      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f0c:	bf00      	nop
  }

  return tmpreg;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80060b0 <TIM_Base_SetConfig+0x144>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d017      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f8a:	d013      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a49      	ldr	r2, [pc, #292]	@ (80060b4 <TIM_Base_SetConfig+0x148>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a48      	ldr	r2, [pc, #288]	@ (80060b8 <TIM_Base_SetConfig+0x14c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a47      	ldr	r2, [pc, #284]	@ (80060bc <TIM_Base_SetConfig+0x150>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a46      	ldr	r2, [pc, #280]	@ (80060c0 <TIM_Base_SetConfig+0x154>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0x48>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a45      	ldr	r2, [pc, #276]	@ (80060c4 <TIM_Base_SetConfig+0x158>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d108      	bne.n	8005fc6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a39      	ldr	r2, [pc, #228]	@ (80060b0 <TIM_Base_SetConfig+0x144>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d023      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd4:	d01f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a36      	ldr	r2, [pc, #216]	@ (80060b4 <TIM_Base_SetConfig+0x148>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a35      	ldr	r2, [pc, #212]	@ (80060b8 <TIM_Base_SetConfig+0x14c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d017      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a34      	ldr	r2, [pc, #208]	@ (80060bc <TIM_Base_SetConfig+0x150>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d013      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a33      	ldr	r2, [pc, #204]	@ (80060c0 <TIM_Base_SetConfig+0x154>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d00f      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a33      	ldr	r2, [pc, #204]	@ (80060c8 <TIM_Base_SetConfig+0x15c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00b      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a32      	ldr	r2, [pc, #200]	@ (80060cc <TIM_Base_SetConfig+0x160>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d007      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a31      	ldr	r2, [pc, #196]	@ (80060d0 <TIM_Base_SetConfig+0x164>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d003      	beq.n	8006016 <TIM_Base_SetConfig+0xaa>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2c      	ldr	r2, [pc, #176]	@ (80060c4 <TIM_Base_SetConfig+0x158>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d108      	bne.n	8006028 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800601c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a18      	ldr	r2, [pc, #96]	@ (80060b0 <TIM_Base_SetConfig+0x144>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d013      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1a      	ldr	r2, [pc, #104]	@ (80060c0 <TIM_Base_SetConfig+0x154>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00f      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1a      	ldr	r2, [pc, #104]	@ (80060c8 <TIM_Base_SetConfig+0x15c>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a19      	ldr	r2, [pc, #100]	@ (80060cc <TIM_Base_SetConfig+0x160>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <TIM_Base_SetConfig+0x164>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x110>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a13      	ldr	r2, [pc, #76]	@ (80060c4 <TIM_Base_SetConfig+0x158>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d103      	bne.n	8006084 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	691a      	ldr	r2, [r3, #16]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d105      	bne.n	80060a2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f023 0201 	bic.w	r2, r3, #1
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	611a      	str	r2, [r3, #16]
  }
}
 80060a2:	bf00      	nop
 80060a4:	3714      	adds	r7, #20
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	40012c00 	.word	0x40012c00
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40013400 	.word	0x40013400
 80060c4:	40015000 	.word	0x40015000
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800

080060d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	f023 0201 	bic.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f023 0302 	bic.w	r3, r3, #2
 8006120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	697a      	ldr	r2, [r7, #20]
 8006128:	4313      	orrs	r3, r2
 800612a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	4a30      	ldr	r2, [pc, #192]	@ (80061f0 <TIM_OC1_SetConfig+0x11c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d013      	beq.n	800615c <TIM_OC1_SetConfig+0x88>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a2f      	ldr	r2, [pc, #188]	@ (80061f4 <TIM_OC1_SetConfig+0x120>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00f      	beq.n	800615c <TIM_OC1_SetConfig+0x88>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a2e      	ldr	r2, [pc, #184]	@ (80061f8 <TIM_OC1_SetConfig+0x124>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d00b      	beq.n	800615c <TIM_OC1_SetConfig+0x88>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	4a2d      	ldr	r2, [pc, #180]	@ (80061fc <TIM_OC1_SetConfig+0x128>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d007      	beq.n	800615c <TIM_OC1_SetConfig+0x88>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	4a2c      	ldr	r2, [pc, #176]	@ (8006200 <TIM_OC1_SetConfig+0x12c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d003      	beq.n	800615c <TIM_OC1_SetConfig+0x88>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a2b      	ldr	r2, [pc, #172]	@ (8006204 <TIM_OC1_SetConfig+0x130>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d10c      	bne.n	8006176 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f023 0308 	bic.w	r3, r3, #8
 8006162:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	4313      	orrs	r3, r2
 800616c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 0304 	bic.w	r3, r3, #4
 8006174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <TIM_OC1_SetConfig+0x11c>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <TIM_OC1_SetConfig+0xd2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <TIM_OC1_SetConfig+0x120>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00f      	beq.n	80061a6 <TIM_OC1_SetConfig+0xd2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a1b      	ldr	r2, [pc, #108]	@ (80061f8 <TIM_OC1_SetConfig+0x124>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00b      	beq.n	80061a6 <TIM_OC1_SetConfig+0xd2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1a      	ldr	r2, [pc, #104]	@ (80061fc <TIM_OC1_SetConfig+0x128>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d007      	beq.n	80061a6 <TIM_OC1_SetConfig+0xd2>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a19      	ldr	r2, [pc, #100]	@ (8006200 <TIM_OC1_SetConfig+0x12c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d003      	beq.n	80061a6 <TIM_OC1_SetConfig+0xd2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a18      	ldr	r2, [pc, #96]	@ (8006204 <TIM_OC1_SetConfig+0x130>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d111      	bne.n	80061ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	40012c00 	.word	0x40012c00
 80061f4:	40013400 	.word	0x40013400
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40014400 	.word	0x40014400
 8006200:	40014800 	.word	0x40014800
 8006204:	40015000 	.word	0x40015000

08006208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f023 0210 	bic.w	r2, r3, #16
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0320 	bic.w	r3, r3, #32
 8006256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a2c      	ldr	r2, [pc, #176]	@ (8006318 <TIM_OC2_SetConfig+0x110>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d007      	beq.n	800627c <TIM_OC2_SetConfig+0x74>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a2b      	ldr	r2, [pc, #172]	@ (800631c <TIM_OC2_SetConfig+0x114>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d003      	beq.n	800627c <TIM_OC2_SetConfig+0x74>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a2a      	ldr	r2, [pc, #168]	@ (8006320 <TIM_OC2_SetConfig+0x118>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d10d      	bne.n	8006298 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006296:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a1f      	ldr	r2, [pc, #124]	@ (8006318 <TIM_OC2_SetConfig+0x110>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d013      	beq.n	80062c8 <TIM_OC2_SetConfig+0xc0>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a1e      	ldr	r2, [pc, #120]	@ (800631c <TIM_OC2_SetConfig+0x114>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00f      	beq.n	80062c8 <TIM_OC2_SetConfig+0xc0>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006324 <TIM_OC2_SetConfig+0x11c>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00b      	beq.n	80062c8 <TIM_OC2_SetConfig+0xc0>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006328 <TIM_OC2_SetConfig+0x120>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d007      	beq.n	80062c8 <TIM_OC2_SetConfig+0xc0>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <TIM_OC2_SetConfig+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d003      	beq.n	80062c8 <TIM_OC2_SetConfig+0xc0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a17      	ldr	r2, [pc, #92]	@ (8006320 <TIM_OC2_SetConfig+0x118>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d113      	bne.n	80062f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40012c00 	.word	0x40012c00
 800631c:	40013400 	.word	0x40013400
 8006320:	40015000 	.word	0x40015000
 8006324:	40014000 	.word	0x40014000
 8006328:	40014400 	.word	0x40014400
 800632c:	40014800 	.word	0x40014800

08006330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006330:	b480      	push	{r7}
 8006332:	b087      	sub	sp, #28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800635e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0303 	bic.w	r3, r3, #3
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800637c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	021b      	lsls	r3, r3, #8
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	4313      	orrs	r3, r2
 8006388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a2b      	ldr	r2, [pc, #172]	@ (800643c <TIM_OC3_SetConfig+0x10c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d007      	beq.n	80063a2 <TIM_OC3_SetConfig+0x72>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2a      	ldr	r2, [pc, #168]	@ (8006440 <TIM_OC3_SetConfig+0x110>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d003      	beq.n	80063a2 <TIM_OC3_SetConfig+0x72>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a29      	ldr	r2, [pc, #164]	@ (8006444 <TIM_OC3_SetConfig+0x114>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d10d      	bne.n	80063be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a1e      	ldr	r2, [pc, #120]	@ (800643c <TIM_OC3_SetConfig+0x10c>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <TIM_OC3_SetConfig+0xbe>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006440 <TIM_OC3_SetConfig+0x110>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00f      	beq.n	80063ee <TIM_OC3_SetConfig+0xbe>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006448 <TIM_OC3_SetConfig+0x118>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00b      	beq.n	80063ee <TIM_OC3_SetConfig+0xbe>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a1c      	ldr	r2, [pc, #112]	@ (800644c <TIM_OC3_SetConfig+0x11c>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <TIM_OC3_SetConfig+0xbe>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006450 <TIM_OC3_SetConfig+0x120>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_OC3_SetConfig+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a16      	ldr	r2, [pc, #88]	@ (8006444 <TIM_OC3_SetConfig+0x114>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d113      	bne.n	8006416 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	695b      	ldr	r3, [r3, #20]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	685a      	ldr	r2, [r3, #4]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	621a      	str	r2, [r3, #32]
}
 8006430:	bf00      	nop
 8006432:	371c      	adds	r7, #28
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40013400 	.word	0x40013400
 8006444:	40015000 	.word	0x40015000
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400
 8006450:	40014800 	.word	0x40014800

08006454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006454:	b480      	push	{r7}
 8006456:	b087      	sub	sp, #28
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	69db      	ldr	r3, [r3, #28]
 800647a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	031b      	lsls	r3, r3, #12
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a2c      	ldr	r2, [pc, #176]	@ (8006564 <TIM_OC4_SetConfig+0x110>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_OC4_SetConfig+0x74>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2b      	ldr	r2, [pc, #172]	@ (8006568 <TIM_OC4_SetConfig+0x114>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC4_SetConfig+0x74>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2a      	ldr	r2, [pc, #168]	@ (800656c <TIM_OC4_SetConfig+0x118>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10d      	bne.n	80064e4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006564 <TIM_OC4_SetConfig+0x110>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d013      	beq.n	8006514 <TIM_OC4_SetConfig+0xc0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006568 <TIM_OC4_SetConfig+0x114>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_OC4_SetConfig+0xc0>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006570 <TIM_OC4_SetConfig+0x11c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_OC4_SetConfig+0xc0>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a1d      	ldr	r2, [pc, #116]	@ (8006574 <TIM_OC4_SetConfig+0x120>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_OC4_SetConfig+0xc0>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a1c      	ldr	r2, [pc, #112]	@ (8006578 <TIM_OC4_SetConfig+0x124>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_OC4_SetConfig+0xc0>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a17      	ldr	r2, [pc, #92]	@ (800656c <TIM_OC4_SetConfig+0x118>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d113      	bne.n	800653c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800651a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006522:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	019b      	lsls	r3, r3, #6
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	4313      	orrs	r3, r2
 800652e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	019b      	lsls	r3, r3, #6
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	621a      	str	r2, [r3, #32]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	40012c00 	.word	0x40012c00
 8006568:	40013400 	.word	0x40013400
 800656c:	40015000 	.word	0x40015000
 8006570:	40014000 	.word	0x40014000
 8006574:	40014400 	.word	0x40014400
 8006578:	40014800 	.word	0x40014800

0800657c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80065c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a19      	ldr	r2, [pc, #100]	@ (8006638 <TIM_OC5_SetConfig+0xbc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d013      	beq.n	80065fe <TIM_OC5_SetConfig+0x82>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a18      	ldr	r2, [pc, #96]	@ (800663c <TIM_OC5_SetConfig+0xc0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00f      	beq.n	80065fe <TIM_OC5_SetConfig+0x82>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a17      	ldr	r2, [pc, #92]	@ (8006640 <TIM_OC5_SetConfig+0xc4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d00b      	beq.n	80065fe <TIM_OC5_SetConfig+0x82>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a16      	ldr	r2, [pc, #88]	@ (8006644 <TIM_OC5_SetConfig+0xc8>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d007      	beq.n	80065fe <TIM_OC5_SetConfig+0x82>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a15      	ldr	r2, [pc, #84]	@ (8006648 <TIM_OC5_SetConfig+0xcc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d003      	beq.n	80065fe <TIM_OC5_SetConfig+0x82>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a14      	ldr	r2, [pc, #80]	@ (800664c <TIM_OC5_SetConfig+0xd0>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d109      	bne.n	8006612 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006604:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	021b      	lsls	r3, r3, #8
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	697a      	ldr	r2, [r7, #20]
 8006616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68fa      	ldr	r2, [r7, #12]
 800661c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	621a      	str	r2, [r3, #32]
}
 800662c:	bf00      	nop
 800662e:	371c      	adds	r7, #28
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40012c00 	.word	0x40012c00
 800663c:	40013400 	.word	0x40013400
 8006640:	40014000 	.word	0x40014000
 8006644:	40014400 	.word	0x40014400
 8006648:	40014800 	.word	0x40014800
 800664c:	40015000 	.word	0x40015000

08006650 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006650:	b480      	push	{r7}
 8006652:	b087      	sub	sp, #28
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800667e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006696:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	051b      	lsls	r3, r3, #20
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006710 <TIM_OC6_SetConfig+0xc0>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_OC6_SetConfig+0x84>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a19      	ldr	r2, [pc, #100]	@ (8006714 <TIM_OC6_SetConfig+0xc4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d00f      	beq.n	80066d4 <TIM_OC6_SetConfig+0x84>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a18      	ldr	r2, [pc, #96]	@ (8006718 <TIM_OC6_SetConfig+0xc8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_OC6_SetConfig+0x84>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a17      	ldr	r2, [pc, #92]	@ (800671c <TIM_OC6_SetConfig+0xcc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_OC6_SetConfig+0x84>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a16      	ldr	r2, [pc, #88]	@ (8006720 <TIM_OC6_SetConfig+0xd0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC6_SetConfig+0x84>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a15      	ldr	r2, [pc, #84]	@ (8006724 <TIM_OC6_SetConfig+0xd4>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40012c00 	.word	0x40012c00
 8006714:	40013400 	.word	0x40013400
 8006718:	40014000 	.word	0x40014000
 800671c:	40014400 	.word	0x40014400
 8006720:	40014800 	.word	0x40014800
 8006724:	40015000 	.word	0x40015000

08006728 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
 8006734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f023 0201 	bic.w	r2, r3, #1
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	699b      	ldr	r3, [r3, #24]
 800674c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4a28      	ldr	r2, [pc, #160]	@ (80067f4 <TIM_TI1_SetConfig+0xcc>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d01b      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800675c:	d017      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4a25      	ldr	r2, [pc, #148]	@ (80067f8 <TIM_TI1_SetConfig+0xd0>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4a24      	ldr	r2, [pc, #144]	@ (80067fc <TIM_TI1_SetConfig+0xd4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d00f      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a23      	ldr	r2, [pc, #140]	@ (8006800 <TIM_TI1_SetConfig+0xd8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d00b      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a22      	ldr	r2, [pc, #136]	@ (8006804 <TIM_TI1_SetConfig+0xdc>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d007      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4a21      	ldr	r2, [pc, #132]	@ (8006808 <TIM_TI1_SetConfig+0xe0>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d003      	beq.n	800678e <TIM_TI1_SetConfig+0x66>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4a20      	ldr	r2, [pc, #128]	@ (800680c <TIM_TI1_SetConfig+0xe4>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d101      	bne.n	8006792 <TIM_TI1_SetConfig+0x6a>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <TIM_TI1_SetConfig+0x6c>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d008      	beq.n	80067aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0303 	bic.w	r3, r3, #3
 800679e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	e003      	b.n	80067b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f023 030a 	bic.w	r3, r3, #10
 80067cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	f003 030a 	and.w	r3, r3, #10
 80067d4:	693a      	ldr	r2, [r7, #16]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	621a      	str	r2, [r3, #32]
}
 80067e6:	bf00      	nop
 80067e8:	371c      	adds	r7, #28
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop
 80067f4:	40012c00 	.word	0x40012c00
 80067f8:	40000400 	.word	0x40000400
 80067fc:	40000800 	.word	0x40000800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40013400 	.word	0x40013400
 8006808:	40014000 	.word	0x40014000
 800680c:	40015000 	.word	0x40015000

08006810 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f023 0201 	bic.w	r2, r3, #1
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800683a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	693a      	ldr	r2, [r7, #16]
 8006842:	4313      	orrs	r3, r2
 8006844:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f023 030a 	bic.w	r3, r3, #10
 800684c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	621a      	str	r2, [r3, #32]
}
 8006862:	bf00      	nop
 8006864:	371c      	adds	r7, #28
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800686e:	b480      	push	{r7}
 8006870:	b087      	sub	sp, #28
 8006872:	af00      	add	r7, sp, #0
 8006874:	60f8      	str	r0, [r7, #12]
 8006876:	60b9      	str	r1, [r7, #8]
 8006878:	607a      	str	r2, [r7, #4]
 800687a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	f023 0210 	bic.w	r2, r3, #16
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	699b      	ldr	r3, [r3, #24]
 8006892:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800689a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	021b      	lsls	r3, r3, #8
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	031b      	lsls	r3, r3, #12
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80068c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	011b      	lsls	r3, r3, #4
 80068c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	621a      	str	r2, [r3, #32]
}
 80068dc:	bf00      	nop
 80068de:	371c      	adds	r7, #28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b087      	sub	sp, #28
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a1b      	ldr	r3, [r3, #32]
 80068f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	f023 0210 	bic.w	r2, r3, #16
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	031b      	lsls	r3, r3, #12
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	4313      	orrs	r3, r2
 800691c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006924:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	011b      	lsls	r3, r3, #4
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	621a      	str	r2, [r3, #32]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1b      	ldr	r3, [r3, #32]
 800695a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f023 0303 	bic.w	r3, r3, #3
 8006974:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006984:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	011b      	lsls	r3, r3, #4
 800698a:	b2db      	uxtb	r3, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006998:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b087      	sub	sp, #28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	021b      	lsls	r3, r3, #8
 80069f2:	693a      	ldr	r2, [r7, #16]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	031b      	lsls	r3, r3, #12
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	693a      	ldr	r2, [r7, #16]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	031b      	lsls	r3, r3, #12
 8006a18:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	f043 0307 	orr.w	r3, r3, #7
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	609a      	str	r2, [r3, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	3714      	adds	r7, #20
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b087      	sub	sp, #28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	607a      	str	r2, [r7, #4]
 8006a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	021a      	lsls	r2, r3, #8
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	609a      	str	r2, [r3, #8]
}
 8006aa8:	bf00      	nop
 8006aaa:	371c      	adds	r7, #28
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b085      	sub	sp, #20
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e074      	b.n	8006bb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a34      	ldr	r2, [pc, #208]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a33      	ldr	r2, [pc, #204]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a31      	ldr	r2, [pc, #196]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d108      	bne.n	8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a21      	ldr	r2, [pc, #132]	@ (8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d022      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b4c:	d01d      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1f      	ldr	r2, [pc, #124]	@ (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d018      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d013      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a1c      	ldr	r2, [pc, #112]	@ (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d00e      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a15      	ldr	r2, [pc, #84]	@ (8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d009      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a18      	ldr	r2, [pc, #96]	@ (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d004      	beq.n	8006b8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a11      	ldr	r2, [pc, #68]	@ (8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d10c      	bne.n	8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	40012c00 	.word	0x40012c00
 8006bc8:	40013400 	.word	0x40013400
 8006bcc:	40015000 	.word	0x40015000
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40000800 	.word	0x40000800
 8006bd8:	40000c00 	.word	0x40000c00
 8006bdc:	40014000 	.word	0x40014000

08006be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d101      	bne.n	8006bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bf8:	2302      	movs	r3, #2
 8006bfa:	e078      	b.n	8006cee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c62:	4313      	orrs	r3, r2
 8006c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	041b      	lsls	r3, r3, #16
 8006c72:	4313      	orrs	r3, r2
 8006c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a1c      	ldr	r2, [pc, #112]	@ (8006cfc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d009      	beq.n	8006ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a1b      	ldr	r2, [pc, #108]	@ (8006d00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d004      	beq.n	8006ca2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a19      	ldr	r2, [pc, #100]	@ (8006d04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d11c      	bne.n	8006cdc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cac:	051b      	lsls	r3, r3, #20
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	40012c00 	.word	0x40012c00
 8006d00:	40013400 	.word	0x40013400
 8006d04:	40015000 	.word	0x40015000

08006d08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b083      	sub	sp, #12
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr

08006d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e042      	b.n	8006e2c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d106      	bne.n	8006dbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fb fbbd 	bl	8002538 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2224      	movs	r2, #36	@ 0x24
 8006dc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d002      	beq.n	8006de4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f000 fb24 	bl	800742c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f825 	bl	8006e34 <UART_SetConfig>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e01b      	b.n	8006e2c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0201 	orr.w	r2, r2, #1
 8006e22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fba3 	bl	8007570 <UART_CheckIdleState>
 8006e2a:	4603      	mov	r3, r0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e38:	b08c      	sub	sp, #48	@ 0x30
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	689a      	ldr	r2, [r3, #8]
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	431a      	orrs	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	695b      	ldr	r3, [r3, #20]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	4baa      	ldr	r3, [pc, #680]	@ (800710c <UART_SetConfig+0x2d8>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e6c:	430b      	orrs	r3, r1
 8006e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	699b      	ldr	r3, [r3, #24]
 8006e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a9f      	ldr	r2, [pc, #636]	@ (8007110 <UART_SetConfig+0x2dc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006eaa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	f023 010f 	bic.w	r1, r3, #15
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a90      	ldr	r2, [pc, #576]	@ (8007114 <UART_SetConfig+0x2e0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d125      	bne.n	8006f24 <UART_SetConfig+0xf0>
 8006ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8007118 <UART_SetConfig+0x2e4>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d81a      	bhi.n	8006f1c <UART_SetConfig+0xe8>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <UART_SetConfig+0xb8>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f0d 	.word	0x08006f0d
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f15 	.word	0x08006f15
 8006efc:	2301      	movs	r3, #1
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e116      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e112      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e10e      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e10a      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e106      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a7c      	ldr	r2, [pc, #496]	@ (800711c <UART_SetConfig+0x2e8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d138      	bne.n	8006fa0 <UART_SetConfig+0x16c>
 8006f2e:	4b7a      	ldr	r3, [pc, #488]	@ (8007118 <UART_SetConfig+0x2e4>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f34:	f003 030c 	and.w	r3, r3, #12
 8006f38:	2b0c      	cmp	r3, #12
 8006f3a:	d82d      	bhi.n	8006f98 <UART_SetConfig+0x164>
 8006f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f44 <UART_SetConfig+0x110>)
 8006f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f42:	bf00      	nop
 8006f44:	08006f79 	.word	0x08006f79
 8006f48:	08006f99 	.word	0x08006f99
 8006f4c:	08006f99 	.word	0x08006f99
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006f89 	.word	0x08006f89
 8006f58:	08006f99 	.word	0x08006f99
 8006f5c:	08006f99 	.word	0x08006f99
 8006f60:	08006f99 	.word	0x08006f99
 8006f64:	08006f81 	.word	0x08006f81
 8006f68:	08006f99 	.word	0x08006f99
 8006f6c:	08006f99 	.word	0x08006f99
 8006f70:	08006f99 	.word	0x08006f99
 8006f74:	08006f91 	.word	0x08006f91
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7e:	e0d8      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f86:	e0d4      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f8e:	e0d0      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e0cc      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e0c8      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8007120 <UART_SetConfig+0x2ec>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d125      	bne.n	8006ff6 <UART_SetConfig+0x1c2>
 8006faa:	4b5b      	ldr	r3, [pc, #364]	@ (8007118 <UART_SetConfig+0x2e4>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fb4:	2b30      	cmp	r3, #48	@ 0x30
 8006fb6:	d016      	beq.n	8006fe6 <UART_SetConfig+0x1b2>
 8006fb8:	2b30      	cmp	r3, #48	@ 0x30
 8006fba:	d818      	bhi.n	8006fee <UART_SetConfig+0x1ba>
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d00a      	beq.n	8006fd6 <UART_SetConfig+0x1a2>
 8006fc0:	2b20      	cmp	r3, #32
 8006fc2:	d814      	bhi.n	8006fee <UART_SetConfig+0x1ba>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d002      	beq.n	8006fce <UART_SetConfig+0x19a>
 8006fc8:	2b10      	cmp	r3, #16
 8006fca:	d008      	beq.n	8006fde <UART_SetConfig+0x1aa>
 8006fcc:	e00f      	b.n	8006fee <UART_SetConfig+0x1ba>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd4:	e0ad      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fdc:	e0a9      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006fde:	2304      	movs	r3, #4
 8006fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe4:	e0a5      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fec:	e0a1      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006fee:	2310      	movs	r3, #16
 8006ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff4:	e09d      	b.n	8007132 <UART_SetConfig+0x2fe>
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8007124 <UART_SetConfig+0x2f0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d125      	bne.n	800704c <UART_SetConfig+0x218>
 8007000:	4b45      	ldr	r3, [pc, #276]	@ (8007118 <UART_SetConfig+0x2e4>)
 8007002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007006:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800700a:	2bc0      	cmp	r3, #192	@ 0xc0
 800700c:	d016      	beq.n	800703c <UART_SetConfig+0x208>
 800700e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007010:	d818      	bhi.n	8007044 <UART_SetConfig+0x210>
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d00a      	beq.n	800702c <UART_SetConfig+0x1f8>
 8007016:	2b80      	cmp	r3, #128	@ 0x80
 8007018:	d814      	bhi.n	8007044 <UART_SetConfig+0x210>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <UART_SetConfig+0x1f0>
 800701e:	2b40      	cmp	r3, #64	@ 0x40
 8007020:	d008      	beq.n	8007034 <UART_SetConfig+0x200>
 8007022:	e00f      	b.n	8007044 <UART_SetConfig+0x210>
 8007024:	2300      	movs	r3, #0
 8007026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800702a:	e082      	b.n	8007132 <UART_SetConfig+0x2fe>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007032:	e07e      	b.n	8007132 <UART_SetConfig+0x2fe>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703a:	e07a      	b.n	8007132 <UART_SetConfig+0x2fe>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007042:	e076      	b.n	8007132 <UART_SetConfig+0x2fe>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704a:	e072      	b.n	8007132 <UART_SetConfig+0x2fe>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a35      	ldr	r2, [pc, #212]	@ (8007128 <UART_SetConfig+0x2f4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d12a      	bne.n	80070ac <UART_SetConfig+0x278>
 8007056:	4b30      	ldr	r3, [pc, #192]	@ (8007118 <UART_SetConfig+0x2e4>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007060:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007064:	d01a      	beq.n	800709c <UART_SetConfig+0x268>
 8007066:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800706a:	d81b      	bhi.n	80070a4 <UART_SetConfig+0x270>
 800706c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007070:	d00c      	beq.n	800708c <UART_SetConfig+0x258>
 8007072:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007076:	d815      	bhi.n	80070a4 <UART_SetConfig+0x270>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <UART_SetConfig+0x250>
 800707c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007080:	d008      	beq.n	8007094 <UART_SetConfig+0x260>
 8007082:	e00f      	b.n	80070a4 <UART_SetConfig+0x270>
 8007084:	2300      	movs	r3, #0
 8007086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708a:	e052      	b.n	8007132 <UART_SetConfig+0x2fe>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007092:	e04e      	b.n	8007132 <UART_SetConfig+0x2fe>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709a:	e04a      	b.n	8007132 <UART_SetConfig+0x2fe>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a2:	e046      	b.n	8007132 <UART_SetConfig+0x2fe>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070aa:	e042      	b.n	8007132 <UART_SetConfig+0x2fe>
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a17      	ldr	r2, [pc, #92]	@ (8007110 <UART_SetConfig+0x2dc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d13a      	bne.n	800712c <UART_SetConfig+0x2f8>
 80070b6:	4b18      	ldr	r3, [pc, #96]	@ (8007118 <UART_SetConfig+0x2e4>)
 80070b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070c4:	d01a      	beq.n	80070fc <UART_SetConfig+0x2c8>
 80070c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070ca:	d81b      	bhi.n	8007104 <UART_SetConfig+0x2d0>
 80070cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d0:	d00c      	beq.n	80070ec <UART_SetConfig+0x2b8>
 80070d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d6:	d815      	bhi.n	8007104 <UART_SetConfig+0x2d0>
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d003      	beq.n	80070e4 <UART_SetConfig+0x2b0>
 80070dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070e0:	d008      	beq.n	80070f4 <UART_SetConfig+0x2c0>
 80070e2:	e00f      	b.n	8007104 <UART_SetConfig+0x2d0>
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ea:	e022      	b.n	8007132 <UART_SetConfig+0x2fe>
 80070ec:	2302      	movs	r3, #2
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f2:	e01e      	b.n	8007132 <UART_SetConfig+0x2fe>
 80070f4:	2304      	movs	r3, #4
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	e01a      	b.n	8007132 <UART_SetConfig+0x2fe>
 80070fc:	2308      	movs	r3, #8
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007102:	e016      	b.n	8007132 <UART_SetConfig+0x2fe>
 8007104:	2310      	movs	r3, #16
 8007106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800710a:	e012      	b.n	8007132 <UART_SetConfig+0x2fe>
 800710c:	cfff69f3 	.word	0xcfff69f3
 8007110:	40008000 	.word	0x40008000
 8007114:	40013800 	.word	0x40013800
 8007118:	40021000 	.word	0x40021000
 800711c:	40004400 	.word	0x40004400
 8007120:	40004800 	.word	0x40004800
 8007124:	40004c00 	.word	0x40004c00
 8007128:	40005000 	.word	0x40005000
 800712c:	2310      	movs	r3, #16
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4aae      	ldr	r2, [pc, #696]	@ (80073f0 <UART_SetConfig+0x5bc>)
 8007138:	4293      	cmp	r3, r2
 800713a:	f040 8097 	bne.w	800726c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800713e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007142:	2b08      	cmp	r3, #8
 8007144:	d823      	bhi.n	800718e <UART_SetConfig+0x35a>
 8007146:	a201      	add	r2, pc, #4	@ (adr r2, 800714c <UART_SetConfig+0x318>)
 8007148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714c:	08007171 	.word	0x08007171
 8007150:	0800718f 	.word	0x0800718f
 8007154:	08007179 	.word	0x08007179
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800717f 	.word	0x0800717f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800718f 	.word	0x0800718f
 800716c:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd fea2 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 8007174:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b9e      	ldr	r3, [pc, #632]	@ (80073f4 <UART_SetConfig+0x5c0>)
 800717a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fd fe2d 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8007182:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8130 	beq.w	8007402 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	4a94      	ldr	r2, [pc, #592]	@ (80073f8 <UART_SetConfig+0x5c4>)
 80071a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ac:	461a      	mov	r2, r3
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80071b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	4413      	add	r3, r2
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d305      	bcc.n	80071d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	d903      	bls.n	80071da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80071d2:	2301      	movs	r3, #1
 80071d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80071d8:	e113      	b.n	8007402 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	2200      	movs	r2, #0
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	60fa      	str	r2, [r7, #12]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e6:	4a84      	ldr	r2, [pc, #528]	@ (80073f8 <UART_SetConfig+0x5c4>)
 80071e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	2200      	movs	r2, #0
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071fc:	f7f9 f9c8 	bl	8000590 <__aeabi_uldivmod>
 8007200:	4602      	mov	r2, r0
 8007202:	460b      	mov	r3, r1
 8007204:	4610      	mov	r0, r2
 8007206:	4619      	mov	r1, r3
 8007208:	f04f 0200 	mov.w	r2, #0
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	020b      	lsls	r3, r1, #8
 8007212:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007216:	0202      	lsls	r2, r0, #8
 8007218:	6979      	ldr	r1, [r7, #20]
 800721a:	6849      	ldr	r1, [r1, #4]
 800721c:	0849      	lsrs	r1, r1, #1
 800721e:	2000      	movs	r0, #0
 8007220:	460c      	mov	r4, r1
 8007222:	4605      	mov	r5, r0
 8007224:	eb12 0804 	adds.w	r8, r2, r4
 8007228:	eb43 0905 	adc.w	r9, r3, r5
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	469a      	mov	sl, r3
 8007234:	4693      	mov	fp, r2
 8007236:	4652      	mov	r2, sl
 8007238:	465b      	mov	r3, fp
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f9a7 	bl	8000590 <__aeabi_uldivmod>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4613      	mov	r3, r2
 8007248:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800724a:	6a3b      	ldr	r3, [r7, #32]
 800724c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007250:	d308      	bcc.n	8007264 <UART_SetConfig+0x430>
 8007252:	6a3b      	ldr	r3, [r7, #32]
 8007254:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007258:	d204      	bcs.n	8007264 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6a3a      	ldr	r2, [r7, #32]
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	e0ce      	b.n	8007402 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800726a:	e0ca      	b.n	8007402 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007274:	d166      	bne.n	8007344 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007276:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800727a:	2b08      	cmp	r3, #8
 800727c:	d827      	bhi.n	80072ce <UART_SetConfig+0x49a>
 800727e:	a201      	add	r2, pc, #4	@ (adr r2, 8007284 <UART_SetConfig+0x450>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	080072a9 	.word	0x080072a9
 8007288:	080072b1 	.word	0x080072b1
 800728c:	080072b9 	.word	0x080072b9
 8007290:	080072cf 	.word	0x080072cf
 8007294:	080072bf 	.word	0x080072bf
 8007298:	080072cf 	.word	0x080072cf
 800729c:	080072cf 	.word	0x080072cf
 80072a0:	080072cf 	.word	0x080072cf
 80072a4:	080072c7 	.word	0x080072c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a8:	f7fd fe06 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 80072ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072ae:	e014      	b.n	80072da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b0:	f7fd fe18 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 80072b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072b6:	e010      	b.n	80072da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b8:	4b4e      	ldr	r3, [pc, #312]	@ (80073f4 <UART_SetConfig+0x5c0>)
 80072ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072bc:	e00d      	b.n	80072da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072be:	f7fd fd8d 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 80072c2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072c4:	e009      	b.n	80072da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072cc:	e005      	b.n	80072da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 8090 	beq.w	8007402 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072e6:	4a44      	ldr	r2, [pc, #272]	@ (80073f8 <UART_SetConfig+0x5c4>)
 80072e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ec:	461a      	mov	r2, r3
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80072f4:	005a      	lsls	r2, r3, #1
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	441a      	add	r2, r3
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	fbb2 f3f3 	udiv	r3, r2, r3
 8007306:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007308:	6a3b      	ldr	r3, [r7, #32]
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d916      	bls.n	800733c <UART_SetConfig+0x508>
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007314:	d212      	bcs.n	800733c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	b29b      	uxth	r3, r3
 800731a:	f023 030f 	bic.w	r3, r3, #15
 800731e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007320:	6a3b      	ldr	r3, [r7, #32]
 8007322:	085b      	lsrs	r3, r3, #1
 8007324:	b29b      	uxth	r3, r3
 8007326:	f003 0307 	and.w	r3, r3, #7
 800732a:	b29a      	uxth	r2, r3
 800732c:	8bfb      	ldrh	r3, [r7, #30]
 800732e:	4313      	orrs	r3, r2
 8007330:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	8bfa      	ldrh	r2, [r7, #30]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	e062      	b.n	8007402 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007342:	e05e      	b.n	8007402 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007344:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007348:	2b08      	cmp	r3, #8
 800734a:	d828      	bhi.n	800739e <UART_SetConfig+0x56a>
 800734c:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <UART_SetConfig+0x520>)
 800734e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007352:	bf00      	nop
 8007354:	08007379 	.word	0x08007379
 8007358:	08007381 	.word	0x08007381
 800735c:	08007389 	.word	0x08007389
 8007360:	0800739f 	.word	0x0800739f
 8007364:	0800738f 	.word	0x0800738f
 8007368:	0800739f 	.word	0x0800739f
 800736c:	0800739f 	.word	0x0800739f
 8007370:	0800739f 	.word	0x0800739f
 8007374:	08007397 	.word	0x08007397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007378:	f7fd fd9e 	bl	8004eb8 <HAL_RCC_GetPCLK1Freq>
 800737c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737e:	e014      	b.n	80073aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007380:	f7fd fdb0 	bl	8004ee4 <HAL_RCC_GetPCLK2Freq>
 8007384:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007386:	e010      	b.n	80073aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007388:	4b1a      	ldr	r3, [pc, #104]	@ (80073f4 <UART_SetConfig+0x5c0>)
 800738a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800738c:	e00d      	b.n	80073aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800738e:	f7fd fd25 	bl	8004ddc <HAL_RCC_GetSysClockFreq>
 8007392:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007394:	e009      	b.n	80073aa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800739a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800739c:	e005      	b.n	80073aa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800739e:	2300      	movs	r3, #0
 80073a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80073a8:	bf00      	nop
    }

    if (pclk != 0U)
 80073aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d028      	beq.n	8007402 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b4:	4a10      	ldr	r2, [pc, #64]	@ (80073f8 <UART_SetConfig+0x5c4>)
 80073b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ba:	461a      	mov	r2, r3
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	fbb3 f2f2 	udiv	r2, r3, r2
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	085b      	lsrs	r3, r3, #1
 80073c8:	441a      	add	r2, r3
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80073d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d910      	bls.n	80073fc <UART_SetConfig+0x5c8>
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073e0:	d20c      	bcs.n	80073fc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60da      	str	r2, [r3, #12]
 80073ec:	e009      	b.n	8007402 <UART_SetConfig+0x5ce>
 80073ee:	bf00      	nop
 80073f0:	40008000 	.word	0x40008000
 80073f4:	00f42400 	.word	0x00f42400
 80073f8:	08007b0c 	.word	0x08007b0c
      }
      else
      {
        ret = HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2201      	movs	r2, #1
 8007406:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2201      	movs	r2, #1
 800740e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2200      	movs	r2, #0
 800741c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800741e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007422:	4618      	mov	r0, r3
 8007424:	3730      	adds	r7, #48	@ 0x30
 8007426:	46bd      	mov	sp, r7
 8007428:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800742c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00a      	beq.n	8007456 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	430a      	orrs	r2, r1
 8007476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747c:	f003 0302 	and.w	r3, r3, #2
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00a      	beq.n	800749a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	430a      	orrs	r2, r1
 80074ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	f003 0310 	and.w	r3, r3, #16
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00a      	beq.n	80074de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	430a      	orrs	r2, r1
 80074dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074e2:	f003 0320 	and.w	r3, r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	430a      	orrs	r2, r1
 80074fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007508:	2b00      	cmp	r3, #0
 800750a:	d01a      	beq.n	8007542 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007526:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800752a:	d10a      	bne.n	8007542 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	430a      	orrs	r2, r1
 8007562:	605a      	str	r2, [r3, #4]
  }
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b098      	sub	sp, #96	@ 0x60
 8007574:	af02      	add	r7, sp, #8
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007580:	f7fb f8c0 	bl	8002704 <HAL_GetTick>
 8007584:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f003 0308 	and.w	r3, r3, #8
 8007590:	2b08      	cmp	r3, #8
 8007592:	d12f      	bne.n	80075f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007594:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007598:	9300      	str	r3, [sp, #0]
 800759a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759c:	2200      	movs	r2, #0
 800759e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f88e 	bl	80076c4 <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d022      	beq.n	80075f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80075bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80075d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80075da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075f0:	2303      	movs	r3, #3
 80075f2:	e063      	b.n	80076bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0304 	and.w	r3, r3, #4
 80075fe:	2b04      	cmp	r3, #4
 8007600:	d149      	bne.n	8007696 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007602:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800760a:	2200      	movs	r2, #0
 800760c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f857 	bl	80076c4 <UART_WaitOnFlagUntilTimeout>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d03c      	beq.n	8007696 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007624:	e853 3f00 	ldrex	r3, [r3]
 8007628:	623b      	str	r3, [r7, #32]
   return(result);
 800762a:	6a3b      	ldr	r3, [r7, #32]
 800762c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007630:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763a:	633b      	str	r3, [r7, #48]	@ 0x30
 800763c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007642:	e841 2300 	strex	r3, r2, [r1]
 8007646:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e6      	bne.n	800761c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	3308      	adds	r3, #8
 8007654:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	e853 3f00 	ldrex	r3, [r3]
 800765c:	60fb      	str	r3, [r7, #12]
   return(result);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f023 0301 	bic.w	r3, r3, #1
 8007664:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800766e:	61fa      	str	r2, [r7, #28]
 8007670:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	69b9      	ldr	r1, [r7, #24]
 8007674:	69fa      	ldr	r2, [r7, #28]
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	617b      	str	r3, [r7, #20]
   return(result);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e5      	bne.n	800764e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e012      	b.n	80076bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2220      	movs	r2, #32
 80076a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3758      	adds	r7, #88	@ 0x58
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076d4:	e04f      	b.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d04b      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7fb f811 	bl	8002704 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076f4:	2303      	movs	r3, #3
 80076f6:	e04e      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d037      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	2b80      	cmp	r3, #128	@ 0x80
 800770a:	d034      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	2b40      	cmp	r3, #64	@ 0x40
 8007710:	d031      	beq.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b08      	cmp	r3, #8
 800771e:	d110      	bne.n	8007742 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2208      	movs	r2, #8
 8007726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007728:	68f8      	ldr	r0, [r7, #12]
 800772a:	f000 f838 	bl	800779e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2208      	movs	r2, #8
 8007732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e029      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800774c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007750:	d111      	bne.n	8007776 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800775a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800775c:	68f8      	ldr	r0, [r7, #12]
 800775e:	f000 f81e 	bl	800779e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2220      	movs	r2, #32
 8007766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e00f      	b.n	8007796 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69da      	ldr	r2, [r3, #28]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	4013      	ands	r3, r2
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	bf0c      	ite	eq
 8007786:	2301      	moveq	r3, #1
 8007788:	2300      	movne	r3, #0
 800778a:	b2db      	uxtb	r3, r3
 800778c:	461a      	mov	r2, r3
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	429a      	cmp	r2, r3
 8007792:	d0a0      	beq.n	80076d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800779e:	b480      	push	{r7}
 80077a0:	b095      	sub	sp, #84	@ 0x54
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ae:	e853 3f00 	ldrex	r3, [r3]
 80077b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80077b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	461a      	mov	r2, r3
 80077c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80077c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80077ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80077cc:	e841 2300 	strex	r3, r2, [r1]
 80077d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80077d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1e6      	bne.n	80077a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3308      	adds	r3, #8
 80077de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	e853 3f00 	ldrex	r3, [r3]
 80077e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3308      	adds	r3, #8
 80077fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e3      	bne.n	80077d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d118      	bne.n	800784a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	60bb      	str	r3, [r7, #8]
   return(result);
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f023 0310 	bic.w	r3, r3, #16
 800782c:	647b      	str	r3, [r7, #68]	@ 0x44
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783a:	6979      	ldr	r1, [r7, #20]
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	e841 2300 	strex	r3, r2, [r1]
 8007842:	613b      	str	r3, [r7, #16]
   return(result);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1e6      	bne.n	8007818 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800785e:	bf00      	nop
 8007860:	3754      	adds	r7, #84	@ 0x54
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007878:	2b01      	cmp	r3, #1
 800787a:	d101      	bne.n	8007880 <HAL_UARTEx_DisableFifoMode+0x16>
 800787c:	2302      	movs	r3, #2
 800787e:	e027      	b.n	80078d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2224      	movs	r2, #36	@ 0x24
 800788c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0201 	bic.w	r2, r2, #1
 80078a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80078ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d101      	bne.n	80078f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078f0:	2302      	movs	r3, #2
 80078f2:	e02d      	b.n	8007950 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2224      	movs	r2, #36	@ 0x24
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f022 0201 	bic.w	r2, r2, #1
 800791a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	430a      	orrs	r2, r1
 800792e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f84f 	bl	80079d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2220      	movs	r2, #32
 8007942:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800796c:	2302      	movs	r3, #2
 800796e:	e02d      	b.n	80079cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2224      	movs	r2, #36	@ 0x24
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0201 	bic.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	430a      	orrs	r2, r1
 80079aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f811 	bl	80079d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d108      	bne.n	80079f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079f4:	e031      	b.n	8007a5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079f6:	2308      	movs	r3, #8
 80079f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079fa:	2308      	movs	r3, #8
 80079fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	0e5b      	lsrs	r3, r3, #25
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	f003 0307 	and.w	r3, r3, #7
 8007a0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	0f5b      	lsrs	r3, r3, #29
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a1e:	7bbb      	ldrb	r3, [r7, #14]
 8007a20:	7b3a      	ldrb	r2, [r7, #12]
 8007a22:	4911      	ldr	r1, [pc, #68]	@ (8007a68 <UARTEx_SetNbDataToProcess+0x94>)
 8007a24:	5c8a      	ldrb	r2, [r1, r2]
 8007a26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a2a:	7b3a      	ldrb	r2, [r7, #12]
 8007a2c:	490f      	ldr	r1, [pc, #60]	@ (8007a6c <UARTEx_SetNbDataToProcess+0x98>)
 8007a2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a3c:	7bfb      	ldrb	r3, [r7, #15]
 8007a3e:	7b7a      	ldrb	r2, [r7, #13]
 8007a40:	4909      	ldr	r1, [pc, #36]	@ (8007a68 <UARTEx_SetNbDataToProcess+0x94>)
 8007a42:	5c8a      	ldrb	r2, [r1, r2]
 8007a44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a48:	7b7a      	ldrb	r2, [r7, #13]
 8007a4a:	4908      	ldr	r1, [pc, #32]	@ (8007a6c <UARTEx_SetNbDataToProcess+0x98>)
 8007a4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	08007b24 	.word	0x08007b24
 8007a6c:	08007b2c 	.word	0x08007b2c

08007a70 <memset>:
 8007a70:	4402      	add	r2, r0
 8007a72:	4603      	mov	r3, r0
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d100      	bne.n	8007a7a <memset+0xa>
 8007a78:	4770      	bx	lr
 8007a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a7e:	e7f9      	b.n	8007a74 <memset+0x4>

08007a80 <__libc_init_array>:
 8007a80:	b570      	push	{r4, r5, r6, lr}
 8007a82:	4d0d      	ldr	r5, [pc, #52]	@ (8007ab8 <__libc_init_array+0x38>)
 8007a84:	4c0d      	ldr	r4, [pc, #52]	@ (8007abc <__libc_init_array+0x3c>)
 8007a86:	1b64      	subs	r4, r4, r5
 8007a88:	10a4      	asrs	r4, r4, #2
 8007a8a:	2600      	movs	r6, #0
 8007a8c:	42a6      	cmp	r6, r4
 8007a8e:	d109      	bne.n	8007aa4 <__libc_init_array+0x24>
 8007a90:	4d0b      	ldr	r5, [pc, #44]	@ (8007ac0 <__libc_init_array+0x40>)
 8007a92:	4c0c      	ldr	r4, [pc, #48]	@ (8007ac4 <__libc_init_array+0x44>)
 8007a94:	f000 f818 	bl	8007ac8 <_init>
 8007a98:	1b64      	subs	r4, r4, r5
 8007a9a:	10a4      	asrs	r4, r4, #2
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	42a6      	cmp	r6, r4
 8007aa0:	d105      	bne.n	8007aae <__libc_init_array+0x2e>
 8007aa2:	bd70      	pop	{r4, r5, r6, pc}
 8007aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aa8:	4798      	blx	r3
 8007aaa:	3601      	adds	r6, #1
 8007aac:	e7ee      	b.n	8007a8c <__libc_init_array+0xc>
 8007aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ab2:	4798      	blx	r3
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	e7f2      	b.n	8007a9e <__libc_init_array+0x1e>
 8007ab8:	08007b3c 	.word	0x08007b3c
 8007abc:	08007b3c 	.word	0x08007b3c
 8007ac0:	08007b3c 	.word	0x08007b3c
 8007ac4:	08007b40 	.word	0x08007b40

08007ac8 <_init>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr

08007ad4 <_fini>:
 8007ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad6:	bf00      	nop
 8007ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ada:	bc08      	pop	{r3}
 8007adc:	469e      	mov	lr, r3
 8007ade:	4770      	bx	lr
