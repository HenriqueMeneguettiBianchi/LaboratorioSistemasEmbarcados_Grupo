
ES070_RoboSeguidor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008208  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  0000a044  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  0000a044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08008444  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  20000044  08008488  0000a044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000750  08008488  0000a750  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e8fe  00000000  00000000  0000a074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d7d  00000000  00000000  00028972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  0002c6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000136f  00000000  00000000  0002dfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298da  00000000  00000000  0002f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020ca9  00000000  00000000  00058c31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001123e5  00000000  00000000  000798da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018bcbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  0018bd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  0019271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080083c8 	.word	0x080083c8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	080083c8 	.word	0x080083c8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc4;
DMA_HandleTypeDef hdma_adc5;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f007 ff25 	bl	8008370 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b38      	ldr	r3, [pc, #224]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800052e:	4b36      	ldr	r3, [pc, #216]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000530:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b34      	ldr	r3, [pc, #208]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b32      	ldr	r3, [pc, #200]	@ (8000608 <MX_ADC1_Init+0x100>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b31      	ldr	r3, [pc, #196]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b2f      	ldr	r3, [pc, #188]	@ (8000608 <MX_ADC1_Init+0x100>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055a:	4b2b      	ldr	r3, [pc, #172]	@ (8000608 <MX_ADC1_Init+0x100>)
 800055c:	2201      	movs	r2, #1
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b28      	ldr	r3, [pc, #160]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b26      	ldr	r3, [pc, #152]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b24      	ldr	r3, [pc, #144]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800057a:	4b23      	ldr	r3, [pc, #140]	@ (8000608 <MX_ADC1_Init+0x100>)
 800057c:	2201      	movs	r2, #1
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b21      	ldr	r3, [pc, #132]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <MX_ADC1_Init+0x100>)
 800058a:	2201      	movs	r2, #1
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000590:	4b1d      	ldr	r3, [pc, #116]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000592:	220c      	movs	r2, #12
 8000594:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000596:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <MX_ADC1_Init+0x100>)
 8000598:	2280      	movs	r2, #128	@ 0x80
 800059a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 800059c:	4b1a      	ldr	r3, [pc, #104]	@ (8000608 <MX_ADC1_Init+0x100>)
 800059e:	2200      	movs	r2, #0
 80005a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80005a2:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a8:	4817      	ldr	r0, [pc, #92]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005aa:	f002 f93d 	bl	8002828 <HAL_ADC_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80005b4:	f000 ff7d 	bl	80014b2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c0:	4619      	mov	r1, r3
 80005c2:	4811      	ldr	r0, [pc, #68]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005c4:	f003 fa5c 	bl	8003a80 <HAL_ADCEx_MultiModeConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80005ce:	f000 ff70 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	@ (800060c <MX_ADC1_Init+0x104>)
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d6:	2306      	movs	r3, #6
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005de:	237f      	movs	r3, #127	@ 0x7f
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005e2:	2304      	movs	r3, #4
 80005e4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4619      	mov	r1, r3
 80005ee:	4806      	ldr	r0, [pc, #24]	@ (8000608 <MX_ADC1_Init+0x100>)
 80005f0:	f002 fbc8 	bl	8002d84 <HAL_ADC_ConfigChannel>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80005fa:	f000 ff5a 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fe:	bf00      	nop
 8000600:	3730      	adds	r7, #48	@ 0x30
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000060 	.word	0x20000060
 800060c:	04300002 	.word	0x04300002

08000610 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2220      	movs	r2, #32
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f007 fea7 	bl	8008370 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000622:	4b31      	ldr	r3, [pc, #196]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <MX_ADC2_Init+0xdc>)
 8000626:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800062a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800062e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000630:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800063c:	4b2a      	ldr	r3, [pc, #168]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b27      	ldr	r3, [pc, #156]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800064a:	2204      	movs	r2, #4
 800064c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800064e:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000650:	2200      	movs	r2, #0
 8000652:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000654:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000656:	2201      	movs	r2, #1
 8000658:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800065a:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800065c:	2201      	movs	r2, #1
 800065e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066e:	4b1e      	ldr	r3, [pc, #120]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000670:	2200      	movs	r2, #0
 8000672:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000676:	2201      	movs	r2, #1
 8000678:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800067e:	2200      	movs	r2, #0
 8000680:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000684:	2201      	movs	r2, #1
 8000686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800068a:	4b17      	ldr	r3, [pc, #92]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800068c:	220c      	movs	r2, #12
 800068e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000690:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000692:	2280      	movs	r2, #128	@ 0x80
 8000694:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000696:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 8000698:	2200      	movs	r2, #0
 800069a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800069c:	4b12      	ldr	r3, [pc, #72]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 800069e:	2201      	movs	r2, #1
 80006a0:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006a2:	4811      	ldr	r0, [pc, #68]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 80006a4:	f002 f8c0 	bl	8002828 <HAL_ADC_Init>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_ADC2_Init+0xa2>
  {
    Error_Handler();
 80006ae:	f000 ff00 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_ADC2_Init+0xe0>)
 80006b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b6:	2306      	movs	r3, #6
 80006b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006be:	237f      	movs	r3, #127	@ 0x7f
 80006c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c2:	2304      	movs	r3, #4
 80006c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <MX_ADC2_Init+0xd8>)
 80006d0:	f002 fb58 	bl	8002d84 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC2_Init+0xce>
  {
    Error_Handler();
 80006da:	f000 feea 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3720      	adds	r7, #32
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000cc 	.word	0x200000cc
 80006ec:	50000100 	.word	0x50000100
 80006f0:	0c900008 	.word	0x0c900008

080006f4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f007 fe2f 	bl	8008370 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000712:	4b37      	ldr	r3, [pc, #220]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000714:	4a37      	ldr	r2, [pc, #220]	@ (80007f4 <MX_ADC3_Init+0x100>)
 8000716:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000718:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800071a:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800071e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000720:	4b33      	ldr	r3, [pc, #204]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000726:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800072c:	4b30      	ldr	r3, [pc, #192]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000732:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000738:	4b2d      	ldr	r3, [pc, #180]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800073a:	2204      	movs	r2, #4
 800073c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800073e:	4b2c      	ldr	r3, [pc, #176]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000740:	2200      	movs	r2, #0
 8000742:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000744:	4b2a      	ldr	r3, [pc, #168]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000746:	2201      	movs	r2, #1
 8000748:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800074a:	4b29      	ldr	r3, [pc, #164]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800074c:	2201      	movs	r2, #1
 800074e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000750:	4b27      	ldr	r3, [pc, #156]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800075a:	2200      	movs	r2, #0
 800075c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800075e:	4b24      	ldr	r3, [pc, #144]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000760:	2200      	movs	r2, #0
 8000762:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000766:	2201      	movs	r2, #1
 8000768:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800076e:	2200      	movs	r2, #0
 8000770:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000774:	2201      	movs	r2, #1
 8000776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800077c:	220c      	movs	r2, #12
 800077e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000782:	2280      	movs	r2, #128	@ 0x80
 8000784:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 800078e:	2201      	movs	r2, #1
 8000790:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000792:	4817      	ldr	r0, [pc, #92]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 8000794:	f002 f848 	bl	8002828 <HAL_ADC_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 800079e:	f000 fe88 	bl	80014b2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4810      	ldr	r0, [pc, #64]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 80007ae:	f003 f967 	bl	8003a80 <HAL_ADCEx_MultiModeConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80007b8:	f000 fe7b 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_ADC3_Init+0x104>)
 80007be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007c0:	2306      	movs	r3, #6
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007c8:	237f      	movs	r3, #127	@ 0x7f
 80007ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007cc:	2304      	movs	r3, #4
 80007ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_ADC3_Init+0xfc>)
 80007da:	f002 fad3 	bl	8002d84 <HAL_ADC_ConfigChannel>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_ADC3_Init+0xf4>
  {
    Error_Handler();
 80007e4:	f000 fe65 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	3730      	adds	r7, #48	@ 0x30
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000138 	.word	0x20000138
 80007f4:	50000400 	.word	0x50000400
 80007f8:	14f00020 	.word	0x14f00020

080007fc <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2220      	movs	r2, #32
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fdb1 	bl	8008370 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000810:	4a31      	ldr	r2, [pc, #196]	@ (80008d8 <MX_ADC4_Init+0xdc>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000814:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000816:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800081a:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800081c:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b2c      	ldr	r3, [pc, #176]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000828:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800082e:	4b29      	ldr	r3, [pc, #164]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000836:	2204      	movs	r2, #4
 8000838:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800083c:	2200      	movs	r2, #0
 800083e:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000842:	2201      	movs	r2, #1
 8000844:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800084c:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800084e:	2200      	movs	r2, #0
 8000850:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000856:	2200      	movs	r2, #0
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800085c:	2200      	movs	r2, #0
 800085e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000862:	2201      	movs	r2, #1
 8000864:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000868:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800086a:	2200      	movs	r2, #0
 800086c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000870:	2201      	movs	r2, #1
 8000872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 8000876:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000878:	220c      	movs	r2, #12
 800087a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 800087c:	4b15      	ldr	r3, [pc, #84]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800087e:	2280      	movs	r2, #128	@ 0x80
 8000880:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000884:	2200      	movs	r2, #0
 8000886:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 800088a:	2201      	movs	r2, #1
 800088c:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800088e:	4811      	ldr	r0, [pc, #68]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 8000890:	f001 ffca 	bl	8002828 <HAL_ADC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC4_Init+0xa2>
  {
    Error_Handler();
 800089a:	f000 fe0a 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_ADC4_Init+0xe0>)
 80008a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a2:	2306      	movs	r3, #6
 80008a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008aa:	237f      	movs	r3, #127	@ 0x7f
 80008ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ae:	2304      	movs	r3, #4
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	@ (80008d4 <MX_ADC4_Init+0xd8>)
 80008bc:	f002 fa62 	bl	8002d84 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC4_Init+0xce>
  {
    Error_Handler();
 80008c6:	f000 fdf4 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3720      	adds	r7, #32
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200001a4 	.word	0x200001a4
 80008d8:	50000500 	.word	0x50000500
 80008dc:	14f00020 	.word	0x14f00020

080008e0 <MX_ADC5_Init>:
/* ADC5 init function */
void MX_ADC5_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2220      	movs	r2, #32
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f007 fd3f 	bl	8008370 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 80008f2:	4b31      	ldr	r3, [pc, #196]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80008f4:	4a31      	ldr	r2, [pc, #196]	@ (80009bc <MX_ADC5_Init+0xdc>)
 80008f6:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80008f8:	4b2f      	ldr	r3, [pc, #188]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80008fa:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 80008fe:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8000900:	4b2d      	ldr	r3, [pc, #180]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000906:	4b2c      	ldr	r3, [pc, #176]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 800090c:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000918:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800091a:	2204      	movs	r2, #4
 800091c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 800091e:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000920:	2200      	movs	r2, #0
 8000922:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8000924:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000926:	2201      	movs	r2, #1
 8000928:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800092c:	2201      	movs	r2, #1
 800092e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000932:	2200      	movs	r2, #0
 8000934:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000938:	4b1f      	ldr	r3, [pc, #124]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800093a:	2200      	movs	r2, #0
 800093c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800093e:	4b1e      	ldr	r3, [pc, #120]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000940:	2200      	movs	r2, #0
 8000942:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8000944:	4b1c      	ldr	r3, [pc, #112]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000946:	2201      	movs	r2, #1
 8000948:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800094c:	4b1a      	ldr	r3, [pc, #104]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800094e:	2200      	movs	r2, #0
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8000952:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000954:	2201      	movs	r2, #1
 8000956:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_16;
 800095a:	4b17      	ldr	r3, [pc, #92]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800095c:	220c      	movs	r2, #12
 800095e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 8000960:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000962:	2280      	movs	r2, #128	@ 0x80
 8000964:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000966:	4b14      	ldr	r3, [pc, #80]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 800096e:	2201      	movs	r2, #1
 8000970:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8000972:	4811      	ldr	r0, [pc, #68]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 8000974:	f001 ff58 	bl	8002828 <HAL_ADC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC5_Init+0xa2>
  {
    Error_Handler();
 800097e:	f000 fd98 	bl	80014b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_ADC5_Init+0xe0>)
 8000984:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000986:	2306      	movs	r3, #6
 8000988:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800098e:	237f      	movs	r3, #127	@ 0x7f
 8000990:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000992:	2304      	movs	r3, #4
 8000994:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	4619      	mov	r1, r3
 800099e:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <MX_ADC5_Init+0xd8>)
 80009a0:	f002 f9f0 	bl	8002d84 <HAL_ADC_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC5_Init+0xce>
  {
    Error_Handler();
 80009aa:	f000 fd82 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000210 	.word	0x20000210
 80009bc:	50000600 	.word	0x50000600
 80009c0:	08600004 	.word	0x08600004

080009c4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b0a6      	sub	sp, #152	@ 0x98
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e0:	2254      	movs	r2, #84	@ 0x54
 80009e2:	2100      	movs	r1, #0
 80009e4:	4618      	mov	r0, r3
 80009e6:	f007 fcc3 	bl	8008370 <memset>
  if(adcHandle->Instance==ADC1)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009f2:	d16c      	bne.n	8000ace <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009fa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009fe:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a00:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a04:	4618      	mov	r0, r3
 8000a06:	f004 fd03 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a10:	f000 fd4f 	bl	80014b2 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a14:	4ba0      	ldr	r3, [pc, #640]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a9f      	ldr	r2, [pc, #636]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a1c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d10b      	bne.n	8000a3e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a26:	4b9d      	ldr	r3, [pc, #628]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2a:	4a9c      	ldr	r2, [pc, #624]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a2c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a32:	4b9a      	ldr	r3, [pc, #616]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b97      	ldr	r3, [pc, #604]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a42:	4a96      	ldr	r2, [pc, #600]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a4a:	4b94      	ldr	r3, [pc, #592]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = IR1_AD_Pin;
 8000a56:	2301      	movs	r3, #1
 8000a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR1_AD_GPIO_Port, &GPIO_InitStruct);
 8000a68:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a72:	f003 fbe1 	bl	8004238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a76:	4b8a      	ldr	r3, [pc, #552]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a78:	4a8a      	ldr	r2, [pc, #552]	@ (8000ca4 <HAL_ADC_MspInit+0x2e0>)
 8000a7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a7c:	4b88      	ldr	r3, [pc, #544]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a7e:	2205      	movs	r2, #5
 8000a80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a82:	4b87      	ldr	r3, [pc, #540]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a88:	4b85      	ldr	r3, [pc, #532]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a8e:	4b84      	ldr	r3, [pc, #528]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a90:	2280      	movs	r2, #128	@ 0x80
 8000a92:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a94:	4b82      	ldr	r3, [pc, #520]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a9c:	4b80      	ldr	r3, [pc, #512]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aa2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aa4:	4b7e      	ldr	r3, [pc, #504]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000aaa:	4b7d      	ldr	r3, [pc, #500]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ab0:	487b      	ldr	r0, [pc, #492]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ab2:	f003 f9fd 	bl	8003eb0 <HAL_DMA_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000abc:	f000 fcf9 	bl	80014b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a77      	ldr	r2, [pc, #476]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ac4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ac6:	4a76      	ldr	r2, [pc, #472]	@ (8000ca0 <HAL_ADC_MspInit+0x2dc>)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }
}
 8000acc:	e1e0      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a75      	ldr	r2, [pc, #468]	@ (8000ca8 <HAL_ADC_MspInit+0x2e4>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d16c      	bne.n	8000bb2 <HAL_ADC_MspInit+0x1ee>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000ad8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000adc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000ade:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000ae2:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f004 fc91 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000af4:	f000 fcdd 	bl	80014b2 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000af8:	4b67      	ldr	r3, [pc, #412]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a66      	ldr	r2, [pc, #408]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000b00:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000b02:	4b65      	ldr	r3, [pc, #404]	@ (8000c98 <HAL_ADC_MspInit+0x2d4>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d10b      	bne.n	8000b22 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000b0a:	4b64      	ldr	r3, [pc, #400]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a63      	ldr	r2, [pc, #396]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b10:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b61      	ldr	r3, [pc, #388]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a5d      	ldr	r2, [pc, #372]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b5b      	ldr	r3, [pc, #364]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	623b      	str	r3, [r7, #32]
 8000b38:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = IR2_AD_Pin;
 8000b3a:	2340      	movs	r3, #64	@ 0x40
 8000b3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b40:	2303      	movs	r3, #3
 8000b42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR2_AD_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f003 fb6f 	bl	8004238 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000b5a:	4b54      	ldr	r3, [pc, #336]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b5c:	4a54      	ldr	r2, [pc, #336]	@ (8000cb0 <HAL_ADC_MspInit+0x2ec>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000b60:	4b52      	ldr	r3, [pc, #328]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b62:	2224      	movs	r2, #36	@ 0x24
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b66:	4b51      	ldr	r3, [pc, #324]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b4f      	ldr	r3, [pc, #316]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b4e      	ldr	r3, [pc, #312]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b74:	2280      	movs	r2, #128	@ 0x80
 8000b76:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b78:	4b4c      	ldr	r3, [pc, #304]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b80:	4b4a      	ldr	r3, [pc, #296]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b86:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000b88:	4b48      	ldr	r3, [pc, #288]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000b8e:	4b47      	ldr	r3, [pc, #284]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000b94:	4845      	ldr	r0, [pc, #276]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000b96:	f003 f98b 	bl	8003eb0 <HAL_DMA_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8000ba0:	f000 fc87 	bl	80014b2 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a41      	ldr	r2, [pc, #260]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000ba8:	655a      	str	r2, [r3, #84]	@ 0x54
 8000baa:	4a40      	ldr	r2, [pc, #256]	@ (8000cac <HAL_ADC_MspInit+0x2e8>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000bb0:	e16e      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC3)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb4 <HAL_ADC_MspInit+0x2f0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	f040 8085 	bne.w	8000cc8 <HAL_ADC_MspInit+0x304>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000bbe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc2:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000bc4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000bc8:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fc1e 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <HAL_ADC_MspInit+0x21a>
      Error_Handler();
 8000bda:	f000 fc6a 	bl	80014b2 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000bde:	4b36      	ldr	r3, [pc, #216]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	3301      	adds	r3, #1
 8000be4:	4a34      	ldr	r2, [pc, #208]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000be6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000be8:	4b33      	ldr	r3, [pc, #204]	@ (8000cb8 <HAL_ADC_MspInit+0x2f4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d10b      	bne.n	8000c08 <HAL_ADC_MspInit+0x244>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf4:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfc:	4b27      	ldr	r3, [pc, #156]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000bfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b24      	ldr	r3, [pc, #144]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c0c:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c14:	4b21      	ldr	r3, [pc, #132]	@ (8000c9c <HAL_ADC_MspInit+0x2d8>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c18:	f003 0302 	and.w	r3, r3, #2
 8000c1c:	61bb      	str	r3, [r7, #24]
 8000c1e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IR3_AD_Pin;
 8000c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR3_AD_GPIO_Port, &GPIO_InitStruct);
 8000c34:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4820      	ldr	r0, [pc, #128]	@ (8000cbc <HAL_ADC_MspInit+0x2f8>)
 8000c3c:	f003 fafc 	bl	8004238 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c42:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <HAL_ADC_MspInit+0x300>)
 8000c44:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000c46:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c48:	2225      	movs	r2, #37	@ 0x25
 8000c4a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c58:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c5a:	2280      	movs	r2, #128	@ 0x80
 8000c5c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c64:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c6c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c7c:	f003 f918 	bl	8003eb0 <HAL_DMA_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_ADC_MspInit+0x2c6>
      Error_Handler();
 8000c86:	f000 fc14 	bl	80014b2 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <HAL_ADC_MspInit+0x2fc>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000c96:	e0fb      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
 8000c98:	2000045c 	.word	0x2000045c
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	2000027c 	.word	0x2000027c
 8000ca4:	40020008 	.word	0x40020008
 8000ca8:	50000100 	.word	0x50000100
 8000cac:	200002dc 	.word	0x200002dc
 8000cb0:	4002001c 	.word	0x4002001c
 8000cb4:	50000400 	.word	0x50000400
 8000cb8:	20000460 	.word	0x20000460
 8000cbc:	48000400 	.word	0x48000400
 8000cc0:	2000033c 	.word	0x2000033c
 8000cc4:	40020030 	.word	0x40020030
  else if(adcHandle->Instance==ADC4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a72      	ldr	r2, [pc, #456]	@ (8000e98 <HAL_ADC_MspInit+0x4d4>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d16c      	bne.n	8000dac <HAL_ADC_MspInit+0x3e8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cd6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000cd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fb94 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_ADC_MspInit+0x32e>
      Error_Handler();
 8000cee:	f000 fbe0 	bl	80014b2 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a68      	ldr	r2, [pc, #416]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000cfc:	4b67      	ldr	r3, [pc, #412]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d10b      	bne.n	8000d1c <HAL_ADC_MspInit+0x358>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000d04:	4b66      	ldr	r3, [pc, #408]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d08:	4a65      	ldr	r2, [pc, #404]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d10:	4b63      	ldr	r3, [pc, #396]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4b60      	ldr	r3, [pc, #384]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d20:	4a5f      	ldr	r2, [pc, #380]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d22:	f043 0302 	orr.w	r3, r3, #2
 8000d26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d28:	4b5d      	ldr	r3, [pc, #372]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2c:	f003 0302 	and.w	r3, r3, #2
 8000d30:	613b      	str	r3, [r7, #16]
 8000d32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = IR4_AD_Pin;
 8000d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR4_AD_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4855      	ldr	r0, [pc, #340]	@ (8000ea4 <HAL_ADC_MspInit+0x4e0>)
 8000d50:	f003 fa72 	bl	8004238 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8000d54:	4b54      	ldr	r3, [pc, #336]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d56:	4a55      	ldr	r2, [pc, #340]	@ (8000eac <HAL_ADC_MspInit+0x4e8>)
 8000d58:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8000d5a:	4b53      	ldr	r3, [pc, #332]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d5c:	2226      	movs	r2, #38	@ 0x26
 8000d5e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d60:	4b51      	ldr	r3, [pc, #324]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d66:	4b50      	ldr	r3, [pc, #320]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8000d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d6e:	2280      	movs	r2, #128	@ 0x80
 8000d70:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d72:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d78:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d7c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d80:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8000d82:	4b49      	ldr	r3, [pc, #292]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d84:	2220      	movs	r2, #32
 8000d86:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8000d88:	4b47      	ldr	r3, [pc, #284]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8000d8e:	4846      	ldr	r0, [pc, #280]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000d90:	f003 f88e 	bl	8003eb0 <HAL_DMA_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x3da>
      Error_Handler();
 8000d9a:	f000 fb8a 	bl	80014b2 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc4);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a41      	ldr	r2, [pc, #260]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000da2:	655a      	str	r2, [r3, #84]	@ 0x54
 8000da4:	4a40      	ldr	r2, [pc, #256]	@ (8000ea8 <HAL_ADC_MspInit+0x4e4>)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000daa:	e071      	b.n	8000e90 <HAL_ADC_MspInit+0x4cc>
  else if(adcHandle->Instance==ADC5)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a3f      	ldr	r2, [pc, #252]	@ (8000eb0 <HAL_ADC_MspInit+0x4ec>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d16c      	bne.n	8000e90 <HAL_ADC_MspInit+0x4cc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000db6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000dbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8000dc0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fb22 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_ADC_MspInit+0x412>
      Error_Handler();
 8000dd2:	f000 fb6e 	bl	80014b2 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000dd6:	4b31      	ldr	r3, [pc, #196]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000dde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000de0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e9c <HAL_ADC_MspInit+0x4d8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d10b      	bne.n	8000e00 <HAL_ADC_MspInit+0x43c>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000de8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dec:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000dee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000df4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ea0 <HAL_ADC_MspInit+0x4dc>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e10:	f003 0301 	and.w	r3, r3, #1
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IR5_AD_Pin;
 8000e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(IR5_AD_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e36:	f003 f9ff 	bl	8004238 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel5;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb8 <HAL_ADC_MspInit+0x4f4>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e42:	2227      	movs	r2, #39	@ 0x27
 8000e44:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e46:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8000e52:	4b18      	ldr	r3, [pc, #96]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e58:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e5e:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e6a:	2220      	movs	r2, #32
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8000e74:	480f      	ldr	r0, [pc, #60]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e76:	f003 f81b 	bl	8003eb0 <HAL_DMA_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_ADC_MspInit+0x4c0>
      Error_Handler();
 8000e80:	f000 fb17 	bl	80014b2 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc5);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a0b      	ldr	r2, [pc, #44]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e88:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_ADC_MspInit+0x4f0>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8000e90:	bf00      	nop
 8000e92:	3798      	adds	r7, #152	@ 0x98
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	50000500 	.word	0x50000500
 8000e9c:	20000460 	.word	0x20000460
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	2000039c 	.word	0x2000039c
 8000eac:	40020044 	.word	0x40020044
 8000eb0:	50000600 	.word	0x50000600
 8000eb4:	200003fc 	.word	0x200003fc
 8000eb8:	40020058 	.word	0x40020058

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ece:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b09      	ldr	r3, [pc, #36]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ede:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <MX_DMA_Init+0x44>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40021000 	.word	0x40021000

08000f04 <inicializarEncoders>:
static float frequenciaRodaEsquerda = 0;
static float frequenciaRodaDireita = 0;
float velocidadeRodaEsquerda = 0;
float velocidadeRodaDireita = 0;

void inicializarEncoders(TIM_HandleTypeDef *timer16, TIM_HandleTypeDef *timer17) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    HAL_TIM_IC_Start_IT(timer16, TIM_CHANNEL_1);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f004 fef7 	bl	8005d04 <HAL_TIM_IC_Start_IT>
    HAL_TIM_IC_Start_IT(timer17, TIM_CHANNEL_1);
 8000f16:	2100      	movs	r1, #0
 8000f18:	6838      	ldr	r0, [r7, #0]
 8000f1a:	f004 fef3 	bl	8005d04 <HAL_TIM_IC_Start_IT>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <processarCaptura>:

void processarCaptura(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura == 0)
 8000f34:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <processarCaptura+0x94>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d108      	bne.n	8000f4e <processarCaptura+0x26>
    {
    	valorCaptura1 = htim->Instance->CCR1;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f42:	4a1f      	ldr	r2, [pc, #124]	@ (8000fc0 <processarCaptura+0x98>)
 8000f44:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura = 1;
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <processarCaptura+0x94>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura = 0;
    }
}
 8000f4c:	e02f      	b.n	8000fae <processarCaptura+0x86>
        valorCaptura2 = htim->Instance -> CCR1;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	4a1b      	ldr	r2, [pc, #108]	@ (8000fc4 <processarCaptura+0x9c>)
 8000f56:	6013      	str	r3, [r2, #0]
        diferencaTempo = (valorCaptura2 - valorCaptura1);
 8000f58:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc4 <processarCaptura+0x9c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <processarCaptura+0x98>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	4a19      	ldr	r2, [pc, #100]	@ (8000fc8 <processarCaptura+0xa0>)
 8000f64:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <processarCaptura+0xa4>)
 8000f68:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <processarCaptura+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f76:	edd7 6a05 	vldr	s13, [r7, #20]
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	ed93 7a00 	vldr	s14, [r3]
 8000f8a:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8000f8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f92:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000fd0 <processarCaptura+0xa8>
 8000f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura = 0;
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <processarCaptura+0x94>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
}
 8000fae:	bf00      	nop
 8000fb0:	371c      	adds	r7, #28
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000478 	.word	0x20000478
 8000fc0:	20000464 	.word	0x20000464
 8000fc4:	20000468 	.word	0x20000468
 8000fc8:	20000474 	.word	0x20000474
 8000fcc:	49742400 	.word	0x49742400
 8000fd0:	41a347ae 	.word	0x41a347ae

08000fd4 <processarCaptura2>:

void processarCaptura2(TIM_HandleTypeDef *htim, float *frequencia, float *velocidade) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
    if (flagPrimeiraCaptura2 == 0)
 8000fe0:	4b21      	ldr	r3, [pc, #132]	@ (8001068 <processarCaptura2+0x94>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d108      	bne.n	8000ffa <processarCaptura2+0x26>
    {
    	valorCaptura3 = htim->Instance->CCR1;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fee:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <processarCaptura2+0x98>)
 8000ff0:	6013      	str	r3, [r2, #0]
        flagPrimeiraCaptura2 = 1;
 8000ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <processarCaptura2+0x94>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;

        __HAL_TIM_SET_COUNTER(htim, 0);
        flagPrimeiraCaptura2 = 0;
    }
}
 8000ff8:	e02f      	b.n	800105a <processarCaptura2+0x86>
        valorCaptura4 = htim->Instance -> CCR1;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001000:	4a1b      	ldr	r2, [pc, #108]	@ (8001070 <processarCaptura2+0x9c>)
 8001002:	6013      	str	r3, [r2, #0]
        diferencaTempo2 = (valorCaptura4 - valorCaptura3);
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <processarCaptura2+0x9c>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <processarCaptura2+0x98>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	4a19      	ldr	r2, [pc, #100]	@ (8001074 <processarCaptura2+0xa0>)
 8001010:	6013      	str	r3, [r2, #0]
        float clockReferencia = FREQUENCIA_CLOCK / PRESCALAR_TIMER;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <processarCaptura2+0xa4>)
 8001014:	617b      	str	r3, [r7, #20]
        *frequencia = clockReferencia / diferencaTempo2;
 8001016:	4b17      	ldr	r3, [pc, #92]	@ (8001074 <processarCaptura2+0xa0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001022:	edd7 6a05 	vldr	s13, [r7, #20]
 8001026:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	edc3 7a00 	vstr	s15, [r3]
        *velocidade = (*frequencia / 20) * FATOR_MULTIPLICACAO_VELOCIDADE;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 800103a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800103e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800107c <processarCaptura2+0xa8>
 8001042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	edc3 7a00 	vstr	s15, [r3]
        __HAL_TIM_SET_COUNTER(htim, 0);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	625a      	str	r2, [r3, #36]	@ 0x24
        flagPrimeiraCaptura2 = 0;
 8001054:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <processarCaptura2+0x94>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000480 	.word	0x20000480
 800106c:	2000046c 	.word	0x2000046c
 8001070:	20000470 	.word	0x20000470
 8001074:	2000047c 	.word	0x2000047c
 8001078:	49742400 	.word	0x49742400
 800107c:	41a347ae 	.word	0x41a347ae

08001080 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    if (htim == &htim16) {
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a0b      	ldr	r2, [pc, #44]	@ (80010b8 <HAL_TIM_IC_CaptureCallback+0x38>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d105      	bne.n	800109c <HAL_TIM_IC_CaptureCallback+0x1c>
        processarCaptura(htim, &frequenciaRodaEsquerda, &velocidadeRodaEsquerda);
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001092:	490b      	ldr	r1, [pc, #44]	@ (80010c0 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff47 	bl	8000f28 <processarCaptura>
    } else if (htim == &htim17) {
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);

    }
}
 800109a:	e008      	b.n	80010ae <HAL_TIM_IC_CaptureCallback+0x2e>
    } else if (htim == &htim17) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a09      	ldr	r2, [pc, #36]	@ (80010c4 <HAL_TIM_IC_CaptureCallback+0x44>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d104      	bne.n	80010ae <HAL_TIM_IC_CaptureCallback+0x2e>
        processarCaptura2(htim, &frequenciaRodaDireita, &velocidadeRodaDireita);
 80010a4:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <HAL_TIM_IC_CaptureCallback+0x48>)
 80010a6:	4909      	ldr	r1, [pc, #36]	@ (80010cc <HAL_TIM_IC_CaptureCallback+0x4c>)
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff93 	bl	8000fd4 <processarCaptura2>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000620 	.word	0x20000620
 80010bc:	2000048c 	.word	0x2000048c
 80010c0:	20000484 	.word	0x20000484
 80010c4:	2000066c 	.word	0x2000066c
 80010c8:	20000490 	.word	0x20000490
 80010cc:	20000488 	.word	0x20000488

080010d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b3b      	ldr	r3, [pc, #236]	@ (80011d4 <MX_GPIO_Init+0x104>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <MX_GPIO_Init+0x104>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <MX_GPIO_Init+0x104>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	4a34      	ldr	r2, [pc, #208]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110a:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <MX_GPIO_Init+0x104>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	f003 0320 	and.w	r3, r3, #32
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	4a2e      	ldr	r2, [pc, #184]	@ (80011d4 <MX_GPIO_Init+0x104>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001122:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	4b29      	ldr	r3, [pc, #164]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a28      	ldr	r2, [pc, #160]	@ (80011d4 <MX_GPIO_Init+0x104>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b26      	ldr	r3, [pc, #152]	@ (80011d4 <MX_GPIO_Init+0x104>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 519c 	mov.w	r1, #4992	@ 0x1380
 800114c:	4822      	ldr	r0, [pc, #136]	@ (80011d8 <MX_GPIO_Init+0x108>)
 800114e:	f003 f9f5 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8001158:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115c:	f003 f9ee 	bl	800453c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001160:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800116a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4819      	ldr	r0, [pc, #100]	@ (80011dc <MX_GPIO_Init+0x10c>)
 8001178:	f003 f85e 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Motor_Dir_IN1_Pin|Motor_Esq_IN3_Pin|LED_B_PWM_Pin|Motot_Dir_IN2_Pin;
 800117c:	f44f 539c 	mov.w	r3, #4992	@ 0x1380
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4810      	ldr	r0, [pc, #64]	@ (80011d8 <MX_GPIO_Init+0x108>)
 8001196:	f003 f84f 	bl	8004238 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = Motor_Esq_IN4_Pin|LED_R_PWM_Pin|LED_G_PWM_Pin;
 800119a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b6:	f003 f83f 	bl	8004238 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2028      	movs	r0, #40	@ 0x28
 80011c0:	f002 fe41 	bl	8003e46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011c4:	2028      	movs	r0, #40	@ 0x28
 80011c6:	f002 fe58 	bl	8003e7a <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	@ 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	48000400 	.word	0x48000400
 80011dc:	48000800 	.word	0x48000800

080011e0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <MX_I2C2_Init+0x74>)
 80011e6:	4a1c      	ldr	r2, [pc, #112]	@ (8001258 <MX_I2C2_Init+0x78>)
 80011e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_I2C2_Init+0x74>)
 80011ec:	4a1b      	ldr	r2, [pc, #108]	@ (800125c <MX_I2C2_Init+0x7c>)
 80011ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <MX_I2C2_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f6:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <MX_I2C2_Init+0x74>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <MX_I2C2_Init+0x74>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001202:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <MX_I2C2_Init+0x74>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001208:	4b12      	ldr	r3, [pc, #72]	@ (8001254 <MX_I2C2_Init+0x74>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <MX_I2C2_Init+0x74>)
 8001210:	2200      	movs	r2, #0
 8001212:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_I2C2_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800121a:	480e      	ldr	r0, [pc, #56]	@ (8001254 <MX_I2C2_Init+0x74>)
 800121c:	f003 f9c9 	bl	80045b2 <HAL_I2C_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001226:	f000 f944 	bl	80014b2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800122a:	2100      	movs	r1, #0
 800122c:	4809      	ldr	r0, [pc, #36]	@ (8001254 <MX_I2C2_Init+0x74>)
 800122e:	f003 fa75 	bl	800471c <HAL_I2CEx_ConfigAnalogFilter>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001238:	f000 f93b 	bl	80014b2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	4805      	ldr	r0, [pc, #20]	@ (8001254 <MX_I2C2_Init+0x74>)
 8001240:	f003 fab7 	bl	80047b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800124a:	f000 f932 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000494 	.word	0x20000494
 8001258:	40005800 	.word	0x40005800
 800125c:	30a0a7fb 	.word	0x30a0a7fb

08001260 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b0a0      	sub	sp, #128	@ 0x80
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001278:	f107 0318 	add.w	r3, r7, #24
 800127c:	2254      	movs	r2, #84	@ 0x54
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f007 f875 	bl	8008370 <memset>
  if(i2cHandle->Instance==I2C2)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a31      	ldr	r2, [pc, #196]	@ (8001350 <HAL_I2C_MspInit+0xf0>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d15b      	bne.n	8001348 <HAL_I2C_MspInit+0xe8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001294:	2300      	movs	r3, #0
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	4618      	mov	r0, r3
 800129e:	f004 f8b7 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012a8:	f000 f903 	bl	80014b2 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b0:	4a28      	ldr	r2, [pc, #160]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b8:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012d0:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 80012d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_I2C_SCL_Pin;
 80012dc:	2310      	movs	r3, #16
 80012de:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e0:	2312      	movs	r3, #18
 80012e2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012ec:	2304      	movs	r3, #4
 80012ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SCL_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80012f4:	4619      	mov	r1, r3
 80012f6:	4818      	ldr	r0, [pc, #96]	@ (8001358 <HAL_I2C_MspInit+0xf8>)
 80012f8:	f002 ff9e 	bl	8004238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_I2C_SDA_Pin;
 80012fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001300:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800130e:	2304      	movs	r3, #4
 8001310:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(LCD_I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8001312:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001316:	4619      	mov	r1, r3
 8001318:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800131c:	f002 ff8c 	bl	8004238 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001320:	4b0c      	ldr	r3, [pc, #48]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 8001326:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800132a:	6593      	str	r3, [r2, #88]	@ 0x58
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_I2C_MspInit+0xf4>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	2021      	movs	r0, #33	@ 0x21
 800133e:	f002 fd82 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001342:	2021      	movs	r0, #33	@ 0x21
 8001344:	f002 fd99 	bl	8003e7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001348:	bf00      	nop
 800134a:	3780      	adds	r7, #128	@ 0x80
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40005800 	.word	0x40005800
 8001354:	40021000 	.word	0x40021000
 8001358:	48000800 	.word	0x48000800

0800135c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001360:	f000 ff8b 	bl	800227a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001364:	f000 f85a 	bl	800141c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001368:	f7ff feb2 	bl	80010d0 <MX_GPIO_Init>
  MX_DMA_Init();
 800136c:	f7ff fda6 	bl	8000ebc <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001370:	f000 feb8 	bl	80020e4 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001374:	f000 fbea 	bl	8001b4c <MX_TIM1_Init>
  MX_I2C2_Init();
 8001378:	f7ff ff32 	bl	80011e0 <MX_I2C2_Init>
  MX_ADC3_Init();
 800137c:	f7ff f9ba 	bl	80006f4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8001380:	f7ff f8c2 	bl	8000508 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001384:	f7ff f944 	bl	8000610 <MX_ADC2_Init>
  MX_ADC4_Init();
 8001388:	f7ff fa38 	bl	80007fc <MX_ADC4_Init>
  MX_ADC5_Init();
 800138c:	f7ff faa8 	bl	80008e0 <MX_ADC5_Init>
  MX_TIM16_Init();
 8001390:	f000 fd04 	bl	8001d9c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001394:	f000 fd4c 	bl	8001e30 <MX_TIM17_Init>
  MX_TIM6_Init();
 8001398:	f000 fc94 	bl	8001cc4 <MX_TIM6_Init>
  MX_TIM7_Init();
 800139c:	f000 fcc8 	bl	8001d30 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  vMotorInit(&htim1);
 80013a0:	4814      	ldr	r0, [pc, #80]	@ (80013f4 <main+0x98>)
 80013a2:	f000 f88d 	bl	80014c0 <vMotorInit>
  inicializarEncoders(&htim16, &htim17);
 80013a6:	4914      	ldr	r1, [pc, #80]	@ (80013f8 <main+0x9c>)
 80013a8:	4814      	ldr	r0, [pc, #80]	@ (80013fc <main+0xa0>)
 80013aa:	f7ff fdab 	bl	8000f04 <inicializarEncoders>
  vLineSensor1Init(&hadc1);
 80013ae:	4814      	ldr	r0, [pc, #80]	@ (8001400 <main+0xa4>)
 80013b0:	f000 f8e8 	bl	8001584 <vLineSensor1Init>
  vLineSensor2Init(&hadc2);
 80013b4:	4813      	ldr	r0, [pc, #76]	@ (8001404 <main+0xa8>)
 80013b6:	f000 f901 	bl	80015bc <vLineSensor2Init>
  vLineSensor3Init(&hadc3);
 80013ba:	4813      	ldr	r0, [pc, #76]	@ (8001408 <main+0xac>)
 80013bc:	f000 f91a 	bl	80015f4 <vLineSensor3Init>
  vLineSensor4Init(&hadc4);
 80013c0:	4812      	ldr	r0, [pc, #72]	@ (800140c <main+0xb0>)
 80013c2:	f000 f933 	bl	800162c <vLineSensor4Init>
  vLineSensor5Init(&hadc5);
 80013c6:	4812      	ldr	r0, [pc, #72]	@ (8001410 <main+0xb4>)
 80013c8:	f000 f94c 	bl	8001664 <vLineSensor5Init>

    while (1)
    {
        // Controla o PID para ajustar os motores
        //vLineSensorPIDControl(velocidadeRodaEsquerda, velocidadeRodaDireita);
    	vSetRodasDC(dutyCycleD,dutyCycleE);
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <main+0xb8>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <main+0xbc>)
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	eef0 0a47 	vmov.f32	s1, s14
 80013dc:	eeb0 0a67 	vmov.f32	s0, s15
 80013e0:	f000 f8a2 	bl	8001528 <vSetRodasDC>
    	vLineSensorPIDControl();
 80013e4:	f000 f9fa 	bl	80017dc <vLineSensorPIDControl>
        // Adiciona um pequeno atraso se necessário
        HAL_Delay(10);
 80013e8:	200a      	movs	r0, #10
 80013ea:	f000 ffb7 	bl	800235c <HAL_Delay>
    	vSetRodasDC(dutyCycleD,dutyCycleE);
 80013ee:	bf00      	nop
 80013f0:	e7ec      	b.n	80013cc <main+0x70>
 80013f2:	bf00      	nop
 80013f4:	2000053c 	.word	0x2000053c
 80013f8:	2000066c 	.word	0x2000066c
 80013fc:	20000620 	.word	0x20000620
 8001400:	20000060 	.word	0x20000060
 8001404:	200000cc 	.word	0x200000cc
 8001408:	20000138 	.word	0x20000138
 800140c:	200001a4 	.word	0x200001a4
 8001410:	20000210 	.word	0x20000210
 8001414:	200004ec 	.word	0x200004ec
 8001418:	200004e8 	.word	0x200004e8

0800141c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b094      	sub	sp, #80	@ 0x50
 8001420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001422:	f107 0318 	add.w	r3, r7, #24
 8001426:	2238      	movs	r2, #56	@ 0x38
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f006 ffa0 	bl	8008370 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800143e:	2000      	movs	r0, #0
 8001440:	f003 fa04 	bl	800484c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001456:	2302      	movs	r3, #2
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800145a:	2304      	movs	r3, #4
 800145c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800145e:	2355      	movs	r3, #85	@ 0x55
 8001460:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001462:	2302      	movs	r3, #2
 8001464:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001466:	2302      	movs	r3, #2
 8001468:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146e:	f107 0318 	add.w	r3, r7, #24
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa9e 	bl	80049b4 <HAL_RCC_OscConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800147e:	f000 f818 	bl	80014b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2303      	movs	r3, #3
 8001488:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2104      	movs	r1, #4
 800149a:	4618      	mov	r0, r3
 800149c:	f003 fd9c 	bl	8004fd8 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014a6:	f000 f804 	bl	80014b2 <Error_Handler>
  }
}
 80014aa:	bf00      	nop
 80014ac:	3750      	adds	r7, #80	@ 0x50
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b6:	b672      	cpsid	i
}
 80014b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ba:	bf00      	nop
 80014bc:	e7fd      	b.n	80014ba <Error_Handler+0x8>
	...

080014c0 <vMotorInit>:
// Method description: Inicializa o timer do PWM pros motores //
// Input params:       htimRodaMotores                 		  //
// Output params:      n/a                          		  //
// ********************************************************** //

void vMotorInit(TIM_HandleTypeDef *htim){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	htimRodaMotores = htim;
 80014c8:	4a15      	ldr	r2, [pc, #84]	@ (8001520 <vMotorInit+0x60>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_1);
 80014ce:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <vMotorInit+0x60>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 faa1 	bl	8005a1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htimRodaMotores, TIM_CHANNEL_2);
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <vMotorInit+0x60>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2104      	movs	r1, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fa9b 	bl	8005a1c <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(Motor_Dir_IN1_GPIO_Port, Motor_Dir_IN1_Pin, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014ec:	480d      	ldr	r0, [pc, #52]	@ (8001524 <vMotorInit+0x64>)
 80014ee:	f003 f825 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motot_Dir_IN2_GPIO_Port, Motot_Dir_IN2_Pin, 1);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014f8:	480a      	ldr	r0, [pc, #40]	@ (8001524 <vMotorInit+0x64>)
 80014fa:	f003 f81f 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN3_GPIO_Port, Motor_Esq_IN3_Pin, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2180      	movs	r1, #128	@ 0x80
 8001502:	4808      	ldr	r0, [pc, #32]	@ (8001524 <vMotorInit+0x64>)
 8001504:	f003 f81a 	bl	800453c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Motor_Esq_IN4_GPIO_Port, Motor_Esq_IN4_Pin, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800150e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001512:	f003 f813 	bl	800453c <HAL_GPIO_WritePin>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200004f0 	.word	0x200004f0
 8001524:	48000400 	.word	0x48000400

08001528 <vSetRodasDC>:

void vSetRodasDC(float fRodaEsquerdaDC, float fRodaDireitaDC)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001532:	edc7 0a00 	vstr	s1, [r7]
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_1, fRodaEsquerdaDC * 1000);
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800157c <vSetRodasDC+0x54>
 800153e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <vSetRodasDC+0x58>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800154c:	ee17 2a90 	vmov	r2, s15
 8001550:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(htimRodaMotores, TIM_CHANNEL_2, fRodaDireitaDC * 1000);
 8001552:	edd7 7a00 	vldr	s15, [r7]
 8001556:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800157c <vSetRodasDC+0x54>
 800155a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155e:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <vSetRodasDC+0x58>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001568:	ee17 2a90 	vmov	r2, s15
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	447a0000 	.word	0x447a0000
 8001580:	200004f0 	.word	0x200004f0

08001584 <vLineSensor1Init>:
//     calibração e start ADC                            //
// Input params: ADC_HandleTypeDef *hadc                 //
// Output params: Void                                   //
//*******************//
// Função para inicializar o sensor 1
void vLineSensor1Init(ADC_HandleTypeDef *hadc1) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
    sensor1ADC = hadc1;
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <vLineSensor1Init+0x30>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor1ADC, ADC_SINGLE_ENDED);
 8001592:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <vLineSensor1Init+0x30>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	217f      	movs	r1, #127	@ 0x7f
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fa0f 	bl	80039bc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor1ADC, (uint32_t *)&lineSensor1Value, 1);
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <vLineSensor1Init+0x30>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4904      	ldr	r1, [pc, #16]	@ (80015b8 <vLineSensor1Init+0x34>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 fafa 	bl	8002ba0 <HAL_ADC_Start_DMA>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200004f4 	.word	0x200004f4
 80015b8:	20000508 	.word	0x20000508

080015bc <vLineSensor2Init>:

// Função para inicializar o sensor 2
void vLineSensor2Init(ADC_HandleTypeDef *hadc2) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
    sensor2ADC = hadc2;
 80015c4:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <vLineSensor2Init+0x30>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor2ADC, ADC_SINGLE_ENDED);
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <vLineSensor2Init+0x30>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	217f      	movs	r1, #127	@ 0x7f
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 f9f3 	bl	80039bc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor2ADC, (uint32_t *)&lineSensor2Value, 1);
 80015d6:	4b05      	ldr	r3, [pc, #20]	@ (80015ec <vLineSensor2Init+0x30>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2201      	movs	r2, #1
 80015dc:	4904      	ldr	r1, [pc, #16]	@ (80015f0 <vLineSensor2Init+0x34>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f001 fade 	bl	8002ba0 <HAL_ADC_Start_DMA>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	200004f8 	.word	0x200004f8
 80015f0:	2000050c 	.word	0x2000050c

080015f4 <vLineSensor3Init>:

// Função para inicializar o sensor 3
void vLineSensor3Init(ADC_HandleTypeDef *hadc3) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
    sensor3ADC = hadc3;
 80015fc:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <vLineSensor3Init+0x30>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor3ADC, ADC_SINGLE_ENDED);
 8001602:	4b08      	ldr	r3, [pc, #32]	@ (8001624 <vLineSensor3Init+0x30>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	217f      	movs	r1, #127	@ 0x7f
 8001608:	4618      	mov	r0, r3
 800160a:	f002 f9d7 	bl	80039bc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor3ADC, (uint32_t *)&lineSensor3Value, 1);
 800160e:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <vLineSensor3Init+0x30>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	4904      	ldr	r1, [pc, #16]	@ (8001628 <vLineSensor3Init+0x34>)
 8001616:	4618      	mov	r0, r3
 8001618:	f001 fac2 	bl	8002ba0 <HAL_ADC_Start_DMA>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200004fc 	.word	0x200004fc
 8001628:	20000510 	.word	0x20000510

0800162c <vLineSensor4Init>:

// Função para inicializar o sensor 4
void vLineSensor4Init(ADC_HandleTypeDef *hadc4) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
    sensor4ADC = hadc4;
 8001634:	4a09      	ldr	r2, [pc, #36]	@ (800165c <vLineSensor4Init+0x30>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor4ADC, ADC_SINGLE_ENDED);
 800163a:	4b08      	ldr	r3, [pc, #32]	@ (800165c <vLineSensor4Init+0x30>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	217f      	movs	r1, #127	@ 0x7f
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f9bb 	bl	80039bc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor4ADC, (uint32_t *)&lineSensor4Value, 1);
 8001646:	4b05      	ldr	r3, [pc, #20]	@ (800165c <vLineSensor4Init+0x30>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2201      	movs	r2, #1
 800164c:	4904      	ldr	r1, [pc, #16]	@ (8001660 <vLineSensor4Init+0x34>)
 800164e:	4618      	mov	r0, r3
 8001650:	f001 faa6 	bl	8002ba0 <HAL_ADC_Start_DMA>
}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000500 	.word	0x20000500
 8001660:	20000514 	.word	0x20000514

08001664 <vLineSensor5Init>:

// Função para inicializar o sensor 5
void vLineSensor5Init(ADC_HandleTypeDef *hadc5) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
    sensor5ADC = hadc5;
 800166c:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <vLineSensor5Init+0x30>)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6013      	str	r3, [r2, #0]
    HAL_ADCEx_Calibration_Start(sensor5ADC, ADC_SINGLE_ENDED);
 8001672:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <vLineSensor5Init+0x30>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	217f      	movs	r1, #127	@ 0x7f
 8001678:	4618      	mov	r0, r3
 800167a:	f002 f99f 	bl	80039bc <HAL_ADCEx_Calibration_Start>
    HAL_ADC_Start_DMA(sensor5ADC, (uint32_t *)&lineSensor5Value, 1);
 800167e:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <vLineSensor5Init+0x30>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2201      	movs	r2, #1
 8001684:	4904      	ldr	r1, [pc, #16]	@ (8001698 <vLineSensor5Init+0x34>)
 8001686:	4618      	mov	r0, r3
 8001688:	f001 fa8a 	bl	8002ba0 <HAL_ADC_Start_DMA>
}
 800168c:	bf00      	nop
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000504 	.word	0x20000504
 8001698:	20000518 	.word	0x20000518

0800169c <fLineSensorCalculatePosition>:
    HAL_Delay(100);  // Atraso para estabilização

}

// Função para calcular a posição do carrinho com base nos sensores
float fLineSensorCalculatePosition(void) {
 800169c:	b4b0      	push	{r4, r5, r7}
 800169e:	b091      	sub	sp, #68	@ 0x44
 80016a0:	af00      	add	r7, sp, #0
    // Pesos para cada sensor (da esquerda para a direita)
    int pesos[5] = {-2, -1, 0, 1, 2};
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <fLineSensorCalculatePosition+0x11c>)
 80016a4:	f107 0418 	add.w	r4, r7, #24
 80016a8:	461d      	mov	r5, r3
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	682b      	ldr	r3, [r5, #0]
 80016b0:	6023      	str	r3, [r4, #0]
    float totalWeightedPosition = 0.0f;
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float totalWeight = 0.0f;
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Array com os valores dos sensores
    uint32_t sensorValues[5] = {
 80016be:	4b3f      	ldr	r3, [pc, #252]	@ (80017bc <fLineSensorCalculatePosition+0x120>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <fLineSensorCalculatePosition+0x124>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <fLineSensorCalculatePosition+0x128>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <fLineSensorCalculatePosition+0x12c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b3d      	ldr	r3, [pc, #244]	@ (80017cc <fLineSensorCalculatePosition+0x130>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	617b      	str	r3, [r7, #20]
        lineSensor3Value,
        lineSensor4Value,
        lineSensor5Value
    };

    for (int i = 0; i < 5; i++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
 80016e0:	e04c      	b.n	800177c <fLineSensorCalculatePosition+0xe0>
        // Verifica se o sensor está detectando a linha branca com base em intervalos individuais
        if (sensorValues[i] >= minThresholds[i] && sensorValues[i] <= maxThresholds[i]) {
 80016e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	3340      	adds	r3, #64	@ 0x40
 80016e8:	443b      	add	r3, r7
 80016ea:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80016ee:	4938      	ldr	r1, [pc, #224]	@ (80017d0 <fLineSensorCalculatePosition+0x134>)
 80016f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d33d      	bcc.n	8001776 <fLineSensorCalculatePosition+0xda>
 80016fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	3340      	adds	r3, #64	@ 0x40
 8001700:	443b      	add	r3, r7
 8001702:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001706:	4933      	ldr	r1, [pc, #204]	@ (80017d4 <fLineSensorCalculatePosition+0x138>)
 8001708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800170a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800170e:	4293      	cmp	r3, r2
 8001710:	d831      	bhi.n	8001776 <fLineSensorCalculatePosition+0xda>
            // Calcular o peso inverso para priorizar o sensor com menor valor
            float weight = 1.0f / (sensorValues[i] - minThresholds[i] + 1); // Adiciona 1 para evitar divisão por zero
 8001712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	3340      	adds	r3, #64	@ 0x40
 8001718:	443b      	add	r3, r7
 800171a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800171e:	492c      	ldr	r1, [pc, #176]	@ (80017d0 <fLineSensorCalculatePosition+0x134>)
 8001720:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001722:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	3301      	adds	r3, #1
 800172a:	ee07 3a90 	vmov	s15, r3
 800172e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800173a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
            totalWeightedPosition += pesos[i] * weight;
 800173e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	3340      	adds	r3, #64	@ 0x40
 8001744:	443b      	add	r3, r7
 8001746:	f853 3c28 	ldr.w	r3, [r3, #-40]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001752:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
            totalWeight += weight;
 8001766:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800176a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800176e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001772:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    for (int i = 0; i < 5; i++) {
 8001776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001778:	3301      	adds	r3, #1
 800177a:	637b      	str	r3, [r7, #52]	@ 0x34
 800177c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800177e:	2b04      	cmp	r3, #4
 8001780:	ddaf      	ble.n	80016e2 <fLineSensorCalculatePosition+0x46>
        }
    }

    // Verifica se algum sensor detectou a linha
    if (totalWeight == 0) {
 8001782:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001786:	eef5 7a40 	vcmp.f32	s15, #0.0
 800178a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178e:	d101      	bne.n	8001794 <fLineSensorCalculatePosition+0xf8>
        // Nenhum sensor detectou a linha
        return 99;
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <fLineSensorCalculatePosition+0x13c>)
 8001792:	e008      	b.n	80017a6 <fLineSensorCalculatePosition+0x10a>
    }

    // Calcula a posição ponderada
    float posicao = totalWeightedPosition / totalWeight;
 8001794:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001798:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800179c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017a0:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    return posicao;
 80017a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	3744      	adds	r7, #68	@ 0x44
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bcb0      	pop	{r4, r5, r7}
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	080083e0 	.word	0x080083e0
 80017bc:	20000508 	.word	0x20000508
 80017c0:	2000050c 	.word	0x2000050c
 80017c4:	20000510 	.word	0x20000510
 80017c8:	20000514 	.word	0x20000514
 80017cc:	20000518 	.word	0x20000518
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000014 	.word	0x20000014
 80017d8:	42c60000 	.word	0x42c60000

080017dc <vLineSensorPIDControl>:

void vLineSensorPIDControl(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
    // Obtém o tempo atual
    uint32_t current_time = HAL_GetTick();
 80017e2:	f000 fdaf 	bl	8002344 <HAL_GetTick>
 80017e6:	6078      	str	r0, [r7, #4]
    delta_time = (current_time - previous_time) / 1000.0f; // Converte ms para segundos
 80017e8:	4b79      	ldr	r3, [pc, #484]	@ (80019d0 <vLineSensorPIDControl+0x1f4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017f8:	eddf 6a76 	vldr	s13, [pc, #472]	@ 80019d4 <vLineSensorPIDControl+0x1f8>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b75      	ldr	r3, [pc, #468]	@ (80019d8 <vLineSensorPIDControl+0x1fc>)
 8001802:	edc3 7a00 	vstr	s15, [r3]

    if (delta_time <= 0) {
 8001806:	4b74      	ldr	r3, [pc, #464]	@ (80019d8 <vLineSensorPIDControl+0x1fc>)
 8001808:	edd3 7a00 	vldr	s15, [r3]
 800180c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	d802      	bhi.n	800181c <vLineSensorPIDControl+0x40>
        delta_time = 0.01f; // Evita divisão por zero
 8001816:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <vLineSensorPIDControl+0x1fc>)
 8001818:	4a70      	ldr	r2, [pc, #448]	@ (80019dc <vLineSensorPIDControl+0x200>)
 800181a:	601a      	str	r2, [r3, #0]
    }

    // Calcula a posição atual a partir dos sensores
    float position = fLineSensorCalculatePosition();
 800181c:	f7ff ff3e 	bl	800169c <fLineSensorCalculatePosition>
 8001820:	ed87 0a00 	vstr	s0, [r7]

    // Verifica se a linha foi detectada
    if (position == 99) {
 8001824:	edd7 7a00 	vldr	s15, [r7]
 8001828:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80019e0 <vLineSensorPIDControl+0x204>
 800182c:	eef4 7a47 	vcmp.f32	s15, s14
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	f000 80c7 	beq.w	80019c6 <vLineSensorPIDControl+0x1ea>
    	   // vSetRodaEsquerdaDC(0.5);
        return;
    }

    // Calcula o erro (posição desejada é 0)
    error = 0-position; // Inverte o sinal para correção na direção oposta
 8001838:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 80019e4 <vLineSensorPIDControl+0x208>
 800183c:	edd7 7a00 	vldr	s15, [r7]
 8001840:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001844:	4b68      	ldr	r3, [pc, #416]	@ (80019e8 <vLineSensorPIDControl+0x20c>)
 8001846:	edc3 7a00 	vstr	s15, [r3]

    // Calcula os termos integral e derivativo
    integral_error += error * delta_time;
 800184a:	4b67      	ldr	r3, [pc, #412]	@ (80019e8 <vLineSensorPIDControl+0x20c>)
 800184c:	ed93 7a00 	vldr	s14, [r3]
 8001850:	4b61      	ldr	r3, [pc, #388]	@ (80019d8 <vLineSensorPIDControl+0x1fc>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800185a:	4b64      	ldr	r3, [pc, #400]	@ (80019ec <vLineSensorPIDControl+0x210>)
 800185c:	edd3 7a00 	vldr	s15, [r3]
 8001860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001864:	4b61      	ldr	r3, [pc, #388]	@ (80019ec <vLineSensorPIDControl+0x210>)
 8001866:	edc3 7a00 	vstr	s15, [r3]
    derivative_error = (error - previous_error) / delta_time;
 800186a:	4b5f      	ldr	r3, [pc, #380]	@ (80019e8 <vLineSensorPIDControl+0x20c>)
 800186c:	ed93 7a00 	vldr	s14, [r3]
 8001870:	4b5f      	ldr	r3, [pc, #380]	@ (80019f0 <vLineSensorPIDControl+0x214>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	ee77 6a67 	vsub.f32	s13, s14, s15
 800187a:	4b57      	ldr	r3, [pc, #348]	@ (80019d8 <vLineSensorPIDControl+0x1fc>)
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001884:	4b5b      	ldr	r3, [pc, #364]	@ (80019f4 <vLineSensorPIDControl+0x218>)
 8001886:	edc3 7a00 	vstr	s15, [r3]

    // Calcula a saída do controlador PID
    control_output = -(Kp * error + Ki * integral_error + Kd * derivative_error);
 800188a:	4b5b      	ldr	r3, [pc, #364]	@ (80019f8 <vLineSensorPIDControl+0x21c>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	4b55      	ldr	r3, [pc, #340]	@ (80019e8 <vLineSensorPIDControl+0x20c>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800189a:	4b58      	ldr	r3, [pc, #352]	@ (80019fc <vLineSensorPIDControl+0x220>)
 800189c:	edd3 6a00 	vldr	s13, [r3]
 80018a0:	4b52      	ldr	r3, [pc, #328]	@ (80019ec <vLineSensorPIDControl+0x210>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ae:	4b54      	ldr	r3, [pc, #336]	@ (8001a00 <vLineSensorPIDControl+0x224>)
 80018b0:	edd3 6a00 	vldr	s13, [r3]
 80018b4:	4b4f      	ldr	r3, [pc, #316]	@ (80019f4 <vLineSensorPIDControl+0x218>)
 80018b6:	edd3 7a00 	vldr	s15, [r3]
 80018ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c2:	eef1 7a67 	vneg.f32	s15, s15
 80018c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
    fsaidaControladorLinha=control_output;
 80018cc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a4d      	ldr	r2, [pc, #308]	@ (8001a08 <vLineSensorPIDControl+0x22c>)
 80018d2:	6013      	str	r3, [r2, #0]
    // Limita a saída do controlador para evitar saturação
    if (control_output > base_speed) control_output = base_speed;
 80018d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 80018d6:	ed93 7a00 	vldr	s14, [r3]
 80018da:	4b4c      	ldr	r3, [pc, #304]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 80018dc:	edd3 7a00 	vldr	s15, [r3]
 80018e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e8:	dd03      	ble.n	80018f2 <vLineSensorPIDControl+0x116>
 80018ea:	4b48      	ldr	r3, [pc, #288]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a45      	ldr	r2, [pc, #276]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 80018f0:	6013      	str	r3, [r2, #0]
    if (control_output < -base_speed) control_output = -base_speed;
 80018f2:	4b46      	ldr	r3, [pc, #280]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	eeb1 7a67 	vneg.f32	s14, s15
 80018fc:	4b41      	ldr	r3, [pc, #260]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	dd07      	ble.n	800191c <vLineSensorPIDControl+0x140>
 800190c:	4b3f      	ldr	r3, [pc, #252]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 800190e:	edd3 7a00 	vldr	s15, [r3]
 8001912:	eef1 7a67 	vneg.f32	s15, s15
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 8001918:	edc3 7a00 	vstr	s15, [r3]

    // Atualiza o erro e tempo anteriores
    previous_error = error;
 800191c:	4b32      	ldr	r3, [pc, #200]	@ (80019e8 <vLineSensorPIDControl+0x20c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a33      	ldr	r2, [pc, #204]	@ (80019f0 <vLineSensorPIDControl+0x214>)
 8001922:	6013      	str	r3, [r2, #0]
    previous_time = current_time;
 8001924:	4a2a      	ldr	r2, [pc, #168]	@ (80019d0 <vLineSensorPIDControl+0x1f4>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]

    // Calcula as velocidades dos motores
    float left_speed = base_speed + control_output;
 800192a:	4b38      	ldr	r3, [pc, #224]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800193a:	edc7 7a03 	vstr	s15, [r7, #12]
    float right_speed = base_speed - control_output;
 800193e:	4b33      	ldr	r3, [pc, #204]	@ (8001a0c <vLineSensorPIDControl+0x230>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <vLineSensorPIDControl+0x228>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194e:	edc7 7a02 	vstr	s15, [r7, #8]

    // Garante que as velocidades estão entre 0 e 1
    if (left_speed > 1.0f) left_speed = 1.0f;
 8001952:	edd7 7a03 	vldr	s15, [r7, #12]
 8001956:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800195a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	dd02      	ble.n	800196a <vLineSensorPIDControl+0x18e>
 8001964:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001968:	60fb      	str	r3, [r7, #12]
    if (left_speed < 0.0f) left_speed = 0.0f;
 800196a:	edd7 7a03 	vldr	s15, [r7, #12]
 800196e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d502      	bpl.n	800197e <vLineSensorPIDControl+0x1a2>
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
    if (right_speed > 1.0f) right_speed = 1.0f;
 800197e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800198a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198e:	dd02      	ble.n	8001996 <vLineSensorPIDControl+0x1ba>
 8001990:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001994:	60bb      	str	r3, [r7, #8]
    if (right_speed < 0.0f) right_speed = 0.0f;
 8001996:	edd7 7a02 	vldr	s15, [r7, #8]
 800199a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d502      	bpl.n	80019aa <vLineSensorPIDControl+0x1ce>
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
    if (position == 0) {
 80019aa:	edd7 7a00 	vldr	s15, [r7]
 80019ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b6:	d107      	bne.n	80019c8 <vLineSensorPIDControl+0x1ec>
        left_speed = 0.5f;
 80019b8:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80019bc:	60fb      	str	r3, [r7, #12]
        right_speed = 0.5f;
 80019be:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	e000      	b.n	80019c8 <vLineSensorPIDControl+0x1ec>
        return;
 80019c6:	bf00      	nop
    }
    // Ajusta as velocidades dos motores
   //vSetRodasDC(left_speed, right_speed);
    //vSetRodaDireitaDC(right_speed);
    //vSetRodaEsquerdaDC(left_speed);
}
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000538 	.word	0x20000538
 80019d4:	447a0000 	.word	0x447a0000
 80019d8:	20000030 	.word	0x20000030
 80019dc:	3c23d70a 	.word	0x3c23d70a
 80019e0:	42c60000 	.word	0x42c60000
 80019e4:	00000000 	.word	0x00000000
 80019e8:	20000524 	.word	0x20000524
 80019ec:	2000052c 	.word	0x2000052c
 80019f0:	20000528 	.word	0x20000528
 80019f4:	20000530 	.word	0x20000530
 80019f8:	20000028 	.word	0x20000028
 80019fc:	20000520 	.word	0x20000520
 8001a00:	2000002c 	.word	0x2000002c
 8001a04:	20000534 	.word	0x20000534
 8001a08:	2000051c 	.word	0x2000051c
 8001a0c:	20000034 	.word	0x20000034

08001a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a08      	ldr	r2, [pc, #32]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001a46:	f002 ffa5 	bl	8004994 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <NMI_Handler+0x4>

08001a60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <MemManage_Handler+0x4>

08001a70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a92:	bf00      	nop
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 fc37 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001abc:	4803      	ldr	r0, [pc, #12]	@ (8001acc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8001abe:	f004 fa71 	bl	8005fa4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8001ac2:	4803      	ldr	r0, [pc, #12]	@ (8001ad0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8001ac4:	f004 fa6e 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000053c 	.word	0x2000053c
 8001ad0:	20000620 	.word	0x20000620

08001ad4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ad8:	4803      	ldr	r0, [pc, #12]	@ (8001ae8 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 8001ada:	f004 fa63 	bl	8005fa4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8001ade:	4803      	ldr	r0, [pc, #12]	@ (8001aec <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8001ae0:	f004 fa60 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000053c 	.word	0x2000053c
 8001aec:	2000066c 	.word	0x2000066c

08001af0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt / I2C2 wake-up interrupt through EXTI line 24.
  */
void I2C2_EV_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001af4:	4802      	ldr	r0, [pc, #8]	@ (8001b00 <I2C2_EV_IRQHandler+0x10>)
 8001af6:	f002 fdf7 	bl	80046e8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000494 	.word	0x20000494

08001b04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b08:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b0c:	f002 fd2e 	bl	800456c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <TIM7_DAC_IRQHandler+0x10>)
 8001b1a:	f004 fa43 	bl	8005fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200005d4 	.word	0x200005d4

08001b28 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <SystemInit+0x20>)
 8001b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b32:	4a05      	ldr	r2, [pc, #20]	@ (8001b48 <SystemInit+0x20>)
 8001b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b09c      	sub	sp, #112	@ 0x70
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]
 8001b5c:	609a      	str	r2, [r3, #8]
 8001b5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
 8001b7c:	615a      	str	r2, [r3, #20]
 8001b7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2234      	movs	r2, #52	@ 0x34
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fbf2 	bl	8008370 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <MX_TIM1_Init+0x174>)
 8001b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170-1;
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001b94:	22a9      	movs	r2, #169	@ 0xa9
 8001b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b98:	4b48      	ldr	r3, [pc, #288]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba6:	4b45      	ldr	r3, [pc, #276]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bac:	4b43      	ldr	r3, [pc, #268]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b42      	ldr	r3, [pc, #264]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bb8:	4840      	ldr	r0, [pc, #256]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001bba:	f003 fe77 	bl	80058ac <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bc4:	f7ff fc75 	bl	80014b2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bcc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4839      	ldr	r0, [pc, #228]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001bd6:	f004 fce5 	bl	80065a4 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001be0:	f7ff fc67 	bl	80014b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001be4:	4835      	ldr	r0, [pc, #212]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001be6:	f003 feb8 	bl	800595a <HAL_TIM_PWM_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001bf0:	f7ff fc5f 	bl	80014b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c04:	4619      	mov	r1, r3
 8001c06:	482d      	ldr	r0, [pc, #180]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001c08:	f005 fbd4 	bl	80073b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c12:	f7ff fc4e 	bl	80014b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c16:	2360      	movs	r3, #96	@ 0x60
 8001c18:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c22:	2300      	movs	r3, #0
 8001c24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4820      	ldr	r0, [pc, #128]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001c3c:	f004 fb9e 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c46:	f7ff fc34 	bl	80014b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c4e:	2204      	movs	r2, #4
 8001c50:	4619      	mov	r1, r3
 8001c52:	481a      	ldr	r0, [pc, #104]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001c54:	f004 fb92 	bl	800637c <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001c5e:	f7ff fc28 	bl	80014b2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c80:	2300      	movs	r3, #0
 8001c82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c92:	2300      	movs	r3, #0
 8001c94:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4807      	ldr	r0, [pc, #28]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001ca0:	f005 fc1e 	bl	80074e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 8001caa:	f7ff fc02 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cae:	4803      	ldr	r0, [pc, #12]	@ (8001cbc <MX_TIM1_Init+0x170>)
 8001cb0:	f000 f9e0 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001cb4:	bf00      	nop
 8001cb6:	3770      	adds	r7, #112	@ 0x70
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	2000053c 	.word	0x2000053c
 8001cc0:	40012c00 	.word	0x40012c00

08001cc4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	@ (8001d2c <MX_TIM6_Init+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cf4:	480c      	ldr	r0, [pc, #48]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001cf6:	f003 fdd9 	bl	80058ac <HAL_TIM_Base_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d00:	f7ff fbd7 	bl	80014b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_TIM6_Init+0x64>)
 8001d12:	f005 fb4f 	bl	80073b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d1c:	f7ff fbc9 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	20000588 	.word	0x20000588
 8001d2c:	40001000 	.word	0x40001000

08001d30 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001d40:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d42:	4a15      	ldr	r2, [pc, #84]	@ (8001d98 <MX_TIM7_Init+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8001d46:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d48:	22a9      	movs	r2, #169	@ 0xa9
 8001d4a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d54:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001d58:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d62:	f003 fda3 	bl	80058ac <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001d6c:	f7ff fba1 	bl	80014b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d70:	2300      	movs	r3, #0
 8001d72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_TIM7_Init+0x64>)
 8001d7e:	f005 fb19 	bl	80073b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d88:	f7ff fb93 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200005d4 	.word	0x200005d4
 8001d98:	40001400 	.word	0x40001400

08001d9c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001da2:	463b      	mov	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001db0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e2c <MX_TIM16_Init+0x90>)
 8001db2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 170-1;
 8001db4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001db6:	22a9      	movs	r2, #169	@ 0xa9
 8001db8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dba:	4b1b      	ldr	r3, [pc, #108]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dc2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dc6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001dce:	4b16      	ldr	r3, [pc, #88]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001dda:	4813      	ldr	r0, [pc, #76]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001ddc:	f003 fd66 	bl	80058ac <HAL_TIM_Base_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 8001de6:	f7ff fb64 	bl	80014b2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 8001dea:	480f      	ldr	r0, [pc, #60]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001dec:	f003 ff28 	bl	8005c40 <HAL_TIM_IC_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001df6:	f7ff fb5c 	bl	80014b2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001e06:	230f      	movs	r3, #15
 8001e08:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <MX_TIM16_Init+0x8c>)
 8001e12:	f004 fa16 	bl	8006242 <HAL_TIM_IC_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8001e1c:	f7ff fb49 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000620 	.word	0x20000620
 8001e2c:	40014400 	.word	0x40014400

08001e30 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e36:	463b      	mov	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e42:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <MX_TIM17_Init+0x90>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 170-1;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e4a:	22a9      	movs	r2, #169	@ 0xa9
 8001e4c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e6e:	4813      	ldr	r0, [pc, #76]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e70:	f003 fd1c 	bl	80058ac <HAL_TIM_Base_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM17_Init+0x4e>
  {
    Error_Handler();
 8001e7a:	f7ff fb1a 	bl	80014b2 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim17) != HAL_OK)
 8001e7e:	480f      	ldr	r0, [pc, #60]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001e80:	f003 fede 	bl	8005c40 <HAL_TIM_IC_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001e8a:	f7ff fb12 	bl	80014b2 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001e92:	2301      	movs	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim17, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_TIM17_Init+0x8c>)
 8001ea6:	f004 f9cc 	bl	8006242 <HAL_TIM_IC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM17_Init+0x84>
  {
    Error_Handler();
 8001eb0:	f7ff faff 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000066c 	.word	0x2000066c
 8001ec0:	40014800 	.word	0x40014800

08001ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08e      	sub	sp, #56	@ 0x38
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a5d      	ldr	r2, [pc, #372]	@ (8002058 <HAL_TIM_Base_MspInit+0x194>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d11c      	bne.n	8001f20 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee6:	4b5d      	ldr	r3, [pc, #372]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eea:	4a5c      	ldr	r2, [pc, #368]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ef0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ef2:	4b5a      	ldr	r3, [pc, #360]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001efa:	623b      	str	r3, [r7, #32]
 8001efc:	6a3b      	ldr	r3, [r7, #32]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2100      	movs	r1, #0
 8001f02:	2019      	movs	r0, #25
 8001f04:	f001 ff9f 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f08:	2019      	movs	r0, #25
 8001f0a:	f001 ffb6 	bl	8003e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2100      	movs	r1, #0
 8001f12:	201a      	movs	r0, #26
 8001f14:	f001 ff97 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001f18:	201a      	movs	r0, #26
 8001f1a:	f001 ffae 	bl	8003e7a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001f1e:	e096      	b.n	800204e <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM6)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a4e      	ldr	r2, [pc, #312]	@ (8002060 <HAL_TIM_Base_MspInit+0x19c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d10c      	bne.n	8001f44 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f2a:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f2e:	4a4b      	ldr	r2, [pc, #300]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f30:	f043 0310 	orr.w	r3, r3, #16
 8001f34:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f36:	4b49      	ldr	r3, [pc, #292]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	61fb      	str	r3, [r7, #28]
 8001f40:	69fb      	ldr	r3, [r7, #28]
}
 8001f42:	e084      	b.n	800204e <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM7)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a46      	ldr	r2, [pc, #280]	@ (8002064 <HAL_TIM_Base_MspInit+0x1a0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d114      	bne.n	8001f78 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f4e:	4b43      	ldr	r3, [pc, #268]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	4a42      	ldr	r2, [pc, #264]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f54:	f043 0320 	orr.w	r3, r3, #32
 8001f58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f5a:	4b40      	ldr	r3, [pc, #256]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2037      	movs	r0, #55	@ 0x37
 8001f6c:	f001 ff6b 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001f70:	2037      	movs	r0, #55	@ 0x37
 8001f72:	f001 ff82 	bl	8003e7a <HAL_NVIC_EnableIRQ>
}
 8001f76:	e06a      	b.n	800204e <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM16)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a3a      	ldr	r2, [pc, #232]	@ (8002068 <HAL_TIM_Base_MspInit+0x1a4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d130      	bne.n	8001fe4 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f86:	4a35      	ldr	r2, [pc, #212]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f8e:	4b33      	ldr	r3, [pc, #204]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	4b30      	ldr	r3, [pc, #192]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Encoder_Esq_TIM_Pin;
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_Esq_TIM_GPIO_Port, &GPIO_InitStruct);
 8001fc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4827      	ldr	r0, [pc, #156]	@ (800206c <HAL_TIM_Base_MspInit+0x1a8>)
 8001fce:	f002 f933 	bl	8004238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2019      	movs	r0, #25
 8001fd8:	f001 ff35 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001fdc:	2019      	movs	r0, #25
 8001fde:	f001 ff4c 	bl	8003e7a <HAL_NVIC_EnableIRQ>
}
 8001fe2:	e034      	b.n	800204e <HAL_TIM_Base_MspInit+0x18a>
  else if(tim_baseHandle->Instance==TIM17)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a21      	ldr	r2, [pc, #132]	@ (8002070 <HAL_TIM_Base_MspInit+0x1ac>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d12f      	bne.n	800204e <HAL_TIM_Base_MspInit+0x18a>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001fee:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200a:	4a14      	ldr	r2, [pc, #80]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002012:	4b12      	ldr	r3, [pc, #72]	@ (800205c <HAL_TIM_Base_MspInit+0x198>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Encoder_Dir_TIM_Pin;
 800201e:	2320      	movs	r3, #32
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002022:	2302      	movs	r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002026:	2300      	movs	r3, #0
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202a:	2300      	movs	r3, #0
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800202e:	230a      	movs	r3, #10
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(Encoder_Dir_TIM_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002036:	4619      	mov	r1, r3
 8002038:	480c      	ldr	r0, [pc, #48]	@ (800206c <HAL_TIM_Base_MspInit+0x1a8>)
 800203a:	f002 f8fd 	bl	8004238 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	201a      	movs	r0, #26
 8002044:	f001 feff 	bl	8003e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002048:	201a      	movs	r0, #26
 800204a:	f001 ff16 	bl	8003e7a <HAL_NVIC_EnableIRQ>
}
 800204e:	bf00      	nop
 8002050:	3738      	adds	r7, #56	@ 0x38
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	40021000 	.word	0x40021000
 8002060:	40001000 	.word	0x40001000
 8002064:	40001400 	.word	0x40001400
 8002068:	40014400 	.word	0x40014400
 800206c:	48000400 	.word	0x48000400
 8002070:	40014800 	.word	0x40014800

08002074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a11      	ldr	r2, [pc, #68]	@ (80020d8 <HAL_TIM_MspPostInit+0x64>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d11b      	bne.n	80020ce <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002096:	4b11      	ldr	r3, [pc, #68]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 800209c:	f043 0304 	orr.w	r3, r3, #4
 80020a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_TIM_MspPostInit+0x68>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	60bb      	str	r3, [r7, #8]
 80020ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Motor_Esq_PWM_Pin|Motor_Dir_PWM_Pin;
 80020ae:	2303      	movs	r3, #3
 80020b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020be:	2302      	movs	r3, #2
 80020c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 030c 	add.w	r3, r7, #12
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	@ (80020e0 <HAL_TIM_MspPostInit+0x6c>)
 80020ca:	f002 f8b5 	bl	8004238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3720      	adds	r7, #32
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000800 	.word	0x48000800

080020e4 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020e8:	4b21      	ldr	r3, [pc, #132]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 80020ea:	4a22      	ldr	r2, [pc, #136]	@ (8002174 <MX_LPUART1_UART_Init+0x90>)
 80020ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002102:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b18      	ldr	r3, [pc, #96]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002114:	4b16      	ldr	r3, [pc, #88]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 8002116:	2200      	movs	r2, #0
 8002118:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800211a:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 800211c:	2200      	movs	r2, #0
 800211e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 8002122:	2200      	movs	r2, #0
 8002124:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002126:	4812      	ldr	r0, [pc, #72]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 8002128:	f005 fab4 	bl	8007694 <HAL_UART_Init>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002132:	f7ff f9be 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002136:	2100      	movs	r1, #0
 8002138:	480d      	ldr	r0, [pc, #52]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 800213a:	f006 f84f 	bl	80081dc <HAL_UARTEx_SetTxFifoThreshold>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002144:	f7ff f9b5 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002148:	2100      	movs	r1, #0
 800214a:	4809      	ldr	r0, [pc, #36]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 800214c:	f006 f884 	bl	8008258 <HAL_UARTEx_SetRxFifoThreshold>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002156:	f7ff f9ac 	bl	80014b2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	@ (8002170 <MX_LPUART1_UART_Init+0x8c>)
 800215c:	f006 f805 	bl	800816a <HAL_UARTEx_DisableFifoMode>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002166:	f7ff f9a4 	bl	80014b2 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200006b8 	.word	0x200006b8
 8002174:	40008000 	.word	0x40008000

08002178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b09e      	sub	sp, #120	@ 0x78
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	2254      	movs	r2, #84	@ 0x54
 8002196:	2100      	movs	r1, #0
 8002198:	4618      	mov	r0, r3
 800219a:	f006 f8e9 	bl	8008370 <memset>
  if(uartHandle->Instance==LPUART1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002220 <HAL_UART_MspInit+0xa8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d136      	bne.n	8002216 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021a8:	2320      	movs	r3, #32
 80021aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4618      	mov	r0, r3
 80021b6:	f003 f92b 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021c0:	f7ff f977 	bl	80014b2 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021c4:	4b17      	ldr	r3, [pc, #92]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c8:	4a16      	ldr	r2, [pc, #88]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80021d0:	4b14      	ldr	r3, [pc, #80]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e0:	4a10      	ldr	r2, [pc, #64]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_UART_MspInit+0xac>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80021f4:	230c      	movs	r3, #12
 80021f6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2300      	movs	r3, #0
 8002202:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002204:	230c      	movs	r3, #12
 8002206:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002208:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800220c:	4619      	mov	r1, r3
 800220e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002212:	f002 f811 	bl	8004238 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002216:	bf00      	nop
 8002218:	3778      	adds	r7, #120	@ 0x78
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40008000 	.word	0x40008000
 8002224:	40021000 	.word	0x40021000

08002228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002228:	480d      	ldr	r0, [pc, #52]	@ (8002260 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800222a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800222c:	f7ff fc7c 	bl	8001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002230:	480c      	ldr	r0, [pc, #48]	@ (8002264 <LoopForever+0x6>)
  ldr r1, =_edata
 8002232:	490d      	ldr	r1, [pc, #52]	@ (8002268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <LoopForever+0xe>)
  movs r3, #0
 8002236:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002238:	e002      	b.n	8002240 <LoopCopyDataInit>

0800223a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800223c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223e:	3304      	adds	r3, #4

08002240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002244:	d3f9      	bcc.n	800223a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002246:	4a0a      	ldr	r2, [pc, #40]	@ (8002270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002248:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <LoopForever+0x16>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800224c:	e001      	b.n	8002252 <LoopFillZerobss>

0800224e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002250:	3204      	adds	r2, #4

08002252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002254:	d3fb      	bcc.n	800224e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002256:	f006 f893 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800225a:	f7ff f87f 	bl	800135c <main>

0800225e <LoopForever>:

LoopForever:
    b LoopForever
 800225e:	e7fe      	b.n	800225e <LoopForever>
  ldr   r0, =_estack
 8002260:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800226c:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 8002270:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8002274:	20000750 	.word	0x20000750

08002278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC1_2_IRQHandler>

0800227a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227a:	b580      	push	{r7, lr}
 800227c:	b082      	sub	sp, #8
 800227e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f001 fdd3 	bl	8003e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f80e 	bl	80022ac <HAL_InitTick>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	71fb      	strb	r3, [r7, #7]
 800229a:	e001      	b.n	80022a0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229c:	f7ff fbb8 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a0:	79fb      	ldrb	r3, [r7, #7]

}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80022b8:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_InitTick+0x68>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d022      	beq.n	8002306 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80022c0:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <HAL_InitTick+0x6c>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <HAL_InitTick+0x68>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80022cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80022d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	f001 fdde 	bl	8003e96 <HAL_SYSTICK_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10f      	bne.n	8002300 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	d809      	bhi.n	80022fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e6:	2200      	movs	r2, #0
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	f04f 30ff 	mov.w	r0, #4294967295
 80022ee:	f001 fdaa 	bl	8003e46 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <HAL_InitTick+0x70>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	e007      	b.n	800230a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	e004      	b.n	800230a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
 8002304:	e001      	b.n	800230a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800230a:	7bfb      	ldrb	r3, [r7, #15]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000040 	.word	0x20000040
 8002318:	20000038 	.word	0x20000038
 800231c:	2000003c 	.word	0x2000003c

08002320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_IncTick+0x1c>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_IncTick+0x20>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4413      	add	r3, r2
 800232e:	4a03      	ldr	r2, [pc, #12]	@ (800233c <HAL_IncTick+0x1c>)
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	2000074c 	.word	0x2000074c
 8002340:	20000040 	.word	0x20000040

08002344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_GetTick+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	2000074c 	.word	0x2000074c

0800235c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff ffee 	bl	8002344 <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002374:	d004      	beq.n	8002380 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002376:	4b09      	ldr	r3, [pc, #36]	@ (800239c <HAL_Delay+0x40>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002380:	bf00      	nop
 8002382:	f7ff ffdf 	bl	8002344 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	68fa      	ldr	r2, [r7, #12]
 800238e:	429a      	cmp	r2, r3
 8002390:	d8f7      	bhi.n	8002382 <HAL_Delay+0x26>
  {
  }
}
 8002392:	bf00      	nop
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20000040 	.word	0x20000040

080023a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	609a      	str	r2, [r3, #8]
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
 8002414:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3360      	adds	r3, #96	@ 0x60
 800241a:	461a      	mov	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4413      	add	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b08      	ldr	r3, [pc, #32]	@ (800244c <LL_ADC_SetOffset+0x44>)
 800242a:	4013      	ands	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	4313      	orrs	r3, r2
 8002438:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002440:	bf00      	nop
 8002442:	371c      	adds	r7, #28
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	03fff000 	.word	0x03fff000

08002450 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3360      	adds	r3, #96	@ 0x60
 800245e:	461a      	mov	r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3360      	adds	r3, #96	@ 0x60
 800248c:	461a      	mov	r2, r3
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024a6:	bf00      	nop
 80024a8:	371c      	adds	r7, #28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80024b2:	b480      	push	{r7}
 80024b4:	b087      	sub	sp, #28
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3360      	adds	r3, #96	@ 0x60
 80024c2:	461a      	mov	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	4413      	add	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	431a      	orrs	r2, r3
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80024dc:	bf00      	nop
 80024de:	371c      	adds	r7, #28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3360      	adds	r3, #96	@ 0x60
 80024f8:	461a      	mov	r2, r3
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr

0800251e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	431a      	orrs	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	615a      	str	r2, [r3, #20]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002558:	2301      	movs	r3, #1
 800255a:	e000      	b.n	800255e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800256a:	b480      	push	{r7}
 800256c:	b087      	sub	sp, #28
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3330      	adds	r3, #48	@ 0x30
 800257a:	461a      	mov	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	4413      	add	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	211f      	movs	r1, #31
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	0e9b      	lsrs	r3, r3, #26
 80025a2:	f003 011f 	and.w	r1, r3, #31
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	fa01 f303 	lsl.w	r3, r1, r3
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr

080025c2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80025c2:	b480      	push	{r7}
 80025c4:	b087      	sub	sp, #28
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	3314      	adds	r3, #20
 80025d2:	461a      	mov	r2, r3
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	0e5b      	lsrs	r3, r3, #25
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	0d1b      	lsrs	r3, r3, #20
 80025ea:	f003 031f 	and.w	r3, r3, #31
 80025ee:	2107      	movs	r1, #7
 80025f0:	fa01 f303 	lsl.w	r3, r1, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	0d1b      	lsrs	r3, r3, #20
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	431a      	orrs	r2, r3
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800260c:	bf00      	nop
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002630:	43db      	mvns	r3, r3
 8002632:	401a      	ands	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0318 	and.w	r3, r3, #24
 800263a:	4908      	ldr	r1, [pc, #32]	@ (800265c <LL_ADC_SetChannelSingleDiff+0x44>)
 800263c:	40d9      	lsrs	r1, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	400b      	ands	r3, r1
 8002642:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002646:	431a      	orrs	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	0007ffff 	.word	0x0007ffff

08002660 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 031f 	and.w	r3, r3, #31
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800268c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6093      	str	r3, [r2, #8]
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026b4:	d101      	bne.n	80026ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80026d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002704:	d101      	bne.n	800270a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002706:	2301      	movs	r3, #1
 8002708:	e000      	b.n	800270c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002754:	f043 0202 	orr.w	r2, r3, #2
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <LL_ADC_IsEnabled+0x18>
 800277c:	2301      	movs	r3, #1
 800277e:	e000      	b.n	8002782 <LL_ADC_IsEnabled+0x1a>
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800278e:	b480      	push	{r7}
 8002790:	b083      	sub	sp, #12
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d101      	bne.n	80027a6 <LL_ADC_IsDisableOngoing+0x18>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <LL_ADC_IsDisableOngoing+0x1a>
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80027c8:	f043 0204 	orr.w	r2, r3, #4
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d101      	bne.n	80027f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d101      	bne.n	800281a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002816:	2301      	movs	r3, #1
 8002818:	e000      	b.n	800281c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800281a:	2300      	movs	r3, #0
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d101      	bne.n	8002842 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e1a9      	b.n	8002b96 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fe f8b7 	bl	80009c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff ff19 	bl	80026a0 <LL_ADC_IsDeepPowerDownEnabled>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d004      	beq.n	800287e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff feff 	bl	800267c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff34 	bl	80026f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d115      	bne.n	80028ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff ff18 	bl	80026c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002898:	4b9c      	ldr	r3, [pc, #624]	@ (8002b0c <HAL_ADC_Init+0x2e4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	4a9c      	ldr	r2, [pc, #624]	@ (8002b10 <HAL_ADC_Init+0x2e8>)
 80028a0:	fba2 2303 	umull	r2, r3, r2, r3
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028ac:	e002      	b.n	80028b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	3b01      	subs	r3, #1
 80028b2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f9      	bne.n	80028ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ff16 	bl	80026f0 <LL_ADC_IsInternalRegulatorEnabled>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff76 	bl	80027dc <LL_ADC_REG_IsConversionOngoing>
 80028f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 8142 	bne.w	8002b84 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 813e 	bne.w	8002b84 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002910:	f043 0202 	orr.w	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ff23 	bl	8002768 <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d141      	bne.n	80029ac <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002930:	d004      	beq.n	800293c <HAL_ADC_Init+0x114>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a77      	ldr	r2, [pc, #476]	@ (8002b14 <HAL_ADC_Init+0x2ec>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d10f      	bne.n	800295c <HAL_ADC_Init+0x134>
 800293c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002940:	f7ff ff12 	bl	8002768 <LL_ADC_IsEnabled>
 8002944:	4604      	mov	r4, r0
 8002946:	4873      	ldr	r0, [pc, #460]	@ (8002b14 <HAL_ADC_Init+0x2ec>)
 8002948:	f7ff ff0e 	bl	8002768 <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	4323      	orrs	r3, r4
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e012      	b.n	8002982 <HAL_ADC_Init+0x15a>
 800295c:	486e      	ldr	r0, [pc, #440]	@ (8002b18 <HAL_ADC_Init+0x2f0>)
 800295e:	f7ff ff03 	bl	8002768 <LL_ADC_IsEnabled>
 8002962:	4604      	mov	r4, r0
 8002964:	486d      	ldr	r0, [pc, #436]	@ (8002b1c <HAL_ADC_Init+0x2f4>)
 8002966:	f7ff feff 	bl	8002768 <LL_ADC_IsEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	431c      	orrs	r4, r3
 800296e:	486c      	ldr	r0, [pc, #432]	@ (8002b20 <HAL_ADC_Init+0x2f8>)
 8002970:	f7ff fefa 	bl	8002768 <LL_ADC_IsEnabled>
 8002974:	4603      	mov	r3, r0
 8002976:	4323      	orrs	r3, r4
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d012      	beq.n	80029ac <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298e:	d004      	beq.n	800299a <HAL_ADC_Init+0x172>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a5f      	ldr	r2, [pc, #380]	@ (8002b14 <HAL_ADC_Init+0x2ec>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_ADC_Init+0x176>
 800299a:	4a62      	ldr	r2, [pc, #392]	@ (8002b24 <HAL_ADC_Init+0x2fc>)
 800299c:	e000      	b.n	80029a0 <HAL_ADC_Init+0x178>
 800299e:	4a62      	ldr	r2, [pc, #392]	@ (8002b28 <HAL_ADC_Init+0x300>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4619      	mov	r1, r3
 80029a6:	4610      	mov	r0, r2
 80029a8:	f7ff fcfa 	bl	80023a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	7f5b      	ldrb	r3, [r3, #29]
 80029b0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029b6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80029bc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80029c2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029ca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d106      	bne.n	80029e8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	045b      	lsls	r3, r3, #17
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d009      	beq.n	8002a04 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b48      	ldr	r3, [pc, #288]	@ (8002b2c <HAL_ADC_Init+0x304>)
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	69b9      	ldr	r1, [r7, #24]
 8002a14:	430b      	orrs	r3, r1
 8002a16:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff fee5 	bl	8002802 <LL_ADC_INJ_IsConversionOngoing>
 8002a38:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17f      	bne.n	8002b40 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d17c      	bne.n	8002b40 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a4a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002a52:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002a62:	f023 0302 	bic.w	r3, r3, #2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	69b9      	ldr	r1, [r7, #24]
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d017      	beq.n	8002aa8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002a86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002a90:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6911      	ldr	r1, [r2, #16]
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6812      	ldr	r2, [r2, #0]
 8002aa0:	430b      	orrs	r3, r1
 8002aa2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002aa6:	e013      	b.n	8002ad0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ab6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002acc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d12a      	bne.n	8002b30 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002ae4:	f023 0304 	bic.w	r3, r3, #4
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002af0:	4311      	orrs	r1, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002af6:	4311      	orrs	r1, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002afc:	430a      	orrs	r2, r1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0201 	orr.w	r2, r2, #1
 8002b08:	611a      	str	r2, [r3, #16]
 8002b0a:	e019      	b.n	8002b40 <HAL_ADC_Init+0x318>
 8002b0c:	20000038 	.word	0x20000038
 8002b10:	053e2d63 	.word	0x053e2d63
 8002b14:	50000100 	.word	0x50000100
 8002b18:	50000400 	.word	0x50000400
 8002b1c:	50000500 	.word	0x50000500
 8002b20:	50000600 	.word	0x50000600
 8002b24:	50000300 	.word	0x50000300
 8002b28:	50000700 	.word	0x50000700
 8002b2c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691a      	ldr	r2, [r3, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0201 	bic.w	r2, r2, #1
 8002b3e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10c      	bne.n	8002b62 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f023 010f 	bic.w	r1, r3, #15
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b60:	e007      	b.n	8002b72 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 020f 	bic.w	r2, r2, #15
 8002b70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b76:	f023 0303 	bic.w	r3, r3, #3
 8002b7a:	f043 0201 	orr.w	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b82:	e007      	b.n	8002b94 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b88:	f043 0210 	orr.w	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	@ 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
 8002b9e:	bf00      	nop

08002ba0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bb4:	d004      	beq.n	8002bc0 <HAL_ADC_Start_DMA+0x20>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5a      	ldr	r2, [pc, #360]	@ (8002d24 <HAL_ADC_Start_DMA+0x184>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_Start_DMA+0x24>
 8002bc0:	4b59      	ldr	r3, [pc, #356]	@ (8002d28 <HAL_ADC_Start_DMA+0x188>)
 8002bc2:	e000      	b.n	8002bc6 <HAL_ADC_Start_DMA+0x26>
 8002bc4:	4b59      	ldr	r3, [pc, #356]	@ (8002d2c <HAL_ADC_Start_DMA+0x18c>)
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7ff fd4a 	bl	8002660 <LL_ADC_GetMultimode>
 8002bcc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7ff fe02 	bl	80027dc <LL_ADC_REG_IsConversionOngoing>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f040 809b 	bne.w	8002d16 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_Start_DMA+0x4e>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e096      	b.n	8002d1c <HAL_ADC_Start_DMA+0x17c>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a4d      	ldr	r2, [pc, #308]	@ (8002d30 <HAL_ADC_Start_DMA+0x190>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d008      	beq.n	8002c12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d005      	beq.n	8002c12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	2b05      	cmp	r3, #5
 8002c0a:	d002      	beq.n	8002c12 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	2b09      	cmp	r3, #9
 8002c10:	d17a      	bne.n	8002d08 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 fcf6 	bl	8003604 <ADC_Enable>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d16d      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c26:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002d24 <HAL_ADC_Start_DMA+0x184>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d009      	beq.n	8002c54 <HAL_ADC_Start_DMA+0xb4>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a3b      	ldr	r2, [pc, #236]	@ (8002d34 <HAL_ADC_Start_DMA+0x194>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d002      	beq.n	8002c50 <HAL_ADC_Start_DMA+0xb0>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_Start_DMA+0xb8>
 8002c50:	4b39      	ldr	r3, [pc, #228]	@ (8002d38 <HAL_ADC_Start_DMA+0x198>)
 8002c52:	e001      	b.n	8002c58 <HAL_ADC_Start_DMA+0xb8>
 8002c54:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d002      	beq.n	8002c66 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c82:	f023 0206 	bic.w	r2, r3, #6
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c8a:	e002      	b.n	8002c92 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <HAL_ADC_Start_DMA+0x19c>)
 8002c98:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c9e:	4a28      	ldr	r2, [pc, #160]	@ (8002d40 <HAL_ADC_Start_DMA+0x1a0>)
 8002ca0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca6:	4a27      	ldr	r2, [pc, #156]	@ (8002d44 <HAL_ADC_Start_DMA+0x1a4>)
 8002ca8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	221c      	movs	r2, #28
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0210 	orr.w	r2, r2, #16
 8002cc8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 0201 	orr.w	r2, r2, #1
 8002cd8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3340      	adds	r3, #64	@ 0x40
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f001 f989 	bl	8004000 <HAL_DMA_Start_IT>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fd5c 	bl	80027b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002cfc:	e00d      	b.n	8002d1a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8002d06:	e008      	b.n	8002d1a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8002d14:	e001      	b.n	8002d1a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
 8002d18:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	50000100 	.word	0x50000100
 8002d28:	50000300 	.word	0x50000300
 8002d2c:	50000700 	.word	0x50000700
 8002d30:	50000600 	.word	0x50000600
 8002d34:	50000500 	.word	0x50000500
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	080037ef 	.word	0x080037ef
 8002d40:	080038c7 	.word	0x080038c7
 8002d44:	080038e3 	.word	0x080038e3

08002d48 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b0b6      	sub	sp, #216	@ 0xd8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d102      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x24>
 8002da2:	2302      	movs	r3, #2
 8002da4:	f000 bc13 	b.w	80035ce <HAL_ADC_ConfigChannel+0x84a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff fd11 	bl	80027dc <LL_ADC_REG_IsConversionOngoing>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f040 83f3 	bne.w	80035a8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7ff fbcb 	bl	800256a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fcff 	bl	80027dc <LL_ADC_REG_IsConversionOngoing>
 8002dde:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fd0b 	bl	8002802 <LL_ADC_INJ_IsConversionOngoing>
 8002dec:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002df0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f040 81d9 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 81d4 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e0c:	d10f      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6818      	ldr	r0, [r3, #0]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2200      	movs	r2, #0
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f7ff fbd2 	bl	80025c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb79 	bl	800251e <LL_ADC_SetSamplingTimeCommonConfig>
 8002e2c:	e00e      	b.n	8002e4c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	f7ff fbc1 	bl	80025c2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff fb69 	bl	800251e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	695a      	ldr	r2, [r3, #20]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	08db      	lsrs	r3, r3, #3
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d022      	beq.n	8002eb4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6919      	ldr	r1, [r3, #16]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e7e:	f7ff fac3 	bl	8002408 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6919      	ldr	r1, [r3, #16]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f7ff fb0f 	bl	80024b2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6818      	ldr	r0, [r3, #0]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d102      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x126>
 8002ea4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ea8:	e000      	b.n	8002eac <HAL_ADC_ConfigChannel+0x128>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	461a      	mov	r2, r3
 8002eae:	f7ff fb1b 	bl	80024e8 <LL_ADC_SetOffsetSaturation>
 8002eb2:	e17b      	b.n	80031ac <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2100      	movs	r1, #0
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fac8 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x15c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fabd 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	f003 021f 	and.w	r2, r3, #31
 8002ede:	e01e      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x19a>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff fab2 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e004      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d105      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x1b2>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0e9b      	lsrs	r3, r3, #26
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	e018      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1e4>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	e004      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d106      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fa81 	bl	800247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff fa65 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x222>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2101      	movs	r1, #1
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fa5a 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	0e9b      	lsrs	r3, r3, #26
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	e01e      	b.n	8002fe4 <HAL_ADC_ConfigChannel+0x260>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2101      	movs	r1, #1
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7ff fa4f 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002fcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002fd4:	2320      	movs	r3, #32
 8002fd6:	e004      	b.n	8002fe2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002fdc:	fab3 f383 	clz	r3, r3
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d105      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x278>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	e018      	b.n	800302e <HAL_ADC_ConfigChannel+0x2aa>
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003008:	fa93 f3a3 	rbit	r3, r3
 800300c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003010:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003020:	2320      	movs	r3, #32
 8003022:	e004      	b.n	800302e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003028:	fab3 f383 	clz	r3, r3
 800302c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800302e:	429a      	cmp	r2, r3
 8003030:	d106      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2200      	movs	r2, #0
 8003038:	2101      	movs	r1, #1
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fa1e 	bl	800247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2102      	movs	r1, #2
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fa02 	bl	8002450 <LL_ADC_GetOffsetChannel>
 800304c:	4603      	mov	r3, r0
 800304e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10a      	bne.n	800306c <HAL_ADC_ConfigChannel+0x2e8>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff f9f7 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	0e9b      	lsrs	r3, r3, #26
 8003066:	f003 021f 	and.w	r2, r3, #31
 800306a:	e01e      	b.n	80030aa <HAL_ADC_ConfigChannel+0x326>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2102      	movs	r1, #2
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff f9ec 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800308a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800308e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003092:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e004      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800309e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d105      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x33e>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	e016      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x36c>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80030ce:	fa93 f3a3 	rbit	r3, r3
 80030d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80030d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80030d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80030da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80030e2:	2320      	movs	r3, #32
 80030e4:	e004      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80030e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d106      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2102      	movs	r1, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f9bd 	bl	800247c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2103      	movs	r1, #3
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f9a1 	bl	8002450 <LL_ADC_GetOffsetChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10a      	bne.n	800312e <HAL_ADC_ConfigChannel+0x3aa>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2103      	movs	r1, #3
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff f996 	bl	8002450 <LL_ADC_GetOffsetChannel>
 8003124:	4603      	mov	r3, r0
 8003126:	0e9b      	lsrs	r3, r3, #26
 8003128:	f003 021f 	and.w	r2, r3, #31
 800312c:	e017      	b.n	800315e <HAL_ADC_ConfigChannel+0x3da>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2103      	movs	r1, #3
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff f98b 	bl	8002450 <LL_ADC_GetOffsetChannel>
 800313a:	4603      	mov	r3, r0
 800313c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003148:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800314a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003166:	2b00      	cmp	r3, #0
 8003168:	d105      	bne.n	8003176 <HAL_ADC_ConfigChannel+0x3f2>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	0e9b      	lsrs	r3, r3, #26
 8003170:	f003 031f 	and.w	r3, r3, #31
 8003174:	e011      	b.n	800319a <HAL_ADC_ConfigChannel+0x416>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003186:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003188:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800318e:	2320      	movs	r3, #32
 8003190:	e003      	b.n	800319a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003192:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800319a:	429a      	cmp	r2, r3
 800319c:	d106      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2103      	movs	r1, #3
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f968 	bl	800247c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7ff fad9 	bl	8002768 <LL_ADC_IsEnabled>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f040 813d 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6818      	ldr	r0, [r3, #0]
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	6819      	ldr	r1, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	461a      	mov	r2, r3
 80031cc:	f7ff fa24 	bl	8002618 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	4aa2      	ldr	r2, [pc, #648]	@ (8003460 <HAL_ADC_ConfigChannel+0x6dc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f040 812e 	bne.w	8003438 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10b      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x480>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	2b09      	cmp	r3, #9
 80031fa:	bf94      	ite	ls
 80031fc:	2301      	movls	r3, #1
 80031fe:	2300      	movhi	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e019      	b.n	8003238 <HAL_ADC_ConfigChannel+0x4b4>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003214:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003216:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	3301      	adds	r3, #1
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2b09      	cmp	r3, #9
 8003230:	bf94      	ite	ls
 8003232:	2301      	movls	r3, #1
 8003234:	2300      	movhi	r3, #0
 8003236:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003238:	2b00      	cmp	r3, #0
 800323a:	d079      	beq.n	8003330 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003244:	2b00      	cmp	r3, #0
 8003246:	d107      	bne.n	8003258 <HAL_ADC_ConfigChannel+0x4d4>
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	0e9b      	lsrs	r3, r3, #26
 800324e:	3301      	adds	r3, #1
 8003250:	069b      	lsls	r3, r3, #26
 8003252:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003256:	e015      	b.n	8003284 <HAL_ADC_ConfigChannel+0x500>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003260:	fa93 f3a3 	rbit	r3, r3
 8003264:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003266:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003268:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800326a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003270:	2320      	movs	r3, #32
 8003272:	e003      	b.n	800327c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	fab3 f383 	clz	r3, r3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	3301      	adds	r3, #1
 800327e:	069b      	lsls	r3, r3, #26
 8003280:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x520>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	0e9b      	lsrs	r3, r3, #26
 8003296:	3301      	adds	r3, #1
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	2101      	movs	r1, #1
 800329e:	fa01 f303 	lsl.w	r3, r1, r3
 80032a2:	e017      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x550>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ac:	fa93 f3a3 	rbit	r3, r3
 80032b0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	e003      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80032c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c2:	fab3 f383 	clz	r3, r3
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	3301      	adds	r3, #1
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2101      	movs	r1, #1
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	ea42 0103 	orr.w	r1, r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10a      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x576>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	0e9b      	lsrs	r3, r3, #26
 80032ea:	3301      	adds	r3, #1
 80032ec:	f003 021f 	and.w	r2, r3, #31
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	051b      	lsls	r3, r3, #20
 80032f8:	e018      	b.n	800332c <HAL_ADC_ConfigChannel+0x5a8>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003302:	fa93 f3a3 	rbit	r3, r3
 8003306:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800330c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330e:	2b00      	cmp	r3, #0
 8003310:	d101      	bne.n	8003316 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003312:	2320      	movs	r3, #32
 8003314:	e003      	b.n	800331e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	3301      	adds	r3, #1
 8003320:	f003 021f 	and.w	r2, r3, #31
 8003324:	4613      	mov	r3, r2
 8003326:	005b      	lsls	r3, r3, #1
 8003328:	4413      	add	r3, r2
 800332a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800332c:	430b      	orrs	r3, r1
 800332e:	e07e      	b.n	800342e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003338:	2b00      	cmp	r3, #0
 800333a:	d107      	bne.n	800334c <HAL_ADC_ConfigChannel+0x5c8>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	0e9b      	lsrs	r3, r3, #26
 8003342:	3301      	adds	r3, #1
 8003344:	069b      	lsls	r3, r3, #26
 8003346:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800334a:	e015      	b.n	8003378 <HAL_ADC_ConfigChannel+0x5f4>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800335a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800335e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003360:	2b00      	cmp	r3, #0
 8003362:	d101      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003364:	2320      	movs	r3, #32
 8003366:	e003      	b.n	8003370 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	b2db      	uxtb	r3, r3
 8003370:	3301      	adds	r3, #1
 8003372:	069b      	lsls	r3, r3, #26
 8003374:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d109      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x614>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	3301      	adds	r3, #1
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	2101      	movs	r1, #1
 8003392:	fa01 f303 	lsl.w	r3, r1, r3
 8003396:	e017      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x644>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	61fb      	str	r3, [r7, #28]
  return result;
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f303 	lsl.w	r3, r1, r3
 80033c8:	ea42 0103 	orr.w	r1, r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10d      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x670>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	0e9b      	lsrs	r3, r3, #26
 80033de:	3301      	adds	r3, #1
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4613      	mov	r3, r2
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	4413      	add	r3, r2
 80033ea:	3b1e      	subs	r3, #30
 80033ec:	051b      	lsls	r3, r3, #20
 80033ee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80033f2:	e01b      	b.n	800342c <HAL_ADC_ConfigChannel+0x6a8>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	613b      	str	r3, [r7, #16]
  return result;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800340c:	2320      	movs	r3, #32
 800340e:	e003      	b.n	8003418 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	fab3 f383 	clz	r3, r3
 8003416:	b2db      	uxtb	r3, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f003 021f 	and.w	r2, r3, #31
 800341e:	4613      	mov	r3, r2
 8003420:	005b      	lsls	r3, r3, #1
 8003422:	4413      	add	r3, r2
 8003424:	3b1e      	subs	r3, #30
 8003426:	051b      	lsls	r3, r3, #20
 8003428:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800342c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003432:	4619      	mov	r1, r3
 8003434:	f7ff f8c5 	bl	80025c2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	4b09      	ldr	r3, [pc, #36]	@ (8003464 <HAL_ADC_ConfigChannel+0x6e0>)
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 80be 	beq.w	80035c2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800344e:	d004      	beq.n	800345a <HAL_ADC_ConfigChannel+0x6d6>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a04      	ldr	r2, [pc, #16]	@ (8003468 <HAL_ADC_ConfigChannel+0x6e4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10a      	bne.n	8003470 <HAL_ADC_ConfigChannel+0x6ec>
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_ADC_ConfigChannel+0x6e8>)
 800345c:	e009      	b.n	8003472 <HAL_ADC_ConfigChannel+0x6ee>
 800345e:	bf00      	nop
 8003460:	407f0000 	.word	0x407f0000
 8003464:	80080000 	.word	0x80080000
 8003468:	50000100 	.word	0x50000100
 800346c:	50000300 	.word	0x50000300
 8003470:	4b59      	ldr	r3, [pc, #356]	@ (80035d8 <HAL_ADC_ConfigChannel+0x854>)
 8003472:	4618      	mov	r0, r3
 8003474:	f7fe ffba 	bl	80023ec <LL_ADC_GetCommonPathInternalCh>
 8003478:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a56      	ldr	r2, [pc, #344]	@ (80035dc <HAL_ADC_ConfigChannel+0x858>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x70c>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a55      	ldr	r2, [pc, #340]	@ (80035e0 <HAL_ADC_ConfigChannel+0x85c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d13a      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003490:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003494:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d134      	bne.n	8003506 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a4:	d005      	beq.n	80034b2 <HAL_ADC_ConfigChannel+0x72e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a4e      	ldr	r2, [pc, #312]	@ (80035e4 <HAL_ADC_ConfigChannel+0x860>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f040 8085 	bne.w	80035bc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034ba:	d004      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x742>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a49      	ldr	r2, [pc, #292]	@ (80035e8 <HAL_ADC_ConfigChannel+0x864>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_ADC_ConfigChannel+0x746>
 80034c6:	4a49      	ldr	r2, [pc, #292]	@ (80035ec <HAL_ADC_ConfigChannel+0x868>)
 80034c8:	e000      	b.n	80034cc <HAL_ADC_ConfigChannel+0x748>
 80034ca:	4a43      	ldr	r2, [pc, #268]	@ (80035d8 <HAL_ADC_ConfigChannel+0x854>)
 80034cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f7fe ff75 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034dc:	4b44      	ldr	r3, [pc, #272]	@ (80035f0 <HAL_ADC_ConfigChannel+0x86c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	4a44      	ldr	r2, [pc, #272]	@ (80035f4 <HAL_ADC_ConfigChannel+0x870>)
 80034e4:	fba2 2303 	umull	r2, r3, r2, r3
 80034e8:	099b      	lsrs	r3, r3, #6
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f6:	e002      	b.n	80034fe <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f9      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003504:	e05a      	b.n	80035bc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3b      	ldr	r2, [pc, #236]	@ (80035f8 <HAL_ADC_ConfigChannel+0x874>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d125      	bne.n	800355c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003514:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d11f      	bne.n	800355c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a31      	ldr	r2, [pc, #196]	@ (80035e8 <HAL_ADC_ConfigChannel+0x864>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d104      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x7ac>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a34      	ldr	r2, [pc, #208]	@ (80035fc <HAL_ADC_ConfigChannel+0x878>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d047      	beq.n	80035c0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003538:	d004      	beq.n	8003544 <HAL_ADC_ConfigChannel+0x7c0>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a2a      	ldr	r2, [pc, #168]	@ (80035e8 <HAL_ADC_ConfigChannel+0x864>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_ADC_ConfigChannel+0x7c4>
 8003544:	4a29      	ldr	r2, [pc, #164]	@ (80035ec <HAL_ADC_ConfigChannel+0x868>)
 8003546:	e000      	b.n	800354a <HAL_ADC_ConfigChannel+0x7c6>
 8003548:	4a23      	ldr	r2, [pc, #140]	@ (80035d8 <HAL_ADC_ConfigChannel+0x854>)
 800354a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800354e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f7fe ff36 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800355a:	e031      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a27      	ldr	r2, [pc, #156]	@ (8003600 <HAL_ADC_ConfigChannel+0x87c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d12d      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003566:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800356a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d127      	bne.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a1c      	ldr	r2, [pc, #112]	@ (80035e8 <HAL_ADC_ConfigChannel+0x864>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003584:	d004      	beq.n	8003590 <HAL_ADC_ConfigChannel+0x80c>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a17      	ldr	r2, [pc, #92]	@ (80035e8 <HAL_ADC_ConfigChannel+0x864>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d101      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x810>
 8003590:	4a16      	ldr	r2, [pc, #88]	@ (80035ec <HAL_ADC_ConfigChannel+0x868>)
 8003592:	e000      	b.n	8003596 <HAL_ADC_ConfigChannel+0x812>
 8003594:	4a10      	ldr	r2, [pc, #64]	@ (80035d8 <HAL_ADC_ConfigChannel+0x854>)
 8003596:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800359a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f7fe ff10 	bl	80023c6 <LL_ADC_SetCommonPathInternalCh>
 80035a6:	e00c      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ac:	f043 0220 	orr.w	r2, r3, #32
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80035ba:	e002      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035bc:	bf00      	nop
 80035be:	e000      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80035c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80035ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	37d8      	adds	r7, #216	@ 0xd8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	50000700 	.word	0x50000700
 80035dc:	c3210000 	.word	0xc3210000
 80035e0:	90c00010 	.word	0x90c00010
 80035e4:	50000600 	.word	0x50000600
 80035e8:	50000100 	.word	0x50000100
 80035ec:	50000300 	.word	0x50000300
 80035f0:	20000038 	.word	0x20000038
 80035f4:	053e2d63 	.word	0x053e2d63
 80035f8:	c7520000 	.word	0xc7520000
 80035fc:	50000500 	.word	0x50000500
 8003600:	cb840000 	.word	0xcb840000

08003604 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff f8a7 	bl	8002768 <LL_ADC_IsEnabled>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d176      	bne.n	800370e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	4b3c      	ldr	r3, [pc, #240]	@ (8003718 <ADC_Enable+0x114>)
 8003628:	4013      	ands	r3, r2
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003632:	f043 0210 	orr.w	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e062      	b.n	8003710 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff f862 	bl	8002718 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365c:	d004      	beq.n	8003668 <ADC_Enable+0x64>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a2e      	ldr	r2, [pc, #184]	@ (800371c <ADC_Enable+0x118>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d101      	bne.n	800366c <ADC_Enable+0x68>
 8003668:	4b2d      	ldr	r3, [pc, #180]	@ (8003720 <ADC_Enable+0x11c>)
 800366a:	e000      	b.n	800366e <ADC_Enable+0x6a>
 800366c:	4b2d      	ldr	r3, [pc, #180]	@ (8003724 <ADC_Enable+0x120>)
 800366e:	4618      	mov	r0, r3
 8003670:	f7fe febc 	bl	80023ec <LL_ADC_GetCommonPathInternalCh>
 8003674:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003676:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800367a:	2b00      	cmp	r3, #0
 800367c:	d013      	beq.n	80036a6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800367e:	4b2a      	ldr	r3, [pc, #168]	@ (8003728 <ADC_Enable+0x124>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	099b      	lsrs	r3, r3, #6
 8003684:	4a29      	ldr	r2, [pc, #164]	@ (800372c <ADC_Enable+0x128>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003698:	e002      	b.n	80036a0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	3b01      	subs	r3, #1
 800369e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80036a6:	f7fe fe4d 	bl	8002344 <HAL_GetTick>
 80036aa:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036ac:	e028      	b.n	8003700 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f858 	bl	8002768 <LL_ADC_IsEnabled>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d104      	bne.n	80036c8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff f828 	bl	8002718 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036c8:	f7fe fe3c 	bl	8002344 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d914      	bls.n	8003700 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d00d      	beq.n	8003700 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e8:	f043 0210 	orr.w	r2, r3, #16
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f4:	f043 0201 	orr.w	r2, r3, #1
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e007      	b.n	8003710 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d1cf      	bne.n	80036ae <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	8000003f 	.word	0x8000003f
 800371c:	50000100 	.word	0x50000100
 8003720:	50000300 	.word	0x50000300
 8003724:	50000700 	.word	0x50000700
 8003728:	20000038 	.word	0x20000038
 800372c:	053e2d63 	.word	0x053e2d63

08003730 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff f826 	bl	800278e <LL_ADC_IsDisableOngoing>
 8003742:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f80d 	bl	8002768 <LL_ADC_IsEnabled>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d047      	beq.n	80037e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d144      	bne.n	80037e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 030d 	and.w	r3, r3, #13
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10c      	bne.n	8003782 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fe ffe7 	bl	8002740 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2203      	movs	r2, #3
 8003778:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800377a:	f7fe fde3 	bl	8002344 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003780:	e029      	b.n	80037d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	f043 0210 	orr.w	r2, r3, #16
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e023      	b.n	80037e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800379e:	f7fe fdd1 	bl	8002344 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d914      	bls.n	80037d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037be:	f043 0210 	orr.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037ca:	f043 0201 	orr.w	r2, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e007      	b.n	80037e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1dc      	bne.n	800379e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003804:	2b00      	cmp	r3, #0
 8003806:	d14b      	bne.n	80038a0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d021      	beq.n	8003866 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fe8c 	bl	8002544 <LL_ADC_REG_IsTriggerSourceSWStart>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d032      	beq.n	8003898 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d12b      	bne.n	8003898 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003844:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11f      	bne.n	8003898 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800385c:	f043 0201 	orr.w	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003864:	e018      	b.n	8003898 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003878:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003884:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d105      	bne.n	8003898 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003890:	f043 0201 	orr.w	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f7ff fa55 	bl	8002d48 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800389e:	e00e      	b.n	80038be <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a4:	f003 0310 	and.w	r3, r3, #16
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d003      	beq.n	80038b4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f7ff fa5f 	bl	8002d70 <HAL_ADC_ErrorCallback>
}
 80038b2:	e004      	b.n	80038be <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f7ff fa41 	bl	8002d5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038da:	bf00      	nop
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b084      	sub	sp, #16
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003900:	f043 0204 	orr.w	r2, r3, #4
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f7ff fa31 	bl	8002d70 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <LL_ADC_IsEnabled>:
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <LL_ADC_IsEnabled+0x18>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <LL_ADC_IsEnabled+0x1a>
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <LL_ADC_StartCalibration>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800394e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003958:	4313      	orrs	r3, r2
 800395a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <LL_ADC_IsCalibrationOnGoing>:
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800397e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003982:	d101      	bne.n	8003988 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_ADC_REG_IsConversionOngoing>:
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 0304 	and.w	r3, r3, #4
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	d101      	bne.n	80039ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e04d      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0xb8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff fea5 	bl	8003730 <ADC_Disable>
 80039e6:	4603      	mov	r3, r0
 80039e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d136      	bne.n	8003a5e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80039f8:	f023 0302 	bic.w	r3, r3, #2
 80039fc:	f043 0202 	orr.w	r2, r3, #2
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff96 	bl	800393c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a10:	e014      	b.n	8003a3c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	3301      	adds	r3, #1
 8003a16:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d90d      	bls.n	8003a3c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a24:	f023 0312 	bic.w	r3, r3, #18
 8003a28:	f043 0210 	orr.w	r2, r3, #16
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e01b      	b.n	8003a74 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff ff94 	bl	800396e <LL_ADC_IsCalibrationOnGoing>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1e2      	bne.n	8003a12 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a50:	f023 0303 	bic.w	r3, r3, #3
 8003a54:	f043 0201 	orr.w	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a5c:	e005      	b.n	8003a6a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	f043 0210 	orr.w	r2, r3, #16
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	0004de01 	.word	0x0004de01

08003a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003a80:	b590      	push	{r4, r7, lr}
 8003a82:	b0a1      	sub	sp, #132	@ 0x84
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e0e7      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003aaa:	2300      	movs	r3, #0
 8003aac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ab6:	d102      	bne.n	8003abe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ab8:	4b6f      	ldr	r3, [pc, #444]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	e009      	b.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d102      	bne.n	8003ace <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003aca:	60bb      	str	r3, [r7, #8]
 8003acc:	e001      	b.n	8003ad2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f043 0220 	orr.w	r2, r3, #32
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0be      	b.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff4f 	bl	8003996 <LL_ADC_REG_IsConversionOngoing>
 8003af8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff ff49 	bl	8003996 <LL_ADC_REG_IsConversionOngoing>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 80a0 	bne.w	8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003b0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f040 809c 	bne.w	8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b1c:	d004      	beq.n	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a55      	ldr	r2, [pc, #340]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d101      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b28:	4b56      	ldr	r3, [pc, #344]	@ (8003c84 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b2a:	e000      	b.n	8003b2e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b2c:	4b56      	ldr	r3, [pc, #344]	@ (8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003b2e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d04b      	beq.n	8003bd0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b4a:	035b      	lsls	r3, r3, #13
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b52:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5c:	d004      	beq.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a45      	ldr	r2, [pc, #276]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10f      	bne.n	8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003b68:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003b6c:	f7ff fed3 	bl	8003916 <LL_ADC_IsEnabled>
 8003b70:	4604      	mov	r4, r0
 8003b72:	4841      	ldr	r0, [pc, #260]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b74:	f7ff fecf 	bl	8003916 <LL_ADC_IsEnabled>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	4323      	orrs	r3, r4
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	e012      	b.n	8003bae <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003b88:	483c      	ldr	r0, [pc, #240]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b8a:	f7ff fec4 	bl	8003916 <LL_ADC_IsEnabled>
 8003b8e:	4604      	mov	r4, r0
 8003b90:	483b      	ldr	r0, [pc, #236]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b92:	f7ff fec0 	bl	8003916 <LL_ADC_IsEnabled>
 8003b96:	4603      	mov	r3, r0
 8003b98:	431c      	orrs	r4, r3
 8003b9a:	483c      	ldr	r0, [pc, #240]	@ (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003b9c:	f7ff febb 	bl	8003916 <LL_ADC_IsEnabled>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4323      	orrs	r3, r4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d056      	beq.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	6811      	ldr	r1, [r2, #0]
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	6892      	ldr	r2, [r2, #8]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bcc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003bce:	e047      	b.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003bd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003bd8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003bda:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003be4:	d004      	beq.n	8003bf0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a23      	ldr	r2, [pc, #140]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10f      	bne.n	8003c10 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003bf0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003bf4:	f7ff fe8f 	bl	8003916 <LL_ADC_IsEnabled>
 8003bf8:	4604      	mov	r4, r0
 8003bfa:	481f      	ldr	r0, [pc, #124]	@ (8003c78 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bfc:	f7ff fe8b 	bl	8003916 <LL_ADC_IsEnabled>
 8003c00:	4603      	mov	r3, r0
 8003c02:	4323      	orrs	r3, r4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf0c      	ite	eq
 8003c08:	2301      	moveq	r3, #1
 8003c0a:	2300      	movne	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e012      	b.n	8003c36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c10:	481a      	ldr	r0, [pc, #104]	@ (8003c7c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c12:	f7ff fe80 	bl	8003916 <LL_ADC_IsEnabled>
 8003c16:	4604      	mov	r4, r0
 8003c18:	4819      	ldr	r0, [pc, #100]	@ (8003c80 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c1a:	f7ff fe7c 	bl	8003916 <LL_ADC_IsEnabled>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	431c      	orrs	r4, r3
 8003c22:	481a      	ldr	r0, [pc, #104]	@ (8003c8c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c24:	f7ff fe77 	bl	8003916 <LL_ADC_IsEnabled>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4323      	orrs	r3, r4
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d012      	beq.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003c42:	f023 030f 	bic.w	r3, r3, #15
 8003c46:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003c48:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c4a:	e009      	b.n	8003c60 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003c5e:	e000      	b.n	8003c62 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003c60:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003c6a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3784      	adds	r7, #132	@ 0x84
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd90      	pop	{r4, r7, pc}
 8003c76:	bf00      	nop
 8003c78:	50000100 	.word	0x50000100
 8003c7c:	50000400 	.word	0x50000400
 8003c80:	50000500 	.word	0x50000500
 8003c84:	50000300 	.word	0x50000300
 8003c88:	50000700 	.word	0x50000700
 8003c8c:	50000600 	.word	0x50000600

08003c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f003 0307 	and.w	r3, r3, #7
 8003c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cac:	4013      	ands	r3, r2
 8003cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc2:	4a04      	ldr	r2, [pc, #16]	@ (8003cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	60d3      	str	r3, [r2, #12]
}
 8003cc8:	bf00      	nop
 8003cca:	3714      	adds	r7, #20
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cdc:	4b04      	ldr	r3, [pc, #16]	@ (8003cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 0307 	and.w	r3, r3, #7
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	db0b      	blt.n	8003d1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	4907      	ldr	r1, [pc, #28]	@ (8003d2c <__NVIC_EnableIRQ+0x38>)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	095b      	lsrs	r3, r3, #5
 8003d14:	2001      	movs	r0, #1
 8003d16:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	e000e100 	.word	0xe000e100

08003d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	6039      	str	r1, [r7, #0]
 8003d3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	db0a      	blt.n	8003d5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	490c      	ldr	r1, [pc, #48]	@ (8003d7c <__NVIC_SetPriority+0x4c>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	0112      	lsls	r2, r2, #4
 8003d50:	b2d2      	uxtb	r2, r2
 8003d52:	440b      	add	r3, r1
 8003d54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d58:	e00a      	b.n	8003d70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	4908      	ldr	r1, [pc, #32]	@ (8003d80 <__NVIC_SetPriority+0x50>)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3b04      	subs	r3, #4
 8003d68:	0112      	lsls	r2, r2, #4
 8003d6a:	b2d2      	uxtb	r2, r2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	761a      	strb	r2, [r3, #24]
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	e000e100 	.word	0xe000e100
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b089      	sub	sp, #36	@ 0x24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f1c3 0307 	rsb	r3, r3, #7
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	bf28      	it	cs
 8003da2:	2304      	movcs	r3, #4
 8003da4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3304      	adds	r3, #4
 8003daa:	2b06      	cmp	r3, #6
 8003dac:	d902      	bls.n	8003db4 <NVIC_EncodePriority+0x30>
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	3b03      	subs	r3, #3
 8003db2:	e000      	b.n	8003db6 <NVIC_EncodePriority+0x32>
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43da      	mvns	r2, r3
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	401a      	ands	r2, r3
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dcc:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd6:	43d9      	mvns	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ddc:	4313      	orrs	r3, r2
         );
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3724      	adds	r7, #36	@ 0x24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dfc:	d301      	bcc.n	8003e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e00f      	b.n	8003e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e02:	4a0a      	ldr	r2, [pc, #40]	@ (8003e2c <SysTick_Config+0x40>)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e0a:	210f      	movs	r1, #15
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	f7ff ff8e 	bl	8003d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e14:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <SysTick_Config+0x40>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e1a:	4b04      	ldr	r3, [pc, #16]	@ (8003e2c <SysTick_Config+0x40>)
 8003e1c:	2207      	movs	r2, #7
 8003e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff29 	bl	8003c90 <__NVIC_SetPriorityGrouping>
}
 8003e3e:	bf00      	nop
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b086      	sub	sp, #24
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e54:	f7ff ff40 	bl	8003cd8 <__NVIC_GetPriorityGrouping>
 8003e58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	68b9      	ldr	r1, [r7, #8]
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7ff ff90 	bl	8003d84 <NVIC_EncodePriority>
 8003e64:	4602      	mov	r2, r0
 8003e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff ff5f 	bl	8003d30 <__NVIC_SetPriority>
}
 8003e72:	bf00      	nop
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	4603      	mov	r3, r0
 8003e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff33 	bl	8003cf4 <__NVIC_EnableIRQ>
}
 8003e8e:	bf00      	nop
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b082      	sub	sp, #8
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff ffa4 	bl	8003dec <SysTick_Config>
 8003ea4:	4603      	mov	r3, r0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e08d      	b.n	8003fde <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b47      	ldr	r3, [pc, #284]	@ (8003fe8 <HAL_DMA_Init+0x138>)
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d80f      	bhi.n	8003eee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b45      	ldr	r3, [pc, #276]	@ (8003fec <HAL_DMA_Init+0x13c>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4a45      	ldr	r2, [pc, #276]	@ (8003ff0 <HAL_DMA_Init+0x140>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a42      	ldr	r2, [pc, #264]	@ (8003ff4 <HAL_DMA_Init+0x144>)
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eec:	e00e      	b.n	8003f0c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b40      	ldr	r3, [pc, #256]	@ (8003ff8 <HAL_DMA_Init+0x148>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ff0 <HAL_DMA_Init+0x140>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a3c      	ldr	r2, [pc, #240]	@ (8003ffc <HAL_DMA_Init+0x14c>)
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f26:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f908 	bl	8004174 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f6c:	d102      	bne.n	8003f74 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f88:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d010      	beq.n	8003fb4 <HAL_DMA_Init+0x104>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d80c      	bhi.n	8003fb4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f928 	bl	80041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e008      	b.n	8003fc6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	40020407 	.word	0x40020407
 8003fec:	bffdfff8 	.word	0xbffdfff8
 8003ff0:	cccccccd 	.word	0xcccccccd
 8003ff4:	40020000 	.word	0x40020000
 8003ff8:	bffdfbf8 	.word	0xbffdfbf8
 8003ffc:	40020400 	.word	0x40020400

08004000 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_DMA_Start_IT+0x20>
 800401c:	2302      	movs	r3, #2
 800401e:	e066      	b.n	80040ee <HAL_DMA_Start_IT+0xee>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b01      	cmp	r3, #1
 8004032:	d155      	bne.n	80040e0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0201 	bic.w	r2, r2, #1
 8004050:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f84c 	bl	80040f6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	2b00      	cmp	r3, #0
 8004064:	d008      	beq.n	8004078 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 020e 	orr.w	r2, r2, #14
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e00f      	b.n	8004098 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0204 	bic.w	r2, r2, #4
 8004086:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 020a 	orr.w	r2, r2, #10
 8004096:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d007      	beq.n	80040ce <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040cc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e005      	b.n	80040ec <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040e8:	2302      	movs	r3, #2
 80040ea:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b085      	sub	sp, #20
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800410c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004112:	2b00      	cmp	r3, #0
 8004114:	d004      	beq.n	8004120 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	2101      	movs	r1, #1
 800412e:	fa01 f202 	lsl.w	r2, r1, r2
 8004132:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	2b10      	cmp	r3, #16
 8004142:	d108      	bne.n	8004156 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004154:	e007      	b.n	8004166 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	60da      	str	r2, [r3, #12]
}
 8004166:	bf00      	nop
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	4b16      	ldr	r3, [pc, #88]	@ (80041dc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004184:	429a      	cmp	r2, r3
 8004186:	d802      	bhi.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004188:	4b15      	ldr	r3, [pc, #84]	@ (80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e001      	b.n	8004192 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800418e:	4b15      	ldr	r3, [pc, #84]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004190:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	3b08      	subs	r3, #8
 800419e:	4a12      	ldr	r2, [pc, #72]	@ (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80041a0:	fba2 2303 	umull	r2, r3, r2, r3
 80041a4:	091b      	lsrs	r3, r3, #4
 80041a6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	089b      	lsrs	r3, r3, #2
 80041ae:	009a      	lsls	r2, r3, #2
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4413      	add	r3, r2
 80041b4:	461a      	mov	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a0b      	ldr	r2, [pc, #44]	@ (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80041be:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 031f 	and.w	r3, r3, #31
 80041c6:	2201      	movs	r2, #1
 80041c8:	409a      	lsls	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	40020407 	.word	0x40020407
 80041e0:	40020800 	.word	0x40020800
 80041e4:	40020820 	.word	0x40020820
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020880 	.word	0x40020880

080041f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a08      	ldr	r2, [pc, #32]	@ (8004234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004212:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	2201      	movs	r2, #1
 800421e:	409a      	lsls	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	1000823f 	.word	0x1000823f
 8004234:	40020940 	.word	0x40020940

08004238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004246:	e15a      	b.n	80044fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	4013      	ands	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 814c 	beq.w	80044f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	2b01      	cmp	r3, #1
 800426a:	d005      	beq.n	8004278 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004274:	2b02      	cmp	r3, #2
 8004276:	d130      	bne.n	80042da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	2203      	movs	r2, #3
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	43db      	mvns	r3, r3
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4013      	ands	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	4313      	orrs	r3, r2
 80042a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042ae:	2201      	movs	r2, #1
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0201 	and.w	r2, r3, #1
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d017      	beq.n	8004316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	2203      	movs	r2, #3
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4013      	ands	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	689a      	ldr	r2, [r3, #8]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fa02 f303 	lsl.w	r3, r2, r3
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d123      	bne.n	800436a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	08da      	lsrs	r2, r3, #3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3208      	adds	r2, #8
 800432a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800432e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	220f      	movs	r2, #15
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	4013      	ands	r3, r2
 8004344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	691a      	ldr	r2, [r3, #16]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	08da      	lsrs	r2, r3, #3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3208      	adds	r2, #8
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	2203      	movs	r2, #3
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	43db      	mvns	r3, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f003 0203 	and.w	r2, r3, #3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 80a6 	beq.w	80044f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ac:	4b5b      	ldr	r3, [pc, #364]	@ (800451c <HAL_GPIO_Init+0x2e4>)
 80043ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043b0:	4a5a      	ldr	r2, [pc, #360]	@ (800451c <HAL_GPIO_Init+0x2e4>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	6613      	str	r3, [r2, #96]	@ 0x60
 80043b8:	4b58      	ldr	r3, [pc, #352]	@ (800451c <HAL_GPIO_Init+0x2e4>)
 80043ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c4:	4a56      	ldr	r2, [pc, #344]	@ (8004520 <HAL_GPIO_Init+0x2e8>)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	089b      	lsrs	r3, r3, #2
 80043ca:	3302      	adds	r3, #2
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	220f      	movs	r2, #15
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4013      	ands	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80043ee:	d01f      	beq.n	8004430 <HAL_GPIO_Init+0x1f8>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a4c      	ldr	r2, [pc, #304]	@ (8004524 <HAL_GPIO_Init+0x2ec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d019      	beq.n	800442c <HAL_GPIO_Init+0x1f4>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a4b      	ldr	r2, [pc, #300]	@ (8004528 <HAL_GPIO_Init+0x2f0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_GPIO_Init+0x1f0>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a4a      	ldr	r2, [pc, #296]	@ (800452c <HAL_GPIO_Init+0x2f4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00d      	beq.n	8004424 <HAL_GPIO_Init+0x1ec>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a49      	ldr	r2, [pc, #292]	@ (8004530 <HAL_GPIO_Init+0x2f8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <HAL_GPIO_Init+0x1e8>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a48      	ldr	r2, [pc, #288]	@ (8004534 <HAL_GPIO_Init+0x2fc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d101      	bne.n	800441c <HAL_GPIO_Init+0x1e4>
 8004418:	2305      	movs	r3, #5
 800441a:	e00a      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 800441c:	2306      	movs	r3, #6
 800441e:	e008      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004420:	2304      	movs	r3, #4
 8004422:	e006      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004424:	2303      	movs	r3, #3
 8004426:	e004      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004428:	2302      	movs	r3, #2
 800442a:	e002      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 800442c:	2301      	movs	r3, #1
 800442e:	e000      	b.n	8004432 <HAL_GPIO_Init+0x1fa>
 8004430:	2300      	movs	r3, #0
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	f002 0203 	and.w	r2, r2, #3
 8004438:	0092      	lsls	r2, r2, #2
 800443a:	4093      	lsls	r3, r2
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004442:	4937      	ldr	r1, [pc, #220]	@ (8004520 <HAL_GPIO_Init+0x2e8>)
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	3302      	adds	r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004450:	4b39      	ldr	r3, [pc, #228]	@ (8004538 <HAL_GPIO_Init+0x300>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	43db      	mvns	r3, r3
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	4013      	ands	r3, r2
 800445e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	4313      	orrs	r3, r2
 8004472:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004474:	4a30      	ldr	r2, [pc, #192]	@ (8004538 <HAL_GPIO_Init+0x300>)
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800447a:	4b2f      	ldr	r3, [pc, #188]	@ (8004538 <HAL_GPIO_Init+0x300>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800449e:	4a26      	ldr	r2, [pc, #152]	@ (8004538 <HAL_GPIO_Init+0x300>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044a4:	4b24      	ldr	r3, [pc, #144]	@ (8004538 <HAL_GPIO_Init+0x300>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	4013      	ands	r3, r2
 80044b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004538 <HAL_GPIO_Init+0x300>)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80044ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004538 <HAL_GPIO_Init+0x300>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	43db      	mvns	r3, r3
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4013      	ands	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044f2:	4a11      	ldr	r2, [pc, #68]	@ (8004538 <HAL_GPIO_Init+0x300>)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3301      	adds	r3, #1
 80044fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	fa22 f303 	lsr.w	r3, r2, r3
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f ae9d 	bne.w	8004248 <HAL_GPIO_Init+0x10>
  }
}
 800450e:	bf00      	nop
 8004510:	bf00      	nop
 8004512:	371c      	adds	r7, #28
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	40021000 	.word	0x40021000
 8004520:	40010000 	.word	0x40010000
 8004524:	48000400 	.word	0x48000400
 8004528:	48000800 	.word	0x48000800
 800452c:	48000c00 	.word	0x48000c00
 8004530:	48001000 	.word	0x48001000
 8004534:	48001400 	.word	0x48001400
 8004538:	40010400 	.word	0x40010400

0800453c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	460b      	mov	r3, r1
 8004546:	807b      	strh	r3, [r7, #2]
 8004548:	4613      	mov	r3, r2
 800454a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800454c:	787b      	ldrb	r3, [r7, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004552:	887a      	ldrh	r2, [r7, #2]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004558:	e002      	b.n	8004560 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	4603      	mov	r3, r0
 8004574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004576:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004578:	695a      	ldr	r2, [r3, #20]
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d006      	beq.n	8004590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004582:	4a05      	ldr	r2, [pc, #20]	@ (8004598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004584:	88fb      	ldrh	r3, [r7, #6]
 8004586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f806 	bl	800459c <HAL_GPIO_EXTI_Callback>
  }
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40010400 	.word	0x40010400

0800459c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	4603      	mov	r3, r0
 80045a4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045a6:	bf00      	nop
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e08d      	b.n	80046e0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fc fe41 	bl	8001260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2224      	movs	r2, #36	@ 0x24
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004602:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004612:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d107      	bne.n	800462c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004628:	609a      	str	r2, [r3, #8]
 800462a:	e006      	b.n	800463a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004638:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b02      	cmp	r3, #2
 8004640:	d108      	bne.n	8004654 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e007      	b.n	8004664 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004662:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6812      	ldr	r2, [r2, #0]
 800466e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004672:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004676:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004686:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	430a      	orrs	r2, r1
 80046a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	69d9      	ldr	r1, [r3, #28]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1a      	ldr	r2, [r3, #32]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0201 	orr.w	r2, r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	4798      	blx	r3
  }
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b20      	cmp	r3, #32
 8004730:	d138      	bne.n	80047a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800473c:	2302      	movs	r3, #2
 800473e:	e032      	b.n	80047a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2224      	movs	r2, #36	@ 0x24
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0201 	bic.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800476e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6819      	ldr	r1, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f042 0201 	orr.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047b2:	b480      	push	{r7}
 80047b4:	b085      	sub	sp, #20
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
 80047ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d139      	bne.n	800483c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80047d2:	2302      	movs	r3, #2
 80047d4:	e033      	b.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2201      	movs	r2, #1
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	@ 0x24
 80047e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0201 	bic.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004804:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	021b      	lsls	r3, r3, #8
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	4313      	orrs	r3, r2
 800480e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0201 	orr.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	e000      	b.n	800483e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800483c:	2302      	movs	r3, #2
  }
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d141      	bne.n	80048de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800485a:	4b4b      	ldr	r3, [pc, #300]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004866:	d131      	bne.n	80048cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004868:	4b47      	ldr	r3, [pc, #284]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800486e:	4a46      	ldr	r2, [pc, #280]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004874:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004878:	4b43      	ldr	r3, [pc, #268]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004880:	4a41      	ldr	r2, [pc, #260]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004882:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004886:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004888:	4b40      	ldr	r3, [pc, #256]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2232      	movs	r2, #50	@ 0x32
 800488e:	fb02 f303 	mul.w	r3, r2, r3
 8004892:	4a3f      	ldr	r2, [pc, #252]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	0c9b      	lsrs	r3, r3, #18
 800489a:	3301      	adds	r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800489e:	e002      	b.n	80048a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048a6:	4b38      	ldr	r3, [pc, #224]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048a8:	695b      	ldr	r3, [r3, #20]
 80048aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048b2:	d102      	bne.n	80048ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f2      	bne.n	80048a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ba:	4b33      	ldr	r3, [pc, #204]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c6:	d158      	bne.n	800497a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e057      	b.n	800497c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048cc:	4b2e      	ldr	r3, [pc, #184]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80048dc:	e04d      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d141      	bne.n	800496a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048e6:	4b28      	ldr	r3, [pc, #160]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048f2:	d131      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048f4:	4b24      	ldr	r3, [pc, #144]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048fa:	4a23      	ldr	r2, [pc, #140]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004900:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004904:	4b20      	ldr	r3, [pc, #128]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800490c:	4a1e      	ldr	r2, [pc, #120]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800490e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004912:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004914:	4b1d      	ldr	r3, [pc, #116]	@ (800498c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2232      	movs	r2, #50	@ 0x32
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800492a:	e002      	b.n	8004932 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	3b01      	subs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004932:	4b15      	ldr	r3, [pc, #84]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800493a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493e:	d102      	bne.n	8004946 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f2      	bne.n	800492c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004946:	4b10      	ldr	r3, [pc, #64]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800494e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004952:	d112      	bne.n	800497a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e011      	b.n	800497c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800495e:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004964:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004968:	e007      	b.n	800497a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800496a:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004972:	4a05      	ldr	r2, [pc, #20]	@ (8004988 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004974:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004978:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	40007000 	.word	0x40007000
 800498c:	20000038 	.word	0x20000038
 8004990:	431bde83 	.word	0x431bde83

08004994 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004998:	4b05      	ldr	r3, [pc, #20]	@ (80049b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	4a04      	ldr	r2, [pc, #16]	@ (80049b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800499e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80049a2:	6093      	str	r3, [r2, #8]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40007000 	.word	0x40007000

080049b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e2fe      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d075      	beq.n	8004abe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049d2:	4b97      	ldr	r3, [pc, #604]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
 80049da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049dc:	4b94      	ldr	r3, [pc, #592]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d102      	bne.n	80049f2 <HAL_RCC_OscConfig+0x3e>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b03      	cmp	r3, #3
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_OscConfig+0x44>
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	2b08      	cmp	r3, #8
 80049f6:	d10b      	bne.n	8004a10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d05b      	beq.n	8004abc <HAL_RCC_OscConfig+0x108>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d157      	bne.n	8004abc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e2d9      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a18:	d106      	bne.n	8004a28 <HAL_RCC_OscConfig+0x74>
 8004a1a:	4b85      	ldr	r3, [pc, #532]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a84      	ldr	r2, [pc, #528]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e01d      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a30:	d10c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x98>
 8004a32:	4b7f      	ldr	r3, [pc, #508]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a7e      	ldr	r2, [pc, #504]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a7b      	ldr	r2, [pc, #492]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	e00b      	b.n	8004a64 <HAL_RCC_OscConfig+0xb0>
 8004a4c:	4b78      	ldr	r3, [pc, #480]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a77      	ldr	r2, [pc, #476]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b75      	ldr	r3, [pc, #468]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a74      	ldr	r2, [pc, #464]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d013      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6c:	f7fd fc6a 	bl	8002344 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a74:	f7fd fc66 	bl	8002344 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	@ 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e29e      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a86:	4b6a      	ldr	r3, [pc, #424]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0xc0>
 8004a92:	e014      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fc56 	bl	8002344 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fc52 	bl	8002344 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e28a      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aae:	4b60      	ldr	r3, [pc, #384]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1f0      	bne.n	8004a9c <HAL_RCC_OscConfig+0xe8>
 8004aba:	e000      	b.n	8004abe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d075      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b59      	ldr	r3, [pc, #356]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad4:	4b56      	ldr	r3, [pc, #344]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b0c      	cmp	r3, #12
 8004ae2:	d102      	bne.n	8004aea <HAL_RCC_OscConfig+0x136>
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d002      	beq.n	8004af0 <HAL_RCC_OscConfig+0x13c>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d11f      	bne.n	8004b30 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004af0:	4b4f      	ldr	r3, [pc, #316]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_OscConfig+0x154>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e25d      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b08:	4b49      	ldr	r3, [pc, #292]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	061b      	lsls	r3, r3, #24
 8004b16:	4946      	ldr	r1, [pc, #280]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b1c:	4b45      	ldr	r3, [pc, #276]	@ (8004c34 <HAL_RCC_OscConfig+0x280>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fd fbc3 	bl	80022ac <HAL_InitTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d043      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e249      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d023      	beq.n	8004b80 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b38:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b44:	f7fd fbfe 	bl	8002344 <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4c:	f7fd fbfa 	bl	8002344 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e232      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b5e:	4b34      	ldr	r3, [pc, #208]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6a:	4b31      	ldr	r3, [pc, #196]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	061b      	lsls	r3, r3, #24
 8004b78:	492d      	ldr	r1, [pc, #180]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b80:	4b2b      	ldr	r3, [pc, #172]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a2a      	ldr	r2, [pc, #168]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004b86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7fd fbda 	bl	8002344 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7fd fbd6 	bl	8002344 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e20e      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba6:	4b22      	ldr	r3, [pc, #136]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1e0>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0308 	and.w	r3, r3, #8
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d041      	beq.n	8004c46 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01c      	beq.n	8004c04 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bca:	4b19      	ldr	r3, [pc, #100]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bd0:	4a17      	ldr	r2, [pc, #92]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bda:	f7fd fbb3 	bl	8002344 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be2:	f7fd fbaf 	bl	8002344 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e1e7      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0ef      	beq.n	8004be2 <HAL_RCC_OscConfig+0x22e>
 8004c02:	e020      	b.n	8004c46 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004c06:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c0a:	4a09      	ldr	r2, [pc, #36]	@ (8004c30 <HAL_RCC_OscConfig+0x27c>)
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c14:	f7fd fb96 	bl	8002344 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c1a:	e00d      	b.n	8004c38 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1c:	f7fd fb92 	bl	8002344 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d906      	bls.n	8004c38 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e1ca      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c38:	4b8c      	ldr	r3, [pc, #560]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ea      	bne.n	8004c1c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80a6 	beq.w	8004da0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c54:	2300      	movs	r3, #0
 8004c56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c58:	4b84      	ldr	r3, [pc, #528]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2b4>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x2b6>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00d      	beq.n	8004c8a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c72:	4a7e      	ldr	r2, [pc, #504]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	60fb      	str	r3, [r7, #12]
 8004c84:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c86:	2301      	movs	r3, #1
 8004c88:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c8a:	4b79      	ldr	r3, [pc, #484]	@ (8004e70 <HAL_RCC_OscConfig+0x4bc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d118      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c96:	4b76      	ldr	r3, [pc, #472]	@ (8004e70 <HAL_RCC_OscConfig+0x4bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a75      	ldr	r2, [pc, #468]	@ (8004e70 <HAL_RCC_OscConfig+0x4bc>)
 8004c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fb4f 	bl	8002344 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004caa:	f7fd fb4b 	bl	8002344 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e183      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e70 <HAL_RCC_OscConfig+0x4bc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d108      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x32e>
 8004cd0:	4b66      	ldr	r3, [pc, #408]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cd6:	4a65      	ldr	r2, [pc, #404]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004cd8:	f043 0301 	orr.w	r3, r3, #1
 8004cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004ce0:	e024      	b.n	8004d2c <HAL_RCC_OscConfig+0x378>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	2b05      	cmp	r3, #5
 8004ce8:	d110      	bne.n	8004d0c <HAL_RCC_OscConfig+0x358>
 8004cea:	4b60      	ldr	r3, [pc, #384]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf0:	4a5e      	ldr	r2, [pc, #376]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004cf2:	f043 0304 	orr.w	r3, r3, #4
 8004cf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004cfa:	4b5c      	ldr	r3, [pc, #368]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d00:	4a5a      	ldr	r2, [pc, #360]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d0a:	e00f      	b.n	8004d2c <HAL_RCC_OscConfig+0x378>
 8004d0c:	4b57      	ldr	r3, [pc, #348]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d12:	4a56      	ldr	r2, [pc, #344]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004d1c:	4b53      	ldr	r3, [pc, #332]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d22:	4a52      	ldr	r2, [pc, #328]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d24:	f023 0304 	bic.w	r3, r3, #4
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d016      	beq.n	8004d62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d34:	f7fd fb06 	bl	8002344 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3c:	f7fd fb02 	bl	8002344 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e138      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d52:	4b46      	ldr	r3, [pc, #280]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0ed      	beq.n	8004d3c <HAL_RCC_OscConfig+0x388>
 8004d60:	e015      	b.n	8004d8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d62:	f7fd faef 	bl	8002344 <HAL_GetTick>
 8004d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d68:	e00a      	b.n	8004d80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d6a:	f7fd faeb 	bl	8002344 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e121      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d80:	4b3a      	ldr	r3, [pc, #232]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1ed      	bne.n	8004d6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d8e:	7ffb      	ldrb	r3, [r7, #31]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d105      	bne.n	8004da0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d94:	4b35      	ldr	r3, [pc, #212]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d98:	4a34      	ldr	r2, [pc, #208]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0320 	and.w	r3, r3, #32
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d03c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01c      	beq.n	8004dee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004db4:	4b2d      	ldr	r3, [pc, #180]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dba:	4a2c      	ldr	r2, [pc, #176]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fd fabe 	bl	8002344 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dcc:	f7fd faba 	bl	8002344 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0f2      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dde:	4b23      	ldr	r3, [pc, #140]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0ef      	beq.n	8004dcc <HAL_RCC_OscConfig+0x418>
 8004dec:	e01b      	b.n	8004e26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dee:	4b1f      	ldr	r3, [pc, #124]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004df0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dfe:	f7fd faa1 	bl	8002344 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e06:	f7fd fa9d 	bl	8002344 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e0d5      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e18:	4b14      	ldr	r3, [pc, #80]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1ef      	bne.n	8004e06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80c9 	beq.w	8004fc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e30:	4b0e      	ldr	r3, [pc, #56]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b0c      	cmp	r3, #12
 8004e3a:	f000 8083 	beq.w	8004f44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	69db      	ldr	r3, [r3, #28]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d15e      	bne.n	8004f04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <HAL_RCC_OscConfig+0x4b8>)
 8004e4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e52:	f7fd fa77 	bl	8002344 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e58:	e00c      	b.n	8004e74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e5a:	f7fd fa73 	bl	8002344 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d905      	bls.n	8004e74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0ab      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
 8004e6c:	40021000 	.word	0x40021000
 8004e70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e74:	4b55      	ldr	r3, [pc, #340]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1ec      	bne.n	8004e5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e80:	4b52      	ldr	r3, [pc, #328]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_RCC_OscConfig+0x61c>)
 8004e86:	4013      	ands	r3, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6a11      	ldr	r1, [r2, #32]
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e90:	3a01      	subs	r2, #1
 8004e92:	0112      	lsls	r2, r2, #4
 8004e94:	4311      	orrs	r1, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004e9a:	0212      	lsls	r2, r2, #8
 8004e9c:	4311      	orrs	r1, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004ea2:	0852      	lsrs	r2, r2, #1
 8004ea4:	3a01      	subs	r2, #1
 8004ea6:	0552      	lsls	r2, r2, #21
 8004ea8:	4311      	orrs	r1, r2
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004eae:	0852      	lsrs	r2, r2, #1
 8004eb0:	3a01      	subs	r2, #1
 8004eb2:	0652      	lsls	r2, r2, #25
 8004eb4:	4311      	orrs	r1, r2
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eba:	06d2      	lsls	r2, r2, #27
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	4943      	ldr	r1, [pc, #268]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec4:	4b41      	ldr	r3, [pc, #260]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a40      	ldr	r2, [pc, #256]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ece:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a3d      	ldr	r2, [pc, #244]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004ed6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004eda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004edc:	f7fd fa32 	bl	8002344 <HAL_GetTick>
 8004ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ee2:	e008      	b.n	8004ef6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee4:	f7fd fa2e 	bl	8002344 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d901      	bls.n	8004ef6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e066      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef6:	4b35      	ldr	r3, [pc, #212]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0f0      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x530>
 8004f02:	e05e      	b.n	8004fc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f04:	4b31      	ldr	r3, [pc, #196]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a30      	ldr	r2, [pc, #192]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fa18 	bl	8002344 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fd fa14 	bl	8002344 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e04c      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f2a:	4b28      	ldr	r3, [pc, #160]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f36:	4b25      	ldr	r3, [pc, #148]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	4924      	ldr	r1, [pc, #144]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f3c:	4b25      	ldr	r3, [pc, #148]	@ (8004fd4 <HAL_RCC_OscConfig+0x620>)
 8004f3e:	4013      	ands	r3, r2
 8004f40:	60cb      	str	r3, [r1, #12]
 8004f42:	e03e      	b.n	8004fc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e039      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004f50:	4b1e      	ldr	r3, [pc, #120]	@ (8004fcc <HAL_RCC_OscConfig+0x618>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0203 	and.w	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d12c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d123      	bne.n	8004fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d11b      	bne.n	8004fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d113      	bne.n	8004fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d109      	bne.n	8004fbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3720      	adds	r7, #32
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	019f800c 	.word	0x019f800c
 8004fd4:	feeefffc 	.word	0xfeeefffc

08004fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e11e      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ff0:	4b91      	ldr	r3, [pc, #580]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	683a      	ldr	r2, [r7, #0]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d910      	bls.n	8005020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffe:	4b8e      	ldr	r3, [pc, #568]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f023 020f 	bic.w	r2, r3, #15
 8005006:	498c      	ldr	r1, [pc, #560]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b8a      	ldr	r3, [pc, #552]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e106      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d073      	beq.n	8005114 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b03      	cmp	r3, #3
 8005032:	d129      	bne.n	8005088 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005034:	4b81      	ldr	r3, [pc, #516]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0f4      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005044:	f000 f99e 	bl	8005384 <RCC_GetSysClockFreqFromPLLSource>
 8005048:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	4a7c      	ldr	r2, [pc, #496]	@ (8005240 <HAL_RCC_ClockConfig+0x268>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d93f      	bls.n	80050d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005052:	4b7a      	ldr	r3, [pc, #488]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005066:	2b00      	cmp	r3, #0
 8005068:	d033      	beq.n	80050d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800506e:	2b00      	cmp	r3, #0
 8005070:	d12f      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005072:	4b72      	ldr	r3, [pc, #456]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800507a:	4a70      	ldr	r2, [pc, #448]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 800507c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005080:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005082:	2380      	movs	r3, #128	@ 0x80
 8005084:	617b      	str	r3, [r7, #20]
 8005086:	e024      	b.n	80050d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d107      	bne.n	80050a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005090:	4b6a      	ldr	r3, [pc, #424]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d109      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e0c6      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a0:	4b66      	ldr	r3, [pc, #408]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e0be      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80050b0:	f000 f8ce 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 80050b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	4a61      	ldr	r2, [pc, #388]	@ (8005240 <HAL_RCC_ClockConfig+0x268>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d909      	bls.n	80050d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050be:	4b5f      	ldr	r3, [pc, #380]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80050c6:	4a5d      	ldr	r2, [pc, #372]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80050c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80050ce:	2380      	movs	r3, #128	@ 0x80
 80050d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b5a      	ldr	r3, [pc, #360]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4957      	ldr	r1, [pc, #348]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e4:	f7fd f92e 	bl	8002344 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fd f92a 	bl	8002344 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e095      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b4e      	ldr	r3, [pc, #312]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d023      	beq.n	8005168 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800512c:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a42      	ldr	r2, [pc, #264]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005132:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005136:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005144:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800514c:	4a3b      	ldr	r2, [pc, #236]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 800514e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005152:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005154:	4b39      	ldr	r3, [pc, #228]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	4936      	ldr	r1, [pc, #216]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
 8005166:	e008      	b.n	800517a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b80      	cmp	r3, #128	@ 0x80
 800516c:	d105      	bne.n	800517a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800516e:	4b33      	ldr	r3, [pc, #204]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	4a32      	ldr	r2, [pc, #200]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 8005174:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005178:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800517a:	4b2f      	ldr	r3, [pc, #188]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d21d      	bcs.n	80051c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005188:	4b2b      	ldr	r3, [pc, #172]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f023 020f 	bic.w	r2, r3, #15
 8005190:	4929      	ldr	r1, [pc, #164]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005198:	f7fd f8d4 	bl	8002344 <HAL_GetTick>
 800519c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800519e:	e00a      	b.n	80051b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a0:	f7fd f8d0 	bl	8002344 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e03b      	b.n	800522e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051b6:	4b20      	ldr	r3, [pc, #128]	@ (8005238 <HAL_RCC_ClockConfig+0x260>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 030f 	and.w	r3, r3, #15
 80051be:	683a      	ldr	r2, [r7, #0]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d1ed      	bne.n	80051a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d008      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051d0:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	4917      	ldr	r1, [pc, #92]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0308 	and.w	r3, r3, #8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d009      	beq.n	8005202 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ee:	4b13      	ldr	r3, [pc, #76]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	490f      	ldr	r1, [pc, #60]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005202:	f000 f825 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8005206:	4602      	mov	r2, r0
 8005208:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <HAL_RCC_ClockConfig+0x264>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	490c      	ldr	r1, [pc, #48]	@ (8005244 <HAL_RCC_ClockConfig+0x26c>)
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a0a      	ldr	r2, [pc, #40]	@ (8005248 <HAL_RCC_ClockConfig+0x270>)
 8005220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x274>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fd f840 	bl	80022ac <HAL_InitTick>
 800522c:	4603      	mov	r3, r0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3718      	adds	r7, #24
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40022000 	.word	0x40022000
 800523c:	40021000 	.word	0x40021000
 8005240:	04c4b400 	.word	0x04c4b400
 8005244:	080083f4 	.word	0x080083f4
 8005248:	20000038 	.word	0x20000038
 800524c:	2000003c 	.word	0x2000003c

08005250 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005256:	4b2c      	ldr	r3, [pc, #176]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
 800525e:	2b04      	cmp	r3, #4
 8005260:	d102      	bne.n	8005268 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005262:	4b2a      	ldr	r3, [pc, #168]	@ (800530c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e047      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005268:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b08      	cmp	r3, #8
 8005272:	d102      	bne.n	800527a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005274:	4b26      	ldr	r3, [pc, #152]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	e03e      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800527a:	4b23      	ldr	r3, [pc, #140]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	f003 030c 	and.w	r3, r3, #12
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d136      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005286:	4b20      	ldr	r3, [pc, #128]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	091b      	lsrs	r3, r3, #4
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	3301      	adds	r3, #1
 800529c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005310 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ac:	4a16      	ldr	r2, [pc, #88]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ae:	68d2      	ldr	r2, [r2, #12]
 80052b0:	0a12      	lsrs	r2, r2, #8
 80052b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	617b      	str	r3, [r7, #20]
      break;
 80052bc:	e00c      	b.n	80052d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80052be:	4a13      	ldr	r2, [pc, #76]	@ (800530c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	4a10      	ldr	r2, [pc, #64]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052c8:	68d2      	ldr	r2, [r2, #12]
 80052ca:	0a12      	lsrs	r2, r2, #8
 80052cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]
      break;
 80052d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005308 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	0e5b      	lsrs	r3, r3, #25
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	3301      	adds	r3, #1
 80052e4:	005b      	lsls	r3, r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e001      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80052f8:	693b      	ldr	r3, [r7, #16]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
 8005306:	bf00      	nop
 8005308:	40021000 	.word	0x40021000
 800530c:	00f42400 	.word	0x00f42400
 8005310:	016e3600 	.word	0x016e3600

08005314 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005314:	b480      	push	{r7}
 8005316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005318:	4b03      	ldr	r3, [pc, #12]	@ (8005328 <HAL_RCC_GetHCLKFreq+0x14>)
 800531a:	681b      	ldr	r3, [r3, #0]
}
 800531c:	4618      	mov	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	20000038 	.word	0x20000038

0800532c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005330:	f7ff fff0 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0a1b      	lsrs	r3, r3, #8
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4904      	ldr	r1, [pc, #16]	@ (8005354 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40021000 	.word	0x40021000
 8005354:	08008404 	.word	0x08008404

08005358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800535c:	f7ff ffda 	bl	8005314 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b06      	ldr	r3, [pc, #24]	@ (800537c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0adb      	lsrs	r3, r3, #11
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4904      	ldr	r1, [pc, #16]	@ (8005380 <HAL_RCC_GetPCLK2Freq+0x28>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	f003 031f 	and.w	r3, r3, #31
 8005374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40021000 	.word	0x40021000
 8005380:	08008404 	.word	0x08008404

08005384 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800538a:	4b1e      	ldr	r3, [pc, #120]	@ (8005404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	091b      	lsrs	r3, r3, #4
 800539a:	f003 030f 	and.w	r3, r3, #15
 800539e:	3301      	adds	r3, #1
 80053a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d10c      	bne.n	80053c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053a8:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b0:	4a14      	ldr	r2, [pc, #80]	@ (8005404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b2:	68d2      	ldr	r2, [r2, #12]
 80053b4:	0a12      	lsrs	r2, r2, #8
 80053b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053ba:	fb02 f303 	mul.w	r3, r2, r3
 80053be:	617b      	str	r3, [r7, #20]
    break;
 80053c0:	e00c      	b.n	80053dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053c2:	4a12      	ldr	r2, [pc, #72]	@ (800540c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	4a0e      	ldr	r2, [pc, #56]	@ (8005404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053cc:	68d2      	ldr	r2, [r2, #12]
 80053ce:	0a12      	lsrs	r2, r2, #8
 80053d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053d4:	fb02 f303 	mul.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]
    break;
 80053da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053dc:	4b09      	ldr	r3, [pc, #36]	@ (8005404 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	0e5b      	lsrs	r3, r3, #25
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	3301      	adds	r3, #1
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053f6:	687b      	ldr	r3, [r7, #4]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40021000 	.word	0x40021000
 8005408:	016e3600 	.word	0x016e3600
 800540c:	00f42400 	.word	0x00f42400

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8098 	beq.w	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800542e:	2300      	movs	r3, #0
 8005430:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005432:	4b43      	ldr	r3, [pc, #268]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d10d      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800543e:	4b40      	ldr	r3, [pc, #256]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005442:	4a3f      	ldr	r2, [pc, #252]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005448:	6593      	str	r3, [r2, #88]	@ 0x58
 800544a:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800544c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800544e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005452:	60bb      	str	r3, [r7, #8]
 8005454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005456:	2301      	movs	r3, #1
 8005458:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800545a:	4b3a      	ldr	r3, [pc, #232]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a39      	ldr	r2, [pc, #228]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005460:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005464:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005466:	f7fc ff6d 	bl	8002344 <HAL_GetTick>
 800546a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546c:	e009      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546e:	f7fc ff69 	bl	8002344 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d902      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	74fb      	strb	r3, [r7, #19]
        break;
 8005480:	e005      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005482:	4b30      	ldr	r3, [pc, #192]	@ (8005544 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0ef      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d159      	bne.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005494:	4b2a      	ldr	r3, [pc, #168]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800549a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800549e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d01e      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d019      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054b0:	4b23      	ldr	r3, [pc, #140]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054bc:	4b20      	ldr	r3, [pc, #128]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054c2:	4a1f      	ldr	r2, [pc, #124]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054d2:	4a1b      	ldr	r2, [pc, #108]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054dc:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d016      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ee:	f7fc ff29 	bl	8002344 <HAL_GetTick>
 80054f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f4:	e00b      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054f6:	f7fc ff25 	bl	8002344 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005504:	4293      	cmp	r3, r2
 8005506:	d902      	bls.n	800550e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	74fb      	strb	r3, [r7, #19]
            break;
 800550c:	e006      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800550e:	4b0c      	ldr	r3, [pc, #48]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0ec      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005522:	4b07      	ldr	r3, [pc, #28]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005528:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005530:	4903      	ldr	r1, [pc, #12]	@ (8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005538:	e008      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800553a:	7cfb      	ldrb	r3, [r7, #19]
 800553c:	74bb      	strb	r3, [r7, #18]
 800553e:	e005      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005540:	40021000 	.word	0x40021000
 8005544:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005548:	7cfb      	ldrb	r3, [r7, #19]
 800554a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800554c:	7c7b      	ldrb	r3, [r7, #17]
 800554e:	2b01      	cmp	r3, #1
 8005550:	d105      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005552:	4ba7      	ldr	r3, [pc, #668]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005556:	4aa6      	ldr	r2, [pc, #664]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800555c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800556a:	4ba1      	ldr	r3, [pc, #644]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005570:	f023 0203 	bic.w	r2, r3, #3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	499d      	ldr	r1, [pc, #628]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800558c:	4b98      	ldr	r3, [pc, #608]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005592:	f023 020c 	bic.w	r2, r3, #12
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	4995      	ldr	r1, [pc, #596]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055ae:	4b90      	ldr	r3, [pc, #576]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	498c      	ldr	r1, [pc, #560]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0308 	and.w	r3, r3, #8
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055d0:	4b87      	ldr	r3, [pc, #540]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	4984      	ldr	r1, [pc, #528]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055f2:	4b7f      	ldr	r3, [pc, #508]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	497b      	ldr	r1, [pc, #492]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005614:	4b76      	ldr	r3, [pc, #472]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800561a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	4973      	ldr	r1, [pc, #460]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005636:	4b6e      	ldr	r3, [pc, #440]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	496a      	ldr	r1, [pc, #424]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005646:	4313      	orrs	r3, r2
 8005648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005658:	4b65      	ldr	r3, [pc, #404]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800565a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800565e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	4962      	ldr	r1, [pc, #392]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005668:	4313      	orrs	r3, r2
 800566a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800567a:	4b5d      	ldr	r3, [pc, #372]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	4959      	ldr	r1, [pc, #356]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00a      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800569c:	4b54      	ldr	r3, [pc, #336]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800569e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80056a2:	f023 0203 	bic.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056aa:	4951      	ldr	r1, [pc, #324]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00a      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056be:	4b4c      	ldr	r3, [pc, #304]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	4948      	ldr	r1, [pc, #288]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d015      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056e0:	4b43      	ldr	r3, [pc, #268]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	4940      	ldr	r1, [pc, #256]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fe:	d105      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005700:	4b3b      	ldr	r3, [pc, #236]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4a3a      	ldr	r2, [pc, #232]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800570a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005714:	2b00      	cmp	r3, #0
 8005716:	d015      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005718:	4b35      	ldr	r3, [pc, #212]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800571e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005726:	4932      	ldr	r1, [pc, #200]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005728:	4313      	orrs	r3, r2
 800572a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005736:	d105      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005738:	4b2d      	ldr	r3, [pc, #180]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	4a2c      	ldr	r2, [pc, #176]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005742:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d015      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005750:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005756:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	4924      	ldr	r1, [pc, #144]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005760:	4313      	orrs	r3, r2
 8005762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800576e:	d105      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005770:	4b1f      	ldr	r3, [pc, #124]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a1e      	ldr	r2, [pc, #120]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005776:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800577a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d015      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005788:	4b19      	ldr	r3, [pc, #100]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800578e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	4916      	ldr	r1, [pc, #88]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057a6:	d105      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057a8:	4b11      	ldr	r3, [pc, #68]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	4a10      	ldr	r2, [pc, #64]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d019      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057c0:	4b0b      	ldr	r3, [pc, #44]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	4908      	ldr	r1, [pc, #32]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057de:	d109      	bne.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057e0:	4b03      	ldr	r3, [pc, #12]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a02      	ldr	r2, [pc, #8]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057ea:	60d3      	str	r3, [r2, #12]
 80057ec:	e002      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d015      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005800:	4b29      	ldr	r3, [pc, #164]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005806:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800580e:	4926      	ldr	r1, [pc, #152]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800581e:	d105      	bne.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005820:	4b21      	ldr	r3, [pc, #132]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a20      	ldr	r2, [pc, #128]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005826:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800582a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d015      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005838:	4b1b      	ldr	r3, [pc, #108]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005846:	4918      	ldr	r1, [pc, #96]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005848:	4313      	orrs	r3, r2
 800584a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005858:	4b13      	ldr	r3, [pc, #76]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	4a12      	ldr	r2, [pc, #72]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005862:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d015      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005870:	4b0d      	ldr	r3, [pc, #52]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005872:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005876:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	490a      	ldr	r1, [pc, #40]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800588e:	d105      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005890:	4b05      	ldr	r3, [pc, #20]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4a04      	ldr	r2, [pc, #16]	@ (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005896:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800589a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800589c:	7cbb      	ldrb	r3, [r7, #18]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3718      	adds	r7, #24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40021000 	.word	0x40021000

080058ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e049      	b.n	8005952 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc faf6 	bl	8001ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2202      	movs	r2, #2
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f000 ff98 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e049      	b.n	8005a00 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f841 	bl	8005a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2202      	movs	r2, #2
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	3304      	adds	r3, #4
 8005996:	4619      	mov	r1, r3
 8005998:	4610      	mov	r0, r2
 800599a:	f000 ff41 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d109      	bne.n	8005a40 <HAL_TIM_PWM_Start+0x24>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	bf14      	ite	ne
 8005a38:	2301      	movne	r3, #1
 8005a3a:	2300      	moveq	r3, #0
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	e03c      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d109      	bne.n	8005a5a <HAL_TIM_PWM_Start+0x3e>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	bf14      	ite	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	2300      	moveq	r3, #0
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	e02f      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d109      	bne.n	8005a74 <HAL_TIM_PWM_Start+0x58>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	e022      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b0c      	cmp	r3, #12
 8005a78:	d109      	bne.n	8005a8e <HAL_TIM_PWM_Start+0x72>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	e015      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b10      	cmp	r3, #16
 8005a92:	d109      	bne.n	8005aa8 <HAL_TIM_PWM_Start+0x8c>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	bf14      	ite	ne
 8005aa0:	2301      	movne	r3, #1
 8005aa2:	2300      	moveq	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	e008      	b.n	8005aba <HAL_TIM_PWM_Start+0x9e>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	bf14      	ite	ne
 8005ab4:	2301      	movne	r3, #1
 8005ab6:	2300      	moveq	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d001      	beq.n	8005ac2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e0a6      	b.n	8005c10 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_Start+0xb6>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ad0:	e023      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	d104      	bne.n	8005ae2 <HAL_TIM_PWM_Start+0xc6>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2202      	movs	r2, #2
 8005adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ae0:	e01b      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d104      	bne.n	8005af2 <HAL_TIM_PWM_Start+0xd6>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005af0:	e013      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_PWM_Start+0xe6>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b00:	e00b      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_PWM_Start+0xf6>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b10:	e003      	b.n	8005b1a <HAL_TIM_PWM_Start+0xfe>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 fc20 	bl	8007368 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c18 <HAL_TIM_PWM_Start+0x1fc>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d018      	beq.n	8005b64 <HAL_TIM_PWM_Start+0x148>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a39      	ldr	r2, [pc, #228]	@ (8005c1c <HAL_TIM_PWM_Start+0x200>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d013      	beq.n	8005b64 <HAL_TIM_PWM_Start+0x148>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a37      	ldr	r2, [pc, #220]	@ (8005c20 <HAL_TIM_PWM_Start+0x204>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d00e      	beq.n	8005b64 <HAL_TIM_PWM_Start+0x148>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a36      	ldr	r2, [pc, #216]	@ (8005c24 <HAL_TIM_PWM_Start+0x208>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d009      	beq.n	8005b64 <HAL_TIM_PWM_Start+0x148>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a34      	ldr	r2, [pc, #208]	@ (8005c28 <HAL_TIM_PWM_Start+0x20c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d004      	beq.n	8005b64 <HAL_TIM_PWM_Start+0x148>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a33      	ldr	r2, [pc, #204]	@ (8005c2c <HAL_TIM_PWM_Start+0x210>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d101      	bne.n	8005b68 <HAL_TIM_PWM_Start+0x14c>
 8005b64:	2301      	movs	r3, #1
 8005b66:	e000      	b.n	8005b6a <HAL_TIM_PWM_Start+0x14e>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b7c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a25      	ldr	r2, [pc, #148]	@ (8005c18 <HAL_TIM_PWM_Start+0x1fc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b90:	d01d      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a26      	ldr	r2, [pc, #152]	@ (8005c30 <HAL_TIM_PWM_Start+0x214>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a24      	ldr	r2, [pc, #144]	@ (8005c34 <HAL_TIM_PWM_Start+0x218>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a23      	ldr	r2, [pc, #140]	@ (8005c38 <HAL_TIM_PWM_Start+0x21c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a19      	ldr	r2, [pc, #100]	@ (8005c1c <HAL_TIM_PWM_Start+0x200>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <HAL_TIM_PWM_Start+0x204>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIM_PWM_Start+0x1b2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <HAL_TIM_PWM_Start+0x210>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d115      	bne.n	8005bfa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	4b19      	ldr	r3, [pc, #100]	@ (8005c3c <HAL_TIM_PWM_Start+0x220>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b06      	cmp	r3, #6
 8005bde:	d015      	beq.n	8005c0c <HAL_TIM_PWM_Start+0x1f0>
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005be6:	d011      	beq.n	8005c0c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf8:	e008      	b.n	8005c0c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0201 	orr.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	e000      	b.n	8005c0e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800
 8005c2c:	40015000 	.word	0x40015000
 8005c30:	40000400 	.word	0x40000400
 8005c34:	40000800 	.word	0x40000800
 8005c38:	40000c00 	.word	0x40000c00
 8005c3c:	00010007 	.word	0x00010007

08005c40 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e049      	b.n	8005ce6 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f841 	bl	8005cee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f000 fdce 	bl	8006820 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_IC_Start_IT+0x1e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	e023      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x66>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_IC_Start_IT+0x2e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	e01b      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x66>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_IC_Start_IT+0x3e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	e013      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x66>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d104      	bne.n	8005d52 <HAL_TIM_IC_Start_IT+0x4e>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	e00b      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x66>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b10      	cmp	r3, #16
 8005d56:	d104      	bne.n	8005d62 <HAL_TIM_IC_Start_IT+0x5e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	e003      	b.n	8005d6a <HAL_TIM_IC_Start_IT+0x66>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d104      	bne.n	8005d7c <HAL_TIM_IC_Start_IT+0x78>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	e013      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0xa0>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d104      	bne.n	8005d8c <HAL_TIM_IC_Start_IT+0x88>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	e00b      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0xa0>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d104      	bne.n	8005d9c <HAL_TIM_IC_Start_IT+0x98>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e003      	b.n	8005da4 <HAL_TIM_IC_Start_IT+0xa0>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005da6:	7bbb      	ldrb	r3, [r7, #14]
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d102      	bne.n	8005db2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005dac:	7b7b      	ldrb	r3, [r7, #13]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d001      	beq.n	8005db6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e0e2      	b.n	8005f7c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_IC_Start_IT+0xc2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dc4:	e023      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x10a>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_IC_Start_IT+0xd2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2202      	movs	r2, #2
 8005dd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dd4:	e01b      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x10a>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_IC_Start_IT+0xe2>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de4:	e013      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x10a>
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b0c      	cmp	r3, #12
 8005dea:	d104      	bne.n	8005df6 <HAL_TIM_IC_Start_IT+0xf2>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005df4:	e00b      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x10a>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b10      	cmp	r3, #16
 8005dfa:	d104      	bne.n	8005e06 <HAL_TIM_IC_Start_IT+0x102>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2202      	movs	r2, #2
 8005e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e04:	e003      	b.n	8005e0e <HAL_TIM_IC_Start_IT+0x10a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2202      	movs	r2, #2
 8005e0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <HAL_TIM_IC_Start_IT+0x11a>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e1c:	e013      	b.n	8005e46 <HAL_TIM_IC_Start_IT+0x142>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	2b04      	cmp	r3, #4
 8005e22:	d104      	bne.n	8005e2e <HAL_TIM_IC_Start_IT+0x12a>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e2c:	e00b      	b.n	8005e46 <HAL_TIM_IC_Start_IT+0x142>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d104      	bne.n	8005e3e <HAL_TIM_IC_Start_IT+0x13a>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e3c:	e003      	b.n	8005e46 <HAL_TIM_IC_Start_IT+0x142>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2202      	movs	r2, #2
 8005e42:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b0c      	cmp	r3, #12
 8005e4a:	d841      	bhi.n	8005ed0 <HAL_TIM_IC_Start_IT+0x1cc>
 8005e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e54 <HAL_TIM_IC_Start_IT+0x150>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e89 	.word	0x08005e89
 8005e58:	08005ed1 	.word	0x08005ed1
 8005e5c:	08005ed1 	.word	0x08005ed1
 8005e60:	08005ed1 	.word	0x08005ed1
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005ed1 	.word	0x08005ed1
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	08005ed1 	.word	0x08005ed1
 8005e74:	08005ead 	.word	0x08005ead
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ed1 	.word	0x08005ed1
 8005e80:	08005ed1 	.word	0x08005ed1
 8005e84:	08005ebf 	.word	0x08005ebf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f042 0202 	orr.w	r2, r2, #2
 8005e96:	60da      	str	r2, [r3, #12]
      break;
 8005e98:	e01d      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0204 	orr.w	r2, r2, #4
 8005ea8:	60da      	str	r2, [r3, #12]
      break;
 8005eaa:	e014      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0208 	orr.w	r2, r2, #8
 8005eba:	60da      	str	r2, [r3, #12]
      break;
 8005ebc:	e00b      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f042 0210 	orr.w	r2, r2, #16
 8005ecc:	60da      	str	r2, [r3, #12]
      break;
 8005ece:	e002      	b.n	8005ed6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ed4:	bf00      	nop
  }

  if (status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d14e      	bne.n	8005f7a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	6839      	ldr	r1, [r7, #0]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f001 fa3f 	bl	8007368 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a25      	ldr	r2, [pc, #148]	@ (8005f84 <HAL_TIM_IC_Start_IT+0x280>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d022      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005efc:	d01d      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a21      	ldr	r2, [pc, #132]	@ (8005f88 <HAL_TIM_IC_Start_IT+0x284>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d018      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f8c <HAL_TIM_IC_Start_IT+0x288>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d013      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a1e      	ldr	r2, [pc, #120]	@ (8005f90 <HAL_TIM_IC_Start_IT+0x28c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d00e      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1c      	ldr	r2, [pc, #112]	@ (8005f94 <HAL_TIM_IC_Start_IT+0x290>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d009      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f98 <HAL_TIM_IC_Start_IT+0x294>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d004      	beq.n	8005f3a <HAL_TIM_IC_Start_IT+0x236>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a19      	ldr	r2, [pc, #100]	@ (8005f9c <HAL_TIM_IC_Start_IT+0x298>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d115      	bne.n	8005f66 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	4b17      	ldr	r3, [pc, #92]	@ (8005fa0 <HAL_TIM_IC_Start_IT+0x29c>)
 8005f42:	4013      	ands	r3, r2
 8005f44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b06      	cmp	r3, #6
 8005f4a:	d015      	beq.n	8005f78 <HAL_TIM_IC_Start_IT+0x274>
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f52:	d011      	beq.n	8005f78 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f64:	e008      	b.n	8005f78 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f042 0201 	orr.w	r2, r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	e000      	b.n	8005f7a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40000400 	.word	0x40000400
 8005f8c:	40000800 	.word	0x40000800
 8005f90:	40000c00 	.word	0x40000c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40014000 	.word	0x40014000
 8005f9c:	40015000 	.word	0x40015000
 8005fa0:	00010007 	.word	0x00010007

08005fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d020      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d01b      	beq.n	8006008 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0202 	mvn.w	r2, #2
 8005fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f003 0303 	and.w	r3, r3, #3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d003      	beq.n	8005ff6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fb f846 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8005ff4:	e005      	b.n	8006002 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fbf4 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fbfb 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d020      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01b      	beq.n	8006054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f06f 0204 	mvn.w	r2, #4
 8006024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fb f820 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 8006040:	e005      	b.n	800604e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fbce 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fbd5 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0308 	and.w	r3, r3, #8
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0208 	mvn.w	r2, #8
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	69db      	ldr	r3, [r3, #28]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fa fffa 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fba8 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fbaf 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0310 	and.w	r3, r3, #16
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0210 	mvn.w	r2, #16
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2208      	movs	r2, #8
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fa ffd4 	bl	8001080 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fb82 	bl	80067e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 fb89 	bl	80067f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fb60 	bl	80067d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006116:	2b00      	cmp	r3, #0
 8006118:	d104      	bne.n	8006124 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00c      	beq.n	800613e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d007      	beq.n	800613e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fa6f 	bl	800761c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800615a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f001 fa67 	bl	8007630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d00c      	beq.n	8006186 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800617e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 fb43 	bl	800680c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00c      	beq.n	80061aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f003 0320 	and.w	r3, r3, #32
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f06f 0220 	mvn.w	r2, #32
 80061a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f001 fa2f 	bl	8007608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00c      	beq.n	80061ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d007      	beq.n	80061ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f001 fa3b 	bl	8007644 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00c      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d007      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80061ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f001 fa33 	bl	8007658 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d007      	beq.n	8006216 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800620e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f001 fa2b 	bl	800766c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00c      	beq.n	800623a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fa23 	bl	8007680 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIM_IC_ConfigChannel+0x1e>
 800625c:	2302      	movs	r3, #2
 800625e:	e088      	b.n	8006372 <HAL_TIM_IC_ConfigChannel+0x130>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d11b      	bne.n	80062a6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800627e:	f000 fead 	bl	8006fdc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	699a      	ldr	r2, [r3, #24]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f022 020c 	bic.w	r2, r2, #12
 8006290:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6999      	ldr	r1, [r3, #24]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	430a      	orrs	r2, r1
 80062a2:	619a      	str	r2, [r3, #24]
 80062a4:	e060      	b.n	8006368 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2b04      	cmp	r3, #4
 80062aa:	d11c      	bne.n	80062e6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80062bc:	f000 ff31 	bl	8007122 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80062ce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6999      	ldr	r1, [r3, #24]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	021a      	lsls	r2, r3, #8
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	619a      	str	r2, [r3, #24]
 80062e4:	e040      	b.n	8006368 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b08      	cmp	r3, #8
 80062ea:	d11b      	bne.n	8006324 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80062fc:	f000 ff7e 	bl	80071fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69da      	ldr	r2, [r3, #28]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 020c 	bic.w	r2, r2, #12
 800630e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69d9      	ldr	r1, [r3, #28]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	61da      	str	r2, [r3, #28]
 8006322:	e021      	b.n	8006368 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b0c      	cmp	r3, #12
 8006328:	d11c      	bne.n	8006364 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800633a:	f000 ff9b 	bl	8007274 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800634c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69d9      	ldr	r1, [r3, #28]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	021a      	lsls	r2, r3, #8
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	61da      	str	r2, [r3, #28]
 8006362:	e001      	b.n	8006368 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006370:	7dfb      	ldrb	r3, [r7, #23]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006396:	2302      	movs	r3, #2
 8006398:	e0ff      	b.n	800659a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2b14      	cmp	r3, #20
 80063a6:	f200 80f0 	bhi.w	800658a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80063aa:	a201      	add	r2, pc, #4	@ (adr r2, 80063b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	08006405 	.word	0x08006405
 80063b4:	0800658b 	.word	0x0800658b
 80063b8:	0800658b 	.word	0x0800658b
 80063bc:	0800658b 	.word	0x0800658b
 80063c0:	08006445 	.word	0x08006445
 80063c4:	0800658b 	.word	0x0800658b
 80063c8:	0800658b 	.word	0x0800658b
 80063cc:	0800658b 	.word	0x0800658b
 80063d0:	08006487 	.word	0x08006487
 80063d4:	0800658b 	.word	0x0800658b
 80063d8:	0800658b 	.word	0x0800658b
 80063dc:	0800658b 	.word	0x0800658b
 80063e0:	080064c7 	.word	0x080064c7
 80063e4:	0800658b 	.word	0x0800658b
 80063e8:	0800658b 	.word	0x0800658b
 80063ec:	0800658b 	.word	0x0800658b
 80063f0:	08006509 	.word	0x08006509
 80063f4:	0800658b 	.word	0x0800658b
 80063f8:	0800658b 	.word	0x0800658b
 80063fc:	0800658b 	.word	0x0800658b
 8006400:	08006549 	.word	0x08006549
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	4618      	mov	r0, r3
 800640c:	f000 fabc 	bl	8006988 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0208 	orr.w	r2, r2, #8
 800641e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0204 	bic.w	r2, r2, #4
 800642e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	6999      	ldr	r1, [r3, #24]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	430a      	orrs	r2, r1
 8006440:	619a      	str	r2, [r3, #24]
      break;
 8006442:	e0a5      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fb36 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699a      	ldr	r2, [r3, #24]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800645e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800646e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	021a      	lsls	r2, r3, #8
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	619a      	str	r2, [r3, #24]
      break;
 8006484:	e084      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	4618      	mov	r0, r3
 800648e:	f000 fba9 	bl	8006be4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	69da      	ldr	r2, [r3, #28]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f042 0208 	orr.w	r2, r2, #8
 80064a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f022 0204 	bic.w	r2, r2, #4
 80064b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69d9      	ldr	r1, [r3, #28]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	61da      	str	r2, [r3, #28]
      break;
 80064c4:	e064      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68b9      	ldr	r1, [r7, #8]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fc1b 	bl	8006d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69da      	ldr	r2, [r3, #28]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	69da      	ldr	r2, [r3, #28]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69d9      	ldr	r1, [r3, #28]
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	691b      	ldr	r3, [r3, #16]
 80064fc:	021a      	lsls	r2, r3, #8
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	61da      	str	r2, [r3, #28]
      break;
 8006506:	e043      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fc8e 	bl	8006e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0208 	orr.w	r2, r2, #8
 8006522:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0204 	bic.w	r2, r2, #4
 8006532:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	691a      	ldr	r2, [r3, #16]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006546:	e023      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68b9      	ldr	r1, [r7, #8]
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fcd8 	bl	8006f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006562:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006572:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	021a      	lsls	r2, r3, #8
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006588:	e002      	b.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	75fb      	strb	r3, [r7, #23]
      break;
 800658e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006598:	7dfb      	ldrb	r3, [r7, #23]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3718      	adds	r7, #24
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop

080065a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIM_ConfigClockSource+0x1c>
 80065bc:	2302      	movs	r3, #2
 80065be:	e0f6      	b.n	80067ae <HAL_TIM_ConfigClockSource+0x20a>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80065de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80065e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a6f      	ldr	r2, [pc, #444]	@ (80067b8 <HAL_TIM_ConfigClockSource+0x214>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	f000 80c1 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006600:	4a6d      	ldr	r2, [pc, #436]	@ (80067b8 <HAL_TIM_ConfigClockSource+0x214>)
 8006602:	4293      	cmp	r3, r2
 8006604:	f200 80c6 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006608:	4a6c      	ldr	r2, [pc, #432]	@ (80067bc <HAL_TIM_ConfigClockSource+0x218>)
 800660a:	4293      	cmp	r3, r2
 800660c:	f000 80b9 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006610:	4a6a      	ldr	r2, [pc, #424]	@ (80067bc <HAL_TIM_ConfigClockSource+0x218>)
 8006612:	4293      	cmp	r3, r2
 8006614:	f200 80be 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006618:	4a69      	ldr	r2, [pc, #420]	@ (80067c0 <HAL_TIM_ConfigClockSource+0x21c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	f000 80b1 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006620:	4a67      	ldr	r2, [pc, #412]	@ (80067c0 <HAL_TIM_ConfigClockSource+0x21c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	f200 80b6 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006628:	4a66      	ldr	r2, [pc, #408]	@ (80067c4 <HAL_TIM_ConfigClockSource+0x220>)
 800662a:	4293      	cmp	r3, r2
 800662c:	f000 80a9 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006630:	4a64      	ldr	r2, [pc, #400]	@ (80067c4 <HAL_TIM_ConfigClockSource+0x220>)
 8006632:	4293      	cmp	r3, r2
 8006634:	f200 80ae 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006638:	4a63      	ldr	r2, [pc, #396]	@ (80067c8 <HAL_TIM_ConfigClockSource+0x224>)
 800663a:	4293      	cmp	r3, r2
 800663c:	f000 80a1 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006640:	4a61      	ldr	r2, [pc, #388]	@ (80067c8 <HAL_TIM_ConfigClockSource+0x224>)
 8006642:	4293      	cmp	r3, r2
 8006644:	f200 80a6 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006648:	4a60      	ldr	r2, [pc, #384]	@ (80067cc <HAL_TIM_ConfigClockSource+0x228>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f000 8099 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006650:	4a5e      	ldr	r2, [pc, #376]	@ (80067cc <HAL_TIM_ConfigClockSource+0x228>)
 8006652:	4293      	cmp	r3, r2
 8006654:	f200 809e 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006658:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800665c:	f000 8091 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006660:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006664:	f200 8096 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006668:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666c:	f000 8089 	beq.w	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 8006670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006674:	f200 808e 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800667c:	d03e      	beq.n	80066fc <HAL_TIM_ConfigClockSource+0x158>
 800667e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006682:	f200 8087 	bhi.w	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800668a:	f000 8086 	beq.w	800679a <HAL_TIM_ConfigClockSource+0x1f6>
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006692:	d87f      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 8006694:	2b70      	cmp	r3, #112	@ 0x70
 8006696:	d01a      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x12a>
 8006698:	2b70      	cmp	r3, #112	@ 0x70
 800669a:	d87b      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 800669c:	2b60      	cmp	r3, #96	@ 0x60
 800669e:	d050      	beq.n	8006742 <HAL_TIM_ConfigClockSource+0x19e>
 80066a0:	2b60      	cmp	r3, #96	@ 0x60
 80066a2:	d877      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 80066a4:	2b50      	cmp	r3, #80	@ 0x50
 80066a6:	d03c      	beq.n	8006722 <HAL_TIM_ConfigClockSource+0x17e>
 80066a8:	2b50      	cmp	r3, #80	@ 0x50
 80066aa:	d873      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 80066ac:	2b40      	cmp	r3, #64	@ 0x40
 80066ae:	d058      	beq.n	8006762 <HAL_TIM_ConfigClockSource+0x1be>
 80066b0:	2b40      	cmp	r3, #64	@ 0x40
 80066b2:	d86f      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 80066b4:	2b30      	cmp	r3, #48	@ 0x30
 80066b6:	d064      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 80066b8:	2b30      	cmp	r3, #48	@ 0x30
 80066ba:	d86b      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 80066bc:	2b20      	cmp	r3, #32
 80066be:	d060      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	d867      	bhi.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d05c      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 80066c8:	2b10      	cmp	r3, #16
 80066ca:	d05a      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0x1de>
 80066cc:	e062      	b.n	8006794 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066de:	f000 fe23 	bl	8007328 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80066f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	609a      	str	r2, [r3, #8]
      break;
 80066fa:	e04f      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800670c:	f000 fe0c 	bl	8007328 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689a      	ldr	r2, [r3, #8]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800671e:	609a      	str	r2, [r3, #8]
      break;
 8006720:	e03c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800672e:	461a      	mov	r2, r3
 8006730:	f000 fcc8 	bl	80070c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2150      	movs	r1, #80	@ 0x50
 800673a:	4618      	mov	r0, r3
 800673c:	f000 fdd7 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006740:	e02c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800674e:	461a      	mov	r2, r3
 8006750:	f000 fd24 	bl	800719c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2160      	movs	r1, #96	@ 0x60
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fdc7 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006760:	e01c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800676e:	461a      	mov	r2, r3
 8006770:	f000 fca8 	bl	80070c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2140      	movs	r1, #64	@ 0x40
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fdb7 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006780:	e00c      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4619      	mov	r1, r3
 800678c:	4610      	mov	r0, r2
 800678e:	f000 fdae 	bl	80072ee <TIM_ITRx_SetConfig>
      break;
 8006792:	e003      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	73fb      	strb	r3, [r7, #15]
      break;
 8006798:	e000      	b.n	800679c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800679a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	00100070 	.word	0x00100070
 80067bc:	00100060 	.word	0x00100060
 80067c0:	00100050 	.word	0x00100050
 80067c4:	00100040 	.word	0x00100040
 80067c8:	00100030 	.word	0x00100030
 80067cc:	00100020 	.word	0x00100020

080067d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006814:	bf00      	nop
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a4c      	ldr	r2, [pc, #304]	@ (8006964 <TIM_Base_SetConfig+0x144>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d017      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800683e:	d013      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a49      	ldr	r2, [pc, #292]	@ (8006968 <TIM_Base_SetConfig+0x148>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00f      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a48      	ldr	r2, [pc, #288]	@ (800696c <TIM_Base_SetConfig+0x14c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00b      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a47      	ldr	r2, [pc, #284]	@ (8006970 <TIM_Base_SetConfig+0x150>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d007      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a46      	ldr	r2, [pc, #280]	@ (8006974 <TIM_Base_SetConfig+0x154>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d003      	beq.n	8006868 <TIM_Base_SetConfig+0x48>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a45      	ldr	r2, [pc, #276]	@ (8006978 <TIM_Base_SetConfig+0x158>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d108      	bne.n	800687a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800686e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a39      	ldr	r2, [pc, #228]	@ (8006964 <TIM_Base_SetConfig+0x144>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d023      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006888:	d01f      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a36      	ldr	r2, [pc, #216]	@ (8006968 <TIM_Base_SetConfig+0x148>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d01b      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a35      	ldr	r2, [pc, #212]	@ (800696c <TIM_Base_SetConfig+0x14c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d017      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a34      	ldr	r2, [pc, #208]	@ (8006970 <TIM_Base_SetConfig+0x150>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d013      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a33      	ldr	r2, [pc, #204]	@ (8006974 <TIM_Base_SetConfig+0x154>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d00f      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a33      	ldr	r2, [pc, #204]	@ (800697c <TIM_Base_SetConfig+0x15c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d00b      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a32      	ldr	r2, [pc, #200]	@ (8006980 <TIM_Base_SetConfig+0x160>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a31      	ldr	r2, [pc, #196]	@ (8006984 <TIM_Base_SetConfig+0x164>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_Base_SetConfig+0xaa>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006978 <TIM_Base_SetConfig+0x158>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d108      	bne.n	80068dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	4313      	orrs	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a18      	ldr	r2, [pc, #96]	@ (8006964 <TIM_Base_SetConfig+0x144>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d013      	beq.n	8006930 <TIM_Base_SetConfig+0x110>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a1a      	ldr	r2, [pc, #104]	@ (8006974 <TIM_Base_SetConfig+0x154>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00f      	beq.n	8006930 <TIM_Base_SetConfig+0x110>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a1a      	ldr	r2, [pc, #104]	@ (800697c <TIM_Base_SetConfig+0x15c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d00b      	beq.n	8006930 <TIM_Base_SetConfig+0x110>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <TIM_Base_SetConfig+0x160>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d007      	beq.n	8006930 <TIM_Base_SetConfig+0x110>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <TIM_Base_SetConfig+0x164>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_Base_SetConfig+0x110>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <TIM_Base_SetConfig+0x158>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d103      	bne.n	8006938 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	691a      	ldr	r2, [r3, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0301 	and.w	r3, r3, #1
 8006946:	2b01      	cmp	r3, #1
 8006948:	d105      	bne.n	8006956 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	f023 0201 	bic.w	r2, r3, #1
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	611a      	str	r2, [r3, #16]
  }
}
 8006956:	bf00      	nop
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	40012c00 	.word	0x40012c00
 8006968:	40000400 	.word	0x40000400
 800696c:	40000800 	.word	0x40000800
 8006970:	40000c00 	.word	0x40000c00
 8006974:	40013400 	.word	0x40013400
 8006978:	40015000 	.word	0x40015000
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800

08006988 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	f023 0201 	bic.w	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f023 0303 	bic.w	r3, r3, #3
 80069c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f023 0302 	bic.w	r3, r3, #2
 80069d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	4313      	orrs	r3, r2
 80069de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a30      	ldr	r2, [pc, #192]	@ (8006aa4 <TIM_OC1_SetConfig+0x11c>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <TIM_OC1_SetConfig+0x88>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a2f      	ldr	r2, [pc, #188]	@ (8006aa8 <TIM_OC1_SetConfig+0x120>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00f      	beq.n	8006a10 <TIM_OC1_SetConfig+0x88>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a2e      	ldr	r2, [pc, #184]	@ (8006aac <TIM_OC1_SetConfig+0x124>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00b      	beq.n	8006a10 <TIM_OC1_SetConfig+0x88>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a2d      	ldr	r2, [pc, #180]	@ (8006ab0 <TIM_OC1_SetConfig+0x128>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d007      	beq.n	8006a10 <TIM_OC1_SetConfig+0x88>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4a2c      	ldr	r2, [pc, #176]	@ (8006ab4 <TIM_OC1_SetConfig+0x12c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d003      	beq.n	8006a10 <TIM_OC1_SetConfig+0x88>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ab8 <TIM_OC1_SetConfig+0x130>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d10c      	bne.n	8006a2a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f023 0308 	bic.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f023 0304 	bic.w	r3, r3, #4
 8006a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8006aa4 <TIM_OC1_SetConfig+0x11c>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <TIM_OC1_SetConfig+0xd2>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <TIM_OC1_SetConfig+0x120>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_OC1_SetConfig+0xd2>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006aac <TIM_OC1_SetConfig+0x124>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC1_SetConfig+0xd2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <TIM_OC1_SetConfig+0x128>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC1_SetConfig+0xd2>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a19      	ldr	r2, [pc, #100]	@ (8006ab4 <TIM_OC1_SetConfig+0x12c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC1_SetConfig+0xd2>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a18      	ldr	r2, [pc, #96]	@ (8006ab8 <TIM_OC1_SetConfig+0x130>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d111      	bne.n	8006a7e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	699b      	ldr	r3, [r3, #24]
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	40012c00 	.word	0x40012c00
 8006aa8:	40013400 	.word	0x40013400
 8006aac:	40014000 	.word	0x40014000
 8006ab0:	40014400 	.word	0x40014400
 8006ab4:	40014800 	.word	0x40014800
 8006ab8:	40015000 	.word	0x40015000

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	f023 0210 	bic.w	r2, r3, #16
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006aea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	021b      	lsls	r3, r3, #8
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0320 	bic.w	r3, r3, #32
 8006b0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	011b      	lsls	r3, r3, #4
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4313      	orrs	r3, r2
 8006b16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8006bcc <TIM_OC2_SetConfig+0x110>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_OC2_SetConfig+0x74>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a2b      	ldr	r2, [pc, #172]	@ (8006bd0 <TIM_OC2_SetConfig+0x114>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_OC2_SetConfig+0x74>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bd4 <TIM_OC2_SetConfig+0x118>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10d      	bne.n	8006b4c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006bcc <TIM_OC2_SetConfig+0x110>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d013      	beq.n	8006b7c <TIM_OC2_SetConfig+0xc0>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd0 <TIM_OC2_SetConfig+0x114>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d00f      	beq.n	8006b7c <TIM_OC2_SetConfig+0xc0>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bd8 <TIM_OC2_SetConfig+0x11c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00b      	beq.n	8006b7c <TIM_OC2_SetConfig+0xc0>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a1d      	ldr	r2, [pc, #116]	@ (8006bdc <TIM_OC2_SetConfig+0x120>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d007      	beq.n	8006b7c <TIM_OC2_SetConfig+0xc0>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006be0 <TIM_OC2_SetConfig+0x124>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_OC2_SetConfig+0xc0>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a17      	ldr	r2, [pc, #92]	@ (8006bd4 <TIM_OC2_SetConfig+0x118>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d113      	bne.n	8006ba4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40013400 	.word	0x40013400
 8006bd4:	40015000 	.word	0x40015000
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a2b      	ldr	r2, [pc, #172]	@ (8006cf0 <TIM_OC3_SetConfig+0x10c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_OC3_SetConfig+0x72>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a2a      	ldr	r2, [pc, #168]	@ (8006cf4 <TIM_OC3_SetConfig+0x110>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_OC3_SetConfig+0x72>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a29      	ldr	r2, [pc, #164]	@ (8006cf8 <TIM_OC3_SetConfig+0x114>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d10d      	bne.n	8006c72 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	021b      	lsls	r3, r3, #8
 8006c64:	697a      	ldr	r2, [r7, #20]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a1e      	ldr	r2, [pc, #120]	@ (8006cf0 <TIM_OC3_SetConfig+0x10c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d013      	beq.n	8006ca2 <TIM_OC3_SetConfig+0xbe>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8006cf4 <TIM_OC3_SetConfig+0x110>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00f      	beq.n	8006ca2 <TIM_OC3_SetConfig+0xbe>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a1d      	ldr	r2, [pc, #116]	@ (8006cfc <TIM_OC3_SetConfig+0x118>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d00b      	beq.n	8006ca2 <TIM_OC3_SetConfig+0xbe>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8006d00 <TIM_OC3_SetConfig+0x11c>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d007      	beq.n	8006ca2 <TIM_OC3_SetConfig+0xbe>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <TIM_OC3_SetConfig+0x120>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC3_SetConfig+0xbe>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a16      	ldr	r2, [pc, #88]	@ (8006cf8 <TIM_OC3_SetConfig+0x114>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d113      	bne.n	8006cca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40012c00 	.word	0x40012c00
 8006cf4:	40013400 	.word	0x40013400
 8006cf8:	40015000 	.word	0x40015000
 8006cfc:	40014000 	.word	0x40014000
 8006d00:	40014400 	.word	0x40014400
 8006d04:	40014800 	.word	0x40014800

08006d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	031b      	lsls	r3, r3, #12
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2c      	ldr	r2, [pc, #176]	@ (8006e18 <TIM_OC4_SetConfig+0x110>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_OC4_SetConfig+0x74>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a2b      	ldr	r2, [pc, #172]	@ (8006e1c <TIM_OC4_SetConfig+0x114>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC4_SetConfig+0x74>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a2a      	ldr	r2, [pc, #168]	@ (8006e20 <TIM_OC4_SetConfig+0x118>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d10d      	bne.n	8006d98 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	031b      	lsls	r3, r3, #12
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006e18 <TIM_OC4_SetConfig+0x110>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d013      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xc0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e1c <TIM_OC4_SetConfig+0x114>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00f      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xc0>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a1e      	ldr	r2, [pc, #120]	@ (8006e24 <TIM_OC4_SetConfig+0x11c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d00b      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xc0>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1d      	ldr	r2, [pc, #116]	@ (8006e28 <TIM_OC4_SetConfig+0x120>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d007      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xc0>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a1c      	ldr	r2, [pc, #112]	@ (8006e2c <TIM_OC4_SetConfig+0x124>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d003      	beq.n	8006dc8 <TIM_OC4_SetConfig+0xc0>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a17      	ldr	r2, [pc, #92]	@ (8006e20 <TIM_OC4_SetConfig+0x118>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d113      	bne.n	8006df0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006dce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dd6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	695b      	ldr	r3, [r3, #20]
 8006ddc:	019b      	lsls	r3, r3, #6
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	019b      	lsls	r3, r3, #6
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	40012c00 	.word	0x40012c00
 8006e1c:	40013400 	.word	0x40013400
 8006e20:	40015000 	.word	0x40015000
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800

08006e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e74:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	041b      	lsls	r3, r3, #16
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a19      	ldr	r2, [pc, #100]	@ (8006eec <TIM_OC5_SetConfig+0xbc>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d013      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x82>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a18      	ldr	r2, [pc, #96]	@ (8006ef0 <TIM_OC5_SetConfig+0xc0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00f      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x82>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a17      	ldr	r2, [pc, #92]	@ (8006ef4 <TIM_OC5_SetConfig+0xc4>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00b      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x82>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a16      	ldr	r2, [pc, #88]	@ (8006ef8 <TIM_OC5_SetConfig+0xc8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d007      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x82>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a15      	ldr	r2, [pc, #84]	@ (8006efc <TIM_OC5_SetConfig+0xcc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC5_SetConfig+0x82>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <TIM_OC5_SetConfig+0xd0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d109      	bne.n	8006ec6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	40012c00 	.word	0x40012c00
 8006ef0:	40013400 	.word	0x40013400
 8006ef4:	40014000 	.word	0x40014000
 8006ef8:	40014400 	.word	0x40014400
 8006efc:	40014800 	.word	0x40014800
 8006f00:	40015000 	.word	0x40015000

08006f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	021b      	lsls	r3, r3, #8
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	051b      	lsls	r3, r3, #20
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fc4 <TIM_OC6_SetConfig+0xc0>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <TIM_OC6_SetConfig+0x84>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a19      	ldr	r2, [pc, #100]	@ (8006fc8 <TIM_OC6_SetConfig+0xc4>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00f      	beq.n	8006f88 <TIM_OC6_SetConfig+0x84>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a18      	ldr	r2, [pc, #96]	@ (8006fcc <TIM_OC6_SetConfig+0xc8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00b      	beq.n	8006f88 <TIM_OC6_SetConfig+0x84>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a17      	ldr	r2, [pc, #92]	@ (8006fd0 <TIM_OC6_SetConfig+0xcc>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d007      	beq.n	8006f88 <TIM_OC6_SetConfig+0x84>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a16      	ldr	r2, [pc, #88]	@ (8006fd4 <TIM_OC6_SetConfig+0xd0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_OC6_SetConfig+0x84>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a15      	ldr	r2, [pc, #84]	@ (8006fd8 <TIM_OC6_SetConfig+0xd4>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d109      	bne.n	8006f9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	029b      	lsls	r3, r3, #10
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	697a      	ldr	r2, [r7, #20]
 8006fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40012c00 	.word	0x40012c00
 8006fc8:	40013400 	.word	0x40013400
 8006fcc:	40014000 	.word	0x40014000
 8006fd0:	40014400 	.word	0x40014400
 8006fd4:	40014800 	.word	0x40014800
 8006fd8:	40015000 	.word	0x40015000

08006fdc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1b      	ldr	r3, [r3, #32]
 8006ff4:	f023 0201 	bic.w	r2, r3, #1
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a28      	ldr	r2, [pc, #160]	@ (80070a8 <TIM_TI1_SetConfig+0xcc>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01b      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007010:	d017      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4a25      	ldr	r2, [pc, #148]	@ (80070ac <TIM_TI1_SetConfig+0xd0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4a24      	ldr	r2, [pc, #144]	@ (80070b0 <TIM_TI1_SetConfig+0xd4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00f      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	4a23      	ldr	r2, [pc, #140]	@ (80070b4 <TIM_TI1_SetConfig+0xd8>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d00b      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4a22      	ldr	r2, [pc, #136]	@ (80070b8 <TIM_TI1_SetConfig+0xdc>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d007      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4a21      	ldr	r2, [pc, #132]	@ (80070bc <TIM_TI1_SetConfig+0xe0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d003      	beq.n	8007042 <TIM_TI1_SetConfig+0x66>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a20      	ldr	r2, [pc, #128]	@ (80070c0 <TIM_TI1_SetConfig+0xe4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d101      	bne.n	8007046 <TIM_TI1_SetConfig+0x6a>
 8007042:	2301      	movs	r3, #1
 8007044:	e000      	b.n	8007048 <TIM_TI1_SetConfig+0x6c>
 8007046:	2300      	movs	r3, #0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4313      	orrs	r3, r2
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e003      	b.n	8007066 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f043 0301 	orr.w	r3, r3, #1
 8007064:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800706c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	011b      	lsls	r3, r3, #4
 8007072:	b2db      	uxtb	r3, r3
 8007074:	697a      	ldr	r2, [r7, #20]
 8007076:	4313      	orrs	r3, r2
 8007078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f023 030a 	bic.w	r3, r3, #10
 8007080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	f003 030a 	and.w	r3, r3, #10
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	621a      	str	r2, [r3, #32]
}
 800709a:	bf00      	nop
 800709c:	371c      	adds	r7, #28
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	40013400 	.word	0x40013400
 80070bc:	40014000 	.word	0x40014000
 80070c0:	40015000 	.word	0x40015000

080070c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b087      	sub	sp, #28
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a1b      	ldr	r3, [r3, #32]
 80070d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f023 0201 	bic.w	r2, r3, #1
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	011b      	lsls	r3, r3, #4
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 030a 	bic.w	r3, r3, #10
 8007100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4313      	orrs	r3, r2
 8007108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr

08007122 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007122:	b480      	push	{r7}
 8007124:	b087      	sub	sp, #28
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	60b9      	str	r1, [r7, #8]
 800712c:	607a      	str	r2, [r7, #4]
 800712e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1b      	ldr	r3, [r3, #32]
 8007134:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	f023 0210 	bic.w	r2, r3, #16
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	699b      	ldr	r3, [r3, #24]
 8007146:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800714e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	693a      	ldr	r2, [r7, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007160:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	031b      	lsls	r3, r3, #12
 8007166:	b29b      	uxth	r3, r3
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007174:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	4313      	orrs	r3, r2
 8007182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	621a      	str	r2, [r3, #32]
}
 8007190:	bf00      	nop
 8007192:	371c      	adds	r7, #28
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 0210 	bic.w	r2, r3, #16
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	031b      	lsls	r3, r3, #12
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80071d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	621a      	str	r2, [r3, #32]
}
 80071f0:	bf00      	nop
 80071f2:	371c      	adds	r7, #28
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b087      	sub	sp, #28
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
 8007208:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	69db      	ldr	r3, [r3, #28]
 8007220:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f023 0303 	bic.w	r3, r3, #3
 8007228:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800722a:	693a      	ldr	r2, [r7, #16]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4313      	orrs	r3, r2
 8007230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007238:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	011b      	lsls	r3, r3, #4
 800723e:	b2db      	uxtb	r3, r3
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800724c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	021b      	lsls	r3, r3, #8
 8007252:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007256:	697a      	ldr	r2, [r7, #20]
 8007258:	4313      	orrs	r3, r2
 800725a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	621a      	str	r2, [r3, #32]
}
 8007268:	bf00      	nop
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	69db      	ldr	r3, [r3, #28]
 8007298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	021b      	lsls	r3, r3, #8
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	031b      	lsls	r3, r3, #12
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	693a      	ldr	r2, [r7, #16]
 80072bc:	4313      	orrs	r3, r2
 80072be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80072c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	031b      	lsls	r3, r3, #12
 80072cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	693a      	ldr	r2, [r7, #16]
 80072da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	621a      	str	r2, [r3, #32]
}
 80072e2:	bf00      	nop
 80072e4:	371c      	adds	r7, #28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007308:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4313      	orrs	r3, r2
 8007310:	f043 0307 	orr.w	r3, r3, #7
 8007314:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	609a      	str	r2, [r3, #8]
}
 800731c:	bf00      	nop
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007342:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	021a      	lsls	r2, r3, #8
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	431a      	orrs	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4313      	orrs	r3, r2
 8007350:	697a      	ldr	r2, [r7, #20]
 8007352:	4313      	orrs	r3, r2
 8007354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	609a      	str	r2, [r3, #8]
}
 800735c:	bf00      	nop
 800735e:	371c      	adds	r7, #28
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	f003 031f 	and.w	r3, r3, #31
 800737a:	2201      	movs	r2, #1
 800737c:	fa02 f303 	lsl.w	r3, r2, r3
 8007380:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a1a      	ldr	r2, [r3, #32]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	43db      	mvns	r3, r3
 800738a:	401a      	ands	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6a1a      	ldr	r2, [r3, #32]
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	fa01 f303 	lsl.w	r3, r1, r3
 80073a0:	431a      	orrs	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
}
 80073a6:	bf00      	nop
 80073a8:	371c      	adds	r7, #28
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
	...

080073b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e074      	b.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a34      	ldr	r2, [pc, #208]	@ (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d009      	beq.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a33      	ldr	r2, [pc, #204]	@ (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d004      	beq.n	800740a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a31      	ldr	r2, [pc, #196]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d108      	bne.n	800741c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4313      	orrs	r3, r2
 800741a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a21      	ldr	r2, [pc, #132]	@ (80074c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d022      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800744c:	d01d      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a1f      	ldr	r2, [pc, #124]	@ (80074d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d018      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1d      	ldr	r2, [pc, #116]	@ (80074d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d013      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1c      	ldr	r2, [pc, #112]	@ (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d00e      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a15      	ldr	r2, [pc, #84]	@ (80074c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d009      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a18      	ldr	r2, [pc, #96]	@ (80074dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d004      	beq.n	800748a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a11      	ldr	r2, [pc, #68]	@ (80074cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d10c      	bne.n	80074a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074b4:	2300      	movs	r3, #0
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40013400 	.word	0x40013400
 80074cc:	40015000 	.word	0x40015000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40014000 	.word	0x40014000

080074e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b085      	sub	sp, #20
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e078      	b.n	80075ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	69db      	ldr	r3, [r3, #28]
 8007580:	4313      	orrs	r3, r2
 8007582:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	4a1c      	ldr	r2, [pc, #112]	@ (80075fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d009      	beq.n	80075a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a1b      	ldr	r2, [pc, #108]	@ (8007600 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d004      	beq.n	80075a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a19      	ldr	r2, [pc, #100]	@ (8007604 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d11c      	bne.n	80075dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ac:	051b      	lsls	r3, r3, #20
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	6a1b      	ldr	r3, [r3, #32]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	68fa      	ldr	r2, [r7, #12]
 80075e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3714      	adds	r7, #20
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	40012c00 	.word	0x40012c00
 8007600:	40013400 	.word	0x40013400
 8007604:	40015000 	.word	0x40015000

08007608 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e042      	b.n	800772c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d106      	bne.n	80076be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7fa fd5d 	bl	8002178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2224      	movs	r2, #36	@ 0x24
 80076c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0201 	bic.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d002      	beq.n	80076e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fb24 	bl	8007d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f825 	bl	8007734 <UART_SetConfig>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d101      	bne.n	80076f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e01b      	b.n	800772c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685a      	ldr	r2, [r3, #4]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689a      	ldr	r2, [r3, #8]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0201 	orr.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fba3 	bl	8007e70 <UART_CheckIdleState>
 800772a:	4603      	mov	r3, r0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007738:	b08c      	sub	sp, #48	@ 0x30
 800773a:	af00      	add	r7, sp, #0
 800773c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	431a      	orrs	r2, r3
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	431a      	orrs	r2, r3
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	4313      	orrs	r3, r2
 800775a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4baa      	ldr	r3, [pc, #680]	@ (8007a0c <UART_SetConfig+0x2d8>)
 8007764:	4013      	ands	r3, r2
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800776c:	430b      	orrs	r3, r1
 800776e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a9f      	ldr	r2, [pc, #636]	@ (8007a10 <UART_SetConfig+0x2dc>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800779c:	4313      	orrs	r3, r2
 800779e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80077aa:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	6812      	ldr	r2, [r2, #0]
 80077b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077b4:	430b      	orrs	r3, r1
 80077b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077be:	f023 010f 	bic.w	r1, r3, #15
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a90      	ldr	r2, [pc, #576]	@ (8007a14 <UART_SetConfig+0x2e0>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d125      	bne.n	8007824 <UART_SetConfig+0xf0>
 80077d8:	4b8f      	ldr	r3, [pc, #572]	@ (8007a18 <UART_SetConfig+0x2e4>)
 80077da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077de:	f003 0303 	and.w	r3, r3, #3
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d81a      	bhi.n	800781c <UART_SetConfig+0xe8>
 80077e6:	a201      	add	r2, pc, #4	@ (adr r2, 80077ec <UART_SetConfig+0xb8>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	0800780d 	.word	0x0800780d
 80077f4:	08007805 	.word	0x08007805
 80077f8:	08007815 	.word	0x08007815
 80077fc:	2301      	movs	r3, #1
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007802:	e116      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007804:	2302      	movs	r3, #2
 8007806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800780a:	e112      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800780c:	2304      	movs	r3, #4
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007812:	e10e      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007814:	2308      	movs	r3, #8
 8007816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800781a:	e10a      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800781c:	2310      	movs	r3, #16
 800781e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007822:	e106      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a7c      	ldr	r2, [pc, #496]	@ (8007a1c <UART_SetConfig+0x2e8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d138      	bne.n	80078a0 <UART_SetConfig+0x16c>
 800782e:	4b7a      	ldr	r3, [pc, #488]	@ (8007a18 <UART_SetConfig+0x2e4>)
 8007830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007834:	f003 030c 	and.w	r3, r3, #12
 8007838:	2b0c      	cmp	r3, #12
 800783a:	d82d      	bhi.n	8007898 <UART_SetConfig+0x164>
 800783c:	a201      	add	r2, pc, #4	@ (adr r2, 8007844 <UART_SetConfig+0x110>)
 800783e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007842:	bf00      	nop
 8007844:	08007879 	.word	0x08007879
 8007848:	08007899 	.word	0x08007899
 800784c:	08007899 	.word	0x08007899
 8007850:	08007899 	.word	0x08007899
 8007854:	08007889 	.word	0x08007889
 8007858:	08007899 	.word	0x08007899
 800785c:	08007899 	.word	0x08007899
 8007860:	08007899 	.word	0x08007899
 8007864:	08007881 	.word	0x08007881
 8007868:	08007899 	.word	0x08007899
 800786c:	08007899 	.word	0x08007899
 8007870:	08007899 	.word	0x08007899
 8007874:	08007891 	.word	0x08007891
 8007878:	2300      	movs	r3, #0
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e0d8      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007880:	2302      	movs	r3, #2
 8007882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007886:	e0d4      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007888:	2304      	movs	r3, #4
 800788a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800788e:	e0d0      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007890:	2308      	movs	r3, #8
 8007892:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007896:	e0cc      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007898:	2310      	movs	r3, #16
 800789a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800789e:	e0c8      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a5e      	ldr	r2, [pc, #376]	@ (8007a20 <UART_SetConfig+0x2ec>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d125      	bne.n	80078f6 <UART_SetConfig+0x1c2>
 80078aa:	4b5b      	ldr	r3, [pc, #364]	@ (8007a18 <UART_SetConfig+0x2e4>)
 80078ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80078b4:	2b30      	cmp	r3, #48	@ 0x30
 80078b6:	d016      	beq.n	80078e6 <UART_SetConfig+0x1b2>
 80078b8:	2b30      	cmp	r3, #48	@ 0x30
 80078ba:	d818      	bhi.n	80078ee <UART_SetConfig+0x1ba>
 80078bc:	2b20      	cmp	r3, #32
 80078be:	d00a      	beq.n	80078d6 <UART_SetConfig+0x1a2>
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d814      	bhi.n	80078ee <UART_SetConfig+0x1ba>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <UART_SetConfig+0x19a>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d008      	beq.n	80078de <UART_SetConfig+0x1aa>
 80078cc:	e00f      	b.n	80078ee <UART_SetConfig+0x1ba>
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d4:	e0ad      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078d6:	2302      	movs	r3, #2
 80078d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078dc:	e0a9      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078de:	2304      	movs	r3, #4
 80078e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078e4:	e0a5      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078e6:	2308      	movs	r3, #8
 80078e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078ec:	e0a1      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078ee:	2310      	movs	r3, #16
 80078f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078f4:	e09d      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a4a      	ldr	r2, [pc, #296]	@ (8007a24 <UART_SetConfig+0x2f0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d125      	bne.n	800794c <UART_SetConfig+0x218>
 8007900:	4b45      	ldr	r3, [pc, #276]	@ (8007a18 <UART_SetConfig+0x2e4>)
 8007902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007906:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800790a:	2bc0      	cmp	r3, #192	@ 0xc0
 800790c:	d016      	beq.n	800793c <UART_SetConfig+0x208>
 800790e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007910:	d818      	bhi.n	8007944 <UART_SetConfig+0x210>
 8007912:	2b80      	cmp	r3, #128	@ 0x80
 8007914:	d00a      	beq.n	800792c <UART_SetConfig+0x1f8>
 8007916:	2b80      	cmp	r3, #128	@ 0x80
 8007918:	d814      	bhi.n	8007944 <UART_SetConfig+0x210>
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <UART_SetConfig+0x1f0>
 800791e:	2b40      	cmp	r3, #64	@ 0x40
 8007920:	d008      	beq.n	8007934 <UART_SetConfig+0x200>
 8007922:	e00f      	b.n	8007944 <UART_SetConfig+0x210>
 8007924:	2300      	movs	r3, #0
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792a:	e082      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800792c:	2302      	movs	r3, #2
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007932:	e07e      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007934:	2304      	movs	r3, #4
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800793a:	e07a      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800793c:	2308      	movs	r3, #8
 800793e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007942:	e076      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007944:	2310      	movs	r3, #16
 8007946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800794a:	e072      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a35      	ldr	r2, [pc, #212]	@ (8007a28 <UART_SetConfig+0x2f4>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d12a      	bne.n	80079ac <UART_SetConfig+0x278>
 8007956:	4b30      	ldr	r3, [pc, #192]	@ (8007a18 <UART_SetConfig+0x2e4>)
 8007958:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800795c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007960:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007964:	d01a      	beq.n	800799c <UART_SetConfig+0x268>
 8007966:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800796a:	d81b      	bhi.n	80079a4 <UART_SetConfig+0x270>
 800796c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007970:	d00c      	beq.n	800798c <UART_SetConfig+0x258>
 8007972:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007976:	d815      	bhi.n	80079a4 <UART_SetConfig+0x270>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d003      	beq.n	8007984 <UART_SetConfig+0x250>
 800797c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007980:	d008      	beq.n	8007994 <UART_SetConfig+0x260>
 8007982:	e00f      	b.n	80079a4 <UART_SetConfig+0x270>
 8007984:	2300      	movs	r3, #0
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798a:	e052      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800798c:	2302      	movs	r3, #2
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007992:	e04e      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007994:	2304      	movs	r3, #4
 8007996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800799a:	e04a      	b.n	8007a32 <UART_SetConfig+0x2fe>
 800799c:	2308      	movs	r3, #8
 800799e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079a2:	e046      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80079a4:	2310      	movs	r3, #16
 80079a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079aa:	e042      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a17      	ldr	r2, [pc, #92]	@ (8007a10 <UART_SetConfig+0x2dc>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d13a      	bne.n	8007a2c <UART_SetConfig+0x2f8>
 80079b6:	4b18      	ldr	r3, [pc, #96]	@ (8007a18 <UART_SetConfig+0x2e4>)
 80079b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80079c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079c4:	d01a      	beq.n	80079fc <UART_SetConfig+0x2c8>
 80079c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80079ca:	d81b      	bhi.n	8007a04 <UART_SetConfig+0x2d0>
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d0:	d00c      	beq.n	80079ec <UART_SetConfig+0x2b8>
 80079d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079d6:	d815      	bhi.n	8007a04 <UART_SetConfig+0x2d0>
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <UART_SetConfig+0x2b0>
 80079dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079e0:	d008      	beq.n	80079f4 <UART_SetConfig+0x2c0>
 80079e2:	e00f      	b.n	8007a04 <UART_SetConfig+0x2d0>
 80079e4:	2300      	movs	r3, #0
 80079e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079ea:	e022      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80079ec:	2302      	movs	r3, #2
 80079ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079f2:	e01e      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80079f4:	2304      	movs	r3, #4
 80079f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80079fa:	e01a      	b.n	8007a32 <UART_SetConfig+0x2fe>
 80079fc:	2308      	movs	r3, #8
 80079fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a02:	e016      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007a04:	2310      	movs	r3, #16
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007a0a:	e012      	b.n	8007a32 <UART_SetConfig+0x2fe>
 8007a0c:	cfff69f3 	.word	0xcfff69f3
 8007a10:	40008000 	.word	0x40008000
 8007a14:	40013800 	.word	0x40013800
 8007a18:	40021000 	.word	0x40021000
 8007a1c:	40004400 	.word	0x40004400
 8007a20:	40004800 	.word	0x40004800
 8007a24:	40004c00 	.word	0x40004c00
 8007a28:	40005000 	.word	0x40005000
 8007a2c:	2310      	movs	r3, #16
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4aae      	ldr	r2, [pc, #696]	@ (8007cf0 <UART_SetConfig+0x5bc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	f040 8097 	bne.w	8007b6c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d823      	bhi.n	8007a8e <UART_SetConfig+0x35a>
 8007a46:	a201      	add	r2, pc, #4	@ (adr r2, 8007a4c <UART_SetConfig+0x318>)
 8007a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4c:	08007a71 	.word	0x08007a71
 8007a50:	08007a8f 	.word	0x08007a8f
 8007a54:	08007a79 	.word	0x08007a79
 8007a58:	08007a8f 	.word	0x08007a8f
 8007a5c:	08007a7f 	.word	0x08007a7f
 8007a60:	08007a8f 	.word	0x08007a8f
 8007a64:	08007a8f 	.word	0x08007a8f
 8007a68:	08007a8f 	.word	0x08007a8f
 8007a6c:	08007a87 	.word	0x08007a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a70:	f7fd fc5c 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8007a74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a76:	e010      	b.n	8007a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a78:	4b9e      	ldr	r3, [pc, #632]	@ (8007cf4 <UART_SetConfig+0x5c0>)
 8007a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a7c:	e00d      	b.n	8007a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a7e:	f7fd fbe7 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8007a82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007a84:	e009      	b.n	8007a9a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007a8c:	e005      	b.n	8007a9a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 8130 	beq.w	8007d02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	4a94      	ldr	r2, [pc, #592]	@ (8007cf8 <UART_SetConfig+0x5c4>)
 8007aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	685a      	ldr	r2, [r3, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d305      	bcc.n	8007ad2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d903      	bls.n	8007ada <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007ad8:	e113      	b.n	8007d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	2200      	movs	r2, #0
 8007ade:	60bb      	str	r3, [r7, #8]
 8007ae0:	60fa      	str	r2, [r7, #12]
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae6:	4a84      	ldr	r2, [pc, #528]	@ (8007cf8 <UART_SetConfig+0x5c4>)
 8007ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2200      	movs	r2, #0
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007afc:	f7f8 fb8c 	bl	8000218 <__aeabi_uldivmod>
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4610      	mov	r0, r2
 8007b06:	4619      	mov	r1, r3
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	020b      	lsls	r3, r1, #8
 8007b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b16:	0202      	lsls	r2, r0, #8
 8007b18:	6979      	ldr	r1, [r7, #20]
 8007b1a:	6849      	ldr	r1, [r1, #4]
 8007b1c:	0849      	lsrs	r1, r1, #1
 8007b1e:	2000      	movs	r0, #0
 8007b20:	460c      	mov	r4, r1
 8007b22:	4605      	mov	r5, r0
 8007b24:	eb12 0804 	adds.w	r8, r2, r4
 8007b28:	eb43 0905 	adc.w	r9, r3, r5
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	469a      	mov	sl, r3
 8007b34:	4693      	mov	fp, r2
 8007b36:	4652      	mov	r2, sl
 8007b38:	465b      	mov	r3, fp
 8007b3a:	4640      	mov	r0, r8
 8007b3c:	4649      	mov	r1, r9
 8007b3e:	f7f8 fb6b 	bl	8000218 <__aeabi_uldivmod>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4613      	mov	r3, r2
 8007b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b50:	d308      	bcc.n	8007b64 <UART_SetConfig+0x430>
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b58:	d204      	bcs.n	8007b64 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6a3a      	ldr	r2, [r7, #32]
 8007b60:	60da      	str	r2, [r3, #12]
 8007b62:	e0ce      	b.n	8007d02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007b6a:	e0ca      	b.n	8007d02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b74:	d166      	bne.n	8007c44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007b76:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d827      	bhi.n	8007bce <UART_SetConfig+0x49a>
 8007b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b84 <UART_SetConfig+0x450>)
 8007b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b84:	08007ba9 	.word	0x08007ba9
 8007b88:	08007bb1 	.word	0x08007bb1
 8007b8c:	08007bb9 	.word	0x08007bb9
 8007b90:	08007bcf 	.word	0x08007bcf
 8007b94:	08007bbf 	.word	0x08007bbf
 8007b98:	08007bcf 	.word	0x08007bcf
 8007b9c:	08007bcf 	.word	0x08007bcf
 8007ba0:	08007bcf 	.word	0x08007bcf
 8007ba4:	08007bc7 	.word	0x08007bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ba8:	f7fd fbc0 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8007bac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bae:	e014      	b.n	8007bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bb0:	f7fd fbd2 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 8007bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bb6:	e010      	b.n	8007bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8007cf4 <UART_SetConfig+0x5c0>)
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bbc:	e00d      	b.n	8007bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bbe:	f7fd fb47 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8007bc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007bc4:	e009      	b.n	8007bda <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007bcc:	e005      	b.n	8007bda <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 8090 	beq.w	8007d02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007be6:	4a44      	ldr	r2, [pc, #272]	@ (8007cf8 <UART_SetConfig+0x5c4>)
 8007be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bec:	461a      	mov	r2, r3
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007bf4:	005a      	lsls	r2, r3, #1
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	085b      	lsrs	r3, r3, #1
 8007bfc:	441a      	add	r2, r3
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c08:	6a3b      	ldr	r3, [r7, #32]
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d916      	bls.n	8007c3c <UART_SetConfig+0x508>
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c14:	d212      	bcs.n	8007c3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f023 030f 	bic.w	r3, r3, #15
 8007c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	085b      	lsrs	r3, r3, #1
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	8bfb      	ldrh	r3, [r7, #30]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	8bfa      	ldrh	r2, [r7, #30]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e062      	b.n	8007d02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007c42:	e05e      	b.n	8007d02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c44:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d828      	bhi.n	8007c9e <UART_SetConfig+0x56a>
 8007c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c54 <UART_SetConfig+0x520>)
 8007c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c52:	bf00      	nop
 8007c54:	08007c79 	.word	0x08007c79
 8007c58:	08007c81 	.word	0x08007c81
 8007c5c:	08007c89 	.word	0x08007c89
 8007c60:	08007c9f 	.word	0x08007c9f
 8007c64:	08007c8f 	.word	0x08007c8f
 8007c68:	08007c9f 	.word	0x08007c9f
 8007c6c:	08007c9f 	.word	0x08007c9f
 8007c70:	08007c9f 	.word	0x08007c9f
 8007c74:	08007c97 	.word	0x08007c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c78:	f7fd fb58 	bl	800532c <HAL_RCC_GetPCLK1Freq>
 8007c7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c7e:	e014      	b.n	8007caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c80:	f7fd fb6a 	bl	8005358 <HAL_RCC_GetPCLK2Freq>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c86:	e010      	b.n	8007caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c88:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf4 <UART_SetConfig+0x5c0>)
 8007c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c8c:	e00d      	b.n	8007caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c8e:	f7fd fadf 	bl	8005250 <HAL_RCC_GetSysClockFreq>
 8007c92:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c94:	e009      	b.n	8007caa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c9a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c9c:	e005      	b.n	8007caa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007ca8:	bf00      	nop
    }

    if (pclk != 0U)
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d028      	beq.n	8007d02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	4a10      	ldr	r2, [pc, #64]	@ (8007cf8 <UART_SetConfig+0x5c4>)
 8007cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	085b      	lsrs	r3, r3, #1
 8007cc8:	441a      	add	r2, r3
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cd4:	6a3b      	ldr	r3, [r7, #32]
 8007cd6:	2b0f      	cmp	r3, #15
 8007cd8:	d910      	bls.n	8007cfc <UART_SetConfig+0x5c8>
 8007cda:	6a3b      	ldr	r3, [r7, #32]
 8007cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ce0:	d20c      	bcs.n	8007cfc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60da      	str	r2, [r3, #12]
 8007cec:	e009      	b.n	8007d02 <UART_SetConfig+0x5ce>
 8007cee:	bf00      	nop
 8007cf0:	40008000 	.word	0x40008000
 8007cf4:	00f42400 	.word	0x00f42400
 8007cf8:	0800840c 	.word	0x0800840c
      }
      else
      {
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2200      	movs	r2, #0
 8007d16:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3730      	adds	r7, #48	@ 0x30
 8007d26:	46bd      	mov	sp, r7
 8007d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00a      	beq.n	8007d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00a      	beq.n	8007d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	430a      	orrs	r2, r1
 8007d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	f003 0304 	and.w	r3, r3, #4
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d00a      	beq.n	8007dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de2:	f003 0320 	and.w	r3, r3, #32
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00a      	beq.n	8007e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2a:	d10a      	bne.n	8007e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b098      	sub	sp, #96	@ 0x60
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e80:	f7fa fa60 	bl	8002344 <HAL_GetTick>
 8007e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f003 0308 	and.w	r3, r3, #8
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d12f      	bne.n	8007ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f88e 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d022      	beq.n	8007ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eb6:	e853 3f00 	ldrex	r3, [r3]
 8007eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ece:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed4:	e841 2300 	strex	r3, r2, [r1]
 8007ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d1e6      	bne.n	8007eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2220      	movs	r2, #32
 8007ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e063      	b.n	8007fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d149      	bne.n	8007f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f06:	9300      	str	r3, [sp, #0]
 8007f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f857 	bl	8007fc4 <UART_WaitOnFlagUntilTimeout>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d03c      	beq.n	8007f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f24:	e853 3f00 	ldrex	r3, [r3]
 8007f28:	623b      	str	r3, [r7, #32]
   return(result);
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	461a      	mov	r2, r3
 8007f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f3c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e6      	bne.n	8007f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3308      	adds	r3, #8
 8007f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f6e:	61fa      	str	r2, [r7, #28]
 8007f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f72:	69b9      	ldr	r1, [r7, #24]
 8007f74:	69fa      	ldr	r2, [r7, #28]
 8007f76:	e841 2300 	strex	r3, r2, [r1]
 8007f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1e5      	bne.n	8007f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2220      	movs	r2, #32
 8007f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e012      	b.n	8007fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2220      	movs	r2, #32
 8007fa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3758      	adds	r7, #88	@ 0x58
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	603b      	str	r3, [r7, #0]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fd4:	e04f      	b.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fdc:	d04b      	beq.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fde:	f7fa f9b1 	bl	8002344 <HAL_GetTick>
 8007fe2:	4602      	mov	r2, r0
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	1ad3      	subs	r3, r2, r3
 8007fe8:	69ba      	ldr	r2, [r7, #24]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d302      	bcc.n	8007ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e04e      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0304 	and.w	r3, r3, #4
 8008002:	2b00      	cmp	r3, #0
 8008004:	d037      	beq.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	2b80      	cmp	r3, #128	@ 0x80
 800800a:	d034      	beq.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	d031      	beq.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f003 0308 	and.w	r3, r3, #8
 800801c:	2b08      	cmp	r3, #8
 800801e:	d110      	bne.n	8008042 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	2208      	movs	r2, #8
 8008026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f000 f838 	bl	800809e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2208      	movs	r2, #8
 8008032:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	e029      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69db      	ldr	r3, [r3, #28]
 8008048:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800804c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008050:	d111      	bne.n	8008076 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800805a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 f81e 	bl	800809e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	2220      	movs	r2, #32
 8008066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e00f      	b.n	8008096 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69da      	ldr	r2, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	4013      	ands	r3, r2
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	429a      	cmp	r2, r3
 8008084:	bf0c      	ite	eq
 8008086:	2301      	moveq	r3, #1
 8008088:	2300      	movne	r3, #0
 800808a:	b2db      	uxtb	r3, r3
 800808c:	461a      	mov	r2, r3
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	429a      	cmp	r2, r3
 8008092:	d0a0      	beq.n	8007fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	4618      	mov	r0, r3
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}

0800809e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800809e:	b480      	push	{r7}
 80080a0:	b095      	sub	sp, #84	@ 0x54
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080ae:	e853 3f00 	ldrex	r3, [r3]
 80080b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	461a      	mov	r2, r3
 80080c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80080c6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080cc:	e841 2300 	strex	r3, r2, [r1]
 80080d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1e6      	bne.n	80080a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	3308      	adds	r3, #8
 80080de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080ee:	f023 0301 	bic.w	r3, r3, #1
 80080f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3308      	adds	r3, #8
 80080fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008104:	e841 2300 	strex	r3, r2, [r1]
 8008108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800810a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1e3      	bne.n	80080d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008114:	2b01      	cmp	r3, #1
 8008116:	d118      	bne.n	800814a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	e853 3f00 	ldrex	r3, [r3]
 8008124:	60bb      	str	r3, [r7, #8]
   return(result);
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f023 0310 	bic.w	r3, r3, #16
 800812c:	647b      	str	r3, [r7, #68]	@ 0x44
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	461a      	mov	r2, r3
 8008134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008136:	61bb      	str	r3, [r7, #24]
 8008138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813a:	6979      	ldr	r1, [r7, #20]
 800813c:	69ba      	ldr	r2, [r7, #24]
 800813e:	e841 2300 	strex	r3, r2, [r1]
 8008142:	613b      	str	r3, [r7, #16]
   return(result);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d1e6      	bne.n	8008118 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2220      	movs	r2, #32
 800814e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800815e:	bf00      	nop
 8008160:	3754      	adds	r7, #84	@ 0x54
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800816a:	b480      	push	{r7}
 800816c:	b085      	sub	sp, #20
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_UARTEx_DisableFifoMode+0x16>
 800817c:	2302      	movs	r3, #2
 800817e:	e027      	b.n	80081d0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2224      	movs	r2, #36	@ 0x24
 800818c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f022 0201 	bic.w	r2, r2, #1
 80081a6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081ae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d101      	bne.n	80081f4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80081f0:	2302      	movs	r3, #2
 80081f2:	e02d      	b.n	8008250 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2224      	movs	r2, #36	@ 0x24
 8008200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0201 	bic.w	r2, r2, #1
 800821a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 f84f 	bl	80082d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800826c:	2302      	movs	r3, #2
 800826e:	e02d      	b.n	80082cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	@ 0x24
 800827c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f022 0201 	bic.w	r2, r2, #1
 8008296:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	430a      	orrs	r2, r1
 80082aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f811 	bl	80082d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3710      	adds	r7, #16
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d108      	bne.n	80082f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80082f4:	e031      	b.n	800835a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80082f6:	2308      	movs	r3, #8
 80082f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80082fa:	2308      	movs	r3, #8
 80082fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	0e5b      	lsrs	r3, r3, #25
 8008306:	b2db      	uxtb	r3, r3
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	0f5b      	lsrs	r3, r3, #29
 8008316:	b2db      	uxtb	r3, r3
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	7b3a      	ldrb	r2, [r7, #12]
 8008322:	4911      	ldr	r1, [pc, #68]	@ (8008368 <UARTEx_SetNbDataToProcess+0x94>)
 8008324:	5c8a      	ldrb	r2, [r1, r2]
 8008326:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800832a:	7b3a      	ldrb	r2, [r7, #12]
 800832c:	490f      	ldr	r1, [pc, #60]	@ (800836c <UARTEx_SetNbDataToProcess+0x98>)
 800832e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008330:	fb93 f3f2 	sdiv	r3, r3, r2
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800833c:	7bfb      	ldrb	r3, [r7, #15]
 800833e:	7b7a      	ldrb	r2, [r7, #13]
 8008340:	4909      	ldr	r1, [pc, #36]	@ (8008368 <UARTEx_SetNbDataToProcess+0x94>)
 8008342:	5c8a      	ldrb	r2, [r1, r2]
 8008344:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008348:	7b7a      	ldrb	r2, [r7, #13]
 800834a:	4908      	ldr	r1, [pc, #32]	@ (800836c <UARTEx_SetNbDataToProcess+0x98>)
 800834c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800834e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008352:	b29a      	uxth	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800835a:	bf00      	nop
 800835c:	3714      	adds	r7, #20
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	08008424 	.word	0x08008424
 800836c:	0800842c 	.word	0x0800842c

08008370 <memset>:
 8008370:	4402      	add	r2, r0
 8008372:	4603      	mov	r3, r0
 8008374:	4293      	cmp	r3, r2
 8008376:	d100      	bne.n	800837a <memset+0xa>
 8008378:	4770      	bx	lr
 800837a:	f803 1b01 	strb.w	r1, [r3], #1
 800837e:	e7f9      	b.n	8008374 <memset+0x4>

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	@ (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	@ (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	@ (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	@ (80083c4 <__libc_init_array+0x44>)
 8008394:	f000 f818 	bl	80083c8 <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800843c 	.word	0x0800843c
 80083bc:	0800843c 	.word	0x0800843c
 80083c0:	0800843c 	.word	0x0800843c
 80083c4:	08008440 	.word	0x08008440

080083c8 <_init>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	bf00      	nop
 80083cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ce:	bc08      	pop	{r3}
 80083d0:	469e      	mov	lr, r3
 80083d2:	4770      	bx	lr

080083d4 <_fini>:
 80083d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d6:	bf00      	nop
 80083d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083da:	bc08      	pop	{r3}
 80083dc:	469e      	mov	lr, r3
 80083de:	4770      	bx	lr
